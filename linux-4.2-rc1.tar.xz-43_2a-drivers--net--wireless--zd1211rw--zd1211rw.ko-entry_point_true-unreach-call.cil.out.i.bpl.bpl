var $M.0: [ref]i8;

var $M.1: ref;

var $M.2: [ref]i32;

var $M.3: [ref]i32;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]i24;

var $M.9: [ref]i8;

var $M.10: [ref]i8;

var $M.11: [ref]i32;

var $M.12: [ref]i8;

var $M.13: i32;

var $M.14: [ref]i8;

var $M.15: [ref]i8;

var $M.16: i32;

var $M.17: ref;

var $M.18: i32;

var $M.19: ref;

var $M.20: i32;

var $M.21: ref;

var $M.22: i32;

var $M.23: ref;

var $M.24: [ref]i8;

var $M.26: [ref]i32;

var $M.27: [ref]i8;

var $M.28: [ref]ref;

var $M.29: [ref]i8;

var $M.30: [ref]ref;

var $M.31: [ref]i64;

var $M.32: [ref]i8;

var $M.33: [ref]i8;

var $M.34: [ref]i8;

var $M.35: [ref]i8;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.39: [ref]i16;

var $M.40: [ref]i8;

var $M.41: [ref]i16;

var $M.42: [ref]i16;

var $M.43: [ref]i8;

var $M.44: [ref]i16;

var $M.45: [ref]i32;

var $M.46: [ref]i32;

var $M.47: [ref]i8;

var $M.48: [ref]ref;

var $M.49: [ref]ref;

var $M.50: [ref]ref;

var $M.51: [ref]ref;

var $M.52: [ref]i24;

var $M.53: [ref]i8;

var $M.55: ref;

var $M.56: i32;

var $M.57: [ref]i8;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: ref;

var $M.73: ref;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: ref;

var $M.79: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: [ref]i8;

var $M.105: [ref]i16;

var $M.106: [ref]i16;

var $M.107: [ref]i16;

var $M.108: [ref]i16;

var $M.109: [ref]i16;

var $M.110: [ref]i8;

var $M.111: [ref]i8;

var $M.112: [ref]i8;

var $M.113: [ref]i8;

var $M.114: [ref]i8;

var $M.115: [ref]i8;

var $M.116: [ref]i8;

var $M.117: [ref]i64;

var $M.206: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 961549);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const zd_workqueue: ref;

axiom zd_workqueue == $sub.ref(0, 2060);

const ldv_work_3_0: ref;

axiom ldv_work_3_0 == $sub.ref(0, 3088);

const ldv_work_3_1: ref;

axiom ldv_work_3_1 == $sub.ref(0, 4116);

const ldv_work_3_2: ref;

axiom ldv_work_3_2 == $sub.ref(0, 5144);

const ldv_work_3_3: ref;

axiom ldv_work_3_3 == $sub.ref(0, 6172);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 7200);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 8232);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 9260);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 10292);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 11320);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 12352);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 13380);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 14412);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 15440);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 16468);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 17496);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 18524);

const zd_ops_group0: ref;

axiom zd_ops_group0 == $sub.ref(0, 19556);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 20588);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 21620);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 22652);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 23684);

const ldv_work_struct_3_0: ref;

axiom ldv_work_struct_3_0 == $sub.ref(0, 24716);

const ldv_work_struct_3_1: ref;

axiom ldv_work_struct_3_1 == $sub.ref(0, 25748);

const ldv_work_struct_3_2: ref;

axiom ldv_work_struct_3_2 == $sub.ref(0, 26780);

const ldv_work_struct_3_3: ref;

axiom ldv_work_struct_3_3 == $sub.ref(0, 27812);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 28840);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 29868);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 30896);

const ldv_work_5_0: ref;

axiom ldv_work_5_0 == $sub.ref(0, 31924);

const ldv_work_struct_5_0: ref;

axiom ldv_work_struct_5_0 == $sub.ref(0, 32956);

const ldv_work_5_1: ref;

axiom ldv_work_5_1 == $sub.ref(0, 33984);

const ldv_work_struct_5_1: ref;

axiom ldv_work_struct_5_1 == $sub.ref(0, 35016);

const ldv_work_5_2: ref;

axiom ldv_work_5_2 == $sub.ref(0, 36044);

const ldv_work_struct_5_2: ref;

axiom ldv_work_struct_5_2 == $sub.ref(0, 37076);

const ldv_work_5_3: ref;

axiom ldv_work_5_3 == $sub.ref(0, 38104);

const ldv_work_struct_5_3: ref;

axiom ldv_work_struct_5_3 == $sub.ref(0, 39136);

const ldv_work_4_0: ref;

axiom ldv_work_4_0 == $sub.ref(0, 40164);

const ldv_work_struct_4_0: ref;

axiom ldv_work_struct_4_0 == $sub.ref(0, 41196);

const ldv_work_4_1: ref;

axiom ldv_work_4_1 == $sub.ref(0, 42224);

const ldv_work_struct_4_1: ref;

axiom ldv_work_struct_4_1 == $sub.ref(0, 43256);

const ldv_work_4_2: ref;

axiom ldv_work_4_2 == $sub.ref(0, 44284);

const ldv_work_struct_4_2: ref;

axiom ldv_work_struct_4_2 == $sub.ref(0, 45316);

const ldv_work_4_3: ref;

axiom ldv_work_4_3 == $sub.ref(0, 46344);

const ldv_work_struct_4_3: ref;

axiom ldv_work_struct_4_3 == $sub.ref(0, 47376);

const driver_group1: ref;

axiom driver_group1 == $sub.ref(0, 48408);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 49436);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 50464);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 51492);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 52520);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 53548);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 54576);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 55604);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 56632);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 57660);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 58688);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 59716);

const {:count 60} __mod_usb__usb_ids_device_table: ref;

axiom __mod_usb__usb_ids_device_table == $sub.ref(0, 62660);

const {:count 60} usb_ids: ref;

axiom usb_ids == $sub.ref(0, 65604);

const driver: ref;

axiom driver == $sub.ref(0, 66932);

const {:count 16} rfs: ref;

axiom rfs == $sub.ref(0, 68084);

const {:count 19} uw2453_txgain: ref;

axiom uw2453_txgain == $sub.ref(0, 69184);

const {:count 11} uw2453_std_vco_cfg: ref;

axiom uw2453_std_vco_cfg == $sub.ref(0, 70362);

const {:count 14} uw2453_synth_divide: ref;

axiom uw2453_synth_divide == $sub.ref(0, 71414);

const {:count 14} uw2453_std_synth: ref;

axiom uw2453_std_synth == $sub.ref(0, 72452);

const {:count 14} uw2453_autocal_synth: ref;

axiom uw2453_autocal_synth == $sub.ref(0, 73504);

const {:count 5} ioreqs_sw: ref;

axiom ioreqs_sw == $sub.ref(0, 74548);

const {:count 3} rv_init2: ref;

axiom rv_init2 == $sub.ref(0, 75584);

const {:count 4} rv_init1: ref;

axiom rv_init1 == $sub.ref(0, 76624);

const {:count 10} std_rv: ref;

axiom std_rv == $sub.ref(0, 77688);

const {:count 14} chan_rv: ref;

axiom chan_rv == $sub.ref(0, 78824);

const {:count 14} rf2959_table: ref;

axiom rf2959_table == $sub.ref(0, 79960);

const {:count 14} zd1211_al2230_table: ref;

axiom zd1211_al2230_table == $sub.ref(0, 81152);

const {:count 14} zd1211b_al2230_table: ref;

axiom zd1211b_al2230_table == $sub.ref(0, 82344);

const {:count 10} ioreqs_init_al2230s: ref;

axiom ioreqs_init_al2230s == $sub.ref(0, 83408);

const {:count 2} zd1211b_ioreqs_shared_1: ref;

axiom zd1211b_ioreqs_shared_1 == $sub.ref(0, 84440);

const zd_ops: ref;

axiom zd_ops == $sub.ref(0, 86168);

const {:count 14} zd_channels: ref;

axiom zd_channels == $sub.ref(0, 88088);

const {:count 12} zd_rates: ref;

axiom zd_rates == $sub.ref(0, 89256);

const {:count 12} zd_retry_rates: ref;

axiom zd_retry_rates == $sub.ref(0, 90808);

const {:count 8} reg_alpha2_map: ref;

axiom reg_alpha2_map == $sub.ref(0, 91896);

const {:count 219} .str.3: ref;

axiom .str.3 == $sub.ref(0, 93139);

const {:count 2} .str.6: ref;

axiom .str.6 == $sub.ref(0, 94165);

const {:count 33} .str.7: ref;

axiom .str.7 == $sub.ref(0, 95222);

const {:count 20} .str.8: ref;

axiom .str.8 == $sub.ref(0, 96266);

const {:count 9} .str.1: ref;

axiom .str.1 == $sub.ref(0, 97299);

const {:count 20} .str.100: ref;

axiom .str.100 == $sub.ref(0, 98343);

const {:count 122} .str.101: ref;

axiom .str.101 == $sub.ref(0, 99489);

const {:count 27} .str.4: ref;

axiom .str.4 == $sub.ref(0, 100540);

const {:count 30} .str.10: ref;

axiom .str.10 == $sub.ref(0, 101594);

const {:count 27} .str.74: ref;

axiom .str.74 == $sub.ref(0, 102645);

const {:count 17} .str.75: ref;

axiom .str.75 == $sub.ref(0, 103686);

const {:count 46} .str.76: ref;

axiom .str.76 == $sub.ref(0, 104756);

const {:count 48} .str.77: ref;

axiom .str.77 == $sub.ref(0, 105828);

const {:count 39} .str.78: ref;

axiom .str.78 == $sub.ref(0, 106891);

const {:count 218} .str.60: ref;

axiom .str.60 == $sub.ref(0, 108133);

const {:count 45} .str.79: ref;

axiom .str.79 == $sub.ref(0, 109202);

const {:count 53} .str.80: ref;

axiom .str.80 == $sub.ref(0, 110279);

const {:count 69} .str.81: ref;

axiom .str.81 == $sub.ref(0, 111372);

const {:count 21} .str.82: ref;

axiom .str.82 == $sub.ref(0, 112417);

const {:count 35} .str.83: ref;

axiom .str.83 == $sub.ref(0, 113476);

const {:count 31} .str.267: ref;

axiom .str.267 == $sub.ref(0, 114531);

const {:count 12} .str.268: ref;

axiom .str.268 == $sub.ref(0, 115567);

const {:count 52} .str.214: ref;

axiom .str.214 == $sub.ref(0, 116643);

const {:count 16} .str.215: ref;

axiom .str.215 == $sub.ref(0, 117683);

const {:count 54} .str.216: ref;

axiom .str.216 == $sub.ref(0, 118761);

const {:count 41} .str.217: ref;

axiom .str.217 == $sub.ref(0, 119826);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 24} .str.177: ref;

axiom .str.177 == $sub.ref(0, 120874);

const {:count 28} .str.88: ref;

axiom .str.88 == $sub.ref(0, 121926);

const {:count 14} .str.89: ref;

axiom .str.89 == $sub.ref(0, 122964);

const {:count 56} .str.90: ref;

axiom .str.90 == $sub.ref(0, 124044);

const {:count 15} .str.91: ref;

axiom .str.91 == $sub.ref(0, 125083);

const {:count 49} .str.269: ref;

axiom .str.269 == $sub.ref(0, 126156);

const {:count 22} .str.270: ref;

axiom .str.270 == $sub.ref(0, 127202);

const {:count 28} .str.102: ref;

axiom .str.102 == $sub.ref(0, 128254);

const {:count 34} .str.103: ref;

axiom .str.103 == $sub.ref(0, 129312);

const {:count 24} .str.92: ref;

axiom .str.92 == $sub.ref(0, 130360);

const {:count 30} .str.84: ref;

axiom .str.84 == $sub.ref(0, 131414);

const {:count 39} .str.85: ref;

axiom .str.85 == $sub.ref(0, 132477);

const {:count 38} .str.86: ref;

axiom .str.86 == $sub.ref(0, 133539);

const {:count 15} .str.87: ref;

axiom .str.87 == $sub.ref(0, 134578);

const {:count 33} .str.12: ref;

axiom .str.12 == $sub.ref(0, 135635);

const {:count 21} .str.13: ref;

axiom .str.13 == $sub.ref(0, 136680);

const {:count 18} .str.175: ref;

axiom .str.175 == $sub.ref(0, 137722);

const {:count 24} .str.176: ref;

axiom .str.176 == $sub.ref(0, 138770);

const {:count 18} .str.178: ref;

axiom .str.178 == $sub.ref(0, 139812);

const {:count 23} .str.179: ref;

axiom .str.179 == $sub.ref(0, 140859);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 18} .str.24: ref;

axiom .str.24 == $sub.ref(0, 141901);

const {:count 32} .str.25: ref;

axiom .str.25 == $sub.ref(0, 142957);

const {:count 20} .str.109: ref;

axiom .str.109 == $sub.ref(0, 144001);

const {:count 33} .str.152: ref;

axiom .str.152 == $sub.ref(0, 145058);

const {:count 26} .str.153: ref;

axiom .str.153 == $sub.ref(0, 146108);

const {:count 218} .str.31: ref;

axiom .str.31 == $sub.ref(0, 147350);

const {:count 42} .str.154: ref;

axiom .str.154 == $sub.ref(0, 148416);

const {:count 49} .str.155: ref;

axiom .str.155 == $sub.ref(0, 149489);

const {:count 30} .str.156: ref;

axiom .str.156 == $sub.ref(0, 150543);

const {:count 34} .str.157: ref;

axiom .str.157 == $sub.ref(0, 151601);

const {:count 24} .str.21: ref;

axiom .str.21 == $sub.ref(0, 152649);

const {:count 29} .str.19: ref;

axiom .str.19 == $sub.ref(0, 153702);

const {:count 30} .str.20: ref;

axiom .str.20 == $sub.ref(0, 154756);

const {:count 19} .str.147: ref;

axiom .str.147 == $sub.ref(0, 155799);

const {:count 15} .str.146: ref;

axiom .str.146 == $sub.ref(0, 156838);

const {:count 24} .str.125: ref;

axiom .str.125 == $sub.ref(0, 157886);

const {:count 20} .str.105: ref;

axiom .str.105 == $sub.ref(0, 158930);

const {:count 21} .str.9: ref;

axiom .str.9 == $sub.ref(0, 159975);

const {:count 47} .str.11: ref;

axiom .str.11 == $sub.ref(0, 161046);

const {:count 18} .str.52: ref;

axiom .str.52 == $sub.ref(0, 162088);

const {:count 217} .str.49: ref;

axiom .str.49 == $sub.ref(0, 163329);

const {:count 43} .str.53: ref;

axiom .str.53 == $sub.ref(0, 164396);

const {:count 18} .str.54: ref;

axiom .str.54 == $sub.ref(0, 165438);

const {:count 22} .str.18: ref;

axiom .str.18 == $sub.ref(0, 166484);

const {:count 4} .str.14: ref;

axiom .str.14 == $sub.ref(0, 167512);

const {:count 18} .str.106: ref;

axiom .str.106 == $sub.ref(0, 168554);

const {:count 25} .str.107: ref;

axiom .str.107 == $sub.ref(0, 169603);

const {:count 18} .str.108: ref;

axiom .str.108 == $sub.ref(0, 170645);

const {:count 6} .str.15: ref;

axiom .str.15 == $sub.ref(0, 171675);

const {:count 20} .str.64: ref;

axiom .str.64 == $sub.ref(0, 172719);

const {:count 19} .str.65: ref;

axiom .str.65 == $sub.ref(0, 173762);

const {:count 20} .str.56: ref;

axiom .str.56 == $sub.ref(0, 174806);

const {:count 36} .str.171: ref;

axiom .str.171 == $sub.ref(0, 175866);

const {:count 17} .str.172: ref;

axiom .str.172 == $sub.ref(0, 176907);

const {:count 7} .str.26: ref;

axiom .str.26 == $sub.ref(0, 177938);

const {:count 21} .str.170: ref;

axiom .str.170 == $sub.ref(0, 178983);

const {:count 15} .str.166: ref;

axiom .str.166 == $sub.ref(0, 180022);

const {:count 23} .str.69: ref;

axiom .str.69 == $sub.ref(0, 181069);

const {:count 28} .str.35: ref;

axiom .str.35 == $sub.ref(0, 182121);

const {:count 12} .str.36: ref;

axiom .str.36 == $sub.ref(0, 183157);

const {:count 14} .str.165: ref;

axiom .str.165 == $sub.ref(0, 184195);

const {:count 20} .str.169: ref;

axiom .str.169 == $sub.ref(0, 185239);

const {:count 22} .str.68: ref;

axiom .str.68 == $sub.ref(0, 186285);

const {:count 19} .str.218: ref;

axiom .str.218 == $sub.ref(0, 187328);

const {:count 300} .str.32: ref;

axiom .str.32 == $sub.ref(0, 188652);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 34} .str.149: ref;

axiom .str.149 == $sub.ref(0, 189710);

const {:count 22} .str.206: ref;

axiom .str.206 == $sub.ref(0, 190756);

const {:count 16} .str.219: ref;

axiom .str.219 == $sub.ref(0, 191796);

const {:count 29} .str.220: ref;

axiom .str.220 == $sub.ref(0, 192849);

const {:count 175} .str.221: ref;

axiom .str.221 == $sub.ref(0, 194048);

const {:count 197} .str.222: ref;

axiom .str.222 == $sub.ref(0, 195269);

const {:count 30} .str.223: ref;

axiom .str.223 == $sub.ref(0, 196323);

const {:count 31} .str.224: ref;

axiom .str.224 == $sub.ref(0, 197378);

const {:count 36} .str.225: ref;

axiom .str.225 == $sub.ref(0, 198438);

const {:count 17} .str.226: ref;

axiom .str.226 == $sub.ref(0, 199479);

const {:count 17} .str.150: ref;

axiom .str.150 == $sub.ref(0, 200520);

const {:count 199} .str.42: ref;

axiom .str.42 == $sub.ref(0, 201743);

const {:count 38} .str.151: ref;

axiom .str.151 == $sub.ref(0, 202805);

const {:count 64} .str.158: ref;

axiom .str.158 == $sub.ref(0, 203893);

const {:count 16} .str.159: ref;

axiom .str.159 == $sub.ref(0, 204933);

const {:count 19} .str.55: ref;

axiom .str.55 == $sub.ref(0, 205976);

const {:count 18} .str.59: ref;

axiom .str.59 == $sub.ref(0, 207018);

const {:count 40} .str.61: ref;

axiom .str.61 == $sub.ref(0, 208082);

const {:count 20} .str.62: ref;

axiom .str.62 == $sub.ref(0, 209126);

const {:count 43} .str.63: ref;

axiom .str.63 == $sub.ref(0, 210193);

const {:count 17} .str.207: ref;

axiom .str.207 == $sub.ref(0, 211234);

const {:count 29} .str.208: ref;

axiom .str.208 == $sub.ref(0, 212287);

const {:count 31} .str.209: ref;

axiom .str.209 == $sub.ref(0, 213342);

const {:count 34} .str.210: ref;

axiom .str.210 == $sub.ref(0, 214400);

const {:count 41} .str.211: ref;

axiom .str.211 == $sub.ref(0, 215465);

const {:count 17} .str.41: ref;

axiom .str.41 == $sub.ref(0, 216506);

const {:count 16} .str.212: ref;

axiom .str.212 == $sub.ref(0, 217546);

const {:count 136} .str.213: ref;

axiom .str.213 == $sub.ref(0, 218706);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 15} .str.70: ref;

axiom .str.70 == $sub.ref(0, 219745);

const {:count 41} .str.71: ref;

axiom .str.71 == $sub.ref(0, 220810);

const {:count 52} .str.72: ref;

axiom .str.72 == $sub.ref(0, 221886);

const {:count 47} .str.73: ref;

axiom .str.73 == $sub.ref(0, 222957);

const {:count 15} .str.30: ref;

axiom .str.30 == $sub.ref(0, 223996);

const {:count 23} .str.16: ref;

axiom .str.16 == $sub.ref(0, 225043);

const {:count 18} .str.17: ref;

axiom .str.17 == $sub.ref(0, 226085);

const {:count 16} .str.28: ref;

axiom .str.28 == $sub.ref(0, 227125);

const {:count 4} .str.139: ref;

axiom .str.139 == $sub.ref(0, 228153);

const {:count 2} .str.141: ref;

axiom .str.141 == $sub.ref(0, 229179);

const .str.142: ref;

axiom .str.142 == $sub.ref(0, 230204);

const {:count 15} .str.140: ref;

axiom .str.140 == $sub.ref(0, 231243);

const {:count 2} .str.143: ref;

axiom .str.143 == $sub.ref(0, 232269);

const {:count 18} .str.144: ref;

axiom .str.144 == $sub.ref(0, 233311);

const {:count 3} .str.51: ref;

axiom .str.51 == $sub.ref(0, 234338);

const {:count 15} .str.145: ref;

axiom .str.145 == $sub.ref(0, 235377);

const {:count 22} .str.242: ref;

axiom .str.242 == $sub.ref(0, 236423);

const {:count 4} .str.243: ref;

axiom .str.243 == $sub.ref(0, 237451);

const {:count 5} .str.244: ref;

axiom .str.244 == $sub.ref(0, 238480);

const {:count 5} .str.245: ref;

axiom .str.245 == $sub.ref(0, 239509);

const {:count 14} .str.246: ref;

axiom .str.246 == $sub.ref(0, 240547);

const {:count 12} .str.138: ref;

axiom .str.138 == $sub.ref(0, 241583);

const {:count 35} .str.132: ref;

axiom .str.132 == $sub.ref(0, 242642);

const {:count 18} .str.133: ref;

axiom .str.133 == $sub.ref(0, 243684);

const {:count 29} .str.134: ref;

axiom .str.134 == $sub.ref(0, 244737);

const {:count 26} .str.135: ref;

axiom .str.135 == $sub.ref(0, 245787);

const {:count 28} .str.136: ref;

axiom .str.136 == $sub.ref(0, 246839);

const {:count 28} .str.137: ref;

axiom .str.137 == $sub.ref(0, 247891);

const {:count 24} .str.130: ref;

axiom .str.130 == $sub.ref(0, 248939);

const {:count 6} .str.131: ref;

axiom .str.131 == $sub.ref(0, 249969);

const {:count 19} .str.104: ref;

axiom .str.104 == $sub.ref(0, 251012);

const {:count 14} .str.48: ref;

axiom .str.48 == $sub.ref(0, 252050);

const {:count 28} .str.50: ref;

axiom .str.50 == $sub.ref(0, 253102);

const {:count 30} .str.22: ref;

axiom .str.22 == $sub.ref(0, 254156);

const {:count 30} .str.23: ref;

axiom .str.23 == $sub.ref(0, 255210);

const {:count 18} .str.148: ref;

axiom .str.148 == $sub.ref(0, 256252);

const {:count 15} .str.93: ref;

axiom .str.93 == $sub.ref(0, 257291);

const {:count 67} .str.94: ref;

axiom .str.94 == $sub.ref(0, 258382);

const {:count 57} .str.95: ref;

axiom .str.95 == $sub.ref(0, 259463);

const {:count 44} .str.96: ref;

axiom .str.96 == $sub.ref(0, 260531);

const {:count 26} .str.97: ref;

axiom .str.97 == $sub.ref(0, 261581);

const {:count 39} .str.98: ref;

axiom .str.98 == $sub.ref(0, 262644);

const {:count 68} .str.99: ref;

axiom .str.99 == $sub.ref(0, 263736);

const {:count 61} .str.188: ref;

axiom .str.188 == $sub.ref(0, 264821);

const {:count 25} .str.189: ref;

axiom .str.189 == $sub.ref(0, 265870);

const {:count 37} .str.185: ref;

axiom .str.185 == $sub.ref(0, 266931);

const {:count 15} .str.186: ref;

axiom .str.186 == $sub.ref(0, 267970);

const {:count 38} .str.187: ref;

axiom .str.187 == $sub.ref(0, 269032);

const {:count 21} .str.29: ref;

axiom .str.29 == $sub.ref(0, 270077);

const {:count 25} .str.184: ref;

axiom .str.184 == $sub.ref(0, 271126);

const {:count 55} .str.47: ref;

axiom .str.47 == $sub.ref(0, 272205);

const {:count 8} .str.122: ref;

axiom .str.122 == $sub.ref(0, 273237);

const {:count 13} .str.127: ref;

axiom .str.127 == $sub.ref(0, 274274);

const {:count 20} .str.129: ref;

axiom .str.129 == $sub.ref(0, 275318);

const {:count 21} .str.128: ref;

axiom .str.128 == $sub.ref(0, 276363);

const {:count 20} .str.124: ref;

axiom .str.124 == $sub.ref(0, 277407);

const {:count 12} .str.126: ref;

axiom .str.126 == $sub.ref(0, 278443);

const {:count 21} .str.123: ref;

axiom .str.123 == $sub.ref(0, 279488);

const {:count 9} .str.119: ref;

axiom .str.119 == $sub.ref(0, 280521);

const {:count 21} .str.120: ref;

axiom .str.120 == $sub.ref(0, 281566);

const {:count 104} .str.121: ref;

axiom .str.121 == $sub.ref(0, 282694);

const {:count 20} .str.118: ref;

axiom .str.118 == $sub.ref(0, 283738);

const {:count 20} .str.116: ref;

axiom .str.116 == $sub.ref(0, 284782);

const {:count 27} .str.117: ref;

axiom .str.117 == $sub.ref(0, 285833);

const {:count 13} .str.110: ref;

axiom .str.110 == $sub.ref(0, 286870);

const {:count 10} .str.111: ref;

axiom .str.111 == $sub.ref(0, 287904);

const {:count 13} .str.112: ref;

axiom .str.112 == $sub.ref(0, 288941);

const {:count 40} .str.113: ref;

axiom .str.113 == $sub.ref(0, 290005);

const {:count 8} .str.114: ref;

axiom .str.114 == $sub.ref(0, 291037);

const {:count 16} .str.115: ref;

axiom .str.115 == $sub.ref(0, 292077);

const {:count 3} .str.247: ref;

axiom .str.247 == $sub.ref(0, 293104);

const {:count 65} .str.248: ref;

axiom .str.248 == $sub.ref(0, 294193);

const {:count 59} .str.249: ref;

axiom .str.249 == $sub.ref(0, 295276);

const {:count 64} .str.250: ref;

axiom .str.250 == $sub.ref(0, 296364);

const {:count 16} .str.251: ref;

axiom .str.251 == $sub.ref(0, 297404);

const {:count 5} .str.252: ref;

axiom .str.252 == $sub.ref(0, 298433);

const {:count 53} .str.253: ref;

axiom .str.253 == $sub.ref(0, 299510);

const {:count 24} .str.261: ref;

axiom .str.261 == $sub.ref(0, 300558);

const {:count 12} .str.262: ref;

axiom .str.262 == $sub.ref(0, 301594);

const {:count 65} .str.263: ref;

axiom .str.263 == $sub.ref(0, 302683);

const {:count 64} .str.264: ref;

axiom .str.264 == $sub.ref(0, 303771);

const {:count 71} .str.265: ref;

axiom .str.265 == $sub.ref(0, 304866);

const {:count 42} .str.266: ref;

axiom .str.266 == $sub.ref(0, 305932);

const {:count 3} .str.260: ref;

axiom .str.260 == $sub.ref(0, 306959);

const {:count 17} .str.257: ref;

axiom .str.257 == $sub.ref(0, 308000);

const {:count 16} .str.258: ref;

axiom .str.258 == $sub.ref(0, 309040);

const {:count 50} .str.259: ref;

axiom .str.259 == $sub.ref(0, 310114);

const {:count 16} .str.255: ref;

axiom .str.255 == $sub.ref(0, 311154);

const {:count 15} .str.256: ref;

axiom .str.256 == $sub.ref(0, 312193);

const {:count 5} .str.254: ref;

axiom .str.254 == $sub.ref(0, 313222);

const {:count 29} .str.66: ref;

axiom .str.66 == $sub.ref(0, 314275);

const {:count 10} .str.67: ref;

axiom .str.67 == $sub.ref(0, 315309);

const {:count 16} .str.227: ref;

axiom .str.227 == $sub.ref(0, 316349);

const {:count 31} .str.228: ref;

axiom .str.228 == $sub.ref(0, 317404);

const {:count 13} .str.180: ref;

axiom .str.180 == $sub.ref(0, 318441);

const {:count 19} .str.181: ref;

axiom .str.181 == $sub.ref(0, 319484);

const {:count 24} .str.182: ref;

axiom .str.182 == $sub.ref(0, 320532);

const {:count 23} .str.183: ref;

axiom .str.183 == $sub.ref(0, 321579);

const {:count 12} .str.190: ref;

axiom .str.190 == $sub.ref(0, 322615);

const {:count 12} .str.191: ref;

axiom .str.191 == $sub.ref(0, 323651);

const {:count 10} .str.192: ref;

axiom .str.192 == $sub.ref(0, 324685);

const {:count 9} .str.193: ref;

axiom .str.193 == $sub.ref(0, 325718);

const {:count 10} .str.194: ref;

axiom .str.194 == $sub.ref(0, 326752);

const {:count 11} .str.195: ref;

axiom .str.195 == $sub.ref(0, 327787);

const {:count 9} .str.196: ref;

axiom .str.196 == $sub.ref(0, 328820);

const {:count 10} .str.197: ref;

axiom .str.197 == $sub.ref(0, 329854);

const {:count 13} .str.198: ref;

axiom .str.198 == $sub.ref(0, 330891);

const {:count 10} .str.199: ref;

axiom .str.199 == $sub.ref(0, 331925);

const {:count 11} .str.200: ref;

axiom .str.200 == $sub.ref(0, 332960);

const {:count 10} .str.201: ref;

axiom .str.201 == $sub.ref(0, 333994);

const {:count 12} .str.202: ref;

axiom .str.202 == $sub.ref(0, 335030);

const {:count 10} .str.203: ref;

axiom .str.203 == $sub.ref(0, 336064);

const {:count 14} .str.204: ref;

axiom .str.204 == $sub.ref(0, 337102);

const {:count 11} .str.205: ref;

axiom .str.205 == $sub.ref(0, 338137);

const {:count 14} .str.287: ref;

axiom .str.287 == $sub.ref(0, 339175);

const {:count 54} .str.288: ref;

axiom .str.288 == $sub.ref(0, 340253);

const {:count 32} .str.289: ref;

axiom .str.289 == $sub.ref(0, 341309);

const {:count 20} .str.37: ref;

axiom .str.37 == $sub.ref(0, 342353);

const {:count 35} .str.38: ref;

axiom .str.38 == $sub.ref(0, 343412);

const {:count 37} .str.39: ref;

axiom .str.39 == $sub.ref(0, 344473);

const {:count 44} .str.40: ref;

axiom .str.40 == $sub.ref(0, 345541);

const {:count 12} .str.286: ref;

axiom .str.286 == $sub.ref(0, 346577);

const {:count 11} .str.282: ref;

axiom .str.282 == $sub.ref(0, 347612);

const {:count 14} .str.283: ref;

axiom .str.283 == $sub.ref(0, 348650);

const {:count 13} .str.33: ref;

axiom .str.33 == $sub.ref(0, 349687);

const {:count 28} .str.34: ref;

axiom .str.34 == $sub.ref(0, 350739);

const {:count 14} .str.2: ref;

axiom .str.2 == $sub.ref(0, 351777);

const {:count 31} .str.5: ref;

axiom .str.5 == $sub.ref(0, 352832);

const {:count 24} .str.273: ref;

axiom .str.273 == $sub.ref(0, 353880);

const {:count 6} .str.274: ref;

axiom .str.274 == $sub.ref(0, 354910);

const {:count 44} .str.275: ref;

axiom .str.275 == $sub.ref(0, 355978);

const {:count 48} .str.276: ref;

axiom .str.276 == $sub.ref(0, 357050);

const {:count 17} .str.277: ref;

axiom .str.277 == $sub.ref(0, 358091);

const {:count 25} .str.27: ref;

axiom .str.27 == $sub.ref(0, 359140);

const {:count 41} .str.57: ref;

axiom .str.57 == $sub.ref(0, 360205);

const {:count 48} .str.58: ref;

axiom .str.58 == $sub.ref(0, 361277);

const {:count 20} .str.43: ref;

axiom .str.43 == $sub.ref(0, 362321);

const {:count 16} .str.44: ref;

axiom .str.44 == $sub.ref(0, 363361);

const {:count 21} .str.45: ref;

axiom .str.45 == $sub.ref(0, 364406);

const {:count 21} .str.46: ref;

axiom .str.46 == $sub.ref(0, 365451);

const {:count 28} .str.161: ref;

axiom .str.161 == $sub.ref(0, 366503);

const {:count 16} .str.162: ref;

axiom .str.162 == $sub.ref(0, 367543);

const {:count 38} .str.163: ref;

axiom .str.163 == $sub.ref(0, 368605);

const {:count 39} .str.164: ref;

axiom .str.164 == $sub.ref(0, 369668);

const {:count 69} .str.173: ref;

axiom .str.173 == $sub.ref(0, 370761);

const {:count 24} .str.174: ref;

axiom .str.174 == $sub.ref(0, 371809);

const {:count 44} .str.167: ref;

axiom .str.167 == $sub.ref(0, 372877);

const {:count 45} .str.168: ref;

axiom .str.168 == $sub.ref(0, 373946);

const .str: ref;

axiom .str == $sub.ref(0, 374983);

const {:count 20} .str.236: ref;

axiom .str.236 == $sub.ref(0, 376027);

const {:count 17} .str.237: ref;

axiom .str.237 == $sub.ref(0, 377068);

const {:count 12} .str.238: ref;

axiom .str.238 == $sub.ref(0, 378104);

const {:count 25} .str.239: ref;

axiom .str.239 == $sub.ref(0, 379153);

const {:count 26} .str.240: ref;

axiom .str.240 == $sub.ref(0, 380203);

const {:count 27} .str.241: ref;

axiom .str.241 == $sub.ref(0, 381254);

const {:count 25} .str.272: ref;

axiom .str.272 == $sub.ref(0, 382303);

const {:count 20} .str.233: ref;

axiom .str.233 == $sub.ref(0, 383347);

const {:count 30} .str.234: ref;

axiom .str.234 == $sub.ref(0, 384401);

const {:count 31} .str.235: ref;

axiom .str.235 == $sub.ref(0, 385456);

const {:count 39} .str.271: ref;

axiom .str.271 == $sub.ref(0, 386519);

const {:count 22} .str.231: ref;

axiom .str.231 == $sub.ref(0, 387565);

const {:count 9} .str.232: ref;

axiom .str.232 == $sub.ref(0, 388598);

const {:count 14} .str.229: ref;

axiom .str.229 == $sub.ref(0, 389636);

const {:count 24} .str.230: ref;

axiom .str.230 == $sub.ref(0, 390684);

const {:count 22} .str.160: ref;

axiom .str.160 == $sub.ref(0, 391730);

const {:count 44} .str.280: ref;

axiom .str.280 == $sub.ref(0, 392798);

const {:count 37} .str.281: ref;

axiom .str.281 == $sub.ref(0, 393859);

const {:count 9} .str.278: ref;

axiom .str.278 == $sub.ref(0, 394892);

const {:count 9} .str.279: ref;

axiom .str.279 == $sub.ref(0, 395925);

const {:count 9} .str.290: ref;

axiom .str.290 == $sub.ref(0, 396958);

const {:count 15} .str.291: ref;

axiom .str.291 == $sub.ref(0, 397997);

const {:count 16} .str.292: ref;

axiom .str.292 == $sub.ref(0, 399037);

const {:count 31} .str.293: ref;

axiom .str.293 == $sub.ref(0, 400092);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 44} .str.294: ref;

axiom .str.294 == $sub.ref(0, 401160);

const {:count 16} .str.295: ref;

axiom .str.295 == $sub.ref(0, 402200);

const {:count 9} .str.284: ref;

axiom .str.284 == $sub.ref(0, 403233);

const {:count 15} .str.285: ref;

axiom .str.285 == $sub.ref(0, 404272);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 405304);

const {:count 3} .str.1.602: ref;

axiom .str.1.602 == $sub.ref(0, 406331);

const {:count 14} .str.603: ref;

axiom .str.603 == $sub.ref(0, 407369);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 408397);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 409429);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 410461);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const zd_op_tx: ref;

axiom zd_op_tx == $sub.ref(0, 411493);

procedure zd_op_tx($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.47, $M.13, $CurrAddr, assertsPassed;



implementation zd_op_tx($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := zd_hw_mac($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p4 := IEEE80211_SKB_CB($p2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i5 := fill_ctrlset($p3, $p2);
    call {:si_unique_call 4} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 8));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i14 := zd_usb_tx($p13, $p2);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 7} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} consume_skb($p2);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_op_start: ref;

axiom zd_op_start == $sub.ref(0, 412525);

procedure zd_op_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.2, $M.3, $M.28, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.33, $M.34, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.40, $M.17, $M.19, $M.21, $M.23, $M.29, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, assertsPassed, $M.39;



implementation zd_op_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i29: i32;
  var $i16: i32;
  var $i11: i32;
  var $i33: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p1 := zd_hw_mac($p0);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 13688)), $mul.ref(0, 1));
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(11276, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i12 := zd_chip_enable_int($p2);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 12} {:cexpr "r"} boogie_si_record_i32($i12);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i14 := zd_chip_set_basic_rates($p2, $sub.i16(0, 241));
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 14} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i17 := set_rx_filter($p1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 17} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i19 := set_mc_hash($p1);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 19} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} msleep(10);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i21 := zd_chip_switch_radio_on($p2);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 22} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i27 := zd_chip_enable_rxtx($p2);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 25} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i30 := zd_chip_enable_hwint($p2);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 28} {:cexpr "r"} boogie_si_record_i32($i30);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} housekeeping_enable($p1);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} beacon_enable($p1);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 13688)), $mul.ref(12464, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} set_bit(0, $p32);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb28:
    assume $i31 == 1;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} zd_chip_disable_rxtx($p2);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i29 := $i30;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} vslice_dummy_var_88 := zd_chip_switch_radio_off($p2);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i16 := $i29;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} zd_chip_disable_int($p2);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i33 := $i11;
    goto $bb32;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i28 == 1;
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb26;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i22 == 1;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} dev_err.ref.ref.ref($p26, .str.35, .str.36);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb13;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i20 == 1;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i16 := $i19;
    goto $bb13;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i16 := $i17;
    goto $bb13;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb13;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb5;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i9 := zd_usb_init_hw($p3);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 10} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb5;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const zd_op_stop: ref;

axiom zd_op_stop == $sub.ref(0, 413557);

procedure zd_op_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.10, $M.40, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_op_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p11: ref;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p1 := zd_hw_mac($p0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 13688)), $mul.ref(12472, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 13688)), $mul.ref(12464, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} clear_bit(0, $p4);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} zd_chip_disable_rxtx($p2);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} beacon_disable($p1);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} housekeeping_disable($p1);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p5 := $M.1;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} ldv_flush_workqueue_91($p5);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} vslice_dummy_var_89 := zd_chip_disable_hwint($p2);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} vslice_dummy_var_90 := zd_chip_switch_radio_off($p2);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} zd_chip_disable_int($p2);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p8 := skb_dequeue($p3);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p11 := $p8;
    goto $bb4;

  $bb4:
    call $p12, $i13, $i14, $p11 := zd_op_stop_loop_$bb4($p3, $p12, $i13, $i14, $p11);
    goto $bb4_last;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} dev_kfree_skb_any($p11);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p12 := skb_dequeue($p3);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p12;
    goto $bb6_dummy;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;
}



const zd_op_add_interface: ref;

axiom zd_op_add_interface == $sub.ref(0, 414589);

procedure zd_op_add_interface($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_op_add_interface($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p2 := zd_hw_mac($p0);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 95);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p1);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i20 := set_mac_and_bssid($p2);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 47} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i6 := $i20;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb17;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb21;

  $bb19:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb15;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb23;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 95);
    goto $bb3;
}



const zd_op_remove_interface: ref;

axiom zd_op_remove_interface == $sub.ref(0, 415621);

procedure zd_op_remove_interface($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_op_remove_interface($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $p2 := zd_hw_mac($p0);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $0.ref);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vslice_dummy_var_91 := zd_set_beacon_interval($p5, 0, 0, 0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_92 := zd_write_mac_addr($p7, $0.ref);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} zd_mac_free_cur_beacon($p2);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const zd_op_config: ref;

axiom zd_op_config == $sub.ref(0, 416653);

procedure zd_op_config($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.10, $M.40, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_op_config($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} {:cexpr "zd_op_config:arg:changed"} boogie_si_record_i32($i1);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p2 := zd_hw_mac($p0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} spin_lock_irq($p4);
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i16.i8($i9);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(12450, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} spin_unlock_irq($p12);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(0, 1));
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i16.i8($i18);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i22 := zd_chip_set_channel($p13, $i21);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 57} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const zd_op_bss_info_changed: ref;

axiom zd_op_bss_info_changed == $sub.ref(0, 417685);

procedure zd_op_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $CurrAddr, assertsPassed, $M.40, $M.10, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_op_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p27: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $i35: i8;
  var $p36: ref;
  var $i37: i16;
  var $i38: i16;
  var $i39: i8;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $i55: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i1;
  var $i61: i8;
  var $i62: i1;
  var $i63: i32;
  var $i57: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i1;
  var $i73: i8;
  var $p74: ref;
  var $i75: i8;
  var $i76: i8;
  var $i77: i8;
  var $i78: i8;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i1;
  var $i83: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} {:cexpr "zd_op_bss_info_changed:arg:changes"} boogie_si_record_i32($i3);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p4 := zd_hw_mac($p0);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} dev_printk.ref.ref.ref.ref.i32(.str.6, $p9, .str.178, .str.179, $i3);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 7);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i60 := is_valid_ether_addr($p59);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i8($i60);
    call {:si_unique_call 62} {:cexpr "tmp___1"} boogie_si_record_i8($i61);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i8.i1($i61);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    call {:si_unique_call 63} {:cexpr "associated"} boogie_si_record_i32($i63);
    assume {:verifier.code 0} true;
    $i57 := $i63;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} spin_lock_irq($p64);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(12456, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i57);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} spin_unlock_irq($p66);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i3, 4);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i68 == 1;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} spin_lock_irq($p69);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(15, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i8.i1($i71);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i8($i72);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i76 := $and.i8($i73, 1);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i77 := $and.i8($i75, $sub.i8(0, 2));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i78 := $or.i8($i77, $i76);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i78);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} spin_unlock_irq($p79);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(15, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i81);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i32($i82);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} set_rts_cts($p4, $i83);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i3, 256);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i3, 512);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i57 := 1;
    goto $bb20;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(17, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i38, $i39 := 0, 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} spin_lock_irq($p40);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(242, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i39);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(240, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $i38);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, jiffies);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(232, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i45);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} spin_unlock_irq($p48);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i38);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i39);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} vslice_dummy_var_96 := zd_set_beacon_interval($p49, $i51, $i53, $i55);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(18, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    call {:si_unique_call 68} {:cexpr "period"} boogie_si_record_i8($i35);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(20, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    call {:si_unique_call 69} {:cexpr "interval"} boogie_si_record_i16($i37);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i38, $i39 := $i37, $i35;
    goto $bb18;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p21 := ieee80211_beacon_get($p0, $p1);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_93 := zd_chip_disable_hwint($p24);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_94 := zd_mac_config_beacon($p0, $p21, 0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_95 := zd_chip_enable_hwint($p27);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;
}



const zd_op_prepare_multicast: ref;

axiom zd_op_prepare_multicast == $sub.ref(0, 418717);

procedure zd_op_prepare_multicast($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $CurrAddr;



implementation zd_op_prepare_multicast($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p11: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $p3 := zd_hw_mac($p0);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} zd_mc_clear($p2);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i8, $i9);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.2, $p27);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.3, $p30);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i33 := $shl.i64($i32, 32);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i34 := $or.i64($i29, $i33);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p11 := $p6;
    goto $bb4;

  $bb4:
    call $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p22, $p23, $p24, $i25, $i26, $p11 := zd_op_prepare_multicast_loop_$bb4($p2, $p3, $i9, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p22, $p23, $p24, $i25, $i26, $p11);
    goto $bb4_last;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} dev_printk.ref.ref.ref.ref.ref(.str.6, $p16, .str.175, .str.176, $p18);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} zd_mc_add_addr($p2, $p20);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i9);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p23;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_299;
}



const zd_op_configure_filter: ref;

axiom zd_op_configure_filter == $sub.ref(0, 419749);

procedure zd_op_configure_filter($p0: ref, $i1: i32, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_op_configure_filter($p0: ref, $i1: i32, $p2: ref, $i3: i64)
{
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $i25: i8;
  var $i26: i8;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $i34: i8;
  var $i35: i8;
  var $i36: i8;
  var $i37: i8;
  var $i38: i8;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 84} {:cexpr "zd_op_configure_filter:arg:changed_flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 85} {:cexpr "zd_op_configure_filter:arg:multicast"} boogie_si_record_i64($i3);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i3);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i64($i3, 32);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p10 := zd_hw_mac($p0);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i1, 118);
    call {:si_unique_call 87} {:cexpr "changed_flags"} boogie_si_record_i32($i11);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p2);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 118);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i13);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p2);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 2);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} ldv_spin_lock();
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p2);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 4);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i21, 1);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i25 := $shl.i8($i24, 1);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i26 := $and.i8($i23, $sub.i8(0, 3));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i27 := $or.i8($i26, $i25);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i27);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p2);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 32);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p10, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i32, 1);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i36 := $shl.i8($i35, 2);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i37 := $and.i8($i34, $sub.i8(0, 5));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i38 := $or.i8($i37, $i36);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i38);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref(0, 13688)), $mul.ref(12376, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p4);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 90} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p40, $p41, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p10, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} spin_unlock_irqrestore($p42, $u0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p10, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} vslice_dummy_var_97 := zd_chip_set_multicast_hash($p43, $p4);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i11, 32);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i46 == 1;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i47 := set_rx_filter($p10);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 94} {:cexpr "r"} boogie_si_record_i32($i47);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i48 == 1;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} dev_err.ref.ref.i32($p53, .str.177, $i47);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} zd_mc_add_all($p4);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_op_get_tsf: ref;

axiom zd_op_get_tsf == $sub.ref(0, 420781);

procedure zd_op_get_tsf($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_op_get_tsf($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p2 := zd_hw_mac($p0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i4 := zd_chip_get_tsf($p3);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 98} {:cexpr "tmp___0"} boogie_si_record_i64($i4);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const zd_hw_mac: ref;

axiom zd_hw_mac == $sub.ref(0, 421813);

procedure zd_hw_mac($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_hw_mac($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const zd_chip_get_tsf: ref;

axiom zd_chip_get_tsf == $sub.ref(0, 422845);

procedure zd_chip_get_tsf($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_chip_get_tsf($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 2));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $sub.i16(0, 27372));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 27368));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} mutex_lock_nested($p5, 0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i8 := zd_ioread32v_locked($p0, $p6, $p7, 2);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 103} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} mutex_unlock($p9);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i8, 0);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    call {:si_unique_call 105} {:cexpr "tsf"} boogie_si_record_i64($i14);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i15 := $shl.i64($i14, 32);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i19 := $or.i64($i15, $i18);
    call {:si_unique_call 106} {:cexpr "tsf"} boogie_si_record_i64($i19);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i11 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 423877);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    return;
}



const zd_ioread32v_locked: ref;

axiom zd_ioread32v_locked == $sub.ref(0, 424909);

procedure zd_ioread32v_locked($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_ioread32v_locked($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i31: i16;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i24: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i1;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i64;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i51: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p4 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $p5 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    call {:si_unique_call 110} {:cexpr "zd_ioread32v_locked:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i3, 7);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i3, 2);
    call {:si_unique_call 111} {:cexpr "count16"} boogie_si_record_i32($i8);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i10 := $mul.i64($i9, 2);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64($i10, 28);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 113} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i8);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 2);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64($i17, 28);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 116} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32(0, $i3);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p5);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i44 := zd_ioread16v_locked($p0, $p42, $p43, $i8);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 122} {:cexpr "r"} boogie_si_record_i32($i44);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i50 := $ult.i32(0, $i3);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb24:
    assume $i50 == 1;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb27;

  $bb27:
    call $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i51 := zd_ioread32v_locked_loop_$bb27($p1, $i3, $p5, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i51);
    goto $bb27_last;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i52 := $mul.i32($i51, 2);
    call {:si_unique_call 124} {:cexpr "j___0"} boogie_si_record_i32($i52);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref($i53, 2));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i57 := $shl.i32($i56, 16);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i52, 1);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref($i59, 2));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i57, $i62);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i51);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p1, $mul.ref($i64, 4));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i63);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i51, 1);
    call {:si_unique_call 125} {:cexpr "i"} boogie_si_record_i32($i66);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i67 := $ult.i32($i66, $i3);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i67 == 1);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i51 := $i66;
    goto $bb29_dummy;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p49, .str.7, .str.8, .str.8, $i44);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i7 := $i44;
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb16;

  $bb16:
    call $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $p35, $i36, $i37, $i38, $p39, $i40, $i41, $i24 := zd_ioread32v_locked_loop_$bb16($p2, $i3, $p4, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $p35, $i36, $i37, $i38, $p39, $i40, $i41, $i24);
    goto $bb16_last;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i24, 2);
    call {:si_unique_call 118} {:cexpr "j"} boogie_si_record_i32($i25);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i24);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref($i26, 2));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i31 := inc_addr($i30);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i25);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref($i32, 2));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $i31);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i24);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p2, $mul.ref($i34, 2));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i25, 1);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 28)), $mul.ref($i38, 2));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $i36);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i24, 1);
    call {:si_unique_call 120} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i41 := $ult.i32($i40, $i3);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i40;
    goto $bb18_dummy;

  $bb9:
    assume $i22 == 1;
    call {:si_unique_call 117} devirtbounce(0, .str.3, 120, 12);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call zd_ioread32v_locked_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i15 == 1;
    call {:si_unique_call 114} devirtbounce(0, .str.3, 119, 12);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call zd_ioread32v_locked_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_503;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 425941);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 426973);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 127} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const inc_addr: ref;

axiom inc_addr == $sub.ref(0, 428005);

procedure inc_addr($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation inc_addr($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i7: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} {:cexpr "inc_addr:arg:addr"} boogie_si_record_i16($i0);
    call {:si_unique_call 129} {:cexpr "inc_addr:arg:a"} boogie_si_record_i16($i0);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 61440);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 36864);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    call {:si_unique_call 131} {:cexpr "a"} boogie_si_record_i16($i10);
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 2);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    call {:si_unique_call 130} {:cexpr "a"} boogie_si_record_i16($i6);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const zd_ioread16v_locked: ref;

axiom zd_ioread16v_locked == $sub.ref(0, 429037);

procedure zd_ioread16v_locked($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.0, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_ioread16v_locked($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 133} {:cexpr "zd_ioread16v_locked:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i6 := mutex_is_locked($p5);
    call {:si_unique_call 135} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 137} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i29 := zd_usb_ioread16v($p28, $p1, $p2, $i3);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 143} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.1);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.100);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, .str.101);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p15, .str.4);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.8, $p17);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 812);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p17, $i20);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p21, 1);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.9, $p22);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 139} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} dump_stack();
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.101, 812, .str.10);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const dev_printk: ref;

axiom dev_printk == $sub.ref(0, 430069);

procedure dev_printk.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i64);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i64)
{

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    return;
}



const mutex_is_locked: ref;

axiom mutex_is_locked == $sub.ref(0, 431101);

procedure mutex_is_locked($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_is_locked($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i2 := atomic_read($p1);
    call {:si_unique_call 145} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 432133);

procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    return;
}



const dump_stack: ref;

axiom dump_stack == $sub.ref(0, 433165);

procedure dump_stack();
  free requires assertsPassed;



implementation dump_stack()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_ioread16v: ref;

axiom zd_usb_ioread16v == $sub.ref(0, 434197);

procedure zd_usb_ioread16v($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_usb_ioread16v($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $i58: i64;
  var $i59: i64;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i1;
  var $i67: i64;
  var $p68: ref;
  var $i69: i16;
  var $i70: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $i66: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i81: i32;
  var $i79: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i80: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i64;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i8;
  var $i103: i1;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $i104: i32;
  var $i85: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 149} {:cexpr "zd_usb_ioread16v:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p5, 0);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i3, 15);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i16 := preempt_count();
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 153} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i21 := usb_int_enabled($p0);
    call {:si_unique_call 156} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p26 := zd_usb_to_chip($p0);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i28 := mutex_is_locked($p27);
    call {:si_unique_call 160} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 162} {:cexpr "tmp___4"} boogie_si_record_i64($i32);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i3);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 1);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i52 := $mul.i64($i51, 2);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i53 := $ugt.i64($i52, 64);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 168} {:cexpr "tmp___5"} boogie_si_record_i64($i56);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i3);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 1);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i64.i32($i59);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i61 := $mul.i32($i60, 2);
    call {:si_unique_call 170} {:cexpr "req_len"} boogie_si_record_i32($i61);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11212, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p64, 34);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i65 := $ult.i32(0, $i3);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p75 := zd_usb_to_usbdev($p0);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} prepare_read_regs_int($p0, $p63, $i3);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p63);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i77 := zd_ep_regs_out_msg($p75, $p76, $i61, $p4, 50);
    call {:si_unique_call 175} {:cexpr "r"} boogie_si_record_i32($i77);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i79 := $i77;
    assume {:branchcond $i78} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i78 == 1);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i80 := 1;
    goto $bb35;

  $bb35:
    call $i81, $i80, $i86, $i87, $i92, $p95, $i96, $i97, $i101, $i102, $i103, $i105, $p106, $p107, $p108, $i109, $p110, $i111, $i112, $i104 := zd_usb_ioread16v_loop_$bb35($p0, $p1, $i3, $p4, $p5, $i61, $p63, $p76, $i81, $i80, $i86, $i87, $i92, $p95, $i96, $i97, $i101, $i102, $i103, $i105, $p106, $p107, $p108, $i109, $p110, $i111, $i112, $i104);
    goto $bb35_last;

  $bb38:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.11, $p4);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i61, $i86);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i92 := msecs_to_jiffies(50);
    call {:si_unique_call 179} {:cexpr "tmp___6"} boogie_si_record_i64($i92);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i96 := wait_for_completion_timeout($p95, $i92);
    call {:si_unique_call 181} {:cexpr "timeout"} boogie_si_record_i64($i96);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i101 := get_results($p0, $p1, $p63, $i3, $p5);
    call {:si_unique_call 185} {:cexpr "r"} boogie_si_record_i32($i101);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.10, $p5);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i8.i1($i102);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i104 := $i101;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i85 := $i104;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i11 := $i85;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb45:
    assume $i103 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i105 := $sle.i32($i80, 19);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i104 := $i101;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb47;

  $bb48:
    assume $i105 == 1;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} dev_printk.ref.ref.ref.ref.i32(.str.6, $p108, .str.83, .str.75, $i80);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i80, 1);
    call {:si_unique_call 187} {:cexpr "try_count"} boogie_si_record_i32($i109);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p110 := zd_usb_to_usbdev($p0);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} prepare_read_regs_int($p0, $p63, $i3);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i111 := zd_ep_regs_out_msg($p110, $p76, $i61, $p4, 50);
    call {:si_unique_call 191} {:cexpr "r"} boogie_si_record_i32($i111);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i81 := $i111;
    assume true;
    goto $bb36, $bb50;

  $bb50:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i80 := $i109;
    goto $bb50_dummy;

  $bb36:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i79 := $i81;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} dev_printk.ref.ref.ref.ref.i32(.str.6, $p84, .str.80, .str.75, $i79);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i85 := $i79;
    goto $bb37;

  $bb42:
    assume $i97 == 1;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} disable_read_regs_int($p0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} dev_printk.ref.ref.ref.ref(.str.6, $p100, .str.82, .str.75);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32(0, 110);
    goto $bb37;

  $bb39:
    assume $i87 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.11, $p4);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p90, .str.81, .str.75, $i61, $i91);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32(0, 5);
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb33;

  $bb24:
    assume $i65 == 1;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb27;

  $bb27:
    call $i67, $p68, $i69, $i70, $p72, $i73, $i74, $i66 := zd_usb_ioread16v_loop_$bb27($p2, $i3, $p63, $i67, $p68, $i69, $i70, $p72, $i73, $i74, $i66);
    goto $bb27_last;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p2, $mul.ref($i67, 2));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.0, $p68);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i66);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 2)), $mul.ref(2, 1)), $mul.ref($i70, 2));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $i69);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i66, 1);
    call {:si_unique_call 171} {:cexpr "i"} boogie_si_record_i32($i73);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i74 := $ult.i32($i73, $i3);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i74 == 1);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i66 := $i73;
    goto $bb29_dummy;

  $bb20:
    assume $i57 == 1;
    call {:si_unique_call 169} devirtbounce(0, .str.60, 1742, 12);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    call zd_usb_ioread16v_loop_$bb22();
    goto $bb22_last;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p34, .str.1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p35, .str.75);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p36, .str.60);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p37, .str.4);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.8, $p39);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 1738);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p39, $i42);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p43, 1);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.9, $p44);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 164} {:cexpr "tmp___1"} boogie_si_record_i64($i48);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} dump_stack();
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} __dynamic_pr_debug.ref.ref.ref.i32.ref($p6, .str.4, .str.60, 1738, .str.79);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} dev_printk.ref.ref.ref.ref(.str.6, $p25, .str.78, .str.75);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 11);
    goto $bb3;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} dev_printk.ref.ref.ref.ref(.str.6, $p20, .str.77, .str.75);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 11);
    goto $bb3;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p15, .str.76, .str.75, $i3, 15);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} dev_printk.ref.ref.ref.ref(.str.6, $p10, .str.74, .str.75);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb50_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_717;

  $bb22_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;
}



const preempt_count: ref;

axiom preempt_count == $sub.ref(0, 435229);

procedure preempt_count() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.40, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation preempt_count() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i0 := devirtbounce.1(0, __preempt_count);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 193} {:cexpr "pfo_ret__"} boogie_si_record_i32($i0);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 2147483647);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const usb_int_enabled: ref;

axiom usb_int_enabled == $sub.ref(0, 436261);

procedure usb_int_enabled($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13;



implementation usb_int_enabled($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} ldv_spin_lock();
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} spin_unlock_irqrestore($p4, $u0);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p3);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const zd_usb_to_chip: ref;

axiom zd_usb_to_chip == $sub.ref(0, 437293);

procedure zd_usb_to_chip($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_usb_to_chip($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const zd_usb_to_usbdev: ref;

axiom zd_usb_to_usbdev == $sub.ref(0, 438325);

procedure zd_usb_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_usb_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p3 := interface_to_usbdev($p2);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const prepare_read_regs_int: ref;

axiom prepare_read_regs_int == $sub.ref(0, 439357);

procedure prepare_read_regs_int($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13;



implementation prepare_read_regs_int($p0: ref, $p1: ref, $i2: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} {:cexpr "prepare_read_regs_int:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} spin_lock_irq($p4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} atomic_set($p5, 1);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} reinit_completion($p11);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} spin_unlock_irq($p12);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    return;
}



const zd_ep_regs_out_msg: ref;

axiom zd_ep_regs_out_msg == $sub.ref(0, 440389);

procedure zd_ep_regs_out_msg($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation zd_ep_regs_out_msg($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} {:cexpr "zd_ep_regs_out_msg:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 203} {:cexpr "zd_ep_regs_out_msg:arg:timeout"} boogie_si_record_i32($i4);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i5 := __create_pipe($p0, 4);
    call {:si_unique_call 205} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1073741824);
    call {:si_unique_call 206} {:cexpr "pipe"} boogie_si_record_i32($i6);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p7 := usb_pipe_endpoint($p0, $i6);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i12 := usb_endpoint_xfer_int($p11);
    call {:si_unique_call 209} {:cexpr "tmp___3"} boogie_si_record_i32($i12);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i15 := __create_pipe($p0, 4);
    call {:si_unique_call 213} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, $sub.i32(0, 1073741824));
    call {:si_unique_call 214} {:cexpr "pipe"} boogie_si_record_i32($i16);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i17 := usb_bulk_msg($p0, $i16, $p1, $i2, $p3, $i4);
    call {:si_unique_call 216} {:cexpr "tmp___2"} boogie_si_record_i32($i17);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i14 := usb_interrupt_msg($p0, $i6, $p1, $i2, $p3, $i4);
    call {:si_unique_call 211} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 441421);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 219} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 442453);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 220} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 221} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 222} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const disable_read_regs_int: ref;

axiom disable_read_regs_int == $sub.ref(0, 443485);

procedure disable_read_regs_int($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.13;



implementation disable_read_regs_int($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} spin_lock_irq($p2);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} atomic_set($p3, 0);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} spin_unlock_irq($p4);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    return;
}



const get_results: ref;

axiom get_results == $sub.ref(0, 444517);

procedure get_results($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.0, $M.13;



implementation get_results($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i8;
  var $i16: i8;
  var $i17: i1;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i16;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i28: i32;
  var $i18: i32;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} {:cexpr "get_results:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1));
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} spin_lock_irq($p9);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(288, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p4, $i15);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.10, $p4);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $i19 := check_read_regs($p0, $p2, $i3);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 230} {:cexpr "tmp"} boogie_si_record_i8($i20);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $ult.i32(0, $i3);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} spin_unlock_irq($p39);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb14;

  $bb14:
    call $p29, $p30, $i31, $p33, $i34, $i35, $p36, $i37, $i38, $i28 := get_results_loop_$bb14($p1, $i3, $p8, $p29, $p30, $i31, $p33, $i34, $i35, $p36, $i37, $i38, $i28);
    goto $bb14_last;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i28);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p30, $mul.ref($i31, 4)), $mul.ref(2, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i28);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p1, $mul.ref($i35, 2));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $i34);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i28, 1);
    call {:si_unique_call 232} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i38 := $ult.i32($i37, $i3);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i37;
    goto $bb16_dummy;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} dev_printk.ref.ref.ref.ref(.str.6, $p26, .str.267, .str.268);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_891;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 445549);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.13;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} ldv_spin_lock();
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} ldv_spin_lock_irq_56($p0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    return;
}



const check_read_regs: ref;

axiom check_read_regs == $sub.ref(0, 446581);

procedure check_read_regs($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation check_read_regs($p0: ref, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i64;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i64;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i27: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} {:cexpr "check_read_regs:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i7 := usb_int_regs_length($i2);
    call {:si_unique_call 237} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(172, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, $i7);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(172, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, 64);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32(0, $i2);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb11;

  $bb11:
    call $p28, $p29, $i30, $p31, $p32, $i33, $i34, $i35, $p37, $i38, $i39, $i40, $i41, $p42, $i54, $i55, $i27 := check_read_regs_loop_$bb11($p1, $i2, $p6, $p28, $p29, $i30, $p31, $p32, $i33, $i34, $i35, $p37, $i38, $i39, $i40, $i41, $p42, $i54, $i55, $i27);
    goto $bb11_last;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i27);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p29, $mul.ref($i30, 4));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref($i30, 4)), $mul.ref(0, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i27);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(2, 1)), $mul.ref($i35, 2));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i34, $i39);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i41, $p42 := $i27, $p31;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i27, 1);
    call {:si_unique_call 243} {:cexpr "i"} boogie_si_record_i32($i54);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i55 := $ult.i32($i54, $i2);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i54;
    goto $bb16_dummy;

  $bb13:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p42, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i41);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(2, 1)), $mul.ref($i49, 2));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} dev_printk.ref.ref.ref.ref.i32.i32.i32(.str.6, $p45, .str.217, .str.215, $i41, $i48, $i53);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1568)), $mul.ref(48, 1));
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(172, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} dev_printk.ref.ref.ref.ref.i32.i64(.str.6, $p23, .str.216, .str.215, $i25, 64);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i11 := usb_int_regs_length($i2);
    call {:si_unique_call 239} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1568)), $mul.ref(48, 1));
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(172, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p14, .str.214, .str.215, $i16, $i11);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 447613);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.13;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} ldv_spin_unlock();
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} ldv_spin_unlock_irq_59($p0);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 448645);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.13;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 246} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_59: ref;

axiom ldv_spin_unlock_irq_59 == $sub.ref(0, 449677);

procedure ldv_spin_unlock_irq_59($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_59($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} _raw_spin_unlock_irq($p2);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 450709);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    return;
}



const usb_int_regs_length: ref;

axiom usb_int_regs_length == $sub.ref(0, 451741);

procedure usb_int_regs_length($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_int_regs_length($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} {:cexpr "usb_int_regs_length:arg:count"} boogie_si_record_i32($i0);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i1 := $mul.i32($i0, 4);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 2);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 452773);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.13;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 249} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_56: ref;

axiom ldv_spin_lock_irq_56 == $sub.ref(0, 453805);

procedure ldv_spin_lock_irq_56($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_56($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} _raw_spin_lock_irq($p2);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 454837);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 455869);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    return;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 456901);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 252} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 1} true;
    call {:si_unique_call 253} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 254} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 457933);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_pipe_endpoint: ref;

axiom usb_pipe_endpoint == $sub.ref(0, 458965);

procedure usb_pipe_endpoint($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_pipe_endpoint($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p7: ref;
  var $p6: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} {:cexpr "usb_pipe_endpoint:arg:pipe"} boogie_si_record_i32($i1);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 128);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1744, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p6 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i1, 15);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 15);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p6, $mul.ref($i11, 8));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1616, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p6 := $p4;
    goto $bb3;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 459997);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.12, $p1);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_interrupt_msg: ref;

axiom usb_interrupt_msg == $sub.ref(0, 461029);

procedure usb_interrupt_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_interrupt_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 257} {:cexpr "usb_interrupt_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 258} {:cexpr "usb_interrupt_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 259} {:cexpr "usb_interrupt_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 1} true;
    call {:si_unique_call 260} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 261} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 462061);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 262} {:cexpr "usb_bulk_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 263} {:cexpr "usb_bulk_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 264} {:cexpr "usb_bulk_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 1} true;
    call {:si_unique_call 265} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 266} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const reinit_completion: ref;

axiom reinit_completion == $sub.ref(0, 463093);

procedure reinit_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation reinit_completion($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 464125);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 465157);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.13;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} ldv_spin_unlock();
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} ldv_spin_unlock_irqrestore_60($p0, $i1);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_60: ref;

axiom ldv_spin_unlock_irqrestore_60 == $sub.ref(0, 466189);

procedure ldv_spin_unlock_irqrestore_60($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_60($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} {:cexpr "ldv_spin_unlock_irqrestore_60:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 467221);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 468253);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const zd_mc_add_all: ref;

axiom zd_mc_add_all == $sub.ref(0, 469285);

procedure zd_mc_add_all($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_mc_add_all($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $sub.i32(0, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $sub.i32(0, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 470317);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const zd_chip_set_multicast_hash: ref;

axiom zd_chip_set_multicast_hash == $sub.ref(0, 471349);

procedure zd_chip_set_multicast_hash($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_chip_set_multicast_hash($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 27100));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i6);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $sub.i16(0, 27096));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i12);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i16 := zd_iowrite32a($p0, $p15, 2);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 275} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const set_rx_filter: ref;

axiom set_rx_filter == $sub.ref(0, 472381);

procedure set_rx_filter($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation set_rx_filter($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} ldv_spin_lock();
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(13680, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := 604045311;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i10 := zd_iowrite32($p9, $sub.i16(0, 26996), $i7);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 280} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i6 := $or.i32(604045311, $sub.i32(0, 671088640));
    call {:si_unique_call 277} {:cexpr "filter"} boogie_si_record_i32($i6);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 473413);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    return;
}



const zd_iowrite32: ref;

axiom zd_iowrite32 == $sub.ref(0, 474445);

procedure zd_iowrite32($p0: ref, $i1: i16, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_iowrite32($p0: ref, $i1: i16, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} {:cexpr "zd_iowrite32:arg:addr"} boogie_si_record_i16($i1);
    call {:si_unique_call 282} {:cexpr "zd_iowrite32:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} mutex_lock_nested($p3, 0);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i6 := zd_iowrite32_locked($p0, $i2, $i5);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 285} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} mutex_unlock($p7);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const zd_iowrite32_locked: ref;

axiom zd_iowrite32_locked == $sub.ref(0, 475477);

procedure zd_iowrite32_locked($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_iowrite32_locked($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 288} {:cexpr "zd_iowrite32_locked:arg:value"} boogie_si_record_i32($i1);
    call {:si_unique_call 289} {:cexpr "zd_iowrite32_locked:arg:addr"} boogie_si_record_i16($i2);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $i2);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i1);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i6 := _zd_iowrite32v_locked($p0, $p3, 1);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 291} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const _zd_iowrite32v_locked: ref;

axiom _zd_iowrite32v_locked == $sub.ref(0, 476509);

procedure _zd_iowrite32v_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation _zd_iowrite32v_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p9: ref;
  var $i10: i32;
  var $i8: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} {:cexpr "_zd_iowrite32v_locked:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} zd_usb_iowrite16v_async_start($p3);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i4 := _zd_iowrite32v_async_locked($p0, $p1, $i2);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 295} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i10 := zd_usb_iowrite16v_async_end($p9, 50);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 298} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} vslice_dummy_var_98 := zd_usb_iowrite16v_async_end($p6, 0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i8 := $i4;
    goto $bb3;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const zd_usb_iowrite16v_async_start: ref;

axiom zd_usb_iowrite16v_async_start == $sub.ref(0, 477541);

procedure zd_usb_iowrite16v_async_start($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation zd_usb_iowrite16v_async_start($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i24;
  var $i68: i24;
  var $i69: i24;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i64;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i24;
  var $i92: i24;
  var $i93: i24;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $i102: i8;
  var $i103: i8;
  var $i104: i8;
  var $p105: ref;
  var $p106: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11016, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i6 := usb_anchor_empty($p5);
    call {:si_unique_call 304} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 306} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11200, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 312} {:cexpr "tmp___3"} boogie_si_record_i64($i34);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p0);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(11276, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 318} {:cexpr "tmp___5"} boogie_si_record_i64($i59);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $p77 := zd_usb_to_chip($p0);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i79 := mutex_is_locked($p78);
    call {:si_unique_call 325} {:cexpr "tmp___8"} boogie_si_record_i32($i79);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i83 := ldv__builtin_expect($i82, 0);
    call {:si_unique_call 327} {:cexpr "tmp___9"} boogie_si_record_i64($i83);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11276, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i103 := $and.i8($i102, $sub.i8(0, 9));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i104 := $or.i8($i103, 8);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, $i104);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11208, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, 0);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11200, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, $0.ref);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i84 == 1;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p85, .str.1);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p86, .str.84);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p87, .str.60);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p88, .str.4);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i91 := $load.i24($M.8, $p90);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i92 := $and.i24($i91, $sub.i24(0, 262144));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i93 := $or.i24($i92, 1834);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p90, $i93);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p94, 1);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.9, $p95);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i64($i96);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i98 := $and.i64($i97, 1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i99 := ldv__builtin_expect($i98, 0);
    call {:si_unique_call 329} {:cexpr "tmp___6"} boogie_si_record_i64($i99);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} dump_stack();
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i100 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.60, 1834, .str.79);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i60 == 1;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p61, .str.1);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p62, .str.84);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p63, .str.60);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p64, .str.4);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i67 := $load.i24($M.8, $p66);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i68 := $and.i24($i67, $sub.i24(0, 262144));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i69 := $or.i24($i68, 1832);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p66, $i69);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p70, 1);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.9, $p71);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i64($i72);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i74 := $and.i64($i73, 1);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 320} {:cexpr "tmp___4"} boogie_si_record_i64($i75);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} dump_stack();
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i76 == 1;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.60, 1832, .str.87);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p36, .str.1);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p37, .str.84);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p38, .str.60);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p39, .str.4);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.8, $p41);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 1831);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p41, $i44);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p45, 1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.9, $p46);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 314} {:cexpr "tmp___2"} boogie_si_record_i64($i50);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} dump_stack();
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i51 == 1;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.60, 1831, .str.86);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.1);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.84);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, .str.60);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p15, .str.4);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.8, $p17);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1830);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p17, $i20);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p21, 1);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.9, $p22);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 308} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} dump_stack();
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.60, 1830, .str.85);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const _zd_iowrite32v_async_locked: ref;

axiom _zd_iowrite32v_async_locked == $sub.ref(0, 478573);

procedure _zd_iowrite32v_async_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation _zd_iowrite32v_async_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i1;
  var $i41: i32;
  var $i42: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i16;
  var $i48: i64;
  var $p50: ref;
  var $i51: i64;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i16;
  var $i57: i16;
  var $i58: i64;
  var $p60: ref;
  var $i61: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i64;
  var $p69: ref;
  var $i70: i64;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i40: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p3 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 334} {:cexpr "_zd_iowrite32v_async_locked:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i6 := mutex_is_locked($p5);
    call {:si_unique_call 336} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 338} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i2, 0);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i2, 7);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i2, 2);
    call {:si_unique_call 343} {:cexpr "count16"} boogie_si_record_i32($i31);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i33 := $mul.i64($i32, 4);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i64($i33, 56);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 345} {:cexpr "tmp___2"} boogie_si_record_i64($i37);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i39 := $ult.i32(0, $i2);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p3);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i82 := zd_usb_iowrite16v_async($p80, $p81, $i31);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 351} {:cexpr "r"} boogie_si_record_i32($i82);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i29 := $i82;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb26:
    assume $i83 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} dev_printk.ref.ref.ref.ref.i32(.str.6, $p87, .str.103, .str.102, $i82);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb21;

  $bb21:
    call $i41, $i42, $p44, $i45, $i46, $i47, $i48, $p50, $i51, $p53, $i54, $i55, $i56, $i57, $i58, $p60, $i61, $p63, $i64, $i65, $i66, $i67, $p69, $i70, $p72, $i73, $i74, $i75, $p77, $i78, $i79, $i40 := _zd_iowrite32v_async_locked_loop_$bb21($p1, $i2, $p3, $i41, $i42, $p44, $i45, $i46, $i47, $i48, $p50, $i51, $p53, $i54, $i55, $i56, $i57, $i58, $p60, $i61, $p63, $i64, $i65, $i66, $i67, $p69, $i70, $p72, $i73, $i74, $i75, $p77, $i78, $i79, $i40);
    goto $bb21_last;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i41 := $mul.i32($i40, 2);
    call {:si_unique_call 347} {:cexpr "j"} boogie_si_record_i32($i41);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i40);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref($i42, 8)), $mul.ref(4, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i46 := $lshr.i32($i45, 16);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i41);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref($i48, 4)), $mul.ref(2, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, $i47);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i40);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref($i51, 8)), $mul.ref(0, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i57 := inc_addr($i56);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i41);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref($i58, 4)), $mul.ref(0, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, $i57);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i40);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref($i61, 8)), $mul.ref(4, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i41, 1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref($i67, 4)), $mul.ref(2, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i65);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i40);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref($i70, 8)), $mul.ref(0, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i41, 1);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref($i75, 4)), $mul.ref(0, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, $i73);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i40, 1);
    call {:si_unique_call 349} {:cexpr "i"} boogie_si_record_i32($i78);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i79 := $ult.i32($i78, $i2);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i79 == 1);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i40 := $i78;
    goto $bb23_dummy;

  $bb14:
    assume $i38 == 1;
    call {:si_unique_call 346} devirtbounce(0, .str.3, 162, 12);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call _zd_iowrite32v_async_locked_loop_$bb16();
    goto $bb16_last;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb9;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.1);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.102);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, .str.3);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p15, .str.4);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.8, $p17);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 154);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p17, $i20);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p21, 1);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.9, $p22);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 340} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} dump_stack();
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.3, 154, .str.10);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1382;

  $bb16_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;
}



const zd_usb_iowrite16v_async_end: ref;

axiom zd_usb_iowrite16v_async_end == $sub.ref(0, 479605);

procedure zd_usb_iowrite16v_async_end($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, assertsPassed;



implementation zd_usb_iowrite16v_async_end($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i59: i32;
  var $p74: ref;
  var $i75: i8;
  var $i76: i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 355} {:cexpr "zd_usb_iowrite16v_async_end:arg:timeout"} boogie_si_record_i32($i1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p4 := zd_usb_to_chip($p0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i6 := mutex_is_locked($p5);
    call {:si_unique_call 358} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 360} {:cexpr "tmp___2"} boogie_si_record_i64($i10);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p0);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(11276, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 366} {:cexpr "tmp___4"} boogie_si_record_i64($i35);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i53 := zd_submit_waiting_urb($p0, 1);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 372} {:cexpr "r"} boogie_si_record_i32($i53);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i1, 0);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i63 := $i1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11208, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    call {:si_unique_call 379} {:cexpr "r"} boogie_si_record_i32($i73);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i59 := $i73;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11276, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i76 := $and.i8($i75, $sub.i8(0, 9));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i76);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $r := $i59;
    return;

  $bb20:
    assume $i64 == 1;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11016, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} usb_kill_anchored_urbs($p65);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11208, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, $sub.i32(0, 2));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i68 == 1;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} dev_printk.ref.ref.ref.ref(.str.6, $p71, .str.91, .str.88);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 110);
    goto $bb15;

  $bb17:
    assume $i60 == 1;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11016, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i62 := usb_wait_anchor_empty_timeout($p61, $i1);
    call {:si_unique_call 376} {:cexpr "tmp___5"} boogie_si_record_i32($i62);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb19;

  $bb13:
    assume $i54 == 1;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} dev_printk.ref.ref.ref.ref.i32(.str.6, $p57, .str.90, .str.88, $i53);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11016, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} usb_kill_anchored_urbs($p58);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i59 := $i53;
    goto $bb15;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.1);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p38, .str.88);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, .str.60);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p40, .str.4);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.8, $p42);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 1846);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p42, $i45);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p46, 1);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.9, $p47);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 368} {:cexpr "tmp___3"} boogie_si_record_i64($i51);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} dump_stack();
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i52 == 1;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.60, 1846, .str.89);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.1);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.88);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, .str.60);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p15, .str.4);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.8, $p17);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1845);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p17, $i20);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p21, 1);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.9, $p22);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 362} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} dump_stack();
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.60, 1845, .str.79);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_submit_waiting_urb: ref;

axiom zd_submit_waiting_urb == $sub.ref(0, 480637);

procedure zd_submit_waiting_urb($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation zd_submit_waiting_urb($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 380} {:cexpr "zd_submit_waiting_urb:arg:last"} boogie_si_record_i1($i1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11200, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11200, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i2);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 128);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11016, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} usb_anchor_urb($p4, $p14);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i15 := ldv_usb_submit_urb_395($p4, 208);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 383} {:cexpr "r"} boogie_si_record_i32($i15);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} usb_free_urb($p4);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i7 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} usb_unanchor_urb($p4);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} dev_printk.ref.ref.ref.ref.i32(.str.6, $p19, .str.269, .str.270, $i15);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const usb_kill_anchored_urbs: ref;

axiom usb_kill_anchored_urbs == $sub.ref(0, 481669);

procedure usb_kill_anchored_urbs($p0: ref);
  free requires assertsPassed;



implementation usb_kill_anchored_urbs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    return;
}



const usb_wait_anchor_empty_timeout: ref;

axiom usb_wait_anchor_empty_timeout == $sub.ref(0, 482701);

procedure usb_wait_anchor_empty_timeout($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_wait_anchor_empty_timeout($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 387} {:cexpr "usb_wait_anchor_empty_timeout:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 1} true;
    call {:si_unique_call 388} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 389} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_anchor_urb: ref;

axiom usb_anchor_urb == $sub.ref(0, 483733);

procedure usb_anchor_urb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_anchor_urb($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_395: ref;

axiom ldv_usb_submit_urb_395 == $sub.ref(0, 484765);

procedure ldv_usb_submit_urb_395($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_395($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} {:cexpr "ldv_usb_submit_urb_395:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} ldv_check_alloc_flags($i1);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $p2 := ldv_undef_ptr();
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const usb_unanchor_urb: ref;

axiom usb_unanchor_urb == $sub.ref(0, 485797);

procedure usb_unanchor_urb($p0: ref);
  free requires assertsPassed;



implementation usb_unanchor_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 486829);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 487861);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i1 := $M.13;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} ldv_error();
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 488893);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 1} true;
    call {:si_unique_call 395} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 396} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 489925);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 397} __VERIFIER_error();
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const zd_usb_iowrite16v_async: ref;

axiom zd_usb_iowrite16v_async == $sub.ref(0, 490957);

procedure zd_usb_iowrite16v_async($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_usb_iowrite16v_async($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i24;
  var $i45: i24;
  var $i46: i24;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i1;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p82: ref;
  var $i83: i1;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i89: i64;
  var $p91: ref;
  var $i92: i16;
  var $p93: ref;
  var $i94: i64;
  var $p96: ref;
  var $i97: i16;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $i84: i32;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i81: i32;
  var $i55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 400} {:cexpr "zd_usb_iowrite16v_async:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p5 := zd_usb_to_chip($p0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i7 := mutex_is_locked($p6);
    call {:si_unique_call 403} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 405} {:cexpr "tmp___2"} boogie_si_record_i64($i11);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(11276, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 411} {:cexpr "tmp___4"} boogie_si_record_i64($i36);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i2, 0);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i56 := $ugt.i32($i2, 15);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i60 := preempt_count();
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 418} {:cexpr "tmp___5"} boogie_si_record_i32($i60);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p65 := zd_usb_to_usbdev($p0);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i66 := __create_pipe($p65, 4);
    call {:si_unique_call 422} {:cexpr "tmp___6"} boogie_si_record_i32($i66);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i66, 1073741824);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p68 := usb_pipe_endpoint($p65, $i67);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p71 := ldv_usb_alloc_urb_396(0, 208);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i74 := $mul.i32($i2, 4);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 2);
    call {:si_unique_call 425} {:cexpr "req_len"} boogie_si_record_i32($i75);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p77 := kmalloc($i76, 208);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p78, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p82, 33);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i83 := $ult.i32(0, $i2);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p68, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i102 := usb_endpoint_xfer_int($p101);
    call {:si_unique_call 430} {:cexpr "tmp___10"} boogie_si_record_i32($i102);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i103 == 1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i112 := __create_pipe($p65, 4);
    call {:si_unique_call 435} {:cexpr "tmp___9"} boogie_si_record_i32($i112);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i112, $sub.i32(0, 1073741824));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p78);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p0);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} usb_fill_bulk_urb($p71, $p65, $i113, $p114, $i75, iowrite16v_urb_complete, $p115);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p71, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i118 := $or.i32($i117, 256);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p71, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i118);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i120 := zd_submit_waiting_urb($p0, 0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 438} {:cexpr "r"} boogie_si_record_i32($i120);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11200, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p125, $p71);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb44:
    assume $i121 == 1;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} dev_printk.ref.ref.ref.ref.i32(.str.6, $p124, .str.90, .str.92, $i120);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i81 := $i120;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} usb_free_urb($p71);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i55 := $i81;
    goto $bb15;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i103 == 1;
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i104 := __create_pipe($p65, 4);
    call {:si_unique_call 432} {:cexpr "tmp___8"} boogie_si_record_i32($i104);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i105 := $or.i32($i104, 1073741824);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p78);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p0);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p68, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.12, $p109);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} usb_fill_int_urb($p71, $p65, $i105, $p106, $i75, iowrite16v_urb_complete, $p107, $i111);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb33:
    assume $i83 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb36;

  $bb36:
    call $p85, $p86, $i87, $i89, $p91, $i92, $p93, $i94, $p96, $i97, $p98, $i99, $i100, $i84 := zd_usb_iowrite16v_async_loop_$bb36($p1, $i2, $p78, $p85, $p86, $i87, $i89, $p91, $i92, $p93, $i94, $p96, $i97, $p98, $i99, $i100, $i84);
    goto $bb36_last;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p78, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i84);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i84);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref($i89, 4)), $mul.ref(0, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p91);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p86, $mul.ref($i87, 4)), $mul.ref(0, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p93, $i92);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i84);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref($i94, 4)), $mul.ref(2, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.0, $p96);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p86, $mul.ref($i87, 4)), $mul.ref(2, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p98, $i97);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i84, 1);
    call {:si_unique_call 428} {:cexpr "i"} boogie_si_record_i32($i99);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i100 := $ult.i32($i99, $i2);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i100 == 1);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i84 := $i99;
    goto $bb38_dummy;

  $bb29:
    assume $i80 == 1;
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32(0, 12);
    goto $bb31;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i73 == 1;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 12);
    goto $bb15;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i70 == 1;
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 2);
    goto $bb15;

  $bb20:
    assume $i61 == 1;
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} dev_printk.ref.ref.ref.ref(.str.6, $p64, .str.77, .str.92);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 11);
    goto $bb15;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p59, .str.76, .str.92, $i2, 15);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 22);
    goto $bb15;

  $bb13:
    assume $i54 == 1;
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb15;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p38, .str.1);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p39, .str.92);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p40, .str.60);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p41, .str.4);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i44 := $load.i24($M.8, $p43);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i45 := $and.i24($i44, $sub.i24(0, 262144));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i46 := $or.i24($i45, 1888);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p43, $i46);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p47, 1);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.9, $p48);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 413} {:cexpr "tmp___3"} boogie_si_record_i64($i52);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} dump_stack();
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i53 == 1;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.60, 1888, .str.89);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.1);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.92);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str.60);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p16, .str.4);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.8, $p18);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 1887);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p18, $i21);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p22, 1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.9, $p23);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 407} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} dump_stack();
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.60, 1887, .str.79);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb38_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;
}



const ldv_usb_alloc_urb_396: ref;

axiom ldv_usb_alloc_urb_396 == $sub.ref(0, 491989);

procedure ldv_usb_alloc_urb_396($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_396($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} {:cexpr "ldv_usb_alloc_urb_396:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 441} {:cexpr "ldv_usb_alloc_urb_396:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} ldv_check_alloc_flags($i1);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $p2 := ldv_undef_ptr();
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 493021);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 445} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} ldv_check_alloc_flags($i1);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $p2 := ldv_undef_ptr();
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const iowrite16v_urb_complete: ref;

axiom iowrite16v_urb_complete == $sub.ref(0, 494053);

procedure iowrite16v_urb_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation iowrite16v_urb_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 11280)), $mul.ref(11208, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i17, $i19);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 11280)), $mul.ref(11208, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $sub.i32(0, 5));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 11280)), $mul.ref(11208, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 11280)), $mul.ref(11208, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 495085);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 449} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 450} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i4);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p5);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i7);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    call {:si_unique_call 451} {:cexpr "usb_fill_int_urb:arg:_max1"} boogie_si_record_i32($i7);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i7, 1);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 16);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i23 := 16;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32(1, $i24);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb11;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 496117);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 453} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    return;
}



const usb_anchor_empty: ref;

axiom usb_anchor_empty == $sub.ref(0, 497149);

procedure usb_anchor_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_anchor_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 1} true;
    call {:si_unique_call 454} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 455} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const zd_iowrite32a: ref;

axiom zd_iowrite32a == $sub.ref(0, 498181);

procedure zd_iowrite32a($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_iowrite32a($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} {:cexpr "zd_iowrite32a:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} mutex_lock_nested($p3, 0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i4 := zd_iowrite32a_locked($p0, $p1, $i2);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 459} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} mutex_unlock($p5);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const zd_iowrite32a_locked: ref;

axiom zd_iowrite32a_locked == $sub.ref(0, 499213);

procedure zd_iowrite32a_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_iowrite32a_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i22: i32;
  var $i23: i1;
  var $i11: i32;
  var $i24: i32;
  var $i10: i32;
  var $i20: i32;
  var $i21: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i5: i32;
  var $p40: ref;
  var $i41: i32;
  var $i36: i32;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} {:cexpr "zd_iowrite32a_locked:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} zd_usb_iowrite16v_async_start($p3);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i4 := $ult.i32(0, $i2);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i41 := zd_usb_iowrite16v_async_end($p40, 50);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 471} {:cexpr "tmp"} boogie_si_record_i32($i41);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i36 := $i41;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i9, $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i22, $i23, $i11, $i24, $i10, $i20, $i21, $i25, $p26, $i27, $i28, $i29, $i37, $i38, $i39, $i5 := zd_iowrite32a_locked_loop_$bb4($p0, $p1, $i2, $i6, $i7, $i8, $i9, $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i22, $i23, $i11, $i24, $i10, $i20, $i21, $i25, $p26, $i27, $i28, $i29, $i37, $i38, $i39, $i5);
    goto $bb4_last;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i2, $i5);
    call {:si_unique_call 463} {:cexpr "max"} boogie_si_record_i32($i6);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 7);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i8);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i10, 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i5);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p1, $mul.ref($i25, 8));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i27 := _zd_iowrite32v_async_locked($p0, $p26, $i20);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 465} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i20, $i21);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, $i5);
    call {:si_unique_call 469} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i39 := $ult.i32($i38, $i2);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb25:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i38;
    goto $bb25_dummy;

  $bb21:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_99 := zd_usb_iowrite16v_async_end($p30, 0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p35, .str.12, .str.13, .str.13, $i29);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i36 := $i29;
    goto $bb23;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb12;

  $bb12:
    call $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i22, $i23, $i11, $i24 := zd_iowrite32a_locked_loop_$bb12($p1, $i8, $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i22, $i23, $i11, $i24, $i5);
    goto $bb12_last;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i5, $i11);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref($i13, 8)), $mul.ref(0, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i19 := $i11;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i11, 1);
    call {:si_unique_call 466} {:cexpr "j"} boogie_si_record_i32($i22);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32($i22, $i8);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb11;

  $bb18:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb18_dummy;

  $bb14:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i19, 1;
    goto $bb16;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i8 := 7;
    goto $bb8;

  $bb18_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1956;

  $bb25_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;
}



const zd_mc_clear: ref;

axiom zd_mc_clear == $sub.ref(0, 500245);

procedure zd_mc_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3;



implementation zd_mc_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p1, 0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p2, $sub.i32(0, 2147483648));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    return;
}



const zd_mc_add_addr: ref;

axiom zd_mc_add_addr == $sub.ref(0, 501277);

procedure zd_mc_add_addr($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3;



implementation zd_mc_add_addr($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i5 := $ashr.i32($i4, 2);
    call {:si_unique_call 472} {:cexpr "i"} boogie_si_record_i32($i5);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i6 := $ule.i32($i5, 31);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.3, $p12);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i5, 32);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32(1, $i14);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i13, $i15);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p17, $i16);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.2, $p7);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32(1, $i5);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i8, $i9);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p11, $i10);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ieee80211_beacon_get: ref;

axiom ieee80211_beacon_get == $sub.ref(0, 502309);

procedure ieee80211_beacon_get($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_beacon_get($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p2 := ieee80211_beacon_get_tim($p0, $p1, $0.ref, $0.ref);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const zd_chip_disable_hwint: ref;

axiom zd_chip_disable_hwint == $sub.ref(0, 503341);

procedure zd_chip_disable_hwint($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_chip_disable_hwint($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} mutex_lock_nested($p1, 0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i2 := disable_hwint($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 476} {:cexpr "r"} boogie_si_record_i32($i2);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} mutex_unlock($p3);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const zd_mac_config_beacon: ref;

axiom zd_mac_config_beacon == $sub.ref(0, 504373);

procedure zd_mac_config_beacon($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, assertsPassed, $M.40, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_mac_config_beacon($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i46: i64;
  var $i73: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $i99: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i64;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $i97: i32;
  var $i98: i32;
  var $i115: i32;
  var $i96: i32;
  var $i116: i64;
  var $p118: ref;
  var $i119: i64;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $i125: i32;
  var $i126: i64;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $i34: i32;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $i137: i1;
  var $i138: i64;
  var $i139: i64;
  var $i140: i1;
  var $p142: ref;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i136: i32;
  var $i141: i32;
  var $i146: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;
  var $i155: i32;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i32;
  var $i161: i32;
  var $i29: i32;
  var $p30: ref;
  var $p162: ref;
  var $i14: i32;
  var $p15: ref;
  var $p164: ref;
  var $p167: ref;
  var $p168: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p176: ref;
  var $p177: ref;
  var $i165: i32;
  var $i178: i64;
  var $p180: ref;
  var $i181: i64;
  var $p183: ref;
  var $i184: i32;
  var $i185: i64;
  var $p187: ref;
  var $i188: i64;
  var $p190: ref;
  var $i191: i32;
  var $i192: i64;
  var $p194: ref;
  var $i195: i64;
  var $p197: ref;
  var $i124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 479} {:cexpr "zd_mac_config_beacon:arg:in_intr"} boogie_si_record_i1($i2);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p5 := zd_hw_mac($p0);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 4);
    call {:si_unique_call 481} {:cexpr "full_len"} boogie_si_record_i32($i8);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(11344, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} mutex_lock_nested($p10, 0);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i11 := zd_mac_match_cur_beacon($p5, $p1);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 484} {:cexpr "tmp___1"} boogie_si_record_i8($i12);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i17 := zd_chip_is_zd1211b($p16);
    call {:si_unique_call 488} {:cexpr "tmp___2"} boogie_si_record_i32($i17);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, $i8);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    call {:si_unique_call 489} {:cexpr "num_cmds"} boogie_si_record_i32($i19);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i21 := $mul.i64($i20, 8);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p22 := kmalloc($i21, 208);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i27 := zd_iowrite32_locked($p26, 0, $sub.i16(0, 26988));
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 492} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i32 := zd_ioread32_locked($p31, $p3, $sub.i16(0, 26988));
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 495} {:cexpr "r"} boogie_si_record_i32($i32);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i4);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, jiffies);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 125);
    call {:si_unique_call 499} {:cexpr "end_jiffies"} boogie_si_record_i64($i40);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, jiffies);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 25);
    call {:si_unique_call 500} {:cexpr "message_jiffies"} boogie_si_record_i64($i42);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p3);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 2);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64(0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p23, $mul.ref($i73, 8)), $mul.ref(0, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p75, $sub.i16(0, 27024));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32($i8, 1);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64(0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p23, $mul.ref($i77, 8)), $mul.ref(4, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i76);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i80 := $add.i32(0, 1);
    call {:si_unique_call 513} {:cexpr "req_pos"} boogie_si_record_i32($i80);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i82 := zd_chip_is_zd1211b($p81);
    call {:si_unique_call 515} {:cexpr "tmp___4"} boogie_si_record_i32($i82);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i92 := $i80;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i32($i94, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i96 := $i92;
    assume {:branchcond $i95} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i96);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p23, $mul.ref($i116, 8)), $mul.ref(0, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, $sub.i16(0, 27024));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i96);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p23, $mul.ref($i119, 8)), $mul.ref(4, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, 0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i96, 1);
    call {:si_unique_call 519} {:cexpr "req_pos"} boogie_si_record_i32($i122);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i122);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p23, $mul.ref($i178, 8)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p180, $sub.i16(0, 27024));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i181 := $sext.i32.i64($i122);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p23, $mul.ref($i181, 8)), $mul.ref(4, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p183, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i184 := $add.i32($i122, 1);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i185 := $sext.i32.i64($i184);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p23, $mul.ref($i185, 8)), $mul.ref(0, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p187, $sub.i16(0, 27024));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i188 := $sext.i32.i64($i184);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p23, $mul.ref($i188, 8)), $mul.ref(4, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p190, 0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i191 := $add.i32($i184, 1);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i192 := $sext.i32.i64($i191);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p23, $mul.ref($i192, 8)), $mul.ref(0, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p194, $sub.i16(0, 27024));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i195 := $sext.i32.i64($i191);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p23, $mul.ref($i195, 8)), $mul.ref(4, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p197, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i191, 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i124, $i19);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i123);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64($i125);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i127 := ldv__builtin_expect($i126, 0);
    call {:si_unique_call 521} {:cexpr "tmp___5"} boogie_si_record_i64($i127);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i130 := zd_iowrite32a_locked($p129, $p23, $i19);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 524} {:cexpr "r"} boogie_si_record_i32($i130);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i34 := $i130;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i131 := $load.i64($M.0, jiffies);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i132 := $add.i64($i131, 125);
    call {:si_unique_call 496} {:cexpr "end_jiffies"} boogie_si_record_i64($i132);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i134 := zd_iowrite32_locked($p133, 1, $sub.i16(0, 26988));
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 498} {:cexpr "ret"} boogie_si_record_i32($i134);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i134, 0);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i136 := $i134;
    assume {:branchcond $i135} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i141 := $i136;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i141, 0);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i152 := $slt.i32($i34, 0);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb77, $bb79;

  $bb79:
    assume !($i152 == 1);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i141, 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} zd_mac_free_cur_beacon_locked($p5);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(224, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p157, $p1);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i159 := $shl.i32($i8, 19);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i160 := $or.i32($i159, 1024);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i161 := zd_iowrite32_locked($p158, $i160, $sub.i16(0, 27104));
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 532} {:cexpr "r"} boogie_si_record_i32($i161);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i29, $p30 := $i161, $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p23);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} kfree($p162);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i14, $p15 := $i29, $p30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} kfree_skb($p15);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(11344, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} mutex_unlock($p164);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i165 := $i14;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $r := $i165;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i154 := $sge.i32($i34, 0);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    $i155 := $i34;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} zd_mac_free_cur_beacon_locked($p5);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i29, $p30 := $i155, $p1;
    goto $bb10;

  $bb82:
    assume $i154 == 1;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i155 := $i141;
    goto $bb84;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb78;

  $bb74:
    assume $i146 == 1;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} dev_err.ref.ref($p151, .str.154);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb59:
    assume $i135 == 1;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    call $i137, $i138, $i139, $i140, $p142, $i143, $i144, $i145 := zd_mac_config_beacon_loop_$bb62($i4, $p5, $i132, $i137, $i138, $i139, $i140, $p142, $i143, $i144, $i145);
    goto $bb62_last;

  $bb63:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i8.i1($i4);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb66;

  $bb66:
    assume !($i137 == 1);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i138 := $load.i64($M.0, jiffies);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i139 := $sub.i64($i138, $i132);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i140 := $sge.i64($i139, 0);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} msleep(20);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i143 := zd_iowrite32_locked($p142, 1, $sub.i16(0, 26988));
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 527} {:cexpr "ret"} boogie_si_record_i32($i143);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i143, 0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i145 := $i143;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i136 := $i145;
    goto $bb61;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb71_dummy;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i141 := $sub.i32(0, 110);
    goto $bb69;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb65;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i128 == 1;
    call {:si_unique_call 522} devirtbounce(0, .str.31, 794, 12);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    call zd_mac_config_beacon_loop_$bb57();
    goto $bb57_last;

  $bb43:
    assume $i95 == 1;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i97, $i98 := 0, $i92;
    goto $bb46;

  $bb46:
    call $i99, $p101, $p102, $p103, $i104, $p105, $i106, $i107, $i108, $p110, $i111, $i112, $i113, $i114, $i97, $i98, $i115 := zd_mac_config_beacon_loop_$bb46($p1, $p23, $p93, $i99, $p101, $p102, $p103, $i104, $p105, $i106, $i107, $i108, $p110, $i111, $i112, $i113, $i114, $i97, $i98, $i115);
    goto $bb46_last;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i98);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p23, $mul.ref($i99, 8)), $mul.ref(0, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p101, $sub.i16(0, 27024));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i104 := $zext.i32.i64($i97);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p103, $mul.ref($i104, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i98);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p23, $mul.ref($i108, 8)), $mul.ref(4, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, $i107);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i98, 1);
    call {:si_unique_call 517} {:cexpr "req_pos"} boogie_si_record_i32($i111);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i97, 1);
    call {:si_unique_call 518} {:cexpr "j"} boogie_si_record_i32($i112);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p93);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i114 := $ugt.i32($i113, $i112);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i115 := $i111;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i96 := $i115;
    goto $bb45;

  $bb48:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i97, $i98 := $i112, $i111;
    goto $bb48_dummy;

  $bb40:
    assume $i83 == 1;
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i80);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p23, $mul.ref($i84, 8)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p86, $sub.i16(0, 27036));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i87 := $sub.i32($i8, 1);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i80);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p23, $mul.ref($i88, 8)), $mul.ref(4, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i87);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i80, 1);
    call {:si_unique_call 516} {:cexpr "req_pos"} boogie_si_record_i32($i91);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb42;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i46 := $i42;
    goto $bb25;

  $bb25:
    call $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p58, $p59, $p60, $i61, $i62, $i63, $i69, $i70, $i71, $i72, $i46 := zd_mac_config_beacon_loop_$bb25($p3, $p5, $i40, $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p58, $p59, $p60, $i61, $i62, $i63, $i69, $i70, $i71, $i72, $i46);
    goto $bb25_last;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i48 := zd_ioread32_locked($p47, $p3, $sub.i16(0, 26988));
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 502} {:cexpr "r"} boogie_si_record_i32($i48);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i50 := $i48;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, jiffies);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i52 := $sub.i64($i51, $i46);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i53 := $sge.i64($i52, 0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i69 := $i46;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} msleep(20);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p3);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 2);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i72 == 1);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb37:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i69;
    goto $bb37_dummy;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, jiffies);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 25);
    call {:si_unique_call 503} {:cexpr "message_jiffies"} boogie_si_record_i64($i55);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} dev_err.ref.ref($p60, .str.152);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, jiffies);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i62 := $sub.i64($i61, $i40);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i63 := $sge.i64($i62, 0);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i69 := $i55;
    goto $bb36;

  $bb32:
    assume $i63 == 1;
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} dev_err.ref.ref($p68, .str.153);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} zd_mac_free_cur_beacon_locked($p5);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} kfree_skb($p1);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(11344, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} mutex_unlock($p167);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p23);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} kfree($p168);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p172, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} dev_warn.ref.ref($p173, .str.155);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} usb_queue_reset_device($p177);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i165 := $sub.i32(0, 110);
    goto $bb86;

  $bb27:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i34 := $i50;
    goto $bb14;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p3);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 2);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb18;

  $bb19:
    assume $i38 == 1;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 16);
    goto $bb14;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb14;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i29, $p30 := $i27, $p1;
    goto $bb10;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i14, $p15 := $sub.i32(0, 12), $p1;
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i14, $p15 := 0, $p1;
    goto $bb3;

  $bb71_dummy:
    assume false;
    return;

  $bb62_last:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb57_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    goto $bb57_dummy;

  $bb48_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2194;

  $bb37_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2110;
}



const zd_chip_enable_hwint: ref;

axiom zd_chip_enable_hwint == $sub.ref(0, 505405);

procedure zd_chip_enable_hwint($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_chip_enable_hwint($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} mutex_lock_nested($p1, 0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i2 := zd_iowrite32_locked($p0, 5177344, $sub.i16(0, 27376));
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 535} {:cexpr "r"} boogie_si_record_i32($i2);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} mutex_unlock($p3);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const zd_set_beacon_interval: ref;

axiom zd_set_beacon_interval == $sub.ref(0, 506437);

procedure zd_set_beacon_interval($p0: ref, $i1: i16, $i2: i8, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_set_beacon_interval($p0: ref, $i1: i16, $i2: i8, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} {:cexpr "zd_set_beacon_interval:arg:interval"} boogie_si_record_i16($i1);
    call {:si_unique_call 538} {:cexpr "zd_set_beacon_interval:arg:dtim_period"} boogie_si_record_i8($i2);
    call {:si_unique_call 539} {:cexpr "zd_set_beacon_interval:arg:type"} boogie_si_record_i32($i3);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} mutex_lock_nested($p4, 0);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i9 := set_beacon_interval($p0, $i6, $i8, $i3);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 542} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} mutex_unlock($p10);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 507469);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 545} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 547} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const set_rts_cts: ref;

axiom set_rts_cts == $sub.ref(0, 508501);

procedure set_rts_cts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation set_rts_cts($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} {:cexpr "set_rts_cts:arg:short_preamble"} boogie_si_record_i32($i1);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(11344, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} mutex_lock_nested($p3, 0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_100 := zd_chip_set_rts_cts_rate_locked($p4, $i1);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(11344, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} mutex_unlock($p7);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const zd_chip_set_rts_cts_rate_locked: ref;

axiom zd_chip_set_rts_cts_rate_locked == $sub.ref(0, 509533);

procedure zd_chip_set_rts_cts_rate_locked($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_chip_set_rts_cts_rate_locked($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} {:cexpr "zd_chip_set_rts_cts_rate_locked:arg:preamble"} boogie_si_record_i32($i1);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} dev_printk.ref.ref.ref.ref.i32(.str.6, $p5, .str.24, .str.25, $i1);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i1, 9);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 0);
    call {:si_unique_call 554} {:cexpr "value"} boogie_si_record_i32($i7);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i1, 25);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, $i7);
    call {:si_unique_call 555} {:cexpr "value"} boogie_si_record_i32($i9);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 3);
    call {:si_unique_call 556} {:cexpr "value"} boogie_si_record_i32($i10);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 196608);
    call {:si_unique_call 557} {:cexpr "value"} boogie_si_record_i32($i11);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i12 := zd_iowrite32_locked($p0, $i11, $sub.i16(0, 27080));
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 559} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 510565);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.14, $p1);
    call {:si_unique_call 560} {:cexpr "a"} boogie_si_record_i32($i2);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 511597);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.14, $p1);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.14, $p4);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const set_beacon_interval: ref;

axiom set_beacon_interval == $sub.ref(0, 512629);

procedure set_beacon_interval($p0: ref, $i1: i16, $i2: i8, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation set_beacon_interval($p0: ref, $i1: i16, $i2: i8, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $p4 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 563} {:cexpr "set_beacon_interval:arg:interval"} boogie_si_record_i16($i1);
    call {:si_unique_call 564} {:cexpr "set_beacon_interval:arg:dtim_period"} boogie_si_record_i8($i2);
    call {:si_unique_call 565} {:cexpr "set_beacon_interval:arg:type"} boogie_si_record_i32($i3);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i7 := mutex_is_locked($p6);
    call {:si_unique_call 567} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 569} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i1);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i37, $i38 := 0, 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i37);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i39, 16);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, $i38);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i1);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i41, $i42);
    call {:si_unique_call 574} {:cexpr "b_interval"} boogie_si_record_i32($i43);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i44 := zd_iowrite32_locked($p0, $i43, $sub.i16(0, 27360));
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 576} {:cexpr "r"} boogie_si_record_i32($i44);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i47 := get_aw_pt_bi($p0, $p4);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 578} {:cexpr "r"} boogie_si_record_i32($i47);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i49 := set_aw_pt_bi($p0, $p4);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 580} {:cexpr "tmp___2"} boogie_si_record_i32($i49);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i46 := $i49;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i48 == 1;
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i46 := $i47;
    goto $bb27;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i45 == 1;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i46 := $i44;
    goto $bb27;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i3, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i3, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i37, $i38 := $i2, $i36;
    goto $bb24;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i36 := 33554432;
    goto $bb22;

  $bb12:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb17;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i36 := 16777216;
    goto $bb22;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb17;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.1);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.109);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str.3);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p16, .str.4);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.8, $p18);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 901);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p18, $i21);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p22, 1);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.9, $p23);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 571} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} dump_stack();
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} __dynamic_pr_debug.ref.ref.ref.i32.ref($p5, .str.4, .str.3, 901, .str.10);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const get_aw_pt_bi: ref;

axiom get_aw_pt_bi == $sub.ref(0, 513661);

procedure get_aw_pt_bi($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation get_aw_pt_bi($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i12: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(0, 2));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 27364));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(1, 2));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $sub.i16(0, 27356));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(2, 2));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $sub.i16(0, 27360));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i9 := zd_ioread32v_locked($p0, $p7, $p8, 3);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 584} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 585} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p11, 0, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const set_aw_pt_bi: ref;

axiom set_aw_pt_bi == $sub.ref(0, 514693);

procedure set_aw_pt_bi($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation set_aw_pt_bi($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i8: i16;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    call {:si_unique_call 587} {:cexpr "b_interval"} boogie_si_record_i16($i5);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i6, 5);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i11 := $ule.i32($i10, 3);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i8);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i15 := $uge.i32($i13, $i14);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i23 := $uge.i32($i20, $i22);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $sub.i16(0, 27364));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i31);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $sub.i16(0, 27356));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i37);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $sub.i16(0, 27360));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, $sub.i32(0, 65536));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i8);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i44, $i45);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i46);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p2);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $i50 := zd_iowrite32a_locked($p0, $p49, 3);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 589} {:cexpr "tmp"} boogie_si_record_i32($i50);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 1);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i8);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, $sub.i32(0, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb5;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i8 := 5;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 515725);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const zd_mac_match_cur_beacon: ref;

axiom zd_mac_match_cur_beacon == $sub.ref(0, 516757);

procedure zd_mac_match_cur_beacon($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation zd_mac_match_cur_beacon($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i32;
  var $i27: i1;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(224, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(224, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i12, $i14);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(224, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i26 := memcmp($p17, $p22, $i25);
    call {:si_unique_call 591} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const zd_chip_is_zd1211b: ref;

axiom zd_chip_is_zd1211b == $sub.ref(0, 517789);

procedure zd_chip_is_zd1211b($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation zd_chip_is_zd1211b($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11276, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i4 := $and.i8($i3, 1);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const zd_ioread32_locked: ref;

axiom zd_ioread32_locked == $sub.ref(0, 518821);

procedure zd_ioread32_locked($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_ioread32_locked($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i2);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i4 := zd_ioread32v_locked($p0, $p1, $p3, 1);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 594} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 519853);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    return;
}



const zd_mac_free_cur_beacon_locked: ref;

axiom zd_mac_free_cur_beacon_locked == $sub.ref(0, 520885);

procedure zd_mac_free_cur_beacon_locked($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation zd_mac_free_cur_beacon_locked($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(11344, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 598} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 600} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(224, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} kfree_skb($p28);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(224, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $0.ref);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.1);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p11, .str.156);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str.31);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.4);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.8, $p15);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 702);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p15, $i18);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p19, 1);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.9, $p20);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} dump_stack();
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.31, 702, .str.157);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 521917);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} free_($p0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    return;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 522949);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 523981);

procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    return;
}



const usb_queue_reset_device: ref;

axiom usb_queue_reset_device == $sub.ref(0, 525013);

procedure usb_queue_reset_device($p0: ref);
  free requires assertsPassed;



implementation usb_queue_reset_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 526045);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 607} $free($p0);
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 527077);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const disable_hwint: ref;

axiom disable_hwint == $sub.ref(0, 528109);

procedure disable_hwint($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation disable_hwint($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i1 := zd_iowrite32_locked($p0, 0, $sub.i16(0, 27376));
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 609} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const ieee80211_beacon_get_tim: ref;

axiom ieee80211_beacon_get_tim == $sub.ref(0, 529141);

procedure ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p4 := external_alloc();
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 530173);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 1} true;
    call {:si_unique_call 611} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 612} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const zd_chip_set_channel: ref;

axiom zd_chip_set_channel == $sub.ref(0, 531205);

procedure zd_chip_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_chip_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i11: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i5: i32;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} {:cexpr "zd_chip_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} mutex_lock_nested($p2, 0);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i3 := zd_chip_lock_phy_regs($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 616} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11280, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i9 := zd_rf_set_channel($p6, $i8);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 619} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i14 := update_channel_integration_and_calibration($p0, $i13);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 623} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i16 := patch_cck_gain($p0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 625} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i20 := patch_6m_band_edge($p0, $i19);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 627} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i22 := zd_iowrite32_locked($p0, 0, $sub.i16(0, 27584));
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 629} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i23 := zd_chip_unlock_phy_regs($p0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 621} {:cexpr "t"} boogie_si_record_i32($i23);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i26 := $i11;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i5 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} mutex_unlock($p27);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i11, 0);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb20;

  $bb21:
    assume $i25 == 1;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i26 := $i23;
    goto $bb23;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i21 == 1;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i11 := $i20;
    goto $bb7;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb7;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb7;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb7;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const zd_chip_lock_phy_regs: ref;

axiom zd_chip_lock_phy_regs == $sub.ref(0, 532237);

procedure zd_chip_lock_phy_regs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_chip_lock_phy_regs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 633} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 635} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i26 := zd_ioread32_locked($p0, $p1, $sub.i16(0, 27008));
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 641} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, $sub.i32(0, 129));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i34);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p1);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i36 := zd_iowrite32_locked($p0, $i35, $sub.i16(0, 27008));
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 644} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $i36;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} dev_err.ref.ref.i32($p41, .str.20, $i36);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} dev_err.ref.ref.i32($p31, .str.19, $i26);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i32 := $i26;
    goto $bb9;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.1);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p11, .str.18);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str.3);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.4);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.8, $p15);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 523);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p15, $i18);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p19, 1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.9, $p20);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 637} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} dump_stack();
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 523, .str.10);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_rf_set_channel: ref;

axiom zd_rf_set_channel == $sub.ref(0, 533269);

procedure zd_rf_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_rf_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 647} {:cexpr "zd_rf_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p3 := zd_rf_to_chip($p0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 650} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 652} {:cexpr "tmp___2"} boogie_si_record_i64($i9);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i1);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i1);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i30, 14);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p32 := zd_rf_to_chip($p0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.15, $p34);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} dev_printk.ref.ref.ref.ref.i32(.str.6, $p36, .str.54, .str.52, $i37);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i1);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    call {:si_unique_call 659} $i42 := devirtbounce.2($p39, $p0, $i41);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    call {:si_unique_call 660} {:cexpr "r"} boogie_si_record_i32($i42);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i43 := $sge.i32($i42, 0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29 := $i42;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i1);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb9;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.1);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.52);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.49);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.4);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.8, $p16);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 123);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p16, $i19);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p20, 1);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.9, $p21);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 654} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} dump_stack();
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.49, 123, .str.53);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const update_channel_integration_and_calibration: ref;

axiom update_channel_integration_and_calibration == $sub.ref(0, 534301);

procedure update_channel_integration_and_calibration($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation update_channel_integration_and_calibration($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 662} {:cexpr "update_channel_integration_and_calibration:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11280, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i4 := zd_rf_should_update_pwr_int($p3);
    call {:si_unique_call 664} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i9 := update_pwr_int($p0, $i8);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 666} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i11 := zd_chip_is_zd1211b($p0);
    call {:si_unique_call 668} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $sub.i16(0, 28396));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 40);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, 0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, $sub.i16(0, 28396));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, 42);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i1);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i27 := update_ofdm_cal($p0, $i26);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    call {:si_unique_call 670} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i1);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $i31 := update_pwr_cal($p0, $i30);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    call {:si_unique_call 672} {:cexpr "r"} boogie_si_record_i32($i31);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p2);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $i34 := zd_iowrite16a_locked($p0, $p33, 3);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 674} {:cexpr "r"} boogie_si_record_i32($i34);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i6 := $i34;
    goto $bb3;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i6 := $i31;
    goto $bb3;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i6 := $i27;
    goto $bb3;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const patch_cck_gain: ref;

axiom patch_cck_gain == $sub.ref(0, 535333);

procedure patch_cck_gain($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation patch_cck_gain($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i16;
  var $i48: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(11578, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11280, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i10 := zd_rf_should_patch_cck_gain($p9);
    call {:si_unique_call 678} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i13 := mutex_is_locked($p12);
    call {:si_unique_call 680} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 682} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i35 := zd_ioread32_locked($p0, $p1, $sub.i16(0, 1988));
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    call {:si_unique_call 688} {:cexpr "r"} boogie_si_record_i32($i35);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 255);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} dev_printk.ref.ref.ref.ref.i32(.str.6, $p40, .str.125, .str.146, $i42);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 255);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i48 := zd_iowrite16_locked($p0, $i47, $sub.i16(0, 28484));
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    call {:si_unique_call 691} {:cexpr "tmp___3"} boogie_si_record_i32($i48);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i8 := $i48;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i8 := $i35;
    goto $bb3;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p19, .str.1);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p20, .str.146);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p21, .str.3);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p22, .str.4);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.8, $p24);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 1266);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p24, $i27);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p28, 1);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.9, $p29);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 684} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} dump_stack();
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 1266, .str.10);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const patch_6m_band_edge: ref;

axiom patch_6m_band_edge == $sub.ref(0, 536365);

procedure patch_6m_band_edge($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.0, $M.40, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation patch_6m_band_edge($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 693} {:cexpr "patch_6m_band_edge:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 695} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 697} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(11578, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11280, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i1);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i35 := zd_rf_patch_6m_band_edge($p32, $i34);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    call {:si_unique_call 703} {:cexpr "tmp___2"} boogie_si_record_i32($i35);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i31 := $i35;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.1);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p11, .str.147);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str.3);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.4);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.8, $p15);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 583);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p15, $i18);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p19, 1);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.9, $p20);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 699} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} dump_stack();
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 583, .str.10);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_chip_unlock_phy_regs: ref;

axiom zd_chip_unlock_phy_regs == $sub.ref(0, 537397);

procedure zd_chip_unlock_phy_regs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_chip_unlock_phy_regs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 707} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 709} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i26 := zd_ioread32_locked($p0, $p1, $sub.i16(0, 27008));
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 715} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p1);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 128);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i34);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p1);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i36 := zd_iowrite32_locked($p0, $i35, $sub.i16(0, 27008));
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 718} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $i36;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} dev_err.ref.ref.i32($p41, .str.20, $i36);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} dev_err.ref.ref.i32($p31, .str.19, $i26);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i32 := $i26;
    goto $bb9;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.1);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p11, .str.21);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str.3);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.4);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.8, $p15);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 543);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p15, $i18);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p19, 1);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.9, $p20);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 711} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} dump_stack();
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 543, .str.10);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_rf_patch_6m_band_edge: ref;

axiom zd_rf_patch_6m_band_edge == $sub.ref(0, 538429);

procedure zd_rf_patch_6m_band_edge($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.10, $M.13, $CurrAddr, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_rf_patch_6m_band_edge($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} {:cexpr "zd_rf_patch_6m_band_edge:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 721} $i11 := devirtbounce.2($p8, $p0, $i10);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 722} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const zd_rf_should_patch_cck_gain: ref;

axiom zd_rf_should_patch_cck_gain == $sub.ref(0, 539461);

procedure zd_rf_should_patch_cck_gain($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation zd_rf_should_patch_cck_gain($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i8($i2, 1);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i4 := $and.i8($i3, 1);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const zd_iowrite16_locked: ref;

axiom zd_iowrite16_locked == $sub.ref(0, 540493);

procedure zd_iowrite16_locked($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_iowrite16_locked($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 725} {:cexpr "zd_iowrite16_locked:arg:value"} boogie_si_record_i16($i1);
    call {:si_unique_call 726} {:cexpr "zd_iowrite16_locked:arg:addr"} boogie_si_record_i16($i2);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i6 := mutex_is_locked($p5);
    call {:si_unique_call 728} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 730} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i2);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i31 := zd_usb_iowrite16v($p30, $p3, 1);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    call {:si_unique_call 736} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.105);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, .str.101);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p15, .str.4);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.8, $p17);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 837);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p17, $i20);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p21, 1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.9, $p22);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 732} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} dump_stack();
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.101, 837, .str.10);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_usb_iowrite16v: ref;

axiom zd_usb_iowrite16v == $sub.ref(0, 541525);

procedure zd_usb_iowrite16v($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_usb_iowrite16v($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i7: i32;
  var $i6: i32;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} {:cexpr "zd_usb_iowrite16v:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} zd_usb_iowrite16v_async_start($p0);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i3 := zd_usb_iowrite16v_async($p0, $p1, $i2);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    call {:si_unique_call 740} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i7 := zd_usb_iowrite16v_async_end($p0, 50);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 743} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_101 := zd_usb_iowrite16v_async_end($p0, 0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb3;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const zd_rf_should_update_pwr_int: ref;

axiom zd_rf_should_update_pwr_int == $sub.ref(0, 542557);

procedure zd_rf_should_update_pwr_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation zd_rf_should_update_pwr_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, 1);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const update_pwr_int: ref;

axiom update_pwr_int == $sub.ref(0, 543589);

procedure update_pwr_int($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation update_pwr_int($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} {:cexpr "update_pwr_int:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11520, 1)), $mul.ref($i4, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    call {:si_unique_call 745} {:cexpr "value"} boogie_si_record_i8($i7);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i10 := zd_iowrite16_locked($p0, $i9, $sub.i16(0, 28548));
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 747} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const update_ofdm_cal: ref;

axiom update_ofdm_cal == $sub.ref(0, 544621);

procedure update_ofdm_cal($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation update_ofdm_cal($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i16;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i16;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i16;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 749} {:cexpr "update_ofdm_cal:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 28404));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1)), $mul.ref(0, 14)), $mul.ref($i7, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i16($i11);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i12);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $sub.i16(0, 28408));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i1);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, $sub.i32(0, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1)), $mul.ref(1, 14)), $mul.ref($i19, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i16($i23);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $i24);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $sub.i16(0, 28412));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i1);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, $sub.i32(0, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1)), $mul.ref(2, 14)), $mul.ref($i31, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i16($i35);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, $i36);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i40 := zd_iowrite16a_locked($p0, $p39, 3);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    call {:si_unique_call 751} {:cexpr "tmp"} boogie_si_record_i32($i40);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const update_pwr_cal: ref;

axiom update_pwr_cal == $sub.ref(0, 545653);

procedure update_pwr_cal($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation update_pwr_cal($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} {:cexpr "update_pwr_cal:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11506, 1)), $mul.ref($i4, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    call {:si_unique_call 753} {:cexpr "value"} boogie_si_record_i8($i7);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i10 := zd_iowrite16_locked($p0, $i9, $sub.i16(0, 28400));
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 755} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const zd_iowrite16a_locked: ref;

axiom zd_iowrite16a_locked == $sub.ref(0, 546685);

procedure zd_iowrite16a_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_iowrite16a_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i46: i32;
  var $i47: i1;
  var $i35: i32;
  var $i48: i32;
  var $i34: i32;
  var $i44: i32;
  var $i45: i32;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $p55: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i29: i32;
  var $p65: ref;
  var $i66: i32;
  var $i61: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 757} {:cexpr "zd_iowrite16a_locked:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 759} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 761} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} zd_usb_iowrite16v_async_start($p27);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32(0, $i2);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i66 := zd_usb_iowrite16v_async_end($p65, 50);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    call {:si_unique_call 775} {:cexpr "tmp___2"} boogie_si_record_i32($i66);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i61 := $i66;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb10;

  $bb10:
    call $i30, $i31, $i32, $i33, $i36, $i37, $p39, $i40, $i41, $i42, $i43, $i46, $i47, $i35, $i48, $i34, $i44, $i45, $p49, $i50, $p51, $i52, $i53, $i54, $i62, $i63, $i64, $i29 := zd_iowrite16a_locked_loop_$bb10($p0, $p1, $i2, $i30, $i31, $i32, $i33, $i36, $i37, $p39, $i40, $i41, $i42, $i43, $i46, $i47, $i35, $i48, $i34, $i44, $i45, $p49, $i50, $p51, $i52, $i53, $i54, $i62, $i63, $i64, $i29);
    goto $bb10_last;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i2, $i29);
    call {:si_unique_call 767} {:cexpr "max"} boogie_si_record_i32($i30);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i30, 15);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i30;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i33 := $ult.i32(0, $i32);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i34 := 0;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i44, $i45 := $i34, 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i29);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p1, $mul.ref($i50, 4));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i52 := zd_usb_iowrite16v_async($p49, $p51, $i44);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    call {:si_unique_call 769} {:cexpr "r"} boogie_si_record_i32($i52);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i44, $i45);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, $i29);
    call {:si_unique_call 773} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i64 := $ult.i32($i63, $i2);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i64 == 1);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb31:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i63;
    goto $bb31_dummy;

  $bb27:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} vslice_dummy_var_102 := zd_usb_iowrite16v_async_end($p55, 0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} dev_printk.ref.ref.ref.ref.i32(.str.6, $p60, .str.11, .str.9, $i54);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i61 := $i54;
    goto $bb29;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb18;

  $bb18:
    call $i36, $i37, $p39, $i40, $i41, $i42, $i43, $i46, $i47, $i35, $i48 := zd_iowrite16a_locked_loop_$bb18($p1, $i32, $i36, $i37, $p39, $i40, $i41, $i42, $i43, $i46, $i47, $i35, $i48, $i29);
    goto $bb18_last;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i29, $i35);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref($i37, 4)), $mul.ref(0, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i43 := $i35;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i35, 1);
    call {:si_unique_call 770} {:cexpr "j"} boogie_si_record_i32($i46);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32($i46, $i32);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i48 := $i46;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i34 := $i48;
    goto $bb17;

  $bb24:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i35 := $i46;
    goto $bb24_dummy;

  $bb20:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i44, $i45 := $i43, 1;
    goto $bb22;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i32 := 15;
    goto $bb14;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.1);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.9);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.3);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.4);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.8, $p16);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 203);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p16, $i19);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p20, 1);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.9, $p21);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 763} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} dump_stack();
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.3, 203, .str.10);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3280;

  $bb31_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3268;
}



const zd_rf_to_chip: ref;

axiom zd_rf_to_chip == $sub.ref(0, 547717);

procedure zd_rf_to_chip($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_rf_to_chip($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 11280), 11584));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const zd_write_mac_addr: ref;

axiom zd_write_mac_addr == $sub.ref(0, 548749);

procedure zd_write_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_write_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 27120));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27116));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i12 := zd_write_mac_addr_common($p0, $p1, $p11, .str.14);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    call {:si_unique_call 778} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const zd_mac_free_cur_beacon: ref;

axiom zd_mac_free_cur_beacon == $sub.ref(0, 549781);

procedure zd_mac_free_cur_beacon($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation zd_mac_free_cur_beacon($p0: ref)
{
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(11344, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} mutex_lock_nested($p2, 0);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} zd_mac_free_cur_beacon_locked($p0);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(11344, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} mutex_unlock($p4);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    return;
}



const zd_write_mac_addr_common: ref;

axiom zd_write_mac_addr_common == $sub.ref(0, 550813);

procedure zd_write_mac_addr_common($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_write_mac_addr_common($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 783} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p6, $p7, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 784} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p10, $p11, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} dev_printk.ref.ref.ref.ref.ref(.str.6, $p50, .str.108, .str.107, $p3);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} mutex_lock_nested($p51, 0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p4);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i53 := zd_iowrite32a_locked($p0, $p52, 2);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    call {:si_unique_call 789} {:cexpr "r"} boogie_si_record_i32($i53);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} mutex_unlock($p54);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 24);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 16);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i17, $i21);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 8);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i22, $i26);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p1);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i27, $i29);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i36 := $shl.i32($i35, 8);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i36, $i39);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i40);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} dev_printk.ref.ref.ref.ref.ref.ref(.str.6, $p46, .str.106, .str.107, $p3, $p1);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_mac_and_bssid: ref;

axiom set_mac_and_bssid == $sub.ref(0, 551845);

procedure set_mac_and_bssid($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation set_mac_and_bssid($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 304)), $mul.ref(256, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i11 := zd_write_mac_addr($p6, $p10);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    call {:si_unique_call 792} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 3);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 304)), $mul.ref(256, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i22 := zd_write_bssid($p17, $p21);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    call {:si_unique_call 796} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i5 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i16 := set_rx_filter($p0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    call {:si_unique_call 794} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i5 := $i16;
    goto $bb3;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb3;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;
}



const zd_write_bssid: ref;

axiom zd_write_bssid == $sub.ref(0, 552877);

procedure zd_write_bssid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_write_bssid($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 27112));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27108));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i12 := zd_write_mac_addr_common($p0, $p1, $p11, .str.15);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    call {:si_unique_call 799} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 553909);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 801} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    return;
}



const zd_chip_disable_rxtx: ref;

axiom zd_chip_disable_rxtx == $sub.ref(0, 554941);

procedure zd_chip_disable_rxtx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.16, $M.18, $M.20, $M.22;



implementation zd_chip_disable_rxtx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} mutex_lock_nested($p1, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} zd_tx_watchdog_disable($p2);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} zd_usb_disable_rx($p3);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} zd_usb_disable_tx($p4);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} mutex_unlock($p5);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    return;
}



const beacon_disable: ref;

axiom beacon_disable == $sub.ref(0, 555973);

procedure beacon_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.16, $M.18, $M.20, $M.22, $CurrAddr;



implementation beacon_disable($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var vslice_dummy_var_103: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.166);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_103 := ldv_cancel_delayed_work_sync_93($p7);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} zd_mac_free_cur_beacon($p0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    return;
}



const housekeeping_disable: ref;

axiom housekeeping_disable == $sub.ref(0, 557005);

procedure housekeeping_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation housekeeping_disable($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var vslice_dummy_var_104: i1;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.170);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} vslice_dummy_var_104 := ldv_cancel_delayed_work_sync_94($p7);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_105 := zd_chip_control_leds($p9, 0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const ldv_flush_workqueue_91: ref;

axiom ldv_flush_workqueue_91 == $sub.ref(0, 558037);

procedure ldv_flush_workqueue_91($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $M.17, $M.19, $M.21, $M.23, $CurrAddr, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.29, $M.39;



implementation ldv_flush_workqueue_91($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} flush_workqueue($p0);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} call_and_disable_all_3(2);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const zd_chip_switch_radio_off: ref;

axiom zd_chip_switch_radio_off == $sub.ref(0, 559069);

procedure zd_chip_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.40, $CurrAddr, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_chip_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} mutex_lock_nested($p1, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11280, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i3 := zd_switch_radio_off($p2);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 817} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} mutex_unlock($p4);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const zd_chip_disable_int: ref;

axiom zd_chip_disable_int == $sub.ref(0, 560101);

procedure zd_chip_disable_int($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.16, $M.18, $M.20, $M.22;



implementation zd_chip_disable_int($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var vslice_dummy_var_106: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} mutex_lock_nested($p1, 0);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} zd_usb_disable_int($p2);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} mutex_unlock($p3);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p4 := zd_chip_to_mac($p0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(12296, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_106 := ldv_cancel_work_sync_42($p5);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    return;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 561133);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    return;
}



const skb_dequeue: ref;

axiom skb_dequeue == $sub.ref(0, 562165);

procedure skb_dequeue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_dequeue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p1 := external_alloc();
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 563197);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_disable_int: ref;

axiom zd_usb_disable_int == $sub.ref(0, 564229);

procedure zd_usb_disable_int($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0;



implementation zd_usb_disable_int($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p1 := zd_usb_to_usbdev($p0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} ldv_spin_lock();
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    call {:si_unique_call 830} {:cexpr "buffer_dma"} boogie_si_record_i64($i12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} spin_unlock_irqrestore($p14, $u0);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} usb_kill_urb($p4);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} dev_printk.ref.ref.ref.ref.ref(.str.6, $p17, .str.64, .str.65, $p4);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} usb_free_urb($p4);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p10);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} usb_free_coherent($p1, 64, $p10, $i12);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} spin_unlock_irqrestore($p7, $u0);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_chip_to_mac: ref;

axiom zd_chip_to_mac == $sub.ref(0, 565261);

procedure zd_chip_to_mac($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_chip_to_mac($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_cancel_work_sync_42: ref;

axiom ldv_cancel_work_sync_42 == $sub.ref(0, 566293);

procedure ldv_cancel_work_sync_42($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_cancel_work_sync_42($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i1 := cancel_work_sync($p0);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 837} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 838} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} disable_work_3($p0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 567325);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 840} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 841} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_3: ref;

axiom disable_work_3 == $sub.ref(0, 568357);

procedure disable_work_3($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation disable_work_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i1 := $M.16;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i3 := $M.16;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.18;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i11 := $M.18;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.20;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i19 := $M.20;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.22;
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i27 := $M.22;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.23;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 845} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.21;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 844} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.19;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 843} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.17;
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 842} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 569389);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 570421);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 847} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    return;
}



const zd_switch_radio_off: ref;

axiom zd_switch_radio_off == $sub.ref(0, 571453);

procedure zd_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.40, $CurrAddr, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 851} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 853} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i26 := zd_chip_lock_phy_regs($p2);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    call {:si_unique_call 859} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    call {:si_unique_call 860} $i31 := devirtbounce.4($p30, $p0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 861} {:cexpr "t"} boogie_si_record_i32($i31);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i32 := zd_chip_unlock_phy_regs($p2);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 863} {:cexpr "r"} boogie_si_record_i32($i32);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i31, 0);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i28 := $i34;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i34 := $i31;
    goto $bb13;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb9;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.1);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p11, .str.56);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str.49);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.4);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.8, $p15);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 158);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p15, $i18);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p19, 1);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.9, $p20);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 855} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} dump_stack();
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.49, 158, .str.10);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 572485);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_3: ref;

axiom call_and_disable_all_3 == $sub.ref(0, 573517);

procedure call_and_disable_all_3($i0: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $M.17, $M.19, $M.21, $M.23, $CurrAddr, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.29, $M.39;



implementation call_and_disable_all_3($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} {:cexpr "call_and_disable_all_3:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i1 := $M.16;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.18;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.20;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.22;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p12 := $M.23;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} call_and_disable_work_3($p12);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p9 := $M.21;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} call_and_disable_work_3($p9);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p6 := $M.19;
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} call_and_disable_work_3($p6);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p3 := $M.17;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} call_and_disable_work_3($p3);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const call_and_disable_work_3: ref;

axiom call_and_disable_work_3 == $sub.ref(0, 574549);

procedure call_and_disable_work_3($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $M.17, $M.19, $M.21, $M.23, $CurrAddr, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.29, $M.39;



implementation call_and_disable_work_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i1 := $M.16;
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i3 := $M.16;
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.18;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i11 := $M.18;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.20;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i19 := $M.20;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.22;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i27 := $M.22;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p30 := $M.23;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} link_led_handler($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 876} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p22 := $M.21;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} link_led_handler($p0);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 874} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p14 := $M.19;
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} link_led_handler($p0);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 872} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p6 := $M.17;
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} link_led_handler($p0);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 870} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const link_led_handler: ref;

axiom link_led_handler == $sub.ref(0, 575581);

procedure link_led_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.29, $M.39;



implementation link_led_handler($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var vslice_dummy_var_107: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13688)), $mul.ref(0, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13688)), $mul.ref(12464, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i5 := constant_test_bit(0, $p4);
    call {:si_unique_call 878} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13688)), $mul.ref(11584, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} spin_lock_irq($p7);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13688)), $mul.ref(12456, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 881} {:cexpr "is_associated"} boogie_si_record_i32($i9);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13688)), $mul.ref(11584, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} spin_unlock_irq($p10);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i9, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i12 := (if $i11 == 1 then 2 else 1);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i13 := zd_chip_control_leds($p3, $i12);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 884} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $M.1;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} vslice_dummy_var_107 := queue_delayed_work($p20, $p22, 250);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11744), 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} dev_printk.ref.ref.ref.ref.i32(.str.6, $p19, .str.171, .str.172, $i13);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 576613);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const zd_chip_control_leds: ref;

axiom zd_chip_control_leds == $sub.ref(0, 577645);

procedure zd_chip_control_leds($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_chip_control_leds($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i16;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $i39: i16;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $p67: ref;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $i76: i16;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i16;
  var $p89: ref;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i98: i16;
  var $p100: ref;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i16;
  var $i111: i32;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $i22: i32;
  var $p120: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 890} {:cexpr "zd_chip_control_leds:arg:status"} boogie_si_record_i32($i1);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i5 := fw_reg_addr($p0, 3);
    call {:si_unique_call 892} {:cexpr "tmp"} boogie_si_record_i16($i5);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 2));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i5);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $sub.i16(0, 27068));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i8 := fw_reg_addr($p0, 3);
    call {:si_unique_call 894} {:cexpr "tmp___0"} boogie_si_record_i16($i8);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i8);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $sub.i16(0, 27068));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} mutex_lock_nested($p17, 0);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i20 := zd_ioread16v_locked($p0, $p18, $p19, 2);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    call {:si_unique_call 897} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 256);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then 512 else 256);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    call {:si_unique_call 899} {:cexpr "other_led"} boogie_si_record_i16($i28);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} mutex_unlock($p120);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, 1);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.0, $p81);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i83 := $sext.i16.i32($i82);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i84 := $sext.i16.i32($i28);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i85 := $xor.i32($i84, $sub.i32(0, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i83, $i85);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i16($i86);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $i87);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p91);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i93, $i96);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p100, $i98);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 2));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.0, $p105);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i103, $i107);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i108 == 1);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.0, $p109);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i111, $i115);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p4);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i118 := zd_iowrite16a_locked($p0, $p117, 2);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 903} {:cexpr "r"} boogie_si_record_i32($i118);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i119 == 1;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i22 := $i118;
    goto $bb3;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb21;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, 0);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i46 := $sext.i16.i32($i45);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i47 := $sext.i16.i32($i28);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i48 := $xor.i32($i47, $sub.i32(0, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i46, $i48);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $i50);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i53 := get_seconds();
    call {:si_unique_call 901} {:cexpr "tmp___1"} boogie_si_record_i64($i53);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i54 := $urem.i64($i53, 3);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i71, $i74);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p78, $i76);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i59 := $sext.i16.i32($i58);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i62 := $sext.i16.i32($i61);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i63 := $xor.i32($i62, $sub.i32(0, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i59, $i63);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p67, $i65);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb6:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb12;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, 0);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 64767);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $i39);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb3;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 578677);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i3 := ldv_queue_delayed_work_on_64(8192, $p0, $p1, $i2);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 906} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_64: ref;

axiom ldv_queue_delayed_work_on_64 == $sub.ref(0, 579709);

procedure ldv_queue_delayed_work_on_64($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation ldv_queue_delayed_work_on_64($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} {:cexpr "ldv_queue_delayed_work_on_64:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 908} {:cexpr "ldv_queue_delayed_work_on_64:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 910} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 911} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} activate_work_3($p8, 2);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 580741);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 913} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 914} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 1} true;
    call {:si_unique_call 915} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 916} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const activate_work_3: ref;

axiom activate_work_3 == $sub.ref(0, 581773);

procedure activate_work_3($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation activate_work_3($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} {:cexpr "activate_work_3:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i2 := $M.16;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.18;
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.20;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.22;
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $M.23 := $p0;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $M.22 := $i1;
    call {:si_unique_call 921} {:cexpr "ldv_work_3_3"} boogie_si_record_i32($i1);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.20 := $i1;
    call {:si_unique_call 920} {:cexpr "ldv_work_3_2"} boogie_si_record_i32($i1);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $M.18 := $i1;
    call {:si_unique_call 919} {:cexpr "ldv_work_3_1"} boogie_si_record_i32($i1);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.16 := $i1;
    call {:si_unique_call 918} {:cexpr "ldv_work_3_0"} boogie_si_record_i32($i1);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fw_reg_addr: ref;

axiom fw_reg_addr == $sub.ref(0, 582805);

procedure fw_reg_addr($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;



implementation fw_reg_addr($p0: ref, $i1: i16) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} {:cexpr "fw_reg_addr:arg:offset"} boogie_si_record_i16($i1);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11504, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, $i5);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const get_seconds: ref;

axiom get_seconds == $sub.ref(0, 583837);

procedure get_seconds() returns ($r: i64);
  free requires assertsPassed;



implementation get_seconds() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 923} $i0 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 924} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_cancel_delayed_work_sync_94: ref;

axiom ldv_cancel_delayed_work_sync_94 == $sub.ref(0, 584869);

procedure ldv_cancel_delayed_work_sync_94($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_cancel_delayed_work_sync_94($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 926} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 927} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} disable_work_3($p5);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 585901);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 930} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_cancel_delayed_work_sync_93: ref;

axiom ldv_cancel_delayed_work_sync_93 == $sub.ref(0, 586933);

procedure ldv_cancel_delayed_work_sync_93($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_cancel_delayed_work_sync_93($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 932} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 933} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} disable_work_3($p5);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const zd_tx_watchdog_disable: ref;

axiom zd_tx_watchdog_disable == $sub.ref(0, 587965);

procedure zd_tx_watchdog_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.20, $M.22;



implementation zd_tx_watchdog_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i8;
  var $p13: ref;
  var vslice_dummy_var_108: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(588, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} dev_printk.ref.ref.ref.ref(.str.6, $p9, .str.26, .str.69);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(588, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i11, $sub.i8(0, 3));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_108 := ldv_cancel_delayed_work_sync_388($p13);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_usb_disable_rx: ref;

axiom zd_usb_disable_rx == $sub.ref(0, 588997);

procedure zd_usb_disable_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.16, $M.18, $M.20, $M.22;



implementation zd_usb_disable_rx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var vslice_dummy_var_109: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} mutex_lock_nested($p2, 0);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} __zd_usb_disable_rx($p0);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} mutex_unlock($p3);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(456, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} tasklet_kill($p4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(232, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_109 := ldv_cancel_delayed_work_sync_384($p5);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_disable_tx: ref;

axiom zd_usb_disable_tx == $sub.ref(0, 590029);

procedure zd_usb_disable_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.13;



implementation zd_usb_disable_tx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var vslice_dummy_var_110: i64;
  var vslice_dummy_var_111: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(0, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} atomic_set($p2, 0);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(400, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} usb_kill_anchored_urbs($p3);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} ldv_spin_lock();
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(304, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i5 := skb_queue_empty($p4);
    call {:si_unique_call 946} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 947} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i7);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 949} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_110 := ldv__builtin_expect($i15, 0);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(584, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 952} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i20);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 954} {:cexpr "tmp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_111 := ldv__builtin_expect($i28, 0);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(584, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} spin_unlock_irqrestore($p31, $u0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} warn_slowpath_null(.str.60, 904);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} warn_slowpath_null(.str.60, 903);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skb_queue_empty: ref;

axiom skb_queue_empty == $sub.ref(0, 591061);

procedure skb_queue_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 592093);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    return;
}



const __zd_usb_disable_rx: ref;

axiom __zd_usb_disable_rx == $sub.ref(0, 593125);

procedure __zd_usb_disable_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0;



implementation __zd_usb_disable_rx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i10: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} ldv_spin_lock();
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10112, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 960} {:cexpr "count"} boogie_si_record_i32($i5);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} spin_unlock_irqrestore($p6, $u0);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p3);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i5);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p3);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} kfree($p19);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ldv_spin_lock();
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10112, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} spin_unlock_irqrestore($p22, $u0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb8;

  $bb8:
    call $i11, $p12, $p13, $i14, $p15, $p16, $i17, $i18, $i10 := __zd_usb_disable_rx_loop_$bb8($p3, $i5, $i11, $p12, $p13, $i14, $p15, $p16, $i17, $i18, $i10);
    goto $bb8_last;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p3, $mul.ref($i11, 8));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} usb_kill_urb($p13);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i10);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p3, $mul.ref($i14, 8));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} free_rx_urb($p16);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i10, 1);
    call {:si_unique_call 964} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32($i17, $i5);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb10_dummy;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4120;
}



const tasklet_kill: ref;

axiom tasklet_kill == $sub.ref(0, 594157);

procedure tasklet_kill($p0: ref);
  free requires assertsPassed;



implementation tasklet_kill($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cancel_delayed_work_sync_384: ref;

axiom ldv_cancel_delayed_work_sync_384 == $sub.ref(0, 595189);

procedure ldv_cancel_delayed_work_sync_384($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_cancel_delayed_work_sync_384($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 969} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 970} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} disable_work_3($p5);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const free_rx_urb: ref;

axiom free_rx_urb == $sub.ref(0, 596221);

procedure free_rx_urb($p0: ref);
  free requires assertsPassed;



implementation free_rx_urb($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} usb_free_coherent($p4, $i7, $p9, $i11);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} usb_free_urb($p0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_cancel_delayed_work_sync_388: ref;

axiom ldv_cancel_delayed_work_sync_388 == $sub.ref(0, 597253);

procedure ldv_cancel_delayed_work_sync_388($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_cancel_delayed_work_sync_388($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 975} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 976} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} disable_work_3($p5);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const zd_usb_init_hw: ref;

axiom zd_usb_init_hw == $sub.ref(0, 598285);

procedure zd_usb_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.33, $M.34, $CurrAddr, $M.29, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.40, $M.10, $M.39, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.17, $M.19, $M.21, $M.23;



implementation zd_usb_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i8;
  var $i27: i8;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $p1 := zd_usb_to_mac($p0);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} dev_printk.ref.ref.ref.ref(.str.6, $p4, .str.26, .str.70);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i5 := upload_firmware($p0);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    call {:si_unique_call 981} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p11 := zd_usb_to_usbdev($p0);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i12 := usb_reset_configuration($p11);
    call {:si_unique_call 985} {:cexpr "r"} boogie_si_record_i32($i12);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.24, $p17);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i19 := zd_mac_init_hw($p18);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    call {:si_unique_call 988} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11276, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i26 := $and.i8($i25, $sub.i8(0, 3));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i27 := $or.i8($i26, 2);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i27);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} dev_printk.ref.ref.ref.ref.i32(.str.6, $p23, .str.73, .str.70, $i19);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} dev_printk.ref.ref.ref.ref.i32(.str.6, $p16, .str.72, .str.70, $i12);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} dev_err.ref.ref.i32($p9, .str.71, $i5);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb3;

  SeqInstr_382:
    assume !assertsPassed;
    return;
}



const zd_chip_enable_int: ref;

axiom zd_chip_enable_int == $sub.ref(0, 599317);

procedure zd_chip_enable_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $CurrAddr, assertsPassed;



implementation zd_chip_enable_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} mutex_lock_nested($p1, 0);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i3 := zd_usb_enable_int($p2);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    call {:si_unique_call 992} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} mutex_unlock($p4);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const zd_chip_set_basic_rates: ref;

axiom zd_chip_set_basic_rates == $sub.ref(0, 600349);

procedure zd_chip_set_basic_rates($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_chip_set_basic_rates($p0: ref, $i1: i16) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} {:cexpr "zd_chip_set_basic_rates:arg:cr_rates"} boogie_si_record_i16($i1);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 65296));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} mutex_lock_nested($p6, 0);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i1);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $i8 := zd_iowrite32_locked($p0, $i7, $sub.i16(0, 27088));
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 997} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} mutex_unlock($p9);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const set_mc_hash: ref;

axiom set_mc_hash == $sub.ref(0, 601381);

procedure set_mc_hash($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation set_mc_hash($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} zd_mc_clear($p1);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i3 := zd_chip_set_multicast_hash($p2, $p1);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 1002} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const zd_chip_switch_radio_on: ref;

axiom zd_chip_switch_radio_on == $sub.ref(0, 602413);

procedure zd_chip_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.40, $CurrAddr, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_chip_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} mutex_lock_nested($p1, 0);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11280, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i3 := zd_switch_radio_on($p2);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 1005} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} mutex_unlock($p4);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const zd_chip_enable_rxtx: ref;

axiom zd_chip_enable_rxtx == $sub.ref(0, 603445);

procedure zd_chip_enable_rxtx($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation zd_chip_enable_rxtx($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} mutex_lock_nested($p1, 0);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} zd_usb_enable_tx($p2);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i4 := zd_usb_enable_rx($p3);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    call {:si_unique_call 1010} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} zd_tx_watchdog_enable($p5);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} mutex_unlock($p6);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const housekeeping_enable: ref;

axiom housekeeping_enable == $sub.ref(0, 604477);

procedure housekeeping_enable($p0: ref);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation housekeeping_enable($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var vslice_dummy_var_112: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.169);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p6 := $M.1;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} vslice_dummy_var_112 := queue_delayed_work($p6, $p8, 0);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    return;
}



const beacon_enable: ref;

axiom beacon_enable == $sub.ref(0, 605509);

procedure beacon_enable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation beacon_enable($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var vslice_dummy_var_113: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.165);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, jiffies);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(232, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i6);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i9 := round_jiffies_relative(250);
    call {:si_unique_call 1017} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p10 := $M.1;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_113 := queue_delayed_work($p10, $p12, $i9);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 606541);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1020} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    return;
}



const round_jiffies_relative: ref;

axiom round_jiffies_relative == $sub.ref(0, 607573);

procedure round_jiffies_relative($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation round_jiffies_relative($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1021} {:cexpr "round_jiffies_relative:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1022} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1023} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const zd_usb_enable_tx: ref;

axiom zd_usb_enable_tx == $sub.ref(0, 608605);

procedure zd_usb_enable_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0;



implementation zd_usb_enable_tx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} ldv_spin_lock();
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(0, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} atomic_set($p2, 1);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(584, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p4 := zd_usb_to_hw($p0);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} ieee80211_wake_queues($p4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(588, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 2));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i7);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_enable_rx: ref;

axiom zd_usb_enable_rx == $sub.ref(0, 609637);

procedure zd_usb_enable_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $CurrAddr, assertsPassed;



implementation zd_usb_enable_rx($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} mutex_lock_nested($p2, 0);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i3 := __zd_usb_enable_rx($p0);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 1031} {:cexpr "r"} boogie_si_record_i32($i3);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} mutex_unlock($p4);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} zd_usb_reset_rx_idle_timer($p0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const zd_tx_watchdog_enable: ref;

axiom zd_tx_watchdog_enable == $sub.ref(0, 610669);

procedure zd_tx_watchdog_enable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation zd_tx_watchdog_enable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var vslice_dummy_var_114: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(588, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} dev_printk.ref.ref.ref.ref(.str.6, $p9, .str.26, .str.68);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i10 := round_jiffies_relative(250);
    call {:si_unique_call 1036} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p11 := $M.1;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} vslice_dummy_var_114 := queue_delayed_work___0($p11, $p12, $i10);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(588, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i15, $sub.i8(0, 3));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i17 := $or.i8($i16, 2);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i17);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const queue_delayed_work___0: ref;

axiom queue_delayed_work___0 == $sub.ref(0, 611701);

procedure queue_delayed_work___0($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation queue_delayed_work___0($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} {:cexpr "queue_delayed_work___0:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i3 := ldv_queue_delayed_work_on_350(8192, $p0, $p1, $i2);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1040} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_350: ref;

axiom ldv_queue_delayed_work_on_350 == $sub.ref(0, 612733);

procedure ldv_queue_delayed_work_on_350($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation ldv_queue_delayed_work_on_350($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} {:cexpr "ldv_queue_delayed_work_on_350:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1042} {:cexpr "ldv_queue_delayed_work_on_350:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1044} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1045} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} activate_work_3($p8, 2);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const __zd_usb_enable_rx: ref;

axiom __zd_usb_enable_rx == $sub.ref(0, 613765);

procedure __zd_usb_enable_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $CurrAddr, assertsPassed;



implementation __zd_usb_enable_rx($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i11: i32;
  var $i22: i64;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i54: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i10: i32;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i63: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.218);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $p6 := kcalloc(5, 8, 208);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  $bb5:
    call $p12, $i13, $p14, $i15, $p16, $p17, $i18, $i19, $i20, $i21, $i11 := __zd_usb_enable_rx_loop_$bb5($p0, $p7, $p12, $i13, $p14, $i15, $p16, $p17, $i18, $i19, $i20, $i21, $i11);
    goto $bb5_last;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p12 := alloc_rx_urb($p0);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i11);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p7, $mul.ref($i13, 8));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p12);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i11);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p7, $mul.ref($i15, 8));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i11, 1);
    call {:si_unique_call 1051} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i21 := $sle.i32($i20, 4);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i22 := arch_local_save_flags();
    call {:si_unique_call 1053} {:cexpr "_flags"} boogie_si_record_i64($i22);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i23 := arch_irqs_disabled_flags($i22);
    call {:si_unique_call 1055} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1057} {:cexpr "tmp___2"} boogie_si_record_i64($i27);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} spin_lock_irq($p45);
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p6);
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10112, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 5);
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} spin_unlock_irq($p53);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb22;

  $bb22:
    call $i55, $p56, $p57, $i58, $i59, $i60, $i61, $i62, $i54 := __zd_usb_enable_rx_loop_$bb22($p7, $i55, $p56, $p57, $i58, $i59, $i60, $i61, $i62, $i54);
    goto $bb22_last;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p7, $mul.ref($i55, 8));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i58 := ldv_usb_submit_urb_383($p57, 208);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    call {:si_unique_call 1066} {:cexpr "r"} boogie_si_record_i32($i58);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i60 := $i58;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i54, 1);
    call {:si_unique_call 1067} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i62 := $sle.i32($i61, 4);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $r := $i63;
    return;

  $bb28:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i54 := $i61;
    goto $bb28_dummy;

  $bb24:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p7);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} usb_kill_urb($p64);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p7, $mul.ref(1, 8));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} usb_kill_urb($p81);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p7, $mul.ref(2, 8));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} usb_kill_urb($p83);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p7, $mul.ref(3, 8));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} usb_kill_urb($p85);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p7, $mul.ref(4, 8));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} usb_kill_urb($p87);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} spin_lock_irq($p65);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $0.ref);
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10112, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 0);
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} spin_unlock_irq($p68);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i10 := $i60;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p7);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i63 := $i10;
    goto $bb31;

  $bb36:
    assume $i70 == 1;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p7);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} free_rx_urb($p71);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p7, $mul.ref(1, 8));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} free_rx_urb($p73);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p7, $mul.ref(2, 8));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} free_rx_urb($p75);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p7, $mul.ref(3, 8));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} free_rx_urb($p77);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p7, $mul.ref(4, 8));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} free_rx_urb($p79);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i49 == 1;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} spin_unlock_irq($p50);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p29, .str.1);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p30, .str.218);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p31, .str.60);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p32, .str.4);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.8, $p34);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 776);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p34, $i37);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p38, 1);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.9, $p39);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 1059} {:cexpr "tmp___0"} boogie_si_record_i64($i43);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} dump_stack();
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.60, 776, .str.32);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i20;
    goto $bb10_dummy;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb28_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4439;

  $bb10_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4371;
}



const zd_usb_reset_rx_idle_timer: ref;

axiom zd_usb_reset_rx_idle_timer == $sub.ref(0, 614797);

procedure zd_usb_reset_rx_idle_timer($p0: ref);
  free requires assertsPassed;



implementation zd_usb_reset_rx_idle_timer($p0: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_115: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i2 := round_jiffies_relative(7500);
    call {:si_unique_call 1081} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p3 := $M.1;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(232, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} vslice_dummy_var_115 := mod_delayed_work($p3, $p4, $i2);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    return;
}



const mod_delayed_work: ref;

axiom mod_delayed_work == $sub.ref(0, 615829);

procedure mod_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation mod_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} {:cexpr "mod_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i3 := mod_delayed_work_on(8192, $p0, $p1, $i2);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1085} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const mod_delayed_work_on: ref;

axiom mod_delayed_work_on == $sub.ref(0, 616861);

procedure mod_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation mod_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1086} {:cexpr "mod_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1087} {:cexpr "mod_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1088} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1089} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 617893);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 1091} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1092} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} ldv_check_alloc_flags($i2);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $p3 := ldv_undef_ptr();
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const alloc_rx_urb: ref;

axiom alloc_rx_urb == $sub.ref(0, 618925);

procedure alloc_rx_urb($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation alloc_rx_urb($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $p1 := zd_usb_to_usbdev($p0);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $p2 := ldv_usb_alloc_urb_381(0, 208);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $p7 := ldv_usb_alloc_coherent_382($p1, 4800, 208, $p6);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $i10 := __create_pipe($p1, 2);
    call {:si_unique_call 1100} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, $sub.i32(0, 1073741696));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} usb_fill_bulk_urb($p2, $p1, $i11, $p7, 4800, rx_urb_complete, $p12);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 4);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} usb_free_urb($p2);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  SeqInstr_418:
    assume !assertsPassed;
    return;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 619957);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1103} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1105} $i7 := devirtbounce.5(0, 43, pv_irq_ops, 1);
    call {:si_unique_call 1106} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1104} devirtbounce(0, .str.149, 831, 12);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 620989);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_submit_urb_383: ref;

axiom ldv_usb_submit_urb_383 == $sub.ref(0, 622021);

procedure ldv_usb_submit_urb_383($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_383($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} {:cexpr "ldv_usb_submit_urb_383:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_check_alloc_flags($i1);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $p2 := ldv_undef_ptr();
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_381: ref;

axiom ldv_usb_alloc_urb_381 == $sub.ref(0, 623053);

procedure ldv_usb_alloc_urb_381($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_381($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} {:cexpr "ldv_usb_alloc_urb_381:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1112} {:cexpr "ldv_usb_alloc_urb_381:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} ldv_check_alloc_flags($i1);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $p2 := ldv_undef_ptr();
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_coherent_382: ref;

axiom ldv_usb_alloc_coherent_382 == $sub.ref(0, 624085);

procedure ldv_usb_alloc_coherent_382($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_coherent_382($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} {:cexpr "ldv_usb_alloc_coherent_382:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    call {:si_unique_call 1116} {:cexpr "ldv_usb_alloc_coherent_382:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_check_alloc_flags($i2);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $p4 := ldv_undef_ptr();
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;
}



const rx_urb_complete: ref;

axiom rx_urb_complete == $sub.ref(0, 625117);

procedure rx_urb_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $CurrAddr, assertsPassed;



implementation rx_urb_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i24;
  var $i59: i24;
  var $i60: i24;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i24;
  var $i93: i24;
  var $i94: i24;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i64;
  var $p110: ref;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p25, .str.206, .str.219, $p0, $i27);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i120 := ldv_usb_submit_urb_380($p0, 32);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    call {:si_unique_call 1126} {:cexpr "r"} boogie_si_record_i32($i120);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    return;

  $bb56:
    assume $i121 == 1;
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p124, .str.224, .str.219, $p0, $i120);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    call {:si_unique_call 1122} {:cexpr "length"} boogie_si_record_i32($i31);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(456, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} tasklet_schedule($p36);
    $p37 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10100, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i39 := $urem.i32($i31, $i38);
    $p40 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10100, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 4);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i43 := $ugt.i32($i39, $i42);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    $p74 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} spin_lock($p74);
    $p75 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i77 == 1);
    $p119 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} spin_unlock($p119);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} handle_rx_packet($p34, $p29, $i31);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i77 == 1;
    $p78 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i79, $i31);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i81 := $ugt.i32($i80, 9600);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i32($i81);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i84 := ldv__builtin_expect($i83, 0);
    call {:si_unique_call 1139} {:cexpr "tmp___2"} boogie_si_record_i64($i84);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} dev_printk.ref.ref.ref.ref(.str.6, $p104, .str.223, .str.219);
    $p105 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(496, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    $p107 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i109 := $zext.i32.i64($i108);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p106, $mul.ref($i109, 1));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i111 := $zext.i32.i64($i31);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 1147} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p110, $p29, $i111, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    $p112 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(496, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    $p114 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, $i31);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} handle_rx_packet($p34, $p113, $i116);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    $p117 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, 0);
    $p118 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} spin_unlock($p118);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i85 == 1;
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p86, .str.1);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p87, .str.219);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p88, .str.60);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p89, .str.4);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i92 := $load.i24($M.8, $p91);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i93 := $and.i24($i92, $sub.i24(0, 262144));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i94 := $or.i24($i93, 707);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p91, $i94);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p95, 1);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.9, $p96);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i64($i97);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i99 := $and.i64($i98, 1);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i100 := ldv__builtin_expect($i99, 0);
    call {:si_unique_call 1143} {:cexpr "tmp___1"} boogie_si_record_i64($i100);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} dump_stack();
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i101 == 1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.60, 707, .str.222);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb38:
    assume $i43 == 1;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} dev_printk.ref.ref.ref.ref(.str.6, $p46, .str.220, .str.219);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i31, 9600);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 1129} {:cexpr "tmp___0"} boogie_si_record_i64($i50);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    $p68 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} spin_lock($p68);
    $p69 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(496, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i31);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 1135} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p70, $p29, $i71, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    $p72 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i31);
    $p73 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} spin_unlock($p73);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb40:
    assume $i51 == 1;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p52, .str.1);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p53, .str.219);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p54, .str.60);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p55, .str.4);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i58 := $load.i24($M.8, $p57);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i59 := $and.i24($i58, $sub.i24(0, 262144));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i60 := $or.i24($i59, 695);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p57, $i60);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p61, 1);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.9, $p62);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i64($i63);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i65 := $and.i64($i64, 1);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i66 := ldv__builtin_expect($i65, 0);
    call {:si_unique_call 1131} {:cexpr "tmp"} boogie_si_record_i64($i66);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} dump_stack();
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i67 == 1;
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.60, 695, .str.221);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p20, .str.206, .str.219, $p0, $i22);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i4, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i4, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i4, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i4, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i4, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i4, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb27;

  $bb24:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i4, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb30;

  $bb22:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i4, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb32:
    assume $i17 == 1;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    goto $bb20;
}



const tasklet_schedule: ref;

axiom tasklet_schedule == $sub.ref(0, 626149);

procedure tasklet_schedule($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation tasklet_schedule($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i2 := test_and_set_bit(0, $p1);
    call {:si_unique_call 1152} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} __tasklet_schedule($p0);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 627181);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.13;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} ldv_spin_lock();
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} ldv_spin_lock_339($p0);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 628213);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.13;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} ldv_spin_unlock();
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} ldv_spin_unlock_343($p0);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    return;
}



const handle_rx_packet: ref;

axiom handle_rx_packet == $sub.ref(0, 629245);

procedure handle_rx_packet($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, assertsPassed;



implementation handle_rx_packet($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} {:cexpr "handle_rx_packet:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i3 := $ule.i32($i2, 7);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i2);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, $sub.i64(0, 8));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref($i8, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i13 := get_unaligned_le16($p12);
    call {:si_unique_call 1161} {:cexpr "tmp___2"} boogie_si_record_i16($i13);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 27006);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $p39 := zd_usb_to_hw($p0);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} vslice_dummy_var_116 := zd_mac_rx($p39, $p1, $i2);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p10, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $i18 := get_unaligned_le16($p17);
    call {:si_unique_call 1163} {:cexpr "tmp"} boogie_si_record_i16($i18);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    call {:si_unique_call 1164} {:cexpr "k"} boogie_si_record_i32($i19);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i21, $i22, $i23 := $i19, 0, 0;
    goto $bb10;

  $bb10:
    call $i21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $i30, $i31, $i32, $i33, $i34, $p35, $i36, $i37, $i38, vslice_dummy_var_117 := handle_rx_packet_loop_$bb10($p0, $p1, $i2, $p17, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $i30, $i31, $i32, $i33, $i34, $p35, $i36, $i37, $i38, vslice_dummy_var_117);
    goto $bb10_last;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i22, $i21);
    call {:si_unique_call 1167} {:cexpr "n"} boogie_si_record_i32($i24);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i32($i24, $i2);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $p26 := zd_usb_to_hw($p0);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i22);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p1, $mul.ref($i27, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} vslice_dummy_var_117 := zd_mac_rx($p26, $p28, $i21);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i23, 1);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i24, 3);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, $sub.i32(0, 4));
    call {:si_unique_call 1170} {:cexpr "l"} boogie_si_record_i32($i32);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i23, 1);
    call {:si_unique_call 1171} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p17, $mul.ref($i34, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i36 := get_unaligned_le16($p35);
    call {:si_unique_call 1173} {:cexpr "tmp"} boogie_si_record_i16($i36);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    call {:si_unique_call 1174} {:cexpr "k"} boogie_si_record_i32($i37);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb19;

  $bb19:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i21, $i22, $i23 := $i37, $i32, $i33;
    goto $bb19_dummy;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} dev_printk.ref.ref.ref.ref.i32(.str.6, $p6, .str.225, .str.226, $i2);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;
}



const ldv_usb_submit_urb_380: ref;

axiom ldv_usb_submit_urb_380 == $sub.ref(0, 630277);

procedure ldv_usb_submit_urb_380($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_380($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} {:cexpr "ldv_usb_submit_urb_380:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} ldv_check_alloc_flags($i1);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $p2 := ldv_undef_ptr();
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const get_unaligned_le16: ref;

axiom get_unaligned_le16 == $sub.ref(0, 631309);

procedure get_unaligned_le16($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation get_unaligned_le16($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i2 := __le16_to_cpup($p1);
    call {:si_unique_call 1179} {:cexpr "tmp"} boogie_si_record_i16($i2);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const zd_usb_to_hw: ref;

axiom zd_usb_to_hw == $sub.ref(0, 632341);

procedure zd_usb_to_hw($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_usb_to_hw($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $p3 := zd_intf_to_hw($p2);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const zd_mac_rx: ref;

axiom zd_mac_rx == $sub.ref(0, 633373);

procedure zd_mac_rx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, assertsPassed;



implementation zd_mac_rx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i64;
  var $p37: ref;
  var $i38: i16;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $i47: i8;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i53: i16;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i1;
  var $i64: i8;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i52: i32;
  var $i69: i32;
  var $p70: ref;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $i80: i16;
  var $i81: i32;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i16;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i94: i1;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i6: i32;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1182} {:cexpr "zd_mac_rx:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p4 := zd_hw_mac($p0);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i2, 23);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 1184} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p7, 0, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i2);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $sub.i64(0, 5));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p1, $mul.ref($i9, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i32 := _zd_chip_get_channel($p31);
    call {:si_unique_call 1186} {:cexpr "tmp___0"} boogie_si_record_i8($i32);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, $sub.i32(0, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref($i35, 64)), $mul.ref(4, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $i38);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 0);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p11, $mul.ref(0, 5)), $mul.ref(1, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i44 := zd_check_signal($p0, $i43);
    call {:si_unique_call 1188} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i45);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i47 := zd_rx_rate($p1, $p11);
    call {:si_unique_call 1190} {:cexpr "rate"} boogie_si_record_i8($i47);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(13608, 1)), $mul.ref(24, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i51 := $sgt.i32($i50, 0);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i2, 10);
    call {:si_unique_call 1192} {:cexpr "length"} boogie_si_record_i32($i69);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i30, 0);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $i80 := get_unaligned_le16($p70);
    call {:si_unique_call 1196} {:cexpr "fc"} boogie_si_record_i16($i80);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $i83 := ieee80211_is_data_qos($i82);
    call {:si_unique_call 1198} {:cexpr "tmp___3"} boogie_si_record_i32($i83);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i80);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $i86 := ieee80211_has_a4($i85);
    call {:si_unique_call 1200} {:cexpr "tmp___4"} boogie_si_record_i32($i86);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i87 := $xor.i32($i83, $i86);
    call {:si_unique_call 1201} {:cexpr "need_padding"} boogie_si_record_i32($i87);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i89 := (if $i88 == 1 then 2 else 0);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, $i69);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $p91 := dev_alloc_skb($i90);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i87, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $p95 := skb_put($p91, $i69);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i69);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 1205} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p95, $p70, $i96, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $p97 := IEEE80211_SKB_RXCB($p91);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p3);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 1207} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p98, $p99, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} ieee80211_rx_irqsafe($p0, $p91);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb37:
    assume $i94 == 1;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} skb_reserve($p91, 2);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i93 == 1;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i71 == 1;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p70);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i73 := filter_ack($p0, $p72, $p3);
    call {:si_unique_call 1194} {:cexpr "tmp___2"} boogie_si_record_i32($i73);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i74 == 1;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p4);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(13680, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i79 == 1;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb14:
    assume $i51 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb17;

  $bb17:
    call $i53, $i54, $p56, $p57, $i58, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i52 := zd_mac_rx_loop_$bb17($p3, $p4, $i47, $p49, $i53, $i54, $p56, $p57, $i58, $p60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i52);
    goto $bb17_last;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i16($i47);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(13608, 1)), $mul.ref(8, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i52);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p57, $mul.ref($i58, 12)), $mul.ref(6, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i54, $i62);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i52, 1);
    call {:si_unique_call 1191} {:cexpr "i"} boogie_si_record_i32($i66);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p49);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, $i66);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i68 == 1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb22:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i52 := $i66;
    goto $bb22_dummy;

  $bb19:
    assume $i63 == 1;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i52);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, $i64);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p4);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(13680, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 16);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb9;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 32);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb13;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4885;
}



const _zd_chip_get_channel: ref;

axiom _zd_chip_get_channel == $sub.ref(0, 634405);

procedure _zd_chip_get_channel($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation _zd_chip_get_channel($p0: ref) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11280, 1)), $mul.ref(1, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const zd_check_signal: ref;

axiom zd_check_signal == $sub.ref(0, 635437);

procedure zd_check_signal($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation zd_check_signal($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i18: i1;
  var $i19: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} {:cexpr "zd_check_signal:arg:signal"} boogie_si_record_i32($i1);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $p2 := zd_hw_mac($p0);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 0);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i1, 100);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 1211} {:cexpr "__cond"} boogie_si_record_i8($i6);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i64($i7);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1213} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 0);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i1, 100);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i19 := 100;
    goto $bb12;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p15, .str.158, .str.159, .str.159, $i1);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const zd_rx_rate: ref;

axiom zd_rx_rate == $sub.ref(0, 636469);

procedure zd_rx_rate($p0: ref, $p1: ref) returns ($r: i8);
  free requires assertsPassed;



implementation zd_rx_rate($p0: ref, $p1: ref) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i8;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i10 := zd_cck_plcp_header_signal($p9);
    call {:si_unique_call 1218} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 55);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 110);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 110);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i19 := 3;
    goto $bb20;

  $bb7:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, 55);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb12:
    assume $i15 == 1;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i19 := 2;
    goto $bb20;

  $bb5:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i11, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i11, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb11;

  $bb16:
    assume $i17 == 1;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb20;

  $bb14:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i11, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb11;

  $bb18:
    assume $i18 == 1;
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb20;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $i7 := zd_rate_from_ofdm_plcp_header($p0);
    call {:si_unique_call 1216} {:cexpr "zd_rate"} boogie_si_record_i8($i7);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const filter_ack: ref;

axiom filter_ack == $sub.ref(0, 637501);

procedure filter_ack($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation filter_ack($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $p30: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i19: i32;
  var $p20: ref;
  var $i53: i32;
  var $i18: i32;
  var $i45: i32;
  var $i46: i32;
  var $i54: i1;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i67: i8;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $i56: i32;
  var $p71: ref;
  var $i72: i8;
  var $i73: i8;
  var $i74: i8;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $i86: i8;
  var $i87: i8;
  var $p88: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $p3 := zd_hw_mac($p0);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $i8 := ieee80211_is_ack($i7);
    call {:si_unique_call 1221} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(12472, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} ldv_spin_lock();
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(12472, 1)), $mul.ref(0, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p11);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i14, $i16);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i18 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i45, $i46 := 0, $i18;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i45, 0);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $p88 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(12472, 1)), $mul.ref(24, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} spin_unlock_irqrestore($p88, $u0);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb24:
    assume $i54 == 1;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32(1, $i46);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i73 := $and.i8($i72, $sub.i8(0, 9));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i74 := $or.i8($i73, 8);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, $i74);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i77 := $sext.i8.i32($i76);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(13684, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 3);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i81 == 1;
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $p82 := __skb_dequeue($p11);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(13684, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} zd_mac_tx_status($p0, $p82, $i84, $0.ref);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i87 := $and.i8($i86, $sub.i8(0, 9));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, $i87);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb26:
    assume $i55 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i56 := 1;
    goto $bb29;

  $bb29:
    call $p57, $p58, $p59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i56 := filter_ack_loop_$bb29($p0, $p3, $p11, $i46, $p57, $p58, $p59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i56);
    goto $bb29_last;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $p57 := __skb_dequeue($p11);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p3);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(13680, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i62 == 1);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} zd_mac_tx_status($p0, $p57, $i65, $0.ref);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i68 := $and.i8($i67, $sub.i8(0, 9));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i68);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i56, 1);
    call {:si_unique_call 1232} {:cexpr "i"} boogie_si_record_i32($i69);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i69, $i46);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i70 == 1);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb34:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i56 := $i69;
    goto $bb34_dummy;

  $bb31:
    assume $i62 == 1;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(13684, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb33;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i19, $p20 := 0, $p13;
    goto $bb8;

  $bb8:
    call $i21, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p30, $p47, $p48, $p49, $p50, $i51, $i52, $i19, $p20, $i53 := filter_ack_loop_$bb8($p1, $p3, $p11, $i16, $i21, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p30, $p47, $p48, $p49, $p50, $i51, $i52, $i19, $p20, $i53);
    goto $bb8_last;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i19, 1);
    call {:si_unique_call 1223} {:cexpr "position"} boogie_si_record_i32($i21);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(13680, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 30)), $mul.ref(10, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $i38 := ether_addr_equal($p35, $p37);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 1227} {:cexpr "tmp___2"} boogie_si_record_i8($i39);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i64($i40);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i42 := ldv__builtin_expect($i41, 1);
    call {:si_unique_call 1229} {:cexpr "tmp___3"} boogie_si_record_i64($i42);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i44 := $i21;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p30 := $p20;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p30, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, $i16);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i53 := $i21;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i18 := $i53;
    goto $bb7;

  $bb21:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i19, $p20 := $i21, $p50;
    goto $bb21_dummy;

  $bb17:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i45, $i46 := 1, $i44;
    goto $bb19;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i27 := skb_queue_is_first($p11, $p20);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    call {:si_unique_call 1225} {:cexpr "tmp___1"} boogie_si_record_i8($i28);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p30 := $p20;
    goto $bb14;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb34_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5090;

  $bb21_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5040;
}



const ieee80211_is_data_qos: ref;

axiom ieee80211_is_data_qos == $sub.ref(0, 638533);

procedure ieee80211_is_data_qos($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_data_qos($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} {:cexpr "ieee80211_is_data_qos:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 140);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 136);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_has_a4: ref;

axiom ieee80211_has_a4 == $sub.ref(0, 639565);

procedure ieee80211_has_a4($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_has_a4($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} {:cexpr "ieee80211_has_a4:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32(768);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, $i2);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32(768);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, $i4);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 640597);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dev_alloc_skb($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} {:cexpr "dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $p1 := netdev_alloc_skb($0.ref, $i0);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;
}



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 641629);

procedure skb_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 642661);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p2 := external_alloc();
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IEEE80211_SKB_RXCB: ref;

axiom IEEE80211_SKB_RXCB == $sub.ref(0, 643693);

procedure IEEE80211_SKB_RXCB($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation IEEE80211_SKB_RXCB($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_rx_irqsafe: ref;

axiom ieee80211_rx_irqsafe == $sub.ref(0, 644725);

procedure ieee80211_rx_irqsafe($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_rx_irqsafe($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 645757);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p2 := ldv___netdev_alloc_skb_84($p0, $i1, 32);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;
}



const ldv___netdev_alloc_skb_84: ref;

axiom ldv___netdev_alloc_skb_84 == $sub.ref(0, 646789);

procedure ldv___netdev_alloc_skb_84($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___netdev_alloc_skb_84($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} {:cexpr "ldv___netdev_alloc_skb_84:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 1246} {:cexpr "ldv___netdev_alloc_skb_84:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} ldv_check_alloc_flags($i2);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $p3 := ldv_undef_ptr();
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const ieee80211_is_ack: ref;

axiom ieee80211_is_ack == $sub.ref(0, 647821);

procedure ieee80211_is_ack($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_ack($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} {:cexpr "ieee80211_is_ack:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 252);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 212);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_queue_is_first: ref;

axiom skb_queue_is_first == $sub.ref(0, 648853);

procedure skb_queue_is_first($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_queue_is_first($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i6, $i8);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const ether_addr_equal: ref;

axiom ether_addr_equal == $sub.ref(0, 649885);

procedure ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i6 := $xor.i32($i3, $i5);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(4, 2));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(4, 2));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i15 := $xor.i32($i10, $i14);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i6, $i15);
    call {:si_unique_call 1250} {:cexpr "fold"} boogie_si_record_i32($i16);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const __skb_dequeue: ref;

axiom __skb_dequeue == $sub.ref(0, 650917);

procedure __skb_dequeue($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_dequeue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $p1 := skb_peek($p0);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} __skb_unlink($p1, $p0);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_mac_tx_status: ref;

axiom zd_mac_tx_status == $sub.ref(0, 651949);

procedure zd_mac_tx_status($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation zd_mac_tx_status($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i38: i1;
  var $i37: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $i59: i64;
  var $i61: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i62: i1;
  var $i66: i32;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i24;
  var $i77: i24;
  var $i78: i24;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i8;
  var $p90: ref;
  var $p91: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i8;
  var $i102: i8;
  var $i103: i1;
  var $i106: i64;
  var $p108: ref;
  var $i109: i32;
  var $i110: i8;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $p119: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i8;
  var $i125: i8;
  var $i126: i32;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i105: i32;
  var $i130: i32;
  var $i104: i32;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i136: i32;
  var $i137: i64;
  var $p139: ref;
  var $i140: i32;
  var $i141: i8;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $p147: ref;
  var $i148: i64;
  var $p149: ref;
  var $p150: ref;
  var $p153: ref;
  var $i154: i8;
  var $i155: i8;
  var $i156: i8;
  var $i157: i32;
  var $i158: i1;
  var $i159: i1;
  var $i160: i1;
  var $i135: i32;
  var $i161: i32;
  var $i134: i32;
  var $i162: i1;
  var $i163: i64;
  var $p164: ref;
  var $p165: ref;
  var $p168: ref;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1255} {:cexpr "zd_mac_tx_status:arg:ackssi"} boogie_si_record_i32($i2);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $p6 := IEEE80211_SKB_CB($p1);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} ieee80211_tx_info_clear_status($p6);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p3);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i18, $i19 := 1, 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i18, 0);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, $sub.i32(0, 513));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p30, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i35 := $sext.i8.i32($i34);
    call {:si_unique_call 1260} {:cexpr "first_idx"} boogie_si_record_i32($i35);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i37 := 1;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i36 == 1);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i32($i35, 11);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i37 := $i38;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i37);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 1262} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i35);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i61 := $sle.i32($i19, 0);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i62 := 1;
    assume {:branchcond $i61} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i61 == 1);
    $p63 := $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i59, 44)), $mul.ref(0, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.26, $p63);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, $i19);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i62 := $i65;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i32($i62);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 1268} {:cexpr "tmp___3"} boogie_si_record_i64($i68);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p87 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i59, 44)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.26, $p87);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p91, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, $i89);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p96, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i101 := $and.i8($i100, $sub.i8(0, 32));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i102 := $or.i8($i101, 1);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $i102);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32(1, $i19);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i104 := 1;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i131 := $sle.i32($i104, 3);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i104, $i19);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i133 := $and.i1($i131, $i132);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i134 := $i104;
    assume {:branchcond $i133} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i162 := $sle.i32($i134, 3);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i169 := zd_check_signal($p0, $i2);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, $i169);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} ieee80211_tx_status_irqsafe($p0, $p1);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    return;

  $bb41:
    assume $i162 == 1;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i134);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($add.ref($p165, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref($i163, 4)), $mul.ref(0, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p168, $sub.i8(0, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb33:
    assume $i133 == 1;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i135 := $i104;
    goto $bb36;

  $bb36:
    call $i136, $i137, $p139, $i140, $i141, $i142, $p143, $p144, $p147, $i148, $p149, $p150, $p153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i135, $i161 := zd_mac_tx_status_loop_$bb36($p6, $i19, $i59, $i136, $i137, $p139, $i140, $i141, $i142, $p143, $p144, $p147, $i148, $p149, $p150, $p153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i135, $i161);
    goto $bb36_last;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i19, $sub.i32(0, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i137 := $sext.i32.i64($i136);
    $p139 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i59, 44)), $mul.ref(4, 1)), $mul.ref($i137, 4));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.26, $p139);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i8($i140);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i135);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p144, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref($i142, 4)), $mul.ref(0, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p147, $i141);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i148 := $sext.i32.i64($i135);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($add.ref($p150, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref($i148, 4)), $mul.ref(1, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.0, $p153);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i155 := $and.i8($i154, $sub.i8(0, 32));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i156 := $or.i8($i155, 1);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p153, $i156);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i135, 1);
    call {:si_unique_call 1274} {:cexpr "i"} boogie_si_record_i32($i157);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i158 := $sle.i32($i157, 3);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i159 := $slt.i32($i157, $i19);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i160 := $and.i1($i158, $i159);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i161 := $i157;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i134 := $i161;
    goto $bb35;

  $bb38:
    assume $i160 == 1;
    assume {:verifier.code 0} true;
    $i135 := $i157;
    goto $bb38_dummy;

  $bb25:
    assume $i103 == 1;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i105 := 1;
    goto $bb28;

  $bb28:
    call $i106, $p108, $i109, $i110, $i111, $p112, $p113, $p116, $i117, $p118, $p119, $p122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i105, $i130 := zd_mac_tx_status_loop_$bb28($p6, $i19, $i59, $i106, $p108, $i109, $i110, $i111, $p112, $p113, $p116, $i117, $p118, $p119, $p122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i105, $i130);
    goto $bb28_last;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i105);
    $p108 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i59, 44)), $mul.ref(4, 1)), $mul.ref($i106, 4));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.26, $p108);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i8($i109);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i111 := $sext.i32.i64($i105);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p113, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref($i111, 4)), $mul.ref(0, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, $i110);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i105);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($p119, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref($i117, 4)), $mul.ref(1, 1));
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i124 := $and.i8($i123, $sub.i8(0, 32));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i125 := $or.i8($i124, 1);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, $i125);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i105, 1);
    call {:si_unique_call 1273} {:cexpr "i"} boogie_si_record_i32($i126);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i127 := $sle.i32($i126, 2);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i126, $i19);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i129 := $and.i1($i127, $i128);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i130 := $i126;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i104 := $i130;
    goto $bb27;

  $bb30:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    $i105 := $i126;
    goto $bb30_dummy;

  $bb19:
    assume $i69 == 1;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p70, .str.1);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p71, .str.150);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p72, .str.31);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p73, .str.4);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i76 := $load.i24($M.8, $p75);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i77 := $and.i24($i76, $sub.i24(0, 262144));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i78 := $or.i24($i77, 471);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p75, $i78);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p79, 1);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.9, $p80);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i64($i81);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i83 := $and.i64($i82, 1);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i84 := ldv__builtin_expect($i83, 0);
    call {:si_unique_call 1270} {:cexpr "tmp___2"} boogie_si_record_i64($i84);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} dump_stack();
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i85 == 1;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} __dynamic_pr_debug.ref.ref.ref.i32.ref($p5, .str.4, .str.31, 471, .str.151);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb17;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p43, .str.1);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p44, .str.150);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p45, .str.31);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p46, .str.4);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.8, $p48);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 469);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p48, $i51);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p52, 1);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.9, $p53);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 1264} {:cexpr "tmp___0"} boogie_si_record_i64($i57);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} dump_stack();
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i58 == 1;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} __dynamic_pr_debug.ref.ref.ref.i32.ref($p4, .str.4, .str.31, 469, .str.42);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb8;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 512);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(11, 1));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 1258} {:cexpr "success"} boogie_si_record_i32($i13);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, $i13);
    call {:si_unique_call 1259} {:cexpr "retry"} boogie_si_record_i32($i17);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i13, $i17;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5401;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5370;
}



const IEEE80211_SKB_CB: ref;

axiom IEEE80211_SKB_CB == $sub.ref(0, 652981);

procedure IEEE80211_SKB_CB($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation IEEE80211_SKB_CB($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_tx_info_clear_status: ref;

axiom ieee80211_tx_info_clear_status == $sub.ref(0, 654013);

procedure ieee80211_tx_info_clear_status($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ieee80211_tx_info_clear_status($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 32));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i7);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 4)), $mul.ref(1, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, $sub.i8(0, 32));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i17);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(2, 4)), $mul.ref(1, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i23, $sub.i8(0, 32));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i24);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(3, 4)), $mul.ref(1, 1));
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i30, $sub.i8(0, 32));
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i31);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 1277} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p10, 0, 24, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_tx_status_irqsafe: ref;

axiom ieee80211_tx_status_irqsafe == $sub.ref(0, 655045);

procedure ieee80211_tx_status_irqsafe($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_tx_status_irqsafe($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    return;
}



const skb_peek: ref;

axiom skb_peek == $sub.ref(0, 656077);

procedure skb_peek($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_peek($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p7 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const __skb_unlink: ref;

axiom __skb_unlink == $sub.ref(0, 657109);

procedure __skb_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_unlink($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p13);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p9);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    return;
}



const zd_rate_from_ofdm_plcp_header: ref;

axiom zd_rate_from_ofdm_plcp_header == $sub.ref(0, 658141);

procedure zd_rate_from_ofdm_plcp_header($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation zd_rate_from_ofdm_plcp_header($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i2 := zd_ofdm_plcp_header_rate($p1);
    call {:si_unique_call 1279} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, 16);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const zd_cck_plcp_header_signal: ref;

axiom zd_cck_plcp_header_signal == $sub.ref(0, 659173);

procedure zd_cck_plcp_header_signal($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation zd_cck_plcp_header_signal($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const zd_ofdm_plcp_header_rate: ref;

axiom zd_ofdm_plcp_header_rate == $sub.ref(0, 660205);

procedure zd_ofdm_plcp_header_rate($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation zd_ofdm_plcp_header_rate($p0: ref) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 15);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const zd_intf_to_hw: ref;

axiom zd_intf_to_hw == $sub.ref(0, 661237);

procedure zd_intf_to_hw($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_intf_to_hw($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 662269);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 663301);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __le16_to_cpup: ref;

axiom __le16_to_cpup == $sub.ref(0, 664333);

procedure __le16_to_cpup($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __le16_to_cpup($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.0, $p0);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_spin_unlock_343: ref;

axiom ldv_spin_unlock_343 == $sub.ref(0, 665365);

procedure ldv_spin_unlock_343($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_343($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} _raw_spin_unlock($p2);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 666397);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_339: ref;

axiom ldv_spin_lock_339 == $sub.ref(0, 667429);

procedure ldv_spin_lock_339($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_339($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} _raw_spin_lock($p2);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 668461);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 669493);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 1285} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1286} devirtbounce.6(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.27, $p2);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __tasklet_schedule: ref;

axiom __tasklet_schedule == $sub.ref(0, 670525);

procedure __tasklet_schedule($p0: ref);
  free requires assertsPassed;



implementation __tasklet_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_wake_queues: ref;

axiom ieee80211_wake_queues == $sub.ref(0, 671557);

procedure ieee80211_wake_queues($p0: ref);
  free requires assertsPassed;



implementation ieee80211_wake_queues($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    return;
}



const zd_switch_radio_on: ref;

axiom zd_switch_radio_on == $sub.ref(0, 672589);

procedure zd_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.40, $CurrAddr, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 1290} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1292} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $i26 := zd_chip_lock_phy_regs($p2);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    call {:si_unique_call 1298} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    call {:si_unique_call 1299} $i31 := devirtbounce.4($p30, $p0);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    call {:si_unique_call 1300} {:cexpr "t"} boogie_si_record_i32($i31);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i32 := zd_chip_unlock_phy_regs($p2);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    call {:si_unique_call 1302} {:cexpr "r"} boogie_si_record_i32($i32);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i31, 0);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i28 := $i34;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i34 := $i31;
    goto $bb13;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb9;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.1);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p11, .str.55);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str.49);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.4);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.8, $p15);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 141);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p15, $i18);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p19, 1);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.9, $p20);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1294} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} dump_stack();
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.49, 141, .str.10);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_usb_enable_int: ref;

axiom zd_usb_enable_int == $sub.ref(0, 673621);

procedure zd_usb_enable_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $CurrAddr, assertsPassed;



implementation zd_usb_enable_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i53: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i40: i32;
  var $i10: i32;
  var $i78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $p2 := zd_usb_to_usbdev($p0);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} dev_printk.ref.ref.ref.ref(.str.6, $p6, .str.26, .str.59);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p7 := ldv_usb_alloc_urb_377(0, 208);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $i11 := arch_local_save_flags();
    call {:si_unique_call 1308} {:cexpr "_flags"} boogie_si_record_i64($i11);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $i12 := arch_irqs_disabled_flags($i11);
    call {:si_unique_call 1310} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1312} {:cexpr "tmp___2"} boogie_si_record_i64($i16);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} spin_lock_irq($p34);
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p7);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} spin_unlock_irq($p42);
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p44 := ldv_usb_alloc_coherent_378($p2, 64, 208, $p43);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p44);
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i54 := __create_pipe($p2, 3);
    call {:si_unique_call 1326} {:cexpr "tmp___3"} boogie_si_record_i32($i54);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, 1073741952);
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p0);
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} usb_fill_int_urb($p7, $p2, $i55, $p57, 64, int_urb_complete, $p58, $i60);
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, $i62);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i65, 4);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 1568)), $mul.ref(48, 1));
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} dev_printk.ref.ref.ref.ref.ref(.str.6, $p70, .str.62, .str.59, $p72);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $i73 := ldv_usb_submit_urb_379($p7, 208);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    call {:si_unique_call 1330} {:cexpr "r"} boogie_si_record_i32($i73);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i78 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $r := $i78;
    return;

  $bb19:
    assume $i74 == 1;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} dev_printk.ref.ref.ref.ref.i32(.str.6, $p77, .str.63, .str.59, $i73);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.0, $p81);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} usb_free_coherent($p2, 64, $p80, $i82);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i53 := $i73;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} spin_lock_irq($p83);
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $0.ref);
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} spin_unlock_irq($p85);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i40 := $i53;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} usb_free_urb($p7);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i10 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i78 := $i10;
    goto $bb23;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i49 == 1;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} dev_printk.ref.ref.ref.ref(.str.6, $p52, .str.61, .str.59);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 12);
    goto $bb17;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i38 == 1;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} spin_unlock_irq($p39);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb13;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str.1);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, .str.59);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, .str.60);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p21, .str.4);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.8, $p23);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 540);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p23, $i26);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p27, 1);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.9, $p28);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 1314} {:cexpr "tmp___0"} boogie_si_record_i64($i32);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} dump_stack();
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.60, 540, .str.32);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_472:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_377: ref;

axiom ldv_usb_alloc_urb_377 == $sub.ref(0, 674653);

procedure ldv_usb_alloc_urb_377($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_377($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} {:cexpr "ldv_usb_alloc_urb_377:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1334} {:cexpr "ldv_usb_alloc_urb_377:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} ldv_check_alloc_flags($i1);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $p2 := ldv_undef_ptr();
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_coherent_378: ref;

axiom ldv_usb_alloc_coherent_378 == $sub.ref(0, 675685);

procedure ldv_usb_alloc_coherent_378($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_coherent_378($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} {:cexpr "ldv_usb_alloc_coherent_378:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    call {:si_unique_call 1338} {:cexpr "ldv_usb_alloc_coherent_378:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} ldv_check_alloc_flags($i2);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $p4 := ldv_undef_ptr();
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;
}



const int_urb_complete: ref;

axiom int_urb_complete == $sub.ref(0, 676717);

procedure int_urb_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, assertsPassed, $CurrAddr, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.17, $M.19, $M.21, $M.23, $M.33, $M.34, $M.29, $M.39;



implementation int_urb_complete($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p23, .str.206, .str.207, $p0, $i25);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i65 := ldv_usb_submit_urb_376($p0, 32);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    call {:si_unique_call 1344} {:cexpr "r"} boogie_si_record_i32($i65);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    return;

  $bb60:
    assume $i66 == 1;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p69, .str.211, .str.207, $p0, $i65);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i28 := $ule.i32($i27, 7);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 1);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p34, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 144);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p34, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 160);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i55, 160);
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p34, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p61, .str.210, .str.207, $p0, $i64);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb53:
    assume $i57 == 1;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} zd_mac_tx_failed($p0);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb51:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i55, 144);
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb55;

  $bb56:
    assume $i58 == 1;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} handle_regs_int($p0);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i49 == 1;
    $p50 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i51 := atomic_read($p50);
    call {:si_unique_call 1348} {:cexpr "tmp"} boogie_si_record_i32($i51);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i52 == 1;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} handle_regs_int_override($p0);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb41:
    assume $i38 == 1;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} dev_printk.ref.ref.ref.ref.ref(.str.6, $p41, .str.209, .str.207, $p0);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38:
    assume $i28 == 1;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} dev_printk.ref.ref.ref.ref.ref(.str.6, $p31, .str.208, .str.207, $p0);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb6:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p18, .str.206, .str.207, $p0, $i20);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i2, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i2, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb27;

  $bb24:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i2, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb30;

  $bb22:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i2, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb32:
    assume $i15 == 1;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    goto $bb20;
}



const ldv_usb_submit_urb_379: ref;

axiom ldv_usb_submit_urb_379 == $sub.ref(0, 677749);

procedure ldv_usb_submit_urb_379($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_379($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} {:cexpr "ldv_usb_submit_urb_379:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} ldv_check_alloc_flags($i1);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $p2 := ldv_undef_ptr();
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;
}



const handle_regs_int_override: ref;

axiom handle_regs_int_override == $sub.ref(0, 678781);

procedure handle_regs_int_override($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0;



implementation handle_regs_int_override($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i8;
  var $i13: i8;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} spin_lock($p5);
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i7 := atomic_read($p6);
    call {:si_unique_call 1359} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} spin_unlock($p16);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} atomic_set($p9, 0);
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i11, $sub.i8(0, 2));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i13 := $or.i8($i12, 1);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i13);
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} complete_($p15);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const handle_regs_int: ref;

axiom handle_regs_int == $sub.ref(0, 679813);

procedure handle_regs_int($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.0, $M.40, $CurrAddr, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.17, $M.19, $M.21, $M.23, $M.33, $M.34, assertsPassed, $M.29, $M.39;



implementation handle_regs_int($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i1;
  var $i61: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $i75: i8;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i8;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var vslice_dummy_var_118: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i6 := preempt_count();
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    call {:si_unique_call 1365} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i7, 2096896);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1367} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p30 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} spin_lock($p30);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(2, 2));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    call {:si_unique_call 1373} {:cexpr "int_num"} boogie_si_record_i16($i35);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 38160);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    $p51 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i52 := atomic_read($p51);
    call {:si_unique_call 1381} {:cexpr "tmp___6"} boogie_si_record_i32($i52);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $p85 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} spin_unlock($p85);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i35);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 38160);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i87 == 1;
    $p88 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i89 := atomic_read($p88);
    call {:si_unique_call 1390} {:cexpr "tmp___7"} boogie_si_record_i32($i89);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i90 == 1;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} handle_regs_int_override($p0);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb10:
    assume $i53 == 1;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    call {:si_unique_call 1382} {:cexpr "len"} boogie_si_record_i32($i55);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    $p59 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(172, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i57);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i60 := $ugt.i32($i55, 64);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i55;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i61);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 1383} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p64, $p66, $i67, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    $p72 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $i74 := check_read_regs($p4, $p70, $i73);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i8($i74);
    call {:si_unique_call 1385} {:cexpr "tmp___4"} boogie_si_record_i8($i75);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $p79 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} atomic_set($p79, 0);
    $p80 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i82 := $and.i8($i81, $sub.i8(0, 2));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, $i82);
    $p84 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} complete_($p84);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume $i78 == 1;
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i76 == 1;
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb17;

  $bb12:
    assume $i60 == 1;
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i61 := 64;
    goto $bb14;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p41 := zd_usb_to_hw($p40);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p42 := zd_hw_mac($p41);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} spin_lock($p43);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref(0, 13688)), $mul.ref(12384, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 1377} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p45, $p47, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p42, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} spin_unlock($p48);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p42, $mul.ref(0, 13688)), $mul.ref(12296, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} vslice_dummy_var_118 := schedule_work($p49);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.1);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p15, .str.212);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p16, .str.60);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p17, .str.4);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.8, $p19);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 391);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p19, $i22);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p23, 1);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.9, $p24);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 1369} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} dump_stack();
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i29 == 1;
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.60, 391, .str.213);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_496:
    assume !assertsPassed;
    return;
}



const zd_mac_tx_failed: ref;

axiom zd_mac_tx_failed == $sub.ref(0, 680845);

procedure zd_mac_tx_failed($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation zd_mac_tx_failed($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i1;
  var $i51: i8;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i67: i1;
  var $i66: i1;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i24;
  var $i79: i24;
  var $i80: i24;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $i88: i64;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i64;
  var $p97: ref;
  var $i98: i32;
  var $i99: i64;
  var $p101: ref;
  var $i102: i16;
  var $i103: i8;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $p42: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $i27: i32;
  var $p28: ref;
  var $i118: i32;
  var $i26: i32;
  var $i110: i32;
  var $i111: i32;
  var $i119: i1;
  var $i120: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $i134: i8;
  var $i135: i8;
  var $i136: i32;
  var $i137: i1;
  var $i121: i32;
  var $p138: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $p5 := zd_usb_to_hw($p4);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $p6 := zd_hw_mac($p5);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(11, 1));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 1395} {:cexpr "success"} boogie_si_record_i32($i14);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, $i14);
    call {:si_unique_call 1396} {:cexpr "retry"} boogie_si_record_i32($i18);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 13688)), $mul.ref(12472, 1));
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} ldv_spin_lock();
    $p20 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 13688)), $mul.ref(12472, 1)), $mul.ref(0, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p19);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i22, $i24);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i26 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i110, $i111 := 0, $i26;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i110, 0);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    $p138 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 13688)), $mul.ref(12472, 1)), $mul.ref(24, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} spin_unlock_irqrestore($p138, $u0);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    return;

  $bb44:
    assume $i119 == 1;
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i120 := $sle.i32(1, $i111);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb46:
    assume $i120 == 1;
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i121 := 1;
    goto $bb49;

  $bb49:
    call $p122, $p123, $p124, $i125, $i126, $i127, $p128, $i129, $i130, $i131, $p132, $p133, $i134, $i135, $i136, $i137, $i121 := zd_mac_tx_failed_loop_$bb49($p5, $p6, $p8, $p19, $i111, $p122, $p123, $p124, $i125, $i126, $i127, $p128, $i129, $i130, $i131, $p132, $p133, $i134, $i135, $i136, $i137, $i121);
    goto $bb49_last;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p122 := __skb_dequeue($p19);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p6);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p123, $mul.ref(13680, 1));
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.0, $p124);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i127 == 1);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i130 := 0;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i121, $i111);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i131 == 1);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $p132 := $0.ref;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} zd_mac_tx_status($p5, $p122, $i130, $p132);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p6, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.0, $p133);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i135 := $and.i8($i134, $sub.i8(0, 9));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, $i135);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i121, 1);
    call {:si_unique_call 1417} {:cexpr "i"} boogie_si_record_i32($i136);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i137 := $sle.i32($i136, $i111);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i137 == 1);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb57:
    assume $i137 == 1;
    assume {:verifier.code 0} true;
    $i121 := $i136;
    goto $bb57_dummy;

  $bb54:
    assume $i131 == 1;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p132 := $p8;
    goto $bb56;

  $bb51:
    assume $i127 == 1;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p6, $mul.ref(0, 13688)), $mul.ref(13684, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i130 := $i129;
    goto $bb53;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i27, $p28 := 0, $p21;
    goto $bb4;

  $bb4:
    call $i29, $p30, $i31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p57, $p58, $p59, $p62, $i63, $i64, $i65, $i67, $i66, $i68, $i69, $i70, $i71, $p72, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $i80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i90, $p91, $i92, $i93, $i94, $i95, $p97, $i98, $i99, $p101, $i102, $i103, $p104, $i105, $i106, $i107, $i108, $i109, $p42, $p112, $p113, $p114, $p115, $i116, $i117, $i27, $p28, $i118 := zd_mac_tx_failed_loop_$bb4($p1, $p6, $p9, $i18, $p19, $i24, $i29, $p30, $i31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p57, $p58, $p59, $p62, $i63, $i64, $i65, $i67, $i66, $i68, $i69, $i70, $i71, $p72, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $i80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i90, $p91, $i92, $i93, $i94, $i95, $p97, $i98, $i99, $p101, $i102, $i103, $p104, $i105, $i106, $i107, $i108, $i109, $p42, $p112, $p113, $p114, $p115, $i116, $i117, $i27, $p28, $i118);
    goto $bb4_last;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i27, 1);
    call {:si_unique_call 1398} {:cexpr "position"} boogie_si_record_i32($i29);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(11, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p28, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i50 := ether_addr_equal($p47, $p49);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i8($i50);
    call {:si_unique_call 1402} {:cexpr "tmp___2"} boogie_si_record_i8($i51);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i55 := ldv__builtin_expect($i54, 0);
    call {:si_unique_call 1404} {:cexpr "tmp___4"} boogie_si_record_i64($i55);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $p57 := IEEE80211_SKB_CB($p28);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i64 := $sext.i8.i32($i63);
    call {:si_unique_call 1406} {:cexpr "first_idx"} boogie_si_record_i32($i64);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 0);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i66 := 1;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i65 == 1);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i67 := $ugt.i32($i64, 11);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i66 := $i67;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i66);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 1408} {:cexpr "tmp___6"} boogie_si_record_i64($i70);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i64);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i90 := $sle.i32($i18, 0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i90 == 1);
    $p91 := $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i88, 44)), $mul.ref(0, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.26, $p91);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i92, $i18);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i18, $sub.i32(0, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i94);
    $p97 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref($i88, 44)), $mul.ref(4, 1)), $mul.ref($i95, 4));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.26, $p97);
    call {:si_unique_call 1413} {:cexpr "final_idx"} boogie_si_record_i32($i98);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i98);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref($i99, 12)), $mul.ref(6, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i16.i8($i102);
    call {:si_unique_call 1414} {:cexpr "final_rate"} boogie_si_record_i8($i103);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(2, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i103);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i106, $i107);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i109 := $i29;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i110, $i111 := 1, $i109;
    goto $bb40;

  $bb37:
    assume $i108 == 1;
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p42 := $p28;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p42, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, $i24);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i118 := $i29;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i26 := $i118;
    goto $bb3;

  $bb41:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $i27, $p28 := $i29, $p115;
    goto $bb41_dummy;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p42 := $p28;
    goto $bb13;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb32;

  $bb25:
    assume $i71 == 1;
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p72, .str.1);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p73, .str.41);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p74, .str.31);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p75, .str.4);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i78 := $load.i24($M.8, $p77);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i79 := $and.i24($i78, $sub.i24(0, 262144));
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i80 := $or.i24($i79, 542);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p77, $i80);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p81, 1);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.9, $p82);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i64($i83);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 1);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 1410} {:cexpr "tmp___5"} boogie_si_record_i64($i86);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} dump_stack();
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i87 == 1;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.31, 542, .str.42);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb23;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p42 := $p28;
    goto $bb13;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb18;

  $bb6:
    assume $i33 == 1;
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p6);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(13680, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb8;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $i39 := skb_queue_is_first($p19, $p28);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 1400} {:cexpr "tmp___1"} boogie_si_record_i8($i40);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p42 := $p28;
    goto $bb13;

  $bb57_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6158;

  $bb41_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6030;
}



const ldv_usb_submit_urb_376: ref;

axiom ldv_usb_submit_urb_376 == $sub.ref(0, 681877);

procedure ldv_usb_submit_urb_376($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_376($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} {:cexpr "ldv_usb_submit_urb_376:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} ldv_check_alloc_flags($i1);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p2 := ldv_undef_ptr();
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 682909);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $i2 := queue_work($p1, $p0);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1423} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 683941);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 684973);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $i2 := ldv_queue_work_on_349(8192, $p0, $p1);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1425} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_349: ref;

axiom ldv_queue_work_on_349 == $sub.ref(0, 686005);

procedure ldv_queue_work_on_349($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation ldv_queue_work_on_349($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} {:cexpr "ldv_queue_work_on_349:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1428} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1429} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} activate_work_3($p2, 2);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 687037);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1431} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1432} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1433} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const zd_usb_to_mac: ref;

axiom zd_usb_to_mac == $sub.ref(0, 688069);

procedure zd_usb_to_mac($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_usb_to_mac($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $p1 := zd_usb_to_chip($p0);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $p2 := zd_chip_to_mac($p1);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const upload_firmware: ref;

axiom upload_firmware == $sub.ref(0, 689101);

procedure upload_firmware($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $CurrAddr, assertsPassed;



implementation upload_firmware($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i11: i32;
  var $p44: ref;
  var $p45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $p3 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $p4 := zd_usb_to_usbdev($p0);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p1, $0.ref);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p2, $0.ref);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $i5 := get_bcdDevice($p4);
    call {:si_unique_call 1441} {:cexpr "bcdDevice"} boogie_si_record_i16($i5);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $p7 := get_fw_name($p0, $p6, 128, .str.247);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i9 := request_fw_file($p1, $p7, $p8);
    call {:si_unique_call 1444} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.28, $p1);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.30, $p13);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $i15 := get_word($p14, 23);
    call {:si_unique_call 1448} {:cexpr "fw_bcdDevice"} boogie_si_record_i16($i15);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i5);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i16, $i17);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i15);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} dev_printk.ref.ref.ref.ref.i32(.str.6, $p28, .str.250, .str.251, $i29);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $p31 := get_fw_name($p0, $p30, 128, .str.252);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i33 := request_fw_file($p2, $p31, $p32);
    call {:si_unique_call 1456} {:cexpr "r"} boogie_si_record_i32($i33);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.28, $p2);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.30, $p36);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.28, $p2);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.31, $p39);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $i41 := upload_code($p4, $p37, $i40, $sub.i16(0, 4608), 1);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    call {:si_unique_call 1458} {:cexpr "r"} boogie_si_record_i32($i41);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i11 := $i41;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.28, $p1);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} release_firmware($p44);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.28, $p2);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} release_firmware($p45);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} dev_err.ref.ref.i32($p43, .str.253, $i41);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i11 := $i33;
    goto $bb3;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i15);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i5);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} _dev_info.ref.ref.i32.i32($p19, .str.248, $i20, $i21);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i5);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i23 := $ule.i32($i22, 17171);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.28, $p1);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i26 := handle_version_mismatch($p0, $p25);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    call {:si_unique_call 1453} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i11 := $i26;
    goto $bb3;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} dev_warn.ref.ref($p24, .str.249);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const usb_reset_configuration: ref;

axiom usb_reset_configuration == $sub.ref(0, 690133);

procedure usb_reset_configuration($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_configuration($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1460} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1461} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const zd_mac_init_hw: ref;

axiom zd_mac_init_hw == $sub.ref(0, 691165);

procedure zd_mac_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.33, $M.34, $CurrAddr, $M.29, $M.16, $M.18, $M.20, $M.22, $M.40, $M.10, $M.39, assertsPassed, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.17, $M.19, $M.21, $M.23;



implementation zd_mac_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i12: i64;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i8;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i11: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p4 := zd_hw_mac($p0);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $i6 := zd_chip_enable_int($p5);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    call {:si_unique_call 1467} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $i9 := zd_chip_init_hw($p5);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 1469} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $i12 := arch_local_save_flags();
    call {:si_unique_call 1472} {:cexpr "_flags"} boogie_si_record_i64($i12);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $i13 := arch_irqs_disabled_flags($i12);
    call {:si_unique_call 1474} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1476} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $i35 := zd_read_regdomain($p5, $p2);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    call {:si_unique_call 1482} {:cexpr "r"} boogie_si_record_i32($i35);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} spin_lock_irq($p37);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p2);
    call {:si_unique_call 1484} {:cexpr "tmp___3"} boogie_si_record_i8($i38);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(12449, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i38);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(12448, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $i38);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} spin_unlock_irq($p41);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $i42 := zd_set_encryption_type($p5, 8);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    call {:si_unique_call 1487} {:cexpr "r"} boogie_si_record_i32($i42);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 13688)), $mul.ref(12448, 1));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p1);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $i49 := zd_reg2alpha2($i47, $p48);
    call {:si_unique_call 1489} {:cexpr "r"} boogie_si_record_i32($i49);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p1);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $i54 := regulatory_hint($p52, $p53);
    call {:si_unique_call 1491} {:cexpr "r"} boogie_si_record_i32($i54);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i11 := $i54;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} zd_chip_disable_int($p5);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb21:
    assume $i50 == 1;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i11 := $i49;
    goto $bb7;

  $bb18:
    assume $i43 == 1;
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i11 := $i42;
    goto $bb7;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i11 := $i35;
    goto $bb7;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p19, .str.1);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p20, .str.30);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p21, .str.31);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p22, .str.4);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.8, $p24);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 208);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p24, $i27);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p28, 1);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.9, $p29);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 1478} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} dump_stack();
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.31, 208, .str.32);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb7;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  SeqInstr_508:
    assume !assertsPassed;
    return;
}



const zd_chip_init_hw: ref;

axiom zd_chip_init_hw == $sub.ref(0, 692197);

procedure zd_chip_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.29, $CurrAddr, $M.40, $M.10, $M.39, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, assertsPassed, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23;



implementation zd_chip_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i9: i32;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.28);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} mutex_lock_nested($p6, 0);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $i7 := test_init($p0);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    call {:si_unique_call 1496} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i10 := zd_iowrite32_locked($p0, 1, $sub.i16(0, 27064));
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    call {:si_unique_call 1499} {:cexpr "r"} boogie_si_record_i32($i10);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i12 := read_fw_regs_offset($p0);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    call {:si_unique_call 1501} {:cexpr "r"} boogie_si_record_i32($i12);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $i14 := zd_iowrite32_locked($p0, 0, $sub.i16(0, 27624));
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    call {:si_unique_call 1503} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i16 := zd_iowrite32_locked($p0, 8324159, $sub.i16(0, 26896));
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    call {:si_unique_call 1505} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $i18 := set_mandatory_rates($p0, 1);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    call {:si_unique_call 1507} {:cexpr "r"} boogie_si_record_i32($i18);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $i20 := disable_hwint($p0);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    call {:si_unique_call 1509} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $i22 := read_pod($p0, $p1);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    call {:si_unique_call 1511} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $i24 := hw_init($p0);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    call {:si_unique_call 1513} {:cexpr "r"} boogie_si_record_i32($i24);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11280, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p1);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $i30 := zd_rf_init_hw($p26, $i29);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    call {:si_unique_call 1515} {:cexpr "r"} boogie_si_record_i32($i30);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $i32 := print_fw_version($p0);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    call {:si_unique_call 1517} {:cexpr "r"} boogie_si_record_i32($i32);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} dump_fw_registers($p0);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $i34 := test_init($p0);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    call {:si_unique_call 1520} {:cexpr "r"} boogie_si_record_i32($i34);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $i36 := read_cal_int_tables($p0);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    call {:si_unique_call 1522} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} print_id($p0);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i9 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} mutex_unlock($p38);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb38:
    assume $i37 == 1;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i9 := $i36;
    goto $bb3;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i35 == 1;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i9 := $i34;
    goto $bb3;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i33 == 1;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i9 := $i32;
    goto $bb3;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i31 == 1;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i9 := $i30;
    goto $bb3;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i25 == 1;
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i9 := $i24;
    goto $bb3;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i23 == 1;
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i9 := $i22;
    goto $bb3;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i21 == 1;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i9 := $i20;
    goto $bb3;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb3;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb3;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb3;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  SeqInstr_520:
    assume !assertsPassed;
    return;
}



const zd_read_regdomain: ref;

axiom zd_read_regdomain == $sub.ref(0, 693229);

procedure zd_read_regdomain($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_read_regdomain($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} mutex_lock_nested($p3, 0);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} $i4 := zd_ioread32_locked($p0, $p2, $sub.i16(0, 2025));
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    call {:si_unique_call 1527} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} mutex_unlock($p5);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i4, 0);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p2);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i8, 16);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i10);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p1);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} dev_printk.ref.ref.ref.ref.i32(.str.6, $p14, .str.16, .str.17, $i16);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;

  SeqInstr_562:
    assume !assertsPassed;
    return;
}



const zd_set_encryption_type: ref;

axiom zd_set_encryption_type == $sub.ref(0, 694261);

procedure zd_set_encryption_type($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_set_encryption_type($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} {:cexpr "zd_set_encryption_type:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $i2 := zd_iowrite32($p0, $sub.i16(0, 27016), $i1);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    call {:si_unique_call 1532} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;
}



const zd_reg2alpha2: ref;

axiom zd_reg2alpha2 == $sub.ref(0, 695293);

procedure zd_reg2alpha2($i0: i8, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.34;



implementation zd_reg2alpha2($i0: i8, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} {:cexpr "zd_reg2alpha2:arg:regdomain"} boogie_si_record_i8($i0);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i0);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.32, reg_alpha2_map);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, $i3);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p5 := reg_alpha2_map;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i0);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i14, $i15);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(1, 8));
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i0);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i17, $i18);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(2, 8));
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i0);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i20, $i21);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(3, 8));
    assume {:branchcond $i22} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i0);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i23, $i24);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(4, 8));
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i0);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i26, $i27);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(5, 8));
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i0);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i29, $i30);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(6, 8));
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i0);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i32, $i33);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(7, 8));
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.32, $p7);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $M.33 := $store.i8($M.33, $p1, $i8);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.32, $p10);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p12, $i11);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb4;
}



const regulatory_hint: ref;

axiom regulatory_hint == $sub.ref(0, 696325);

procedure regulatory_hint($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation regulatory_hint($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1534} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1535} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const test_init: ref;

axiom test_init == $sub.ref(0, 697357);

procedure test_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation test_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $i1 := dump_cr($p0, $sub.i16(0, 27064), .str.110);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    call {:si_unique_call 1537} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $i4 := dump_cr($p0, $sub.i16(0, 27624), .str.111);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    call {:si_unique_call 1539} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $i6 := dump_cr($p0, $sub.i16(0, 27376), .str.112);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    call {:si_unique_call 1541} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  SeqInstr_568:
    assume !assertsPassed;
    return;
}



const read_fw_regs_offset: ref;

axiom read_fw_regs_offset == $sub.ref(0, 698389);

procedure read_fw_regs_offset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.0, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation read_fw_regs_offset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $i3 := mutex_is_locked($p2);
    call {:si_unique_call 1544} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1546} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11504, 1));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $i26 := zd_ioread16_locked($p0, $p25, $sub.i16(0, 4579));
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    call {:si_unique_call 1552} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11504, 1));
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} dev_printk.ref.ref.ref.ref.i32(.str.6, $p32, .str.117, .str.116, $i35);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb9;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.1);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p10, .str.116);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, .str.3);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p12, .str.4);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.8, $p14);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 1107);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p14, $i17);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p18, 1);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.9, $p19);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 1548} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} dump_stack();
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.3, 1107, .str.10);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const set_mandatory_rates: ref;

axiom set_mandatory_rates == $sub.ref(0, 699421);

procedure set_mandatory_rates($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation set_mandatory_rates($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1555} {:cexpr "set_mandatory_rates:arg:gmode"} boogie_si_record_i32($i1);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $i4 := mutex_is_locked($p3);
    call {:si_unique_call 1557} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1559} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, 0);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := 5391;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $i28 := zd_iowrite32_locked($p0, $i27, $sub.i16(0, 27084));
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    call {:si_unique_call 1565} {:cexpr "tmp___2"} boogie_si_record_i32($i28);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i27 := 15;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.1);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p11, .str.118);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str.3);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.4);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.8, $p15);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 1046);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p15, $i18);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p19, 1);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.9, $p20);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1561} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} dump_stack();
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 1046, .str.10);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const read_pod: ref;

axiom read_pod == $sub.ref(0, 700453);

procedure read_pod($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation read_pod($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $i46: i16;
  var $i47: i16;
  var $i48: i16;
  var $i49: i16;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $i58: i16;
  var $i59: i16;
  var $i60: i16;
  var $i61: i16;
  var $i62: i16;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;
  var $i69: i8;
  var $p70: ref;
  var $i71: i16;
  var $i72: i16;
  var $i73: i16;
  var $i74: i16;
  var $i75: i16;
  var $i76: i16;
  var $i77: i32;
  var $i78: i32;
  var $i79: i8;
  var $i80: i32;
  var $i81: i32;
  var $i82: i8;
  var $p83: ref;
  var $i84: i16;
  var $i85: i16;
  var $i86: i16;
  var $i87: i16;
  var $i88: i16;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $i92: i8;
  var $p93: ref;
  var $i94: i16;
  var $i95: i16;
  var $i96: i16;
  var $i97: i16;
  var $i98: i16;
  var $i99: i16;
  var $i100: i32;
  var $i101: i32;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i105: i8;
  var $p106: ref;
  var $i107: i16;
  var $i108: i16;
  var $i109: i16;
  var $i110: i16;
  var $i111: i16;
  var $i112: i16;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i16;
  var $p118: ref;
  var $p119: ref;
  var $i120: i16;
  var $i121: i16;
  var $i122: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i16;
  var $i131: i16;
  var $i132: i8;
  var $i133: i32;
  var $i134: i8;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $p142: ref;
  var $i143: i16;
  var $i144: i16;
  var $i145: i8;
  var $i146: i32;
  var $p147: ref;
  var $i148: i16;
  var $i149: i16;
  var $i150: i16;
  var $i151: i8;
  var $i152: i32;
  var $p153: ref;
  var $i154: i16;
  var $i155: i16;
  var $i156: i16;
  var $i157: i8;
  var $i158: i32;
  var $p159: ref;
  var $i160: i16;
  var $i161: i16;
  var $i162: i16;
  var $i163: i8;
  var $i164: i32;
  var $p165: ref;
  var $i166: i16;
  var $i167: i16;
  var $i168: i16;
  var $i169: i8;
  var $i170: i32;
  var $p171: ref;
  var $i172: i16;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $p176: ref;
  var $i177: i16;
  var $i178: i16;
  var $i179: i16;
  var $i180: i8;
  var $i181: i32;
  var $p183: ref;
  var $i184: i16;
  var $i185: i16;
  var $p186: ref;
  var $i187: i16;
  var $i188: i16;
  var $p189: ref;
  var $i190: i16;
  var $i191: i16;
  var $p192: ref;
  var $i193: i16;
  var $i194: i16;
  var $p195: ref;
  var $i196: i16;
  var $i197: i16;
  var $i182: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 1569} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1571} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $i27 := zd_ioread32_locked($p0, $p2, $sub.i16(0, 2023));
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    call {:si_unique_call 1577} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p2);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} dev_printk.ref.ref.ref.ref.i32(.str.6, $p32, .str.120, .str.119, $i33);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p2);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 15);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i38);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p2);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i40 := $lshr.i32($i39, 16);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 15);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i16($i44);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p45);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i48 := $and.i16($i46, 15);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i49 := $and.i16($i47, $sub.i16(0, 16));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i50 := $or.i16($i49, $i48);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, $i50);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p2);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i52 := $lshr.i32($i51, 8);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 1);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i16($i56);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.0, $p57);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i60 := $and.i16($i58, 1);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i61 := $shl.i16($i60, 4);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i62 := $and.i16($i59, $sub.i16(0, 17));
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i63 := $or.i16($i62, $i61);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p57, $i63);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p2);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i65 := $lshr.i32($i64, 13);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 1);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i16($i69);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p70);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i73 := $and.i16($i71, 1);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i74 := $shl.i16($i73, 5);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i75 := $and.i16($i72, $sub.i16(0, 33));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i76 := $or.i16($i75, $i74);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, $i76);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p2);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i78 := $lshr.i32($i77, 21);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i8($i78);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 1);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i16($i82);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.0, $p83);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i86 := $and.i16($i84, 1);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i87 := $shl.i16($i86, 6);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i88 := $and.i16($i85, $sub.i16(0, 65));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i89 := $or.i16($i88, $i87);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p83, $i89);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p2);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i91 := $lshr.i32($i90, 31);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i8($i91);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i16($i92);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p93);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i96 := $and.i16($i94, 1);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i97 := $shl.i16($i96, 7);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i98 := $and.i16($i95, $sub.i16(0, 129));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i99 := $or.i16($i98, $i97);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p93, $i99);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p2);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i101 := $lshr.i32($i100, 7);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 1);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i104);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i16($i105);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p106);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i109 := $and.i16($i107, 1);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i110 := $shl.i16($i109, 8);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i111 := $and.i16($i108, $sub.i16(0, 257));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i112 := $or.i16($i111, $i110);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p106, $i112);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p2);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 16);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i116 := (if $i115 == 1 then 256 else 512);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, $i117);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.0, $p119);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i121 := $and.i16($i120, $sub.i16(0, 513));
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i122 := $or.i16($i121, 512);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p119, $i122);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p2);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 16777216);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p1);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i8($i133);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $p135 := zd_rf_name($i134);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p1);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i143 := $load.i16($M.0, $p142);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i144 := $and.i16($i143, 15);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i16.i8($i144);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i145);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i148 := $load.i16($M.0, $p147);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i149 := $lshr.i16($i148, 4);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i150 := $and.i16($i149, 1);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i16.i8($i150);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i154 := $load.i16($M.0, $p153);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i155 := $lshr.i16($i154, 5);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i156 := $and.i16($i155, 1);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i16.i8($i156);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i160 := $load.i16($M.0, $p159);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i161 := $lshr.i16($i160, 6);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i162 := $and.i16($i161, 1);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i16.i8($i162);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i163);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i166 := $load.i16($M.0, $p165);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i167 := $lshr.i16($i166, 7);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i168 := $and.i16($i167, 1);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i16.i8($i168);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i169);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11576, 1));
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i172 := $load.i16($M.0, $p171);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 256);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i175 := (if $i174 == 1 then 1 else 2);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i177 := $load.i16($M.0, $p176);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i178 := $lshr.i16($i177, 9);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i179 := $and.i16($i178, 1);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i16.i8($i179);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i180);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} dev_printk.ref.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32(.str.6, $p139, .str.121, .str.119, $p135, $i141, $i146, $i152, $i158, $i164, $i170, $i175, $i181);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i182 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $r := $i182;
    return;

  $bb11:
    assume $i125 == 1;
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p2);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i127 := $and.i32($i126, 536870912);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i128 == 1;
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i130 := $load.i16($M.0, $p129);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i131 := $and.i16($i130, $sub.i16(0, 513));
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p129, $i131);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i184 := $load.i16($M.0, $p183);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i185 := $and.i16($i184, $sub.i16(0, 16));
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p183, $i185);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i187 := $load.i16($M.0, $p186);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i188 := $and.i16($i187, $sub.i16(0, 17));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p186, $i188);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i190 := $load.i16($M.0, $p189);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i191 := $and.i16($i190, $sub.i16(0, 33));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p189, $i191);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i193 := $load.i16($M.0, $p192);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i194 := $and.i16($i193, $sub.i16(0, 65));
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p192, $i194);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i196 := $load.i16($M.0, $p195);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i197 := $and.i16($i196, $sub.i16(0, 129));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p195, $i197);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i182 := $i27;
    goto $bb17;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.1);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.119);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.3);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.4);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.8, $p16);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 335);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p16, $i19);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p20, 1);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.9, $p21);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1573} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} dump_stack();
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.3, 335, .str.10);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const hw_init: ref;

axiom hw_init == $sub.ref(0, 701485);

procedure hw_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation hw_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.122);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} $i7 := mutex_is_locked($p6);
    call {:si_unique_call 1584} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1586} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $i29 := hw_reset_phy($p0);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    call {:si_unique_call 1592} {:cexpr "r"} boogie_si_record_i32($i29);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i32 := hw_init_hmac($p0);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    call {:si_unique_call 1594} {:cexpr "r"} boogie_si_record_i32($i32);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $i34 := set_beacon_interval($p0, 100, 0, 0);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    call {:si_unique_call 1596} {:cexpr "tmp___2"} boogie_si_record_i32($i34);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i31 := $i34;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i31 := $i32;
    goto $bb9;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb9;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.1);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.122);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str.3);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p16, .str.4);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.8, $p18);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 948);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p18, $i21);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p22, 1);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.9, $p23);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1588} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} dump_stack();
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.3, 948, .str.10);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_rf_init_hw: ref;

axiom zd_rf_init_hw == $sub.ref(0, 702517);

procedure zd_rf_init_hw($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.40, $CurrAddr, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, assertsPassed, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_rf_init_hw($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i38: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1598} {:cexpr "zd_rf_init_hw:arg:type"} boogie_si_record_i8($i1);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $p3 := zd_rf_to_chip($p0);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 1601} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1603} {:cexpr "tmp___2"} boogie_si_record_i64($i9);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i27, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i27, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i1);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $p44 := zd_rf_name($i43);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i1);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} dev_err.ref.ref.ref.i32($p48, .str.50, $p44, $i49);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 0);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 19);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i37 := zd_rf_init_rf2959($p0);
    call {:si_unique_call 1611} {:cexpr "r"} boogie_si_record_i32($i37);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i38, 0);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i1);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $i54 := zd_chip_lock_phy_regs($p3);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    call {:si_unique_call 1619} {:cexpr "r"} boogie_si_record_i32($i54);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    call {:si_unique_call 1620} $i58 := devirtbounce.4($p57, $p0);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    call {:si_unique_call 1621} {:cexpr "t"} boogie_si_record_i32($i58);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $i59 := zd_chip_unlock_phy_regs($p3);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    call {:si_unique_call 1623} {:cexpr "r"} boogie_si_record_i32($i59);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i58, 0);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i59;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i51 := $i61;
    goto $bb31;

  $bb38:
    assume $i60 == 1;
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i61 := $i58;
    goto $bb40;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i55 == 1;
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i51 := $i54;
    goto $bb31;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i52 == 1;
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i51 := $i38;
    goto $bb31;

  $bb13:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i27, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $i39 := zd_rf_init_al2230($p0);
    call {:si_unique_call 1613} {:cexpr "r"} boogie_si_record_i32($i39);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i38 := $i39;
    goto $bb29;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $i41 := zd_rf_init_uw2453($p0);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    call {:si_unique_call 1609} {:cexpr "r"} boogie_si_record_i32($i41);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i38 := $i41;
    goto $bb29;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i27, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i27, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i34 == 1);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb23:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i27, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb17;

  $bb25:
    assume $i35 == 1;
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $i40 := zd_rf_init_al7230b($p0);
    call {:si_unique_call 1615} {:cexpr "r"} boogie_si_record_i32($i40);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i38 := $i40;
    goto $bb29;

  $bb21:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i27, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb17;

  $bb27:
    assume $i36 == 1;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.1);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.48);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.49);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.4);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.8, $p16);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 76);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p16, $i19);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p20, 1);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.9, $p21);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1605} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} dump_stack();
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.49, 76, .str.10);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const print_fw_version: ref;

axiom print_fw_version == $sub.ref(0, 703549);

procedure print_fw_version($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.0, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation print_fw_version($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i12: i32;
  var vslice_dummy_var_119: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $p2 := zd_chip_to_mac($p0);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.35, $p3);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.36, $p5);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $i7 := fw_reg_addr($p0, 0);
    call {:si_unique_call 1627} {:cexpr "tmp___0"} boogie_si_record_i16($i7);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $i10 := zd_ioread16_locked($p0, $p1, $i9);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    call {:si_unique_call 1629} {:cexpr "r"} boogie_si_record_i32($i10);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p1);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} _dev_info.ref.ref.i32($p16, .str.130, $i18);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 1776)), $mul.ref(117, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p1);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} vslice_dummy_var_119 := snprintf.ref.i64.ref.i32($p20, 32, .str.131, $i22);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;

  SeqInstr_607:
    assume !assertsPassed;
    return;
}



const dump_fw_registers: ref;

axiom dump_fw_registers == $sub.ref(0, 704581);

procedure dump_fw_registers($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation dump_fw_registers($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i16;
  var $i5: i16;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} $i3 := fw_reg_addr($p0, 0);
    call {:si_unique_call 1635} {:cexpr "tmp"} boogie_si_record_i16($i3);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} $i4 := fw_reg_addr($p0, 1);
    call {:si_unique_call 1637} {:cexpr "tmp___0"} boogie_si_record_i16($i4);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} $i5 := fw_reg_addr($p0, 2);
    call {:si_unique_call 1639} {:cexpr "tmp___1"} boogie_si_record_i16($i5);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $i6 := fw_reg_addr($p0, 3);
    call {:si_unique_call 1641} {:cexpr "tmp___2"} boogie_si_record_i16($i6);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 2));
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $i3);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 2));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $i4);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(2, 2));
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i5);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(3, 2));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i6);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $i13 := zd_ioread16v_locked($p0, $p11, $p12, 4);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    call {:si_unique_call 1643} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 2));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} dev_printk.ref.ref.ref.ref.i32(.str.6, $p22, .str.134, .str.133, $i25);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 2));
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} dev_printk.ref.ref.ref.ref.i32(.str.6, $p29, .str.135, .str.133, $i32);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 2));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} dev_printk.ref.ref.ref.ref.i32(.str.6, $p36, .str.136, .str.133, $i39);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(3, 2));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} dev_printk.ref.ref.ref.ref.i32(.str.6, $p43, .str.137, .str.133, $i46);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} dev_printk.ref.ref.ref.ref.i32(.str.6, $p18, .str.132, .str.133, $i13);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_610:
    assume !assertsPassed;
    return;
}



const read_cal_int_tables: ref;

axiom read_cal_int_tables == $sub.ref(0, 705613);

procedure read_cal_int_tables($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29;



implementation read_cal_int_tables($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $i1 := read_pwr_cal_values($p0);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    call {:si_unique_call 1650} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $i4 := read_pwr_int_values($p0);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    call {:si_unique_call 1652} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} $i6 := read_ofdm_cal_values($p0);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    call {:si_unique_call 1654} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  SeqInstr_613:
    assume !assertsPassed;
    return;
}



const print_id: ref;

axiom print_id == $sub.ref(0, 706645);

procedure print_id($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $CurrAddr;



implementation print_id($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} $p1 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} vslice_dummy_var_120 := scnprint_id($p0, $p2, 80);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(79, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p4, 0);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} _dev_info.ref.ref.ref($p8, .str.139, $p9);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    return;
}



const scnprint_id: ref;

axiom scnprint_id == $sub.ref(0, 707677);

procedure scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i16;
  var $i45: i16;
  var $i46: i8;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} {:cexpr "scnprint_id:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $i3 := zd_chip_is_zd1211b($p0);
    call {:si_unique_call 1660} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p5 := (if $i4 == 1 then .str.141 else .str.142);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $i6 := scnprintf.ref.i64.ref.ref($p1, $i2, .str.140, $p5);
    call {:si_unique_call 1662} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref($i8, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i6);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i2, $i10);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} $i12 := zd_usb_scnprint_id($p7, $p9, $i11);
    call {:si_unique_call 1664} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i6);
    call {:si_unique_call 1665} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref($i14, 1));
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i13);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64($i2, $i16);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} $i18 := scnprintf.ref.i64.ref($p15, $i17, .str.143);
    call {:si_unique_call 1667} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, $i13);
    call {:si_unique_call 1668} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p1, $mul.ref($i20, 1));
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i19);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($i2, $i22);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $i24 := scnprint_mac_oui($p0, $p21, $i23);
    call {:si_unique_call 1670} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, $i19);
    call {:si_unique_call 1671} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p1, $mul.ref($i26, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i25);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i29 := $sub.i64($i2, $i28);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $i30 := scnprintf.ref.i64.ref($p27, $i29, .str.143);
    call {:si_unique_call 1673} {:cexpr "tmp___3"} boogie_si_record_i32($i30);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, $i25);
    call {:si_unique_call 1674} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11280, 1));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i31);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p1, $mul.ref($i33, 1));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i31);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i36 := $sub.i64($i2, $i35);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $i37 := zd_rf_scnprint_id($p32, $p34, $i36);
    call {:si_unique_call 1676} {:cexpr "tmp___4"} boogie_si_record_i32($i37);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, $i31);
    call {:si_unique_call 1677} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p1, $mul.ref($i39, 1));
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i38);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i42 := $sub.i64($i2, $i41);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11578, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i45 := $and.i16($i44, 15);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i16.i8($i45);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p0);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(11578, 1));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i53 := (if $i52 == 1 then 103 else 45);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p0);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(11578, 1));
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i59 := (if $i58 == 1 then 55 else 45);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p0);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(11578, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i65 := (if $i64 == 1 then 54 else 45);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p0);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(11578, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i71 := (if $i70 == 1 then 78 else 45);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p0);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(11579, 1));
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i77 := (if $i76 == 1 then 83 else 45);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $i78 := scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32($p40, $i42, .str.144, $i47, $i53, $i59, $i65, $i71, $i77);
    call {:si_unique_call 1679} {:cexpr "tmp___5"} boogie_si_record_i32($i78);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, $i38);
    call {:si_unique_call 1680} {:cexpr "i"} boogie_si_record_i32($i79);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $r := $i79;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 708709);

procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    return;
}



const scnprintf: ref;

axiom scnprintf == $sub.ref(0, 709741);

procedure scnprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1681} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1682} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1683} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.i32.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1684} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1685} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1686} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1687} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1688} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1689} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1690} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1691} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1692} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1693} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1694} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1695} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1697} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1698} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const zd_usb_scnprint_id: ref;

axiom zd_usb_scnprint_id == $sub.ref(0, 710773);

procedure zd_usb_scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation zd_usb_scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} {:cexpr "zd_usb_scnprint_id:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} $p5 := interface_to_usbdev($p4);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $i6 := scnprint_id___0($p5, $p1, $i2);
    call {:si_unique_call 1702} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const scnprint_mac_oui: ref;

axiom scnprint_mac_oui == $sub.ref(0, 711805);

procedure scnprint_mac_oui($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprint_mac_oui($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} {:cexpr "scnprint_mac_oui:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} $p3 := zd_chip_to_mac($p0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $p4 := zd_mac_get_perm_addr($p3);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p4, $mul.ref(1, 1));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p4, $mul.ref(2, 1));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} $i13 := scnprintf.ref.i64.ref.i32.i32.i32($p1, $i2, .str.145, $i6, $i9, $i12);
    call {:si_unique_call 1707} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const zd_rf_scnprint_id: ref;

axiom zd_rf_scnprint_id == $sub.ref(0, 712837);

procedure zd_rf_scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation zd_rf_scnprint_id($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} {:cexpr "zd_rf_scnprint_id:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} $p7 := zd_rf_name($i6);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $i8 := scnprintf.ref.i64.ref.ref($p1, $i2, .str.51, $p7);
    call {:si_unique_call 1711} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const zd_rf_name: ref;

axiom zd_rf_name == $sub.ref(0, 713869);

procedure zd_rf_name($i0: i8) returns ($r: ref);
  free requires assertsPassed;



implementation zd_rf_name($i0: i8) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i8;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} {:cexpr "zd_rf_name:arg:type"} boogie_si_record_i8($i0);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 240);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref($i6, 8));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.37, $p7);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const zd_mac_get_perm_addr: ref;

axiom zd_mac_get_perm_addr == $sub.ref(0, 714901);

procedure zd_mac_get_perm_addr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation zd_mac_get_perm_addr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1776)), $mul.ref(0, 1));
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const scnprint_id___0: ref;

axiom scnprint_id___0 == $sub.ref(0, 715933);

procedure scnprint_id___0($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprint_id___0($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} {:cexpr "scnprint_id___0:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} $p5 := speed($i4);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $i6 := get_bcdDevice($p0);
    call {:si_unique_call 1716} {:cexpr "tmp___0"} boogie_si_record_i16($i6);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i6);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} $i16 := scnprintf.ref.i64.ref.i32.i32.i32.ref($p1, $i2, .str.242, $i10, $i14, $i15, $p5);
    call {:si_unique_call 1718} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const speed: ref;

axiom speed == $sub.ref(0, 716965);

procedure speed($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation speed($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    call {:si_unique_call 1719} {:cexpr "speed:arg:speed___0"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p5 := .str.246;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p5 := .str.245;
    goto $bb11;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p5 := .str.244;
    goto $bb11;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p5 := .str.243;
    goto $bb11;
}



const get_bcdDevice: ref;

axiom get_bcdDevice == $sub.ref(0, 717997);

procedure get_bcdDevice($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation get_bcdDevice($p0: ref) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(12, 1));
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const read_pwr_cal_values: ref;

axiom read_pwr_cal_values == $sub.ref(0, 719029);

procedure read_pwr_cal_values($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation read_pwr_cal_values($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11506, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $i3 := read_values($p0, $p2, 14, $sub.i16(0, 2017), 0);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    call {:si_unique_call 1721} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;
}



const read_pwr_int_values: ref;

axiom read_pwr_int_values == $sub.ref(0, 720061);

procedure read_pwr_int_values($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation read_pwr_int_values($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11520, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $i3 := read_values($p0, $p2, 14, $sub.i16(0, 2009), 8);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    call {:si_unique_call 1723} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;
}



const read_ofdm_cal_values: ref;

axiom read_ofdm_cal_values == $sub.ref(0, 721093);

procedure read_ofdm_cal_values($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29;



implementation read_ofdm_cal_values($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 2));
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $M.39 := $store.i16($M.39, $p2, $sub.i16(0, 1985));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 2));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $M.39 := $store.i16($M.39, $p3, $sub.i16(0, 1969));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 2));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $M.39 := $store.i16($M.39, $p4, $sub.i16(0, 1953));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 2));
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.39, $p7);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} $i11 := read_values($p0, $p6, 14, $i10, 0);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    call {:si_unique_call 1726} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(1, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 2));
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.39, $p18);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} $i22 := read_values($p0, $p17, 14, $i21, 0);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i13 := $i22;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11534, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(2, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 2));
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.39, $p27);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} $i31 := read_values($p0, $p26, 14, $i30, 0);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i13 := $i31;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb4;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb4;

  SeqInstr_628:
    assume !assertsPassed;
    return;
}



const read_values: ref;

axiom read_values == $sub.ref(0, 722125);

procedure read_values($p0: ref, $p1: ref, $i2: i64, $i3: i16, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation read_values($p0: ref, $p1: ref, $i2: i64, $i3: i16, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $i36: i32;
  var $i34: i32;
  var $i35: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $i42: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i64;
  var $p66: ref;
  var $i43: i32;
  var $i67: i64;
  var $i68: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $i75: i64;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $i79: i1;
  var $i69: i32;
  var $i80: i32;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i16;
  var $i85: i32;
  var $i86: i1;
  var $i37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1731} {:cexpr "read_values:arg:count"} boogie_si_record_i64($i2);
    call {:si_unique_call 1732} {:cexpr "read_values:arg:e2p_addr"} boogie_si_record_i16($i3);
    call {:si_unique_call 1733} {:cexpr "read_values:arg:guard"} boogie_si_record_i32($i4);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} $i8 := mutex_is_locked($p7);
    call {:si_unique_call 1735} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1737} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i3);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $i32 := zd_ioread32_locked($p0, $p5, $i31);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    call {:si_unique_call 1743} {:cexpr "r"} boogie_si_record_i32($i32);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i33 == 1);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb10;

  $bb10:
    call $i36, $i35, $i38, $i39, $i40, $i41, $i42, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i43, $i80, $i81, $i82, $i83, $i84, $i85, $i86 := read_values_loop_$bb10($p0, $p1, $i2, $i4, $p5, $i30, $i36, $i35, $i38, $i39, $i40, $i41, $i42, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i43, $i80, $i81, $i82, $i83, $i84, $i85, $i86);
    goto $bb10_last;

  $bb13:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p5);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, $i4);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i39);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i35, 4);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i42 := $ult.i64($i41, $i2);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i43 := $i35;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i43);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i68 := $ult.i64($i67, $i2);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb18:
    assume $i68 == 1;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i69 := $i43;
    goto $bb21;

  $bb21:
    call $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $i79, $i69 := read_values_loop_$bb21($p1, $i2, $p5, $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $i79, $i69);
    goto $bb21_last;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p5);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i71 := $srem.i32($i69, 3);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i72 := $mul.i32($i71, 8);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i73 := $lshr.i32($i70, $i72);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i69);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p1, $mul.ref($i75, 1));
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, $i74);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i69, 1);
    call {:si_unique_call 1750} {:cexpr "i"} boogie_si_record_i32($i77);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i79 := $ult.i64($i78, $i2);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i79 == 1);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i69 := $i77;
    goto $bb23_dummy;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i35, 1);
    call {:si_unique_call 1744} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p5);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i35);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p1, $mul.ref($i47, 1));
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i46);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i44, 1);
    call {:si_unique_call 1745} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p5);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i51 := $lshr.i32($i50, 8);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i44);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p1, $mul.ref($i53, 1));
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, $i52);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i49, 1);
    call {:si_unique_call 1746} {:cexpr "i"} boogie_si_record_i32($i55);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p5);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i57 := $lshr.i32($i56, 16);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i49);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p1, $mul.ref($i59, 1));
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, $i58);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i55, 1);
    call {:si_unique_call 1747} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p5);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i63 := $lshr.i32($i62, 24);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i55);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p1, $mul.ref($i65, 1));
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i64);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i80 := $sdiv.i32($i61, 2);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, $i30);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} $i85 := zd_ioread32_locked($p0, $p5, $i84);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    call {:si_unique_call 1749} {:cexpr "r"} boogie_si_record_i32($i85);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i36 := $i85;
    assume true;
    goto $bb11, $bb26;

  $bb26:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i61;
    goto $bb26_dummy;

  $bb11:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i34 := $i36;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i37 := $i34;
    goto $bb12;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb8;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.1);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p15, .str.138);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p16, .str.3);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p17, .str.4);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.8, $p19);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 448);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p19, $i22);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p23, 1);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.9, $p24);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 1739} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} dump_stack();
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i29 == 1;
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} __dynamic_pr_debug.ref.ref.ref.i32.ref($p6, .str.4, .str.3, 448, .str.10);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7480;

  $bb26_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;
}



const zd_ioread16_locked: ref;

axiom zd_ioread16_locked == $sub.ref(0, 723157);

procedure zd_ioread16_locked($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.10, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_ioread16_locked($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1752} {:cexpr "zd_ioread16_locked:arg:addr"} boogie_si_record_i16($i2);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 1754} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1756} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i2);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $i30 := zd_usb_ioread16($p27, $p1, $i29);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    call {:si_unique_call 1762} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.1);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.104);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.101);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.4);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.8, $p16);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 819);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p16, $i19);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p20, 1);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.9, $p21);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1758} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} dump_stack();
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.101, 819, .str.10);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 724189);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const zd_usb_ioread16: ref;

axiom zd_usb_ioread16 == $sub.ref(0, 725221);

procedure zd_usb_ioread16($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_usb_ioread16($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i2);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} $i4 := zd_usb_ioread16v($p0, $p1, $p3, 1);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    call {:si_unique_call 1765} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;
}



const zd_rf_init_rf2959: ref;

axiom zd_rf_init_rf2959 == $sub.ref(0, 726253);

procedure zd_rf_init_rf2959($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_rf_init_rf2959($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} $p1 := zd_rf_to_chip($p0);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} $i2 := zd_chip_is_zd1211b($p1);
    call {:si_unique_call 1768} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, rf2959_init_hw);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, rf2959_set_channel);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, rf2959_switch_radio_on);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, rf2959_switch_radio_off);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} dev_err.ref.ref($p7, .str.47);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const zd_rf_init_al2230: ref;

axiom zd_rf_init_al2230 == $sub.ref(0, 727285);

procedure zd_rf_init_al2230($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_rf_init_al2230($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} $p1 := zd_rf_to_chip($p0);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, al2230_switch_radio_off);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} $i3 := zd_chip_is_zd1211b($p1);
    call {:si_unique_call 1772} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, zd1211_al2230_init_hw);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, zd1211_al2230_set_channel);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, zd1211_al2230_switch_radio_on);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, zd_rf_generic_patch_6m);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, $sub.i8(0, 3));
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i15 := $or.i8($i14, 2);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i15);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, zd1211b_al2230_init_hw);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, zd1211b_al2230_set_channel);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, zd1211b_al2230_switch_radio_on);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_rf_init_al7230b: ref;

axiom zd_rf_init_al7230b == $sub.ref(0, 728317);

procedure zd_rf_init_al7230b($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_rf_init_al7230b($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $p1 := zd_rf_to_chip($p0);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} $i2 := zd_chip_is_zd1211b($p1);
    call {:si_unique_call 1775} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, zd1211_al7230b_init_hw);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, zd1211_al7230b_switch_radio_on);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, zd1211_al7230b_set_channel);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, zd_rf_generic_patch_6m);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, $sub.i8(0, 3));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i15 := $or.i8($i14, 2);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i15);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, al7230b_switch_radio_off);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, zd1211b_al7230b_init_hw);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, zd1211b_al7230b_switch_radio_on);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, zd1211b_al7230b_set_channel);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, zd1211b_al7230b_patch_6m);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_rf_init_uw2453: ref;

axiom zd_rf_init_uw2453 == $sub.ref(0, 729349);

procedure zd_rf_init_uw2453($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation zd_rf_init_uw2453($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, uw2453_init_hw);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, uw2453_set_channel);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, uw2453_switch_radio_on);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, uw2453_switch_radio_off);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, zd_rf_generic_patch_6m);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, uw2453_clear);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i9 := $and.i8($i8, $sub.i8(0, 2));
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i9);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} $p10 := kmalloc(4, 208);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p10);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_649:
    assume !assertsPassed;
    return;
}



const uw2453_init_hw: ref;

axiom uw2453_init_hw == $sub.ref(0, 730381);

procedure uw2453_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.40, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation uw2453_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p110: ref;
  var $p112: ref;
  var $p114: ref;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $p136: ref;
  var $p138: ref;
  var $p140: ref;
  var $p142: ref;
  var $p144: ref;
  var $p146: ref;
  var $p148: ref;
  var $p150: ref;
  var $p152: ref;
  var $p154: ref;
  var $p156: ref;
  var $p158: ref;
  var $p160: ref;
  var $p162: ref;
  var $p164: ref;
  var $p166: ref;
  var $p168: ref;
  var $p170: ref;
  var $p172: ref;
  var $p174: ref;
  var $p176: ref;
  var $p178: ref;
  var $p180: ref;
  var $p182: ref;
  var $p184: ref;
  var $p186: ref;
  var $p188: ref;
  var $p190: ref;
  var $p192: ref;
  var $p194: ref;
  var $p196: ref;
  var $p198: ref;
  var $p200: ref;
  var $p202: ref;
  var $p204: ref;
  var $p206: ref;
  var $p208: ref;
  var $p210: ref;
  var $p212: ref;
  var $p214: ref;
  var $p216: ref;
  var $p218: ref;
  var $p220: ref;
  var $p222: ref;
  var $p224: ref;
  var $p226: ref;
  var $p228: ref;
  var $p230: ref;
  var $p232: ref;
  var $p234: ref;
  var $p236: ref;
  var $p238: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i32;
  var $i252: i1;
  var $p254: ref;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i32;
  var $i263: i1;
  var $i264: i32;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i32;
  var $i269: i1;
  var $i270: i32;
  var $i271: i16;
  var $i272: i32;
  var $i273: i32;
  var $i274: i1;
  var $i275: i32;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i280: i32;
  var $i281: i1;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i32;
  var $i287: i1;
  var $i288: i32;
  var $i289: i1;
  var $i290: i32;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $i295: i32;
  var $i253: i32;
  var $i296: i32;
  var $i297: i1;
  var $i298: i32;
  var $i299: i1;
  var $i300: i32;
  var $i301: i1;
  var $i302: i32;
  var $i303: i1;
  var $i304: i16;
  var $i305: i32;
  var $i306: i32;
  var $i307: i1;
  var $i308: i32;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i312: i32;
  var $i313: i1;
  var $i314: i32;
  var $i315: i1;
  var $i316: i16;
  var $i317: i32;
  var $i318: i32;
  var $i319: i1;
  var $i320: i32;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $i324: i32;
  var $i325: i1;
  var $i326: i32;
  var $i327: i1;
  var $i328: i16;
  var $i329: i32;
  var $i330: i32;
  var $i331: i1;
  var $i332: i32;
  var $i333: i1;
  var $i334: i32;
  var $i335: i1;
  var $i336: i32;
  var $i337: i1;
  var $i338: i32;
  var $i339: i1;
  var $i340: i16;
  var $i341: i32;
  var $i342: i32;
  var $i343: i1;
  var $i344: i32;
  var $i345: i1;
  var $i346: i32;
  var $i347: i1;
  var $i348: i32;
  var $i349: i1;
  var $i350: i32;
  var $i351: i1;
  var $i352: i16;
  var $i353: i32;
  var $i354: i32;
  var $i355: i1;
  var $i356: i32;
  var $i357: i1;
  var $i358: i32;
  var $i359: i1;
  var $i360: i32;
  var $i361: i1;
  var $i362: i32;
  var $i363: i1;
  var $i364: i16;
  var $i365: i32;
  var $i366: i32;
  var $i367: i1;
  var $i368: i32;
  var $i369: i1;
  var $i370: i32;
  var $i371: i1;
  var $i372: i32;
  var $i373: i1;
  var $i374: i32;
  var $i375: i1;
  var $i376: i16;
  var $i377: i32;
  var $i378: i32;
  var $i379: i1;
  var $i380: i32;
  var $i381: i1;
  var $i382: i32;
  var $i383: i1;
  var $i384: i32;
  var $i385: i1;
  var $i386: i32;
  var $i387: i1;
  var $i388: i16;
  var $i389: i32;
  var $i390: i32;
  var $i391: i1;
  var $i392: i32;
  var $i393: i1;
  var $i394: i32;
  var $i395: i1;
  var $i396: i32;
  var $i397: i1;
  var $i398: i32;
  var $i399: i1;
  var $i400: i16;
  var $i401: i32;
  var $i402: i32;
  var $i403: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} $p2 := $alloc($mul.ref(236, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} $p3 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} $p4 := zd_rf_to_chip($p0);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $sub.i16(0, 28632));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 137);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $sub.i16(0, 28612));
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 32);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $sub.i16(0, 28604));
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 40);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $sub.i16(0, 28580));
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, 56);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, $sub.i16(0, 28576));
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, 32);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $sub.i16(0, 28568));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, 147);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, $sub.i16(0, 28564));
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, 21);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, $sub.i16(0, 28560));
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, 62);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, $sub.i16(0, 28556));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, 0);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p42, $sub.i16(0, 28540));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, 40);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, $sub.i16(0, 28536));
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p48, 48);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, $sub.i16(0, 28532));
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, 67);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, $sub.i16(0, 28508));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, 36);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, $sub.i16(0, 28496));
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, 50);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, $sub.i16(0, 28488));
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p64, 146);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p66, $sub.i16(0, 28484));
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, 30);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, $sub.i16(0, 28480));
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, 4);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p74, $sub.i16(0, 28476));
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p76, 250);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p78, $sub.i16(0, 28356));
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, 88);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p82, $sub.i16(0, 28352));
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p84, 48);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p86, $sub.i16(0, 28348));
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p88, 48);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, $sub.i16(0, 28324));
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p92, 10);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p94, $sub.i16(0, 28316));
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p96, 4);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p98, $sub.i16(0, 28308));
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p100, 0);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p102, $sub.i16(0, 28304));
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p104, 10);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p106, $sub.i16(0, 28280));
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p108, 141);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p110, $sub.i16(0, 28276));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p112, 40);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p114, $sub.i16(0, 28272));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p116, 2);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, $sub.i16(0, 28268));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p120, 9);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p122, $sub.i16(0, 28264));
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p124, 39);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p126, $sub.i16(0, 28248));
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p128, 28);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p130, $sub.i16(0, 28244));
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p132, 28);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p134, $sub.i16(0, 28236));
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p136, 19);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p138, $sub.i16(0, 28232));
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p140, 31);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p142, $sub.i16(0, 28228));
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p144, 19);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p146, $sub.i16(0, 28224));
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p148, 31);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p150, $sub.i16(0, 28220));
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p152, 39);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p154, $sub.i16(0, 28216));
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p156, 35);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p158, $sub.i16(0, 28212));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p160, 36);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p162, $sub.i16(0, 28208));
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p164, 36);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p166, $sub.i16(0, 28204));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p168, 250);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p170, $sub.i16(0, 28200));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p172, 240);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p174, $sub.i16(0, 28196));
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p176, 26);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p178, $sub.i16(0, 28192));
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p180, 79);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p182, $sub.i16(0, 28188));
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p184, 31);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p186, $sub.i16(0, 28184));
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p188, 240);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p190, $sub.i16(0, 28180));
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p192, 87);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p194, $sub.i16(0, 28172));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p196, 173);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p198, $sub.i16(0, 28168));
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p200, 108);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p202, $sub.i16(0, 28164));
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p204, 3);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p206, $sub.i16(0, 28160));
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p208, 20);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p210, $sub.i16(0, 28156));
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p212, 18);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p214, $sub.i16(0, 28152));
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p216, 16);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p218, $sub.i16(0, 28124));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p220, 80);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p222, $sub.i16(0, 28120));
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p224, 168);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p226, $sub.i16(0, 28096));
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p228, 172);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(56, 4)), $mul.ref(0, 1));
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p230, $sub.i16(0, 28088));
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(56, 4)), $mul.ref(2, 1));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p232, 32);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(57, 4)), $mul.ref(0, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p234, $sub.i16(0, 27664));
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(57, 4)), $mul.ref(2, 1));
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p236, 255);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(58, 4)), $mul.ref(0, 1));
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p238, $sub.i16(0, 27660));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 236)), $mul.ref(58, 4)), $mul.ref(2, 1));
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p240, 255);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(0, 4));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p241, 4194347);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(1, 4));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p242, 5348943);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(2, 4));
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p243, 7307693);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(3, 4));
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p244, 7602174);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(4, 4));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p245, 155548);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(5, 4));
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p246, 1048647);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(6, 4));
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p247, 2099609);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(7, 4));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p248, 3175938);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(8, 4));
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p249, 3432547);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p250 := $bitcast.ref.ref($p2);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} $i251 := zd_iowrite16a_locked($p4, $p250, 59);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    call {:si_unique_call 1782} {:cexpr "r"} boogie_si_record_i32($i251);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i251, 0);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p3);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} $i255 := zd_rfwritev_locked($p4, $p254, 9, 24);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    call {:si_unique_call 1784} {:cexpr "r"} boogie_si_record_i32($i255);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} $i257 := uw2453_init_mode($p4);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    call {:si_unique_call 1786} {:cexpr "r"} boogie_si_record_i32($i257);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} $i259 := uw2453_synth_set_channel($p4, 1, 0);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    call {:si_unique_call 1788} {:cexpr "r"} boogie_si_record_i32($i259);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i261 := $i259;
    assume {:branchcond $i260} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $i262 := uw2453_write_vco_cfg($p4, 26189);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    call {:si_unique_call 1790} {:cexpr "r"} boogie_si_record_i32($i262);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i264 := $i262;
    assume {:branchcond $i263} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $i265 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    call {:si_unique_call 1792} {:cexpr "r"} boogie_si_record_i32($i265);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 0);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i267 := $i265;
    assume {:branchcond $i266} true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} $i268 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    call {:si_unique_call 1794} {:cexpr "r"} boogie_si_record_i32($i268);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i269 := $ne.i32($i268, 0);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i270 := $i268;
    assume {:branchcond $i269} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i271 := $load.i16($M.0, $p1);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i272 := $zext.i16.i32($i271);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i273 := $and.i32($i272, 15);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 0);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i275 := 0;
    assume {:branchcond $i274} true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} $i296 := uw2453_synth_set_channel($p4, 1, 0);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i297 := $ne.i32($i296, 0);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i261 := $i296;
    assume {:branchcond $i297} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} $i298 := uw2453_write_vco_cfg($p4, 26221);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i264 := $i298;
    assume {:branchcond $i299} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} $i300 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i301 := $ne.i32($i300, 0);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i267 := $i300;
    assume {:branchcond $i301} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} $i302 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i303 := $ne.i32($i302, 0);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i270 := $i302;
    assume {:branchcond $i303} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i304 := $load.i16($M.0, $p1);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i305 := $zext.i16.i32($i304);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i306 := $and.i32($i305, 15);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i306, 0);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i275 := 1;
    assume {:branchcond $i307} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} $i308 := uw2453_synth_set_channel($p4, 1, 0);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i309 := $ne.i32($i308, 0);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i261 := $i308;
    assume {:branchcond $i309} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} $i310 := uw2453_write_vco_cfg($p4, 26205);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i311 := $ne.i32($i310, 0);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i264 := $i310;
    assume {:branchcond $i311} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $i312 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i313 := $ne.i32($i312, 0);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i267 := $i312;
    assume {:branchcond $i313} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} $i314 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 0);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i270 := $i314;
    assume {:branchcond $i315} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i316 := $load.i16($M.0, $p1);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i317 := $zext.i16.i32($i316);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i318 := $and.i32($i317, 15);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i318, 0);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i275 := 2;
    assume {:branchcond $i319} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} $i320 := uw2453_synth_set_channel($p4, 1, 0);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i261 := $i320;
    assume {:branchcond $i321} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} $i322 := uw2453_write_vco_cfg($p4, 26237);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i264 := $i322;
    assume {:branchcond $i323} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $i324 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i325 := $ne.i32($i324, 0);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i267 := $i324;
    assume {:branchcond $i325} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} $i326 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i327 := $ne.i32($i326, 0);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i270 := $i326;
    assume {:branchcond $i327} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i328 := $load.i16($M.0, $p1);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i329 := $zext.i16.i32($i328);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i330 := $and.i32($i329, 15);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i330, 0);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i275 := 3;
    assume {:branchcond $i331} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} $i332 := uw2453_synth_set_channel($p4, 1, 0);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i333 := $ne.i32($i332, 0);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i261 := $i332;
    assume {:branchcond $i333} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} $i334 := uw2453_write_vco_cfg($p4, 26179);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i335 := $ne.i32($i334, 0);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i264 := $i334;
    assume {:branchcond $i335} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} $i336 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i337 := $ne.i32($i336, 0);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i267 := $i336;
    assume {:branchcond $i337} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} $i338 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i339 := $ne.i32($i338, 0);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i270 := $i338;
    assume {:branchcond $i339} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i340 := $load.i16($M.0, $p1);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i341 := $zext.i16.i32($i340);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i342 := $and.i32($i341, 15);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i342, 0);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i275 := 4;
    assume {:branchcond $i343} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} $i344 := uw2453_synth_set_channel($p4, 1, 0);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i345 := $ne.i32($i344, 0);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i261 := $i344;
    assume {:branchcond $i345} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $i346 := uw2453_write_vco_cfg($p4, 26211);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i347 := $ne.i32($i346, 0);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i264 := $i346;
    assume {:branchcond $i347} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} $i348 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i349 := $ne.i32($i348, 0);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i267 := $i348;
    assume {:branchcond $i349} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} $i350 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i351 := $ne.i32($i350, 0);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i270 := $i350;
    assume {:branchcond $i351} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i352 := $load.i16($M.0, $p1);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i353 := $zext.i16.i32($i352);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i354 := $and.i32($i353, 15);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, 0);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i275 := 5;
    assume {:branchcond $i355} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} $i356 := uw2453_synth_set_channel($p4, 1, 0);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i357 := $ne.i32($i356, 0);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i261 := $i356;
    assume {:branchcond $i357} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} $i358 := uw2453_write_vco_cfg($p4, 26195);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i359 := $ne.i32($i358, 0);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i264 := $i358;
    assume {:branchcond $i359} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} $i360 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i361 := $ne.i32($i360, 0);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i267 := $i360;
    assume {:branchcond $i361} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} $i362 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i363 := $ne.i32($i362, 0);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i270 := $i362;
    assume {:branchcond $i363} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i364 := $load.i16($M.0, $p1);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i365 := $zext.i16.i32($i364);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i366 := $and.i32($i365, 15);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i366, 0);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i275 := 6;
    assume {:branchcond $i367} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} $i368 := uw2453_synth_set_channel($p4, 1, 0);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i369 := $ne.i32($i368, 0);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i261 := $i368;
    assume {:branchcond $i369} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} $i370 := uw2453_write_vco_cfg($p4, 26227);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i371 := $ne.i32($i370, 0);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i264 := $i370;
    assume {:branchcond $i371} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} $i372 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i373 := $ne.i32($i372, 0);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i267 := $i372;
    assume {:branchcond $i373} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} $i374 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i375 := $ne.i32($i374, 0);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i270 := $i374;
    assume {:branchcond $i375} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i376 := $load.i16($M.0, $p1);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i377 := $zext.i16.i32($i376);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i378 := $and.i32($i377, 15);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 0);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i275 := 7;
    assume {:branchcond $i379} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $i380 := uw2453_synth_set_channel($p4, 1, 0);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i381 := $ne.i32($i380, 0);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i261 := $i380;
    assume {:branchcond $i381} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} $i382 := uw2453_write_vco_cfg($p4, 26187);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i383 := $ne.i32($i382, 0);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i264 := $i382;
    assume {:branchcond $i383} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $i384 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i385 := $ne.i32($i384, 0);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i267 := $i384;
    assume {:branchcond $i385} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} $i386 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i387 := $ne.i32($i386, 0);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i270 := $i386;
    assume {:branchcond $i387} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i388 := $load.i16($M.0, $p1);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i389 := $zext.i16.i32($i388);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i390 := $and.i32($i389, 15);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i391 := $eq.i32($i390, 0);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i275 := 8;
    assume {:branchcond $i391} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $i392 := uw2453_synth_set_channel($p4, 1, 0);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i393 := $ne.i32($i392, 0);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i261 := $i392;
    assume {:branchcond $i393} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} $i394 := uw2453_write_vco_cfg($p4, 26219);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i395 := $ne.i32($i394, 0);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i264 := $i394;
    assume {:branchcond $i395} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $i396 := zd_iowrite16_locked($p4, 15, $sub.i16(0, 31295));
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i397 := $ne.i32($i396, 0);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i267 := $i396;
    assume {:branchcond $i397} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} $i398 := zd_ioread16_locked($p4, $p1, $sub.i16(0, 31295));
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i399 := $ne.i32($i398, 0);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i270 := $i398;
    assume {:branchcond $i399} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i400 := $load.i16($M.0, $p1);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i401 := $zext.i16.i32($i400);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i402 := $and.i32($i401, 15);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i403 := $eq.i32($i402, 0);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i275 := 9;
    assume {:branchcond $i403} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i280 := $sub.i32(0, 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, $sub.i32(0, 1));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i280, 1);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.0, $p291);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p293 := $bitcast.ref.ref($p292);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p293, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p294, $i290);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} $i295 := zd_iowrite16_locked($p4, 6, $sub.i16(0, 27860));
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    call {:si_unique_call 1803} {:cexpr "tmp___0"} boogie_si_record_i32($i295);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i253 := $i295;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $r := $i253;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i281 == 1;
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.0, $p283);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p284, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} dev_printk.ref.ref.ref.ref(.str.6, $p285, .str.187, .str.186);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} $i286 := uw2453_synth_set_channel($p4, 1, 1);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    call {:si_unique_call 1799} {:cexpr "r"} boogie_si_record_i32($i286);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i287 := $ne.i32($i286, 0);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $i288 := uw2453_write_vco_cfg($p4, 26210);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    call {:si_unique_call 1801} {:cexpr "r"} boogie_si_record_i32($i288);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i289 := $ne.i32($i288, 0);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i289} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i289 == 1;
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i253 := $i288;
    goto $bb3;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i287 == 1;
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i253 := $i286;
    goto $bb3;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i403 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.0, $p277);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p278, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} dev_printk.ref.ref.ref.ref.i32(.str.6, $p279, .str.185, .str.186, $i275);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i280 := $i275;
    goto $bb32;

  $bb182:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i253 := $i270;
    goto $bb3;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i397 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i253 := $i267;
    goto $bb3;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i395 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i253 := $i264;
    goto $bb3;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  $bb173:
    assume {:verifier.code 0} true;
    assume $i393 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i253 := $i261;
    goto $bb3;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i391 == 1;
    goto $bb30;

  $bb166:
    assume {:verifier.code 0} true;
    assume $i387 == 1;
    goto $bb26;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i385 == 1;
    goto $bb22;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i383 == 1;
    goto $bb18;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i381 == 1;
    goto $bb14;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  $bb153:
    assume {:verifier.code 0} true;
    assume $i379 == 1;
    goto $bb30;

  $bb150:
    assume {:verifier.code 0} true;
    assume $i375 == 1;
    goto $bb26;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i373 == 1;
    goto $bb22;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  $bb144:
    assume {:verifier.code 0} true;
    assume $i371 == 1;
    goto $bb18;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb141:
    assume {:verifier.code 0} true;
    assume $i369 == 1;
    goto $bb14;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i367 == 1;
    goto $bb30;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i363 == 1;
    goto $bb26;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i361 == 1;
    goto $bb22;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb128:
    assume {:verifier.code 0} true;
    assume $i359 == 1;
    goto $bb18;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i357 == 1;
    goto $bb14;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i355 == 1;
    goto $bb30;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i351 == 1;
    goto $bb26;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i349 == 1;
    goto $bb22;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb112:
    assume {:verifier.code 0} true;
    assume $i347 == 1;
    goto $bb18;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i345 == 1;
    goto $bb14;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb30;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb26;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i337 == 1;
    goto $bb22;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i335 == 1;
    goto $bb18;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i333 == 1;
    goto $bb14;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i331 == 1;
    goto $bb30;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i327 == 1;
    goto $bb26;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i325 == 1;
    goto $bb22;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb18;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i321 == 1;
    goto $bb14;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i319 == 1;
    goto $bb30;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb26;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i313 == 1;
    goto $bb22;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i311 == 1;
    goto $bb18;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i309 == 1;
    goto $bb14;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i307 == 1;
    goto $bb30;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i303 == 1;
    goto $bb26;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb22;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i299 == 1;
    goto $bb18;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i297 == 1;
    goto $bb14;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i274 == 1;
    goto $bb30;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i269 == 1;
    goto $bb26;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb22;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb18;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb14;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i258 == 1;
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i253 := $i257;
    goto $bb3;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i256 == 1;
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i253 := $i255;
    goto $bb3;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i252 == 1;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i253 := $i251;
    goto $bb3;

  SeqInstr_652:
    assume !assertsPassed;
    return;
}



const uw2453_set_channel: ref;

axiom uw2453_set_channel == $sub.ref(0, 731413);

procedure uw2453_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation uw2453_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i8;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i40: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $p48: ref;
  var $i49: i16;
  var $i41: i16;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1840} {:cexpr "uw2453_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 1841} {:cexpr "config"} boogie_si_record_i32($i7);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1842} {:cexpr "autocal"} boogie_si_record_i8($i9);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} $p10 := zd_rf_to_chip($p0);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $sub.i16(0, 28352));
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 48);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $sub.i16(0, 28348));
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 48);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $sub.i16(0, 28356));
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, 88);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $sub.i16(0, 28624));
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, 240);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $sub.i16(0, 28364));
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, 27);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $sub.i16(0, 28360));
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, 88);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i1);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i9);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} $i37 := uw2453_synth_set_channel($p10, $i35, $i36);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    call {:si_unique_call 1845} {:cexpr "r"} boogie_si_record_i32($i37);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i9);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i1);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, $sub.i32(0, 1));
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i44 := $sdiv.i32($i43, 2);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i7);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref($i46, 14)), $mul.ref($i45, 2));
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.41, $p48);
    call {:si_unique_call 1846} {:cexpr "vco_cfg"} boogie_si_record_i16($i49);
    assume {:verifier.code 0} true;
    $i41 := $i49;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i41);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $i52 := uw2453_write_vco_cfg($p10, $i51);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    call {:si_unique_call 1848} {:cexpr "r"} boogie_si_record_i32($i52);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} $i54 := uw2453_init_mode($p10);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    call {:si_unique_call 1850} {:cexpr "r"} boogie_si_record_i32($i54);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p2);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} $i57 := zd_iowrite16a_locked($p10, $p56, 6);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    call {:si_unique_call 1852} {:cexpr "r"} boogie_si_record_i32($i57);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i1);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} $i60 := uw2453_set_tx_gain_level($p10, $i59);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    call {:si_unique_call 1854} {:cexpr "r"} boogie_si_record_i32($i60);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} $i62 := zd_iowrite16_locked($p10, 6, $sub.i16(0, 27860));
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    call {:si_unique_call 1856} {:cexpr "tmp___0"} boogie_si_record_i32($i62);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i39 := $i62;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i61 == 1;
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i39 := $i60;
    goto $bb3;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i39 := $i57;
    goto $bb3;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i55 == 1;
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i39 := $i54;
    goto $bb3;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i53 == 1;
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i39 := $i52;
    goto $bb3;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i40 == 1;
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i41 := 26210;
    goto $bb7;

  $bb1:
    assume $i38 == 1;
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    goto $bb3;

  SeqInstr_790:
    assume !assertsPassed;
    return;
}



const uw2453_switch_radio_on: ref;

axiom uw2453_switch_radio_on == $sub.ref(0, 732445);

procedure uw2453_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation uw2453_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 28628));
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 0);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27668));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 63);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} $i11 := zd_rfwrite_locked($p2, 155540, 24);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    call {:si_unique_call 1860} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} $i14 := zd_chip_is_zd1211b($p2);
    call {:si_unique_call 1862} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $i19 := zd_iowrite16a_locked($p2, $p18, 2);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    call {:si_unique_call 1864} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i13 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, 127);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;

  SeqInstr_808:
    assume !assertsPassed;
    return;
}



const uw2453_switch_radio_off: ref;

axiom uw2453_switch_radio_off == $sub.ref(0, 733477);

procedure uw2453_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation uw2453_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 28628));
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 4);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27668));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 47);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $i11 := zd_rfwrite_locked($p2, 155536, 24);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    call {:si_unique_call 1868} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} $i15 := zd_iowrite16a_locked($p2, $p14, 2);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    call {:si_unique_call 1870} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;

  SeqInstr_814:
    assume !assertsPassed;
    return;
}



const zd_rf_generic_patch_6m: ref;

axiom zd_rf_generic_patch_6m == $sub.ref(0, 734509);

procedure zd_rf_generic_patch_6m($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_rf_generic_patch_6m($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} {:cexpr "zd_rf_generic_patch_6m:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $i4 := zd_chip_generic_patch_6m_band($p2, $i3);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    call {:si_unique_call 1874} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;
}



const uw2453_clear: ref;

axiom uw2453_clear == $sub.ref(0, 735541);

procedure uw2453_clear($p0: ref);
  free requires assertsPassed;



implementation uw2453_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} kfree($p2);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    return;
}



const zd_chip_generic_patch_6m_band: ref;

axiom zd_chip_generic_patch_6m_band == $sub.ref(0, 736573);

procedure zd_chip_generic_patch_6m_band($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_chip_generic_patch_6m_band($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1877} {:cexpr "zd_chip_generic_patch_6m_band:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 28160));
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 20);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 28156));
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 18);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $sub.i16(0, 28152));
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 16);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $sub.i16(0, 28484));
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 30);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i1, 1);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i19 == 1);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 11);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} dev_printk.ref.ref.ref.ref.i32(.str.6, $p26, .str.22, .str.23, $i1);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p2);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} $i28 := zd_iowrite16a_locked($p0, $p27, 4);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    call {:si_unique_call 1880} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, 18);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;
}



const zd_rfwrite_locked: ref;

axiom zd_rfwrite_locked == $sub.ref(0, 737605);

procedure zd_rfwrite_locked($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.10, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_rfwrite_locked($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1882} {:cexpr "zd_rfwrite_locked:arg:value"} boogie_si_record_i32($i1);
    call {:si_unique_call 1883} {:cexpr "zd_rfwrite_locked:arg:bits"} boogie_si_record_i8($i2);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} $i5 := mutex_is_locked($p4);
    call {:si_unique_call 1885} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1887} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i2);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} $i30 := zd_usb_rfwrite($p27, $i1, $i29);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    call {:si_unique_call 1893} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.1);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.148);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.101);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.4);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.8, $p16);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 866);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p16, $i19);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p20, 1);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.9, $p21);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1889} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} dump_stack();
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.101, 866, .str.10);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_usb_rfwrite: ref;

axiom zd_usb_rfwrite == $sub.ref(0, 738637);

procedure zd_usb_rfwrite($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_usb_rfwrite($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i16;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i24;
  var $i62: i24;
  var $i63: i24;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $i79: i64;
  var $i80: i64;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i16;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i16;
  var $i102: i16;
  var $i103: i64;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $i91: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i115: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1897} {:cexpr "zd_usb_rfwrite:arg:value"} boogie_si_record_i32($i1);
    call {:si_unique_call 1898} {:cexpr "zd_usb_rfwrite:arg:bits"} boogie_si_record_i8($i2);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} $i6 := preempt_count();
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    call {:si_unique_call 1900} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i2);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i13 := $ule.i32($i12, 15);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i2);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, 28);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i1);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i2);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i27 := $shl.i64($sub.i64(0, 1), $i26);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i24, $i27);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i2);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p36, .str.97, .str.93, $i1, $i37);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} $i38 := zd_usb_ioread16($p0, $p4, $sub.i16(0, 27860));
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    call {:si_unique_call 1907} {:cexpr "r"} boogie_si_record_i32($i38);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p4);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 65521);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $i46);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} $p47 := zd_usb_to_chip($p0);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} $i49 := mutex_is_locked($p48);
    call {:si_unique_call 1911} {:cexpr "tmp___2"} boogie_si_record_i32($i49);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 1913} {:cexpr "tmp___3"} boogie_si_record_i64($i53);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i64($i2);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 3);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i73 := $mul.i64($i72, 2);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i74 := $ugt.i64($i73, 64);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i32($i74);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 1919} {:cexpr "tmp___4"} boogie_si_record_i64($i77);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i64($i2);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 3);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i64.i32($i80);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i82 := $mul.i32($i81, 2);
    call {:si_unique_call 1921} {:cexpr "req_len"} boogie_si_record_i32($i82);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11212, 1));
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, 35);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p84, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p86, 2);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i16($i2);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p84, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p88, $i87);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i2);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i90 := $sgt.i32($i89, 0);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} $p108 := zd_usb_to_usbdev($p0);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p84);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} $i110 := zd_ep_regs_out_msg($p108, $p109, $i82, $p3, 50);
    call {:si_unique_call 1927} {:cexpr "r"} boogie_si_record_i32($i110);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.11, $p3);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i82, $i116);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i115 := $i110;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i11 := $i115;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb42:
    assume $i117 == 1;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.11, $p3);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p120, .str.99, .str.93, $i82, $i121);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i115 := $sub.i32(0, 5);
    goto $bb40;

  $bb38:
    assume $i111 == 1;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} dev_printk.ref.ref.ref.ref.i32(.str.6, $p114, .str.80, .str.93, $i110);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i115 := $i110;
    goto $bb40;

  $bb27:
    assume $i90 == 1;
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb30;

  $bb30:
    call $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $p105, $i106, $i107, $i91 := zd_usb_rfwrite_loop_$bb30($i1, $i2, $p4, $p84, $i89, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $p105, $i106, $i107, $i91);
    goto $bb30_last;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p4);
    call {:si_unique_call 1922} {:cexpr "bv"} boogie_si_record_i16($i92);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i2);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, $sub.i32(0, 1));
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32($i94, $i91);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i96 := $shl.i32(1, $i95);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, $i1);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i102 := $i92;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i91);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref($i103, 2));
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, $i102);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i91, 1);
    call {:si_unique_call 1924} {:cexpr "i"} boogie_si_record_i32($i106);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i107 := $sgt.i32($i89, $i106);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i107 == 1);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb35:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i91 := $i106;
    goto $bb35_dummy;

  $bb32:
    assume $i98 == 1;
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i92);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i99, 8);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    call {:si_unique_call 1923} {:cexpr "bv"} boogie_si_record_i16($i101);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i102 := $i101;
    goto $bb34;

  $bb23:
    assume $i78 == 1;
    call {:si_unique_call 1920} devirtbounce(0, .str.60, 2025, 12);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call zd_usb_rfwrite_loop_$bb25();
    goto $bb25_last;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p55, .str.1);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p56, .str.93);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p57, .str.60);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p58, .str.4);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i61 := $load.i24($M.8, $p60);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i62 := $and.i24($i61, $sub.i24(0, 262144));
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i63 := $or.i24($i62, 2020);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p60, $i63);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p64, 1);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.9, $p65);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i64($i66);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i68 := $and.i64($i67, 1);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 1915} {:cexpr "tmp___0"} boogie_si_record_i64($i69);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} dump_stack();
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i70 == 1;
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} __dynamic_pr_debug.ref.ref.ref.i32.ref($p5, .str.4, .str.60, 2020, .str.79);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} dev_printk.ref.ref.ref.ref.i32(.str.6, $p42, .str.98, .str.93, $i38);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i11 := $i38;
    goto $bb3;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i2);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p32, .str.96, .str.93, $i1, $i33);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i2);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p22, .str.95, .str.93, $i23, 28);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i2);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p16, .str.94, .str.93, $i17, 16);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} dev_printk.ref.ref.ref.ref(.str.6, $p10, .str.77, .str.93);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 11);
    goto $bb3;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  $bb35_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8485;

  $bb25_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;
}



const uw2453_synth_set_channel: ref;

axiom uw2453_synth_set_channel == $sub.ref(0, 739669);

procedure uw2453_synth_set_channel($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.10, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation uw2453_synth_set_channel($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i11: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i64;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} {:cexpr "uw2453_synth_set_channel:arg:channel"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1931} {:cexpr "uw2453_synth_set_channel:arg:autocal"} boogie_si_record_i1($i2);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i1, $sub.i32(0, 1));
    call {:si_unique_call 1932} {:cexpr "idx"} boogie_si_record_i32($i4);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i3);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i4);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref($i12, 1));
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.43, $p13);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 1048576);
    call {:si_unique_call 1934} {:cexpr "val"} boogie_si_record_i32($i16);
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $i17 := zd_rfwrite_locked($p0, $i11, 24);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    call {:si_unique_call 1936} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i4);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref($i20, 2));
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.44, $p21);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 2097152);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} $i25 := zd_rfwrite_locked($p0, $i24, 24);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    call {:si_unique_call 1938} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i19 := $i25;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb6;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref($i6, 2));
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.42, $p7);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 1048576);
    call {:si_unique_call 1933} {:cexpr "val"} boogie_si_record_i32($i10);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const uw2453_write_vco_cfg: ref;

axiom uw2453_write_vco_cfg == $sub.ref(0, 740701);

procedure uw2453_write_vco_cfg($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.10, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation uw2453_write_vco_cfg($p0: ref, $i1: i16) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} {:cexpr "uw2453_write_vco_cfg:arg:value"} boogie_si_record_i16($i1);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 262144);
    call {:si_unique_call 1940} {:cexpr "val"} boogie_si_record_i32($i3);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1048575);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 3145728);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $i6 := zd_rfwrite_locked($p0, $i5, 24);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    call {:si_unique_call 1942} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;
}



const uw2453_init_mode: ref;

axiom uw2453_init_mode == $sub.ref(0, 741733);

procedure uw2453_init_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.0, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation uw2453_init_mode($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p2, 155544);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p3, 155546);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p4, 155540);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p5, 163796);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} $i7 := zd_rfwritev_locked($p0, $p6, 4, 24);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    call {:si_unique_call 1945} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;
}



const uw2453_set_tx_gain_level: ref;

axiom uw2453_set_tx_gain_level == $sub.ref(0, 742765);

procedure uw2453_set_tx_gain_level($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.10, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation uw2453_set_tx_gain_level($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} {:cexpr "uw2453_set_tx_gain_level:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11520, 1)), $mul.ref($i3, 1));
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    call {:si_unique_call 1947} {:cexpr "int_value"} boogie_si_record_i8($i6);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 18);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i6);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref($i16, 4));
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.45, $p17);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1048575);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 7340032);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $i21 := zd_rfwrite_locked($p0, $i20, 24);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    call {:si_unique_call 1950} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i14 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i6);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p12, .str.188, .str.189, $i13, $i1);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;
}



const zd_rfwritev_locked: ref;

axiom zd_rfwritev_locked == $sub.ref(0, 743797);

procedure zd_rfwritev_locked($p0: ref, $p1: ref, $i2: i32, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.10, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_rfwritev_locked($p0: ref, $p1: ref, $i2: i32, $i3: i8) returns ($r: i32)
{
  var $i4: i1;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i15: i32;
  var $i16: i1;
  var $i5: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} {:cexpr "zd_rfwritev_locked:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1952} {:cexpr "zd_rfwritev_locked:arg:bits"} boogie_si_record_i8($i3);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i4 := $ult.i32(0, $i2);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i5 := zd_rfwritev_locked_loop_$bb4($p0, $p1, $i2, $i3, $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i5);
    goto $bb4_last;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref($i6, 4));
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.40, $p7);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i3);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} $i11 := zd_rfwrite_locked($p0, $i8, $i10);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    call {:si_unique_call 1954} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i5, 1);
    call {:si_unique_call 1955} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i16 := $ult.i32($i15, $i2);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i15;
    goto $bb10_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb8;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8613;
}



const zd1211b_al7230b_init_hw: ref;

axiom zd1211b_al7230b_init_hw == $sub.ref(0, 744829);

procedure zd1211b_al7230b_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211b_al7230b_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p110: ref;
  var $p112: ref;
  var $p114: ref;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $p136: ref;
  var $p138: ref;
  var $p140: ref;
  var $p142: ref;
  var $p144: ref;
  var $p146: ref;
  var $p148: ref;
  var $p150: ref;
  var $p152: ref;
  var $p154: ref;
  var $p156: ref;
  var $p158: ref;
  var $p160: ref;
  var $p162: ref;
  var $p164: ref;
  var $p166: ref;
  var $p168: ref;
  var $p170: ref;
  var $p172: ref;
  var $p174: ref;
  var $p176: ref;
  var $p178: ref;
  var $p180: ref;
  var $p182: ref;
  var $p184: ref;
  var $p186: ref;
  var $p188: ref;
  var $p190: ref;
  var $p192: ref;
  var $p194: ref;
  var $p196: ref;
  var $p198: ref;
  var $p200: ref;
  var $p202: ref;
  var $p204: ref;
  var $p206: ref;
  var $p208: ref;
  var $p210: ref;
  var $p212: ref;
  var $p214: ref;
  var $p216: ref;
  var $p218: ref;
  var $p220: ref;
  var $p222: ref;
  var $p224: ref;
  var $p226: ref;
  var $p228: ref;
  var $p230: ref;
  var $p232: ref;
  var $p234: ref;
  var $p236: ref;
  var $p238: ref;
  var $p240: ref;
  var $p242: ref;
  var $p244: ref;
  var $p246: ref;
  var $p248: ref;
  var $p250: ref;
  var $p252: ref;
  var $p254: ref;
  var $p256: ref;
  var $p258: ref;
  var $p260: ref;
  var $p262: ref;
  var $p264: ref;
  var $p266: ref;
  var $p268: ref;
  var $p270: ref;
  var $p272: ref;
  var $p274: ref;
  var $p276: ref;
  var $p278: ref;
  var $p280: ref;
  var $p282: ref;
  var $p284: ref;
  var $p286: ref;
  var $p288: ref;
  var $p290: ref;
  var $p292: ref;
  var $p294: ref;
  var $p296: ref;
  var $p298: ref;
  var $p300: ref;
  var $p302: ref;
  var $p304: ref;
  var $p306: ref;
  var $p308: ref;
  var $p310: ref;
  var $p312: ref;
  var $p314: ref;
  var $p316: ref;
  var $p318: ref;
  var $p320: ref;
  var $p322: ref;
  var $p324: ref;
  var $p326: ref;
  var $p328: ref;
  var $p330: ref;
  var $p332: ref;
  var $p334: ref;
  var $p336: ref;
  var $p338: ref;
  var $p340: ref;
  var $p342: ref;
  var $p344: ref;
  var $p346: ref;
  var $p348: ref;
  var $p350: ref;
  var $p351: ref;
  var $i352: i32;
  var $i353: i1;
  var $p355: ref;
  var $p356: ref;
  var $i357: i8;
  var $i358: i32;
  var $i359: i1;
  var $p360: ref;
  var $i361: i32;
  var $p363: ref;
  var $i364: i32;
  var $i362: i32;
  var $i365: i1;
  var $p366: ref;
  var $i367: i32;
  var $i368: i1;
  var $i369: i32;
  var $i370: i1;
  var $i371: i32;
  var $i372: i1;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $i376: i32;
  var $i377: i1;
  var $i378: i32;
  var $i379: i1;
  var $i380: i32;
  var $i354: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} $p1 := $alloc($mul.ref(180, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $p2 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} $p3 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} $p4 := $alloc($mul.ref(84, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} $p6 := zd_rf_to_chip($p0);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27712));
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 87);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $sub.i16(0, 28636));
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 9);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 0);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 0);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $sub.i16(0, 28632));
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, 139);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $sub.i16(0, 28612));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, 32);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $sub.i16(0, 28604));
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, 43);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $sub.i16(0, 28592));
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, 16);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $sub.i16(0, 28580));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, 64);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, $sub.i16(0, 28576));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p42, 32);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $sub.i16(0, 28568));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, 147);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p48, $sub.i16(0, 28560));
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, 62);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $sub.i16(0, 28556));
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, 0);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, $sub.i16(0, 28540));
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, 40);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, $sub.i16(0, 28536));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, 48);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p64, $sub.i16(0, 28532));
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p66, 62);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, $sub.i16(0, 28508));
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, 36);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $sub.i16(0, 28496));
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p74, 50);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p76, $sub.i16(0, 28488));
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p78, 153);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, $sub.i16(0, 28484));
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p82, 30);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p84, $sub.i16(0, 28480));
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p86, 0);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p88, $sub.i16(0, 28476));
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, 0);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p92, $sub.i16(0, 28468));
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p94, 1);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p96, $sub.i16(0, 28464));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p98, 128);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p100, $sub.i16(0, 28460));
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p102, 126);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p104, $sub.i16(0, 28412));
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p106, 0);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p108, $sub.i16(0, 28408));
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p110, 0);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p112, $sub.i16(0, 28404));
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p114, 0);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p116, $sub.i16(0, 28400));
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, 0);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p120, $sub.i16(0, 28396));
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p122, 40);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p124, $sub.i16(0, 28356));
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p126, 88);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p128, $sub.i16(0, 28352));
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p130, 48);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p132, $sub.i16(0, 28348));
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p134, 48);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p136, $sub.i16(0, 28324));
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p138, 10);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p140, $sub.i16(0, 28316));
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p142, 4);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p144, $sub.i16(0, 28312));
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p146, 88);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p148, $sub.i16(0, 28308));
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p150, 0);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p152, $sub.i16(0, 28304));
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p154, 10);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p156, $sub.i16(0, 28280));
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p158, 141);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p160, $sub.i16(0, 28276));
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p162, 0);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p164, $sub.i16(0, 28272));
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p166, 2);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p168, $sub.i16(0, 28268));
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p170, 19);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p172, $sub.i16(0, 28264));
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p174, 39);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p176, $sub.i16(0, 28248));
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p178, 32);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p180, $sub.i16(0, 28236));
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p182, 19);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p184, $sub.i16(0, 28224));
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 180)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p186, 31);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p188, $sub.i16(0, 28244));
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p190, 40);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p192, $sub.i16(0, 28232));
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p194, 31);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p196, $sub.i16(0, 28228));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p198, 31);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p200, $sub.i16(0, 28208));
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p202, 42);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p204, $sub.i16(0, 28200));
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p206, 250);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p208, $sub.i16(0, 28196));
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p210, 18);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p212, $sub.i16(0, 28188));
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p214, 108);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p216, $sub.i16(0, 28244));
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p218, 36);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p220, $sub.i16(0, 28232));
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p222, 19);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p224, $sub.i16(0, 28228));
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p226, 19);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p228, $sub.i16(0, 28208));
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p230, 36);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p232, $sub.i16(0, 28200));
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p234, 252);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p236, $sub.i16(0, 28196));
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p238, 17);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p240, $sub.i16(0, 28188));
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p242, 106);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p244, $sub.i16(0, 28220));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p246, 39);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p248, $sub.i16(0, 28216));
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p250, 39);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p252, $sub.i16(0, 28212));
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p254, 36);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p256, $sub.i16(0, 28204));
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p258, 250);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p260, $sub.i16(0, 28192));
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p262, 79);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p264, $sub.i16(0, 28184));
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p266, 252);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p268, $sub.i16(0, 28180));
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p270, 87);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p272, $sub.i16(0, 28172));
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p274, 173);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p276, $sub.i16(0, 28168));
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p278, 108);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p280, $sub.i16(0, 28164));
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p282, 3);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p284, $sub.i16(0, 28152));
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p286, 16);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p288, $sub.i16(0, 28148));
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p290, 0);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p292, $sub.i16(0, 28124));
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p294, 80);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p296, $sub.i16(0, 28120));
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p298, 168);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p300, $sub.i16(0, 28096));
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p302, 172);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p304, $sub.i16(0, 28080));
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p306, 64);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p308, $sub.i16(0, 28076));
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p310, 64);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p312, $sub.i16(0, 28072));
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p314, 26);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p316, $sub.i16(0, 27664));
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p318, 52);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p320, $sub.i16(0, 27660));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p322, 52);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p324, $sub.i16(0, 27668));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 84)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p326, 47);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p328, $sub.i16(0, 27668));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p330, 127);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p332, $sub.i16(0, 28160));
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p334, 20);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p336, $sub.i16(0, 28156));
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p338, 18);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p340, $sub.i16(0, 28152));
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p342, 16);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p344, $sub.i16(0, 28520));
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p346, 56);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p348, $sub.i16(0, 28128));
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p350, 223);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p351 := $bitcast.ref.ref($p1);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $i352 := zd_iowrite16a_locked($p6, $p351, 45);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    call {:si_unique_call 1963} {:cexpr "r"} boogie_si_record_i32($i352);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i353 := $ne.i32($i352, 0);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p355 := $bitcast.ref.ref($p6);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($p355, $mul.ref(11578, 1));
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i357 := $load.i8($M.0, $p356);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i358 := $zext.i8.i32($i357);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i359 := $ne.i32($i358, 0);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i359 == 1);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p3);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} $i364 := zd_iowrite16a_locked($p6, $p363, 7);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    call {:si_unique_call 1967} {:cexpr "r"} boogie_si_record_i32($i364);
    assume {:verifier.code 0} true;
    $i362 := $i364;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i362, 0);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p366 := $bitcast.ref.ref($p4);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} $i367 := zd_iowrite16a_locked($p6, $p366, 21);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    call {:si_unique_call 1969} {:cexpr "r"} boogie_si_record_i32($i367);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i368 := $ne.i32($i367, 0);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} $i369 := zd_rfwritev_cr_locked($p6, chan_rv, 2);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    call {:si_unique_call 1971} {:cexpr "r"} boogie_si_record_i32($i369);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i370 := $ne.i32($i369, 0);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} $i371 := zd_rfwritev_cr_locked($p6, std_rv, 10);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    call {:si_unique_call 1973} {:cexpr "r"} boogie_si_record_i32($i371);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $i372 := $ne.i32($i371, 0);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i372} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} $i373 := zd_rfwritev_cr_locked($p6, rv_init1, 4);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    call {:si_unique_call 1975} {:cexpr "r"} boogie_si_record_i32($i373);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i373, 0);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p375 := $bitcast.ref.ref($p5);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} $i376 := zd_iowrite16a_locked($p6, $p375, 6);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    call {:si_unique_call 1977} {:cexpr "r"} boogie_si_record_i32($i376);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i377 := $ne.i32($i376, 0);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i377} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} $i378 := zd_rfwritev_cr_locked($p6, rv_init2, 3);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    call {:si_unique_call 1979} {:cexpr "r"} boogie_si_record_i32($i378);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i379 := $ne.i32($i378, 0);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} $i380 := zd1211b_al7230b_finalize($p6);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    call {:si_unique_call 1981} {:cexpr "tmp___0"} boogie_si_record_i32($i380);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i354 := $i380;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $r := $i354;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i379 == 1;
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $i354 := $i378;
    goto $bb3;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i377 == 1;
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i354 := $i376;
    goto $bb3;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i374 == 1;
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i354 := $i373;
    goto $bb3;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i372 == 1;
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i354 := $i371;
    goto $bb3;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i370 == 1;
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i354 := $i369;
    goto $bb3;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i368 == 1;
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i354 := $i367;
    goto $bb3;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i365 == 1;
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i354 := $i362;
    goto $bb3;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i359 == 1;
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $p360 := $bitcast.ref.ref($p2);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} $i361 := zd_iowrite16a_locked($p6, $p360, 7);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    call {:si_unique_call 1965} {:cexpr "r"} boogie_si_record_i32($i361);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i362 := $i361;
    goto $bb7;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i353 == 1;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i354 := $i352;
    goto $bb3;

  SeqInstr_853:
    assume !assertsPassed;
    return;
}



const zd1211b_al7230b_switch_radio_on: ref;

axiom zd1211b_al7230b_switch_radio_on == $sub.ref(0, 745861);

procedure zd1211b_al7230b_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211b_al7230b_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 28628));
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 0);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27668));
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 127);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    call {:si_unique_call 1985} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;
}



const zd1211b_al7230b_set_channel: ref;

axiom zd1211b_al7230b_set_channel == $sub.ref(0, 746893);

procedure zd1211b_al7230b_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211b_al7230b_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} {:cexpr "zd1211b_al7230b_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i64($i1);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, $sub.i64(0, 1));
    $p4 := $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref($i3, 4));
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} $p5 := zd_rf_to_chip($p0);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $i6 := zd_iowrite16_locked($p5, 87, $sub.i16(0, 27712));
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    call {:si_unique_call 1989} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} $i9 := zd_iowrite16_locked($p5, 228, $sub.i16(0, 28636));
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    call {:si_unique_call 1991} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} $i11 := zd_iowrite16_locked($p5, 47, $sub.i16(0, 27668));
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    call {:si_unique_call 1993} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} $i13 := zd_rfwritev_cr_locked($p5, std_rv, 10);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    call {:si_unique_call 1995} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} $i15 := zd_rfwrite_cr_locked($p5, 3969024);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    call {:si_unique_call 1997} {:cexpr "r"} boogie_si_record_i32($i15);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} $i17 := zd_rfwrite_cr_locked($p5, 15818072);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    call {:si_unique_call 1999} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} $i19 := zd_iowrite16a_locked($p5, ioreqs_sw, 5);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    call {:si_unique_call 2001} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} $i21 := zd_rfwritev_cr_locked($p5, $p4, 2);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    call {:si_unique_call 2003} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} $i23 := zd_rfwrite_cr_locked($p5, 3969024);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    call {:si_unique_call 2005} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} $i25 := zd_iowrite16_locked($p5, 127, $sub.i16(0, 27668));
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    call {:si_unique_call 2007} {:cexpr "r"} boogie_si_record_i32($i25);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} $i27 := zd1211b_al7230b_finalize($p5);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    call {:si_unique_call 2009} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i26 == 1;
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i8 := $i25;
    goto $bb3;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i8 := $i23;
    goto $bb3;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i22 == 1;
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $i8 := $i21;
    goto $bb3;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb3;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i16 == 1;
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  SeqInstr_886:
    assume !assertsPassed;
    return;
}



const zd1211b_al7230b_patch_6m: ref;

axiom zd1211b_al7230b_patch_6m == $sub.ref(0, 747925);

procedure zd1211b_al7230b_patch_6m($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211b_al7230b_patch_6m($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2011} {:cexpr "zd1211b_al7230b_patch_6m:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} $p3 := zd_rf_to_chip($p0);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $sub.i16(0, 28160));
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 20);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $sub.i16(0, 28156));
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, 18);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 11);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i1);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} dev_printk.ref.ref.ref.ref.i32(.str.6, $p27, .str.22, .str.184, $i28);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} $i30 := zd_iowrite16a_locked($p3, $p29, 2);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    call {:si_unique_call 2015} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 16);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, 16);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, 14);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, 16);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd1211_al7230b_init_hw: ref;

axiom zd1211_al7230b_init_hw == $sub.ref(0, 748957);

procedure zd1211_al7230b_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211_al7230b_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p203: ref;
  var $p205: ref;
  var $p207: ref;
  var $p209: ref;
  var $p211: ref;
  var $p213: ref;
  var $p215: ref;
  var $p217: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p225: ref;
  var $p227: ref;
  var $p229: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $p245: ref;
  var $p247: ref;
  var $p249: ref;
  var $p251: ref;
  var $p252: ref;
  var $i253: i32;
  var $i254: i1;
  var $i256: i32;
  var $i257: i1;
  var $i258: i32;
  var $i259: i1;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i1;
  var $i255: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} $p1 := $alloc($mul.ref(224, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} $p3 := zd_rf_to_chip($p0);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $sub.i16(0, 27712));
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 87);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 0);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, 0);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $sub.i16(0, 28612));
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, 32);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, $sub.i16(0, 28580));
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, 64);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $sub.i16(0, 28576));
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, 32);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $sub.i16(0, 28568));
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, 17);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $sub.i16(0, 28560));
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 62);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $sub.i16(0, 28556));
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, 0);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, $sub.i16(0, 28496));
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, 51);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $sub.i16(0, 28248));
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, 34);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, $sub.i16(0, 28244));
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, 26);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, $sub.i16(0, 28236));
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, 9);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p53, $sub.i16(0, 28232));
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, 39);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p57, $sub.i16(0, 28228));
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, 43);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, $sub.i16(0, 28224));
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, 43);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $sub.i16(0, 28196));
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p67, 10);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $sub.i16(0, 28184));
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, 252);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, $sub.i16(0, 28632));
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p75, 137);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, $sub.i16(0, 28604));
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, 40);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, $sub.i16(0, 28568));
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p83, 147);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, $sub.i16(0, 28536));
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p87, 48);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $sub.i16(0, 28532));
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p91, 62);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p93, $sub.i16(0, 28508));
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, 36);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p97, $sub.i16(0, 28496));
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p99, 50);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p101, $sub.i16(0, 28488));
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p103, 150);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, $sub.i16(0, 28484));
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p107, 30);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p109, $sub.i16(0, 28356));
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p111, 88);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p113, $sub.i16(0, 28352));
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, 48);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p117, $sub.i16(0, 28348));
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p119, 48);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p121, $sub.i16(0, 28324));
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p123, 10);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p125, $sub.i16(0, 28316));
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p127, 4);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p129, $sub.i16(0, 28304));
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p131, 10);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p133, $sub.i16(0, 28276));
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p135, 40);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p137, $sub.i16(0, 28272));
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p139, 2);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p141, $sub.i16(0, 28268));
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p143, 19);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p145, $sub.i16(0, 28264));
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p147, 39);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p149, $sub.i16(0, 28248));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p151, 34);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p153, $sub.i16(0, 28244));
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p155, 63);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p157, $sub.i16(0, 28236));
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p159, 9);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p161, $sub.i16(0, 28232));
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p163, 31);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p165, $sub.i16(0, 28228));
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p167, 31);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p169, $sub.i16(0, 28224));
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p171, 31);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p173, $sub.i16(0, 28220));
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p175, 39);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p177, $sub.i16(0, 28216));
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p179, 39);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p181, $sub.i16(0, 28212));
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p183, 36);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p185, $sub.i16(0, 28208));
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p187, 63);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p189, $sub.i16(0, 28204));
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p191, 250);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p193, $sub.i16(0, 28200));
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p195, 252);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p197, $sub.i16(0, 28196));
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p199, 16);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p201, $sub.i16(0, 28192));
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p203, 79);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p205, $sub.i16(0, 28188));
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p207, 119);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p209, $sub.i16(0, 28124));
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p211, 136);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p213, $sub.i16(0, 28120));
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p215, 168);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p217, $sub.i16(0, 27664));
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p219, 52);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p221, $sub.i16(0, 27660));
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p223, 52);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p225, $sub.i16(0, 27668));
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 224)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p227, 47);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p229, $sub.i16(0, 27668));
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p231, 63);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p233, $sub.i16(0, 28160));
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p235, 20);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p237, $sub.i16(0, 28156));
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p239, 18);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p241, $sub.i16(0, 28152));
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p243, 16);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p245, $sub.i16(0, 28520));
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p247, 56);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p249, $sub.i16(0, 28128));
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p251, 223);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p1);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} $i253 := zd_iowrite16a_locked($p3, $p252, 56);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    call {:si_unique_call 2020} {:cexpr "r"} boogie_si_record_i32($i253);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 0);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} $i256 := zd_rfwritev_cr_locked($p3, chan_rv, 2);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    call {:si_unique_call 2022} {:cexpr "r"} boogie_si_record_i32($i256);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 0);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} $i258 := zd_rfwritev_cr_locked($p3, std_rv, 10);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    call {:si_unique_call 2024} {:cexpr "r"} boogie_si_record_i32($i258);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i259 := $ne.i32($i258, 0);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} $i260 := zd_rfwritev_cr_locked($p3, rv_init1, 4);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    call {:si_unique_call 2026} {:cexpr "r"} boogie_si_record_i32($i260);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i260, 0);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p262 := $bitcast.ref.ref($p2);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} $i263 := zd_iowrite16a_locked($p3, $p262, 6);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    call {:si_unique_call 2028} {:cexpr "r"} boogie_si_record_i32($i263);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} $i265 := zd_rfwritev_cr_locked($p3, rv_init2, 3);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    call {:si_unique_call 2030} {:cexpr "r"} boogie_si_record_i32($i265);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 0);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} $i267 := zd_iowrite16_locked($p3, 6, $sub.i16(0, 27860));
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    call {:si_unique_call 2032} {:cexpr "r"} boogie_si_record_i32($i267);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} $i269 := zd_iowrite16_locked($p3, 128, $sub.i16(0, 27712));
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    call {:si_unique_call 2034} {:cexpr "r"} boogie_si_record_i32($i269);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i269, 0);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i255 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $r := $i255;
    return;

  $bb23:
    assume $i270 == 1;
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i255 := $i269;
    goto $bb3;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i268 == 1;
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i255 := $i267;
    goto $bb3;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i266 == 1;
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i255 := $i265;
    goto $bb3;

  SeqInstr_937:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i264 == 1;
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i255 := $i263;
    goto $bb3;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i261 == 1;
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i255 := $i260;
    goto $bb3;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i259 == 1;
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i255 := $i258;
    goto $bb3;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i257 == 1;
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $i255 := $i256;
    goto $bb3;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i254 == 1;
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i255 := $i253;
    goto $bb3;

  SeqInstr_922:
    assume !assertsPassed;
    return;
}



const zd1211_al7230b_switch_radio_on: ref;

axiom zd1211_al7230b_switch_radio_on == $sub.ref(0, 749989);

procedure zd1211_al7230b_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211_al7230b_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 28628));
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 0);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27668));
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 63);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    call {:si_unique_call 2038} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;
}



const zd1211_al7230b_set_channel: ref;

axiom zd1211_al7230b_set_channel == $sub.ref(0, 751021);

procedure zd1211_al7230b_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211_al7230b_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 2040} {:cexpr "zd1211_al7230b_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i64($i1);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, $sub.i64(0, 1));
    $p5 := $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref($i4, 4));
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} $p6 := zd_rf_to_chip($p0);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27668));
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 63);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $sub.i16(0, 27860));
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 6);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $sub.i16(0, 27712));
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 8);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} $i19 := zd_iowrite16_locked($p6, 87, $sub.i16(0, 27712));
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    call {:si_unique_call 2043} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} $i22 := zd_iowrite16_locked($p6, 47, $sub.i16(0, 27668));
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    call {:si_unique_call 2045} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} $i24 := zd_rfwritev_cr_locked($p6, std_rv, 10);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    call {:si_unique_call 2047} {:cexpr "r"} boogie_si_record_i32($i24);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} $i26 := zd_rfwrite_cr_locked($p6, 3969024);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    call {:si_unique_call 2049} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} $i28 := zd_rfwrite_cr_locked($p6, 15818072);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    call {:si_unique_call 2051} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} $i30 := zd_iowrite16a_locked($p6, ioreqs_sw, 5);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    call {:si_unique_call 2053} {:cexpr "r"} boogie_si_record_i32($i30);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} $i32 := zd_rfwritev_cr_locked($p6, $p5, 2);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    call {:si_unique_call 2055} {:cexpr "r"} boogie_si_record_i32($i32);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} $i34 := zd_rfwrite_cr_locked($p6, 3969024);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    call {:si_unique_call 2057} {:cexpr "r"} boogie_si_record_i32($i34);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} $i37 := zd_iowrite16a_locked($p6, $p36, 3);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    call {:si_unique_call 2059} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i21 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i21 := $i34;
    goto $bb3;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $i21 := $i32;
    goto $bb3;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i21 := $i30;
    goto $bb3;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $i21 := $i28;
    goto $bb3;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i21 := $i26;
    goto $bb3;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb3;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i21 := $i22;
    goto $bb3;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb3;

  SeqInstr_949:
    assume !assertsPassed;
    return;
}



const al7230b_switch_radio_off: ref;

axiom al7230b_switch_radio_off == $sub.ref(0, 752053);

procedure al7230b_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation al7230b_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 28628));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 4);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27668));
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 47);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    call {:si_unique_call 2063} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_976:
    assume !assertsPassed;
    return;
}



const zd_rfwritev_cr_locked: ref;

axiom zd_rfwritev_cr_locked == $sub.ref(0, 753085);

procedure zd_rfwritev_cr_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_rfwritev_cr_locked($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i12: i32;
  var $i13: i1;
  var $i4: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} {:cexpr "zd_rfwritev_cr_locked:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $i3 := $ult.i32(0, $i2);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i5, $p6, $i7, $i8, $i9, $i10, $i12, $i13, $i4 := zd_rfwritev_cr_locked_loop_$bb4($p0, $p1, $i2, $i5, $p6, $i7, $i8, $i9, $i10, $i12, $i13, $i4);
    goto $bb4_last;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p1, $mul.ref($i5, 4));
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.40, $p6);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $i8 := zd_rfwrite_cr_locked($p0, $i7);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    call {:si_unique_call 2066} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i4, 1);
    call {:si_unique_call 2067} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $i13 := $ult.i32($i12, $i2);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i12;
    goto $bb10_dummy;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb8;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9532;
}



const zd_rfwrite_cr_locked: ref;

axiom zd_rfwrite_cr_locked == $sub.ref(0, 754117);

procedure zd_rfwrite_cr_locked($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_rfwrite_cr_locked($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $p21: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 2070} {:cexpr "zd_rfwrite_cr_locked:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $sub.i16(0, 27696));
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i1, 16);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 255);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $i10);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $sub.i16(0, 27700));
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i1, 8);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 255);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i19);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $sub.i16(0, 27704));
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i1);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 255);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i27);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} $i31 := mutex_is_locked($p30);
    call {:si_unique_call 2072} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 2074} {:cexpr "tmp___1"} boogie_si_record_i64($i35);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p2);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $i54 := zd_iowrite16a_locked($p0, $p53, 3);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    call {:si_unique_call 2080} {:cexpr "tmp___2"} boogie_si_record_i32($i54);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i36 == 1;
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.1);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p38, .str.29);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, .str.3);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p40, .str.4);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.8, $p42);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 1511);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p42, $i45);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p46, 1);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.9, $p47);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 2076} {:cexpr "tmp"} boogie_si_record_i64($i51);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} dump_stack();
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i52 == 1;
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.3, 1511, .str.10);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd1211b_al7230b_finalize: ref;

axiom zd1211b_al7230b_finalize == $sub.ref(0, 755149);

procedure zd1211b_al7230b_finalize($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211b_al7230b_finalize($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} $p1 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $sub.i16(0, 28352));
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 48);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $sub.i16(0, 28348));
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 48);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $sub.i16(0, 28356));
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, 88);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $sub.i16(0, 28624));
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, 240);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, $sub.i16(0, 28364));
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 27);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $sub.i16(0, 28360));
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 88);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $sub.i16(0, 27860));
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, 4);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 0);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, 0);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $sub.i16(0, 27712));
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, 128);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} $i39 := zd_iowrite16a_locked($p0, $p38, 9);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    call {:si_unique_call 2083} {:cexpr "r"} boogie_si_record_i32($i39);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p0);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(11578, 1));
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} $i49 := zd_iowrite16_locked($p0, 4, $sub.i16(0, 27860));
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    call {:si_unique_call 2087} {:cexpr "tmp"} boogie_si_record_i32($i49);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $i41 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i46 == 1;
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} $i47 := zd_iowrite16_locked($p0, 229, $sub.i16(0, 28636));
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    call {:si_unique_call 2085} {:cexpr "r"} boogie_si_record_i32($i47);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $i41 := $i47;
    goto $bb3;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    goto $bb3;

  SeqInstr_985:
    assume !assertsPassed;
    return;
}



const al2230_switch_radio_off: ref;

axiom al2230_switch_radio_off == $sub.ref(0, 756181);

procedure al2230_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation al2230_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 28628));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 4);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27668));
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 47);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    call {:si_unique_call 2091} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;
}



const zd1211b_al2230_init_hw: ref;

axiom zd1211b_al2230_init_hw == $sub.ref(0, 757213);

procedure zd1211b_al2230_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.40, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211b_al2230_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p203: ref;
  var $p205: ref;
  var $p207: ref;
  var $p209: ref;
  var $p211: ref;
  var $p213: ref;
  var $p215: ref;
  var $p217: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p225: ref;
  var $p227: ref;
  var $p229: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $p245: ref;
  var $p247: ref;
  var $p249: ref;
  var $p251: ref;
  var $p253: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p272: ref;
  var $p274: ref;
  var $p276: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p283: ref;
  var $p285: ref;
  var $p287: ref;
  var $p289: ref;
  var $p291: ref;
  var $p293: ref;
  var $i294: i32;
  var $i295: i1;
  var $p297: ref;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $p301: ref;
  var $i302: i8;
  var $i303: i32;
  var $i304: i1;
  var $p306: ref;
  var $i307: i8;
  var $i308: i32;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $i315: i32;
  var $i316: i1;
  var $p317: ref;
  var $p318: ref;
  var $i319: i8;
  var $i320: i32;
  var $i321: i1;
  var $p323: ref;
  var $i324: i8;
  var $i325: i32;
  var $i326: i1;
  var $i327: i32;
  var $i329: i32;
  var $i328: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $i338: i32;
  var $i339: i1;
  var $p340: ref;
  var $i341: i32;
  var $i342: i1;
  var $i343: i32;
  var $i296: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} $p1 := $alloc($mul.ref(248, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} $p5 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} $p6 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} $p7 := zd_rf_to_chip($p0);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $sub.i16(0, 28632));
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, 137);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $sub.i16(0, 28612));
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, 32);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, $sub.i16(0, 28604));
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, 43);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $sub.i16(0, 28580));
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, 64);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $sub.i16(0, 28576));
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, 32);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $sub.i16(0, 28568));
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 147);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $sub.i16(0, 28560));
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, 62);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, $sub.i16(0, 28556));
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, 0);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $sub.i16(0, 28540));
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, 40);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, $sub.i16(0, 28536));
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, 48);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, $sub.i16(0, 28532));
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, 62);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p53, $sub.i16(0, 28508));
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, 36);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p57, $sub.i16(0, 28496));
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, 50);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, $sub.i16(0, 28488));
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, 153);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $sub.i16(0, 28484));
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p67, 30);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $sub.i16(0, 28480));
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, 6);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, $sub.i16(0, 28476));
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p75, 249);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, $sub.i16(0, 28468));
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, 1);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, $sub.i16(0, 28464));
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p83, 128);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, $sub.i16(0, 28460));
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p87, 126);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $sub.i16(0, 28412));
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p91, 0);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p93, $sub.i16(0, 28408));
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, 0);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p97, $sub.i16(0, 28404));
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p99, 0);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p101, $sub.i16(0, 28400));
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p103, 0);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, $sub.i16(0, 28396));
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p107, 40);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p109, $sub.i16(0, 28356));
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p111, 88);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p113, $sub.i16(0, 28352));
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, 48);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p117, $sub.i16(0, 28348));
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p119, 48);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p121, $sub.i16(0, 28324));
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p123, 10);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p125, $sub.i16(0, 28316));
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p127, 4);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p129, $sub.i16(0, 28308));
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p131, 0);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p133, $sub.i16(0, 28304));
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p135, 10);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p137, $sub.i16(0, 28280));
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p139, 141);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p141, $sub.i16(0, 28276));
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p143, 0);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p145, $sub.i16(0, 28268));
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p147, 19);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p149, $sub.i16(0, 28264));
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p151, 39);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p153, $sub.i16(0, 28248));
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p155, 36);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p157, $sub.i16(0, 28244));
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p159, 42);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p161, $sub.i16(0, 28236));
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p163, 19);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p165, $sub.i16(0, 28232));
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p167, 31);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p169, $sub.i16(0, 28228));
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p171, 31);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p173, $sub.i16(0, 28224));
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p175, 31);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p177, $sub.i16(0, 28220));
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p179, 39);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p181, $sub.i16(0, 28216));
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p183, 39);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p185, $sub.i16(0, 28212));
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p187, 38);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p189, $sub.i16(0, 28208));
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p191, 36);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p193, $sub.i16(0, 28204));
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p195, 250);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p197, $sub.i16(0, 28200));
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p199, 250);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p201, $sub.i16(0, 28196));
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p203, 16);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p205, $sub.i16(0, 28192));
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p207, 79);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p209, $sub.i16(0, 28188));
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p211, 108);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p213, $sub.i16(0, 28184));
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p215, 252);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p217, $sub.i16(0, 28180));
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p219, 87);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p221, $sub.i16(0, 28172));
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p223, 173);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p225, $sub.i16(0, 28168));
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p227, 108);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p229, $sub.i16(0, 28164));
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p231, 3);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(56, 4)), $mul.ref(0, 1));
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p233, $sub.i16(0, 28124));
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(56, 4)), $mul.ref(2, 1));
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p235, 80);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(57, 4)), $mul.ref(0, 1));
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p237, $sub.i16(0, 28120));
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(57, 4)), $mul.ref(2, 1));
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p239, 168);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(58, 4)), $mul.ref(0, 1));
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p241, $sub.i16(0, 28096));
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(58, 4)), $mul.ref(2, 1));
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p243, 172);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(59, 4)), $mul.ref(0, 1));
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p245, $sub.i16(0, 28072));
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(59, 4)), $mul.ref(2, 1));
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p247, 13);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(60, 4)), $mul.ref(0, 1));
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p249, $sub.i16(0, 27664));
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(60, 4)), $mul.ref(2, 1));
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p251, 52);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(61, 4)), $mul.ref(0, 1));
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p253, $sub.i16(0, 27660));
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(61, 4)), $mul.ref(2, 1));
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p255, 52);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p256, 9227472);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p257, 4726208);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p258, 13631232);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p259, 2465792);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 4));
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p260, 2465792);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(1, 4));
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p261, 10728176);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(2, 4));
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p262, 7184400);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(3, 4));
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p263, 14901888);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 4));
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p264, 1138688);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(5, 4));
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p265, 10338336);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(6, 4));
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p266, 6150912);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(7, 4));
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p267, 14258176);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 4));
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p268, 4193232);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(9, 4));
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p269, 11534336);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(10, 4));
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p270, 15735296);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p272, $sub.i16(0, 27668));
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p274, 47);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p276, $sub.i16(0, 27668));
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p278, 127);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p279, 15735552);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p280, 15736320);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p281, 15735296);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p283, $sub.i16(0, 28160));
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p285, 20);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p287, $sub.i16(0, 28156));
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p289, 18);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p291, $sub.i16(0, 28152));
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p293, 16);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} $i294 := zd_iowrite16a_locked($p7, zd1211b_ioreqs_shared_1, 2);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    call {:si_unique_call 2100} {:cexpr "r"} boogie_si_record_i32($i294);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 0);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p1);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} $i298 := zd_iowrite16a_locked($p7, $p297, 62);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    call {:si_unique_call 2102} {:cexpr "r"} boogie_si_record_i32($i298);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p300 := $bitcast.ref.ref($p7);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($p300, $mul.ref(11579, 1));
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $i302 := $load.i8($M.0, $p301);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i303 := $zext.i8.i32($i302);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i304 := $ne.i32($i303, 0);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i304 == 1);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11584)), $mul.ref(11280, 1)), $mul.ref(0, 1));
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $i307 := $load.i8($M.0, $p306);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $i308 := $zext.i8.i32($i307);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 10);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $i312 := zd_rfwritev_cr_locked($p7, zd1211b_al2230_table, 3);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    call {:si_unique_call 2106} {:cexpr "r"} boogie_si_record_i32($i312);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $i313 := $ne.i32($i312, 0);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p314 := $bitcast.ref.ref($p2);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} $i315 := zd_rfwritev_cr_locked($p7, $p314, 4);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    call {:si_unique_call 2108} {:cexpr "r"} boogie_si_record_i32($i315);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p317 := $bitcast.ref.ref($p7);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($p317, $mul.ref(11579, 1));
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.0, $p318);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i32($i319);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i321 == 1);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 11584)), $mul.ref(11280, 1)), $mul.ref(0, 1));
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $i324 := $load.i8($M.0, $p323);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i325 := $zext.i8.i32($i324);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 10);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i326 == 1);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} $i329 := zd_rfwrite_locked($p7, 2465792, 24);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    call {:si_unique_call 2112} {:cexpr "r"} boogie_si_record_i32($i329);
    assume {:verifier.code 0} true;
    $i328 := $i329;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $i330 := $ne.i32($i328, 0);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p331 := $bitcast.ref.ref($p3);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} $i332 := zd_rfwritev_cr_locked($p7, $p331, 11);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    call {:si_unique_call 2114} {:cexpr "r"} boogie_si_record_i32($i332);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $i333 := $ne.i32($i332, 0);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p4);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} $i335 := zd_iowrite16a_locked($p7, $p334, 2);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    call {:si_unique_call 2116} {:cexpr "r"} boogie_si_record_i32($i335);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $i336 := $ne.i32($i335, 0);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p5);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $i338 := zd_rfwritev_cr_locked($p7, $p337, 3);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    call {:si_unique_call 2118} {:cexpr "r"} boogie_si_record_i32($i338);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $i339 := $ne.i32($i338, 0);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p340 := $bitcast.ref.ref($p6);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} $i341 := zd_iowrite16a_locked($p7, $p340, 3);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    call {:si_unique_call 2120} {:cexpr "r"} boogie_si_record_i32($i341);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $i342 := $ne.i32($i341, 0);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} $i343 := zd1211b_al2230_finalize_rf($p7);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    call {:si_unique_call 2122} {:cexpr "tmp___0"} boogie_si_record_i32($i343);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $i296 := $i343;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $r := $i296;
    return;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i342 == 1;
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $i296 := $i341;
    goto $bb3;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i339 == 1;
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $i296 := $i338;
    goto $bb3;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i336 == 1;
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $i296 := $i335;
    goto $bb3;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i333 == 1;
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $i296 := $i332;
    goto $bb3;

  SeqInstr_1018:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i330 == 1;
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i296 := $i328;
    goto $bb3;

  SeqInstr_1015:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i326 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $i327 := zd_rfwrite_locked($p7, 2363392, 24);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    call {:si_unique_call 2110} {:cexpr "r"} boogie_si_record_i32($i327);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $i328 := $i327;
    goto $bb28;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i321 == 1;
    goto $bb24;

  $bb20:
    assume $i316 == 1;
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $i296 := $i315;
    goto $bb3;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i313 == 1;
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $i296 := $i312;
    goto $bb3;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i309 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} $i310 := zd_iowrite16a_locked($p7, ioreqs_init_al2230s, 10);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    call {:si_unique_call 2104} {:cexpr "r"} boogie_si_record_i32($i310);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $i311 := $ne.i32($i310, 0);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i311 == 1;
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $i296 := $i310;
    goto $bb3;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i304 == 1;
    goto $bb9;

  $bb5:
    assume $i299 == 1;
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $i296 := $i298;
    goto $bb3;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i295 == 1;
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i296 := $i294;
    goto $bb3;

  SeqInstr_997:
    assume !assertsPassed;
    return;
}



const zd1211b_al2230_set_channel: ref;

axiom zd1211b_al2230_set_channel == $sub.ref(0, 758245);

procedure zd1211b_al2230_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211b_al2230_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} {:cexpr "zd1211b_al2230_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i64($i1);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, $sub.i64(0, 1));
    $p4 := $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref($i3, 4));
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} $p5 := zd_rf_to_chip($p0);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} $i6 := zd_iowrite16a_locked($p5, zd1211b_ioreqs_shared_1, 2);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    call {:si_unique_call 2126} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} $i9 := zd_rfwritev_cr_locked($p5, $p4, 3);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    call {:si_unique_call 2128} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} $i11 := zd1211b_al2230_finalize_rf($p5);
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    call {:si_unique_call 2130} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  SeqInstr_1036:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  SeqInstr_1033:
    assume !assertsPassed;
    return;
}



const zd1211b_al2230_switch_radio_on: ref;

axiom zd1211b_al2230_switch_radio_on == $sub.ref(0, 759277);

procedure zd1211b_al2230_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211b_al2230_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 28628));
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 0);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27668));
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 127);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    call {:si_unique_call 2134} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;
}



const zd1211_al2230_init_hw: ref;

axiom zd1211_al2230_init_hw == $sub.ref(0, 760309);

procedure zd1211_al2230_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.40, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211_al2230_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p110: ref;
  var $p112: ref;
  var $p114: ref;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $p136: ref;
  var $p138: ref;
  var $p140: ref;
  var $p142: ref;
  var $p144: ref;
  var $p146: ref;
  var $p148: ref;
  var $p150: ref;
  var $p152: ref;
  var $p154: ref;
  var $p156: ref;
  var $p158: ref;
  var $p160: ref;
  var $p162: ref;
  var $p164: ref;
  var $p166: ref;
  var $p168: ref;
  var $p170: ref;
  var $p172: ref;
  var $p174: ref;
  var $p176: ref;
  var $p178: ref;
  var $p180: ref;
  var $p182: ref;
  var $p184: ref;
  var $p186: ref;
  var $p188: ref;
  var $p190: ref;
  var $p192: ref;
  var $p194: ref;
  var $p196: ref;
  var $p198: ref;
  var $p200: ref;
  var $p202: ref;
  var $p204: ref;
  var $p206: ref;
  var $p208: ref;
  var $p210: ref;
  var $p212: ref;
  var $p214: ref;
  var $p216: ref;
  var $p218: ref;
  var $p220: ref;
  var $p222: ref;
  var $p224: ref;
  var $p226: ref;
  var $p228: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $i254: i32;
  var $i255: i1;
  var $p257: ref;
  var $p258: ref;
  var $i259: i8;
  var $i260: i32;
  var $i261: i1;
  var $p263: ref;
  var $i264: i8;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $i274: i8;
  var $i275: i32;
  var $i276: i1;
  var $p278: ref;
  var $i279: i8;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $i284: i32;
  var $i283: i32;
  var $i285: i1;
  var $p286: ref;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $i290: i32;
  var $i291: i1;
  var $p292: ref;
  var $i293: i32;
  var $i294: i1;
  var $i256: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} $p1 := $alloc($mul.ref(208, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} $p4 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} $p5 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} $p6 := zd_rf_to_chip($p0);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 28612));
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 32);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $sub.i16(0, 28580));
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 64);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $sub.i16(0, 28576));
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 32);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $sub.i16(0, 28568));
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, 17);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $sub.i16(0, 28560));
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, 62);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $sub.i16(0, 28556));
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, 0);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $sub.i16(0, 28496));
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, 51);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $sub.i16(0, 28248));
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, 42);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, $sub.i16(0, 28244));
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p42, 26);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $sub.i16(0, 28236));
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, 9);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p48, $sub.i16(0, 28232));
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, 39);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $sub.i16(0, 28228));
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, 43);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, $sub.i16(0, 28224));
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, 43);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, $sub.i16(0, 28196));
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, 10);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p64, $sub.i16(0, 28632));
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p66, 137);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, $sub.i16(0, 28604));
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, 40);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $sub.i16(0, 28568));
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p74, 147);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p76, $sub.i16(0, 28536));
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p78, 48);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, $sub.i16(0, 28532));
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p82, 62);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p84, $sub.i16(0, 28508));
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p86, 36);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p88, $sub.i16(0, 28496));
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, 50);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p92, $sub.i16(0, 28488));
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p94, 150);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p96, $sub.i16(0, 28484));
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p98, 30);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p100, $sub.i16(0, 28356));
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p102, 88);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p104, $sub.i16(0, 28352));
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p106, 48);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p108, $sub.i16(0, 28348));
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p110, 48);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p112, $sub.i16(0, 28324));
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p114, 10);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p116, $sub.i16(0, 28316));
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, 4);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p120, $sub.i16(0, 28304));
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p122, 10);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p124, $sub.i16(0, 28276));
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p126, 40);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p128, $sub.i16(0, 28272));
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p130, 0);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p132, $sub.i16(0, 28268));
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p134, 19);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p136, $sub.i16(0, 28264));
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p138, 39);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p140, $sub.i16(0, 28248));
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p142, 36);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p144, $sub.i16(0, 28244));
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p146, 42);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p148, $sub.i16(0, 28236));
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p150, 9);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p152, $sub.i16(0, 28232));
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p154, 19);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p156, $sub.i16(0, 28228));
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p158, 31);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p160, $sub.i16(0, 28224));
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p162, 31);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p164, $sub.i16(0, 28220));
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p166, 39);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p168, $sub.i16(0, 28216));
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p170, 39);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p172, $sub.i16(0, 28212));
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p174, 36);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p176, $sub.i16(0, 28208));
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p178, 36);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p180, $sub.i16(0, 28204));
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p182, 244);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p184, $sub.i16(0, 28200));
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p186, 252);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p188, $sub.i16(0, 28196));
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p190, 16);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p192, $sub.i16(0, 28192));
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p194, 79);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p196, $sub.i16(0, 28188));
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p198, 119);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p200, $sub.i16(0, 28184));
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p202, 224);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p204, $sub.i16(0, 28124));
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p206, 136);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p208, $sub.i16(0, 27664));
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p210, 255);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p212, $sub.i16(0, 27660));
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p214, 255);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p216, $sub.i16(0, 27668));
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p218, 47);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p220, $sub.i16(0, 27668));
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p222, 63);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p224, $sub.i16(0, 28120));
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p226, 40);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p228, $sub.i16(0, 27860));
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p230, 6);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 4));
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p231, 259984);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(1, 4));
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p232, 209713);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(2, 4));
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p233, 13);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(3, 4));
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p234, 734001);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(4, 4));
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p235, 243730);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(5, 4));
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p236, 65523);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(0, 4));
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p237, 3492);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(1, 4));
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p238, 1002949);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(2, 4));
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p239, 525750);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(3, 4));
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p240, 71303);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(4, 4));
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p241, 1672);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(5, 4));
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p242, 263097);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(6, 4));
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p243, 56250);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(7, 4));
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p244, 2459);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(8, 4));
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p245, 778236);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(9, 4));
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p246, 13);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(10, 4));
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p247, 20495);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(0, 4));
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p248, 53263);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(1, 4));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p249, 19471);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(2, 4));
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p250, 21519);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(3, 4));
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p251, 28687);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(4, 4));
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p252, 20495);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $p253 := $bitcast.ref.ref($p1);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} $i254 := zd_iowrite16a_locked($p6, $p253, 52);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    call {:si_unique_call 2142} {:cexpr "r"} boogie_si_record_i32($i254);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $i255 := $ne.i32($i254, 0);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p257 := $bitcast.ref.ref($p6);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($p257, $mul.ref(11579, 1));
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.0, $p258);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $i260 := $zext.i8.i32($i259);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i260, 0);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i261 == 1);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11584)), $mul.ref(11280, 1)), $mul.ref(0, 1));
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.0, $p263);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $i265 := $zext.i8.i32($i264);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 10);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p3);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} $i270 := zd_rfwritev_locked($p6, $p269, 6, 24);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    call {:si_unique_call 2146} {:cexpr "r"} boogie_si_record_i32($i270);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 0);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p272 := $bitcast.ref.ref($p6);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($p272, $mul.ref(11579, 1));
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $i274 := $load.i8($M.0, $p273);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $i275 := $zext.i8.i32($i274);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i276 == 1);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 11584)), $mul.ref(11280, 1)), $mul.ref(0, 1));
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i279 := $load.i8($M.0, $p278);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $i280 := $zext.i8.i32($i279);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 10);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i281 == 1);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} $i284 := zd_rfwrite_locked($p6, 1444, 24);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    call {:si_unique_call 2150} {:cexpr "r"} boogie_si_record_i32($i284);
    assume {:verifier.code 0} true;
    $i283 := $i284;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $i285 := $ne.i32($i283, 0);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p4);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} $i287 := zd_rfwritev_locked($p6, $p286, 11, 24);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    call {:si_unique_call 2152} {:cexpr "r"} boogie_si_record_i32($i287);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p2);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} $i290 := zd_iowrite16a_locked($p6, $p289, 4);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    call {:si_unique_call 2154} {:cexpr "r"} boogie_si_record_i32($i290);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $i291 := $ne.i32($i290, 0);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p292 := $bitcast.ref.ref($p5);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} $i293 := zd_rfwritev_locked($p6, $p292, 5, 24);
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    call {:si_unique_call 2156} {:cexpr "r"} boogie_si_record_i32($i293);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i256 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $r := $i256;
    return;

  $bb32:
    assume $i294 == 1;
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $i256 := $i293;
    goto $bb3;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i291 == 1;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i256 := $i290;
    goto $bb3;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i288 == 1;
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $i256 := $i287;
    goto $bb3;

  SeqInstr_1060:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i285 == 1;
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $i256 := $i283;
    goto $bb3;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i281 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} $i282 := zd_rfwrite_locked($p6, 2084, 24);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    call {:si_unique_call 2148} {:cexpr "r"} boogie_si_record_i32($i282);
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $i283 := $i282;
    goto $bb22;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i276 == 1;
    goto $bb18;

  $bb14:
    assume $i271 == 1;
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $i256 := $i270;
    goto $bb3;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} $i267 := zd_iowrite16a_locked($p6, ioreqs_init_al2230s, 10);
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    call {:si_unique_call 2144} {:cexpr "r"} boogie_si_record_i32($i267);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i268 == 1;
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $i256 := $i267;
    goto $bb3;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i261 == 1;
    goto $bb6;

  $bb1:
    assume $i255 == 1;
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $i256 := $i254;
    goto $bb3;

  SeqInstr_1045:
    assume !assertsPassed;
    return;
}



const zd1211_al2230_set_channel: ref;

axiom zd1211_al2230_set_channel == $sub.ref(0, 761341);

procedure zd1211_al2230_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211_al2230_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2158} {:cexpr "zd1211_al2230_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i64($i1);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, $sub.i64(0, 1));
    $p5 := $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref($i4, 4));
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} $p6 := zd_rf_to_chip($p0);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 28120));
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 40);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $sub.i16(0, 27860));
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 6);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} $i15 := zd_rfwritev_locked($p6, $p5, 3, 24);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    call {:si_unique_call 2161} {:cexpr "r"} boogie_si_record_i32($i15);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} $i19 := zd_iowrite16a_locked($p6, $p18, 2);
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    call {:si_unique_call 2163} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb3;

  SeqInstr_1069:
    assume !assertsPassed;
    return;
}



const zd1211_al2230_switch_radio_on: ref;

axiom zd1211_al2230_switch_radio_on == $sub.ref(0, 762373);

procedure zd1211_al2230_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211_al2230_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} $p2 := zd_rf_to_chip($p0);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 28628));
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 0);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27668));
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 63);
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} $i12 := zd_iowrite16a_locked($p2, $p11, 2);
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    call {:si_unique_call 2167} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_1075:
    assume !assertsPassed;
    return;
}



const zd1211b_al2230_finalize_rf: ref;

axiom zd1211b_al2230_finalize_rf == $sub.ref(0, 763405);

procedure zd1211b_al2230_finalize_rf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211b_al2230_finalize_rf($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} $p1 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $sub.i16(0, 28352));
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 48);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $sub.i16(0, 28348));
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 48);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $sub.i16(0, 28356));
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, 88);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $sub.i16(0, 28624));
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, 240);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, $sub.i16(0, 28364));
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 27);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $sub.i16(0, 28360));
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 88);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $sub.i16(0, 27860));
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, 6);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 0);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, 0);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $sub.i16(0, 27712));
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, 128);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} $i39 := zd_iowrite16a_locked($p0, $p38, 9);
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    call {:si_unique_call 2170} {:cexpr "r"} boogie_si_record_i32($i39);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p0);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(11578, 1));
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} $i49 := zd_iowrite16_locked($p0, 6, $sub.i16(0, 27860));
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    call {:si_unique_call 2174} {:cexpr "tmp"} boogie_si_record_i32($i49);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $i41 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  SeqInstr_1084:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i46 == 1;
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} $i47 := zd_iowrite16_locked($p0, 225, $sub.i16(0, 28636));
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    call {:si_unique_call 2172} {:cexpr "r"} boogie_si_record_i32($i47);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $i41 := $i47;
    goto $bb3;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    goto $bb3;

  SeqInstr_1078:
    assume !assertsPassed;
    return;
}



const rf2959_init_hw: ref;

axiom rf2959_init_hw == $sub.ref(0, 764437);

procedure rf2959_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.40, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation rf2959_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p203: ref;
  var $p205: ref;
  var $p207: ref;
  var $p209: ref;
  var $p211: ref;
  var $p213: ref;
  var $p215: ref;
  var $p217: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p225: ref;
  var $p227: ref;
  var $p229: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $p245: ref;
  var $p247: ref;
  var $p249: ref;
  var $p251: ref;
  var $p253: ref;
  var $p255: ref;
  var $p257: ref;
  var $p259: ref;
  var $p261: ref;
  var $p263: ref;
  var $p265: ref;
  var $p267: ref;
  var $p269: ref;
  var $p271: ref;
  var $p273: ref;
  var $p275: ref;
  var $p277: ref;
  var $p279: ref;
  var $p281: ref;
  var $p283: ref;
  var $p285: ref;
  var $p287: ref;
  var $p289: ref;
  var $p291: ref;
  var $p293: ref;
  var $p295: ref;
  var $p297: ref;
  var $p299: ref;
  var $p301: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i32;
  var $i323: i1;
  var $p325: ref;
  var $i326: i32;
  var $i324: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} $p1 := $alloc($mul.ref(300, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} $p2 := $alloc($mul.ref(68, $zext.i32.i64(1)));
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} $p3 := zd_rf_to_chip($p0);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $sub.i16(0, 28664));
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 30);
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $sub.i16(0, 28636));
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, 32);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $sub.i16(0, 28632));
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, 137);
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, $sub.i16(0, 28628));
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, 0);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $sub.i16(0, 28612));
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, 208);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $sub.i16(0, 28604));
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, 104);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $sub.i16(0, 28596));
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 74);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $sub.i16(0, 28592));
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, 12);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, $sub.i16(0, 28588));
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, 14);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $sub.i16(0, 28580));
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, 72);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, $sub.i16(0, 28576));
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, 20);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, $sub.i16(0, 28568));
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, 144);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p53, $sub.i16(0, 28564));
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, 48);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p57, $sub.i16(0, 28556));
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, 32);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, $sub.i16(0, 28548));
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, 178);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $sub.i16(0, 28544));
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p67, 67);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $sub.i16(0, 28540));
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, 40);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, $sub.i16(0, 28520));
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p75, 48);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, $sub.i16(0, 28536));
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, 15);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, $sub.i16(0, 28532));
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p83, 240);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, $sub.i16(0, 28508));
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p87, 42);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $sub.i16(0, 28488));
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p91, 127);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p93, $sub.i16(0, 28484));
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, 30);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p97, $sub.i16(0, 28468));
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p99, 197);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p101, $sub.i16(0, 28464));
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p103, 197);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, $sub.i16(0, 28460));
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p107, 197);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p109, $sub.i16(0, 28356));
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p111, 88);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p113, $sub.i16(0, 28352));
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, 48);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p117, $sub.i16(0, 28348));
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p119, 48);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p121, $sub.i16(0, 28344));
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p123, 0);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p125, $sub.i16(0, 28340));
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p127, 36);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p129, $sub.i16(0, 28336));
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p131, 4);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p133, $sub.i16(0, 28332));
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p135, 0);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p137, $sub.i16(0, 28328));
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p139, 16);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p141, $sub.i16(0, 28324));
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p143, 42);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p145, $sub.i16(0, 28320));
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p147, 16);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p149, $sub.i16(0, 28316));
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p151, 36);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p153, $sub.i16(0, 28312));
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p155, 24);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p157, $sub.i16(0, 28308));
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p159, 0);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p161, $sub.i16(0, 28304));
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p163, 10);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p165, $sub.i16(0, 28300));
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p167, 0);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p169, $sub.i16(0, 28296));
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p171, 1);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p173, $sub.i16(0, 28292));
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p175, 0);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p177, $sub.i16(0, 28288));
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p179, 64);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p181, $sub.i16(0, 28284));
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p183, 55);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p185, $sub.i16(0, 28280));
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p187, 5);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p189, $sub.i16(0, 28276));
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p191, 40);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p193, $sub.i16(0, 28272));
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p195, 0);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p197, $sub.i16(0, 28268));
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p199, 19);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p201, $sub.i16(0, 28264));
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p203, 39);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p205, $sub.i16(0, 28260));
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p207, 39);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p209, $sub.i16(0, 28256));
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p211, 24);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p213, $sub.i16(0, 28252));
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p215, 18);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p217, $sub.i16(0, 28248));
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p219, 26);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p221, $sub.i16(0, 28244));
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p223, 36);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p225, $sub.i16(0, 28240));
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p227, 10);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(56, 4)), $mul.ref(0, 1));
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p229, $sub.i16(0, 28236));
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(56, 4)), $mul.ref(2, 1));
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p231, 19);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(57, 4)), $mul.ref(0, 1));
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p233, $sub.i16(0, 28232));
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(57, 4)), $mul.ref(2, 1));
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p235, 47);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(58, 4)), $mul.ref(0, 1));
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p237, $sub.i16(0, 28228));
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(58, 4)), $mul.ref(2, 1));
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p239, 39);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(59, 4)), $mul.ref(0, 1));
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p241, $sub.i16(0, 28224));
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(59, 4)), $mul.ref(2, 1));
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p243, 39);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(60, 4)), $mul.ref(0, 1));
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p245, $sub.i16(0, 28220));
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(60, 4)), $mul.ref(2, 1));
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p247, 39);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(61, 4)), $mul.ref(0, 1));
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p249, $sub.i16(0, 28216));
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(61, 4)), $mul.ref(2, 1));
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p251, 39);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(62, 4)), $mul.ref(0, 1));
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p253, $sub.i16(0, 28212));
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(62, 4)), $mul.ref(2, 1));
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p255, 64);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(63, 4)), $mul.ref(0, 1));
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p257, $sub.i16(0, 28208));
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(63, 4)), $mul.ref(2, 1));
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p259, 64);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(64, 4)), $mul.ref(0, 1));
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p261, $sub.i16(0, 28204));
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(64, 4)), $mul.ref(2, 1));
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p263, 240);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(65, 4)), $mul.ref(0, 1));
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p265, $sub.i16(0, 28200));
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(65, 4)), $mul.ref(2, 1));
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p267, 240);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(66, 4)), $mul.ref(0, 1));
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p269, $sub.i16(0, 28196));
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(66, 4)), $mul.ref(2, 1));
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p271, 22);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(67, 4)), $mul.ref(0, 1));
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p273, $sub.i16(0, 28184));
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(67, 4)), $mul.ref(2, 1));
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p275, 0);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(68, 4)), $mul.ref(0, 1));
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p277, $sub.i16(0, 28164));
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(68, 4)), $mul.ref(2, 1));
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p279, 3);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(69, 4)), $mul.ref(0, 1));
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p281, $sub.i16(0, 28148));
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(69, 4)), $mul.ref(2, 1));
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p283, 8);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(70, 4)), $mul.ref(0, 1));
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p285, $sub.i16(0, 28120));
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(70, 4)), $mul.ref(2, 1));
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p287, 40);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(71, 4)), $mul.ref(0, 1));
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p289, $sub.i16(0, 28080));
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(71, 4)), $mul.ref(2, 1));
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p291, 68);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(72, 4)), $mul.ref(0, 1));
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p293, $sub.i16(0, 28072));
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(72, 4)), $mul.ref(2, 1));
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p295, 16);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(73, 4)), $mul.ref(0, 1));
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p297, $sub.i16(0, 27996));
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(73, 4)), $mul.ref(2, 1));
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p299, 187);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(74, 4)), $mul.ref(0, 1));
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p301, $sub.i16(0, 27992));
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 300)), $mul.ref(74, 4)), $mul.ref(2, 1));
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p303, 187);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 4));
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p304, 7);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(1, 4));
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p305, 515395);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(2, 4));
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p306, 526681);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(3, 4));
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p307, 943718);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(4, 4));
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p308, 1141335);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(5, 4));
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p309, 1563971);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(6, 4));
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p310, 1579513);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(7, 4));
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p311, 1992294);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(8, 4));
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p312, 2180436);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(9, 4));
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p313, 2484218);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(10, 4));
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p314, 2621434);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(11, 4));
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p315, 2703656);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(12, 4));
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p316, 2883584);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(13, 4));
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p317, 3145728);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(14, 4));
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p318, 3407872);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(15, 4));
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p319, 3677711);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(16, 4));
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p320, 7084047);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p1);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} $i322 := zd_iowrite16a_locked($p3, $p321, 75);
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    call {:si_unique_call 2179} {:cexpr "r"} boogie_si_record_i32($i322);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p325 := $bitcast.ref.ref($p2);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} $i326 := zd_rfwritev_locked($p3, $p325, 17, 24);
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    call {:si_unique_call 2181} {:cexpr "tmp___0"} boogie_si_record_i32($i326);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $i324 := $i326;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $r := $i324;
    return;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i323 == 1;
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $i324 := $i322;
    goto $bb3;

  SeqInstr_1087:
    assume !assertsPassed;
    return;
}



const rf2959_set_channel: ref;

axiom rf2959_set_channel == $sub.ref(0, 765469);

procedure rf2959_set_channel($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.10, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation rf2959_set_channel($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} {:cexpr "rf2959_set_channel:arg:channel"} boogie_si_record_i8($i1);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i64($i1);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, $sub.i64(0, 1));
    $p4 := $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref($i3, 4));
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} $p5 := zd_rf_to_chip($p0);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.46, $p4);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} $i7 := zd_rfwrite_locked($p5, $i6, 24);
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    call {:si_unique_call 2185} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $i11 := $add.i64($i3, 1);
    $p12 := $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref($i11, 4));
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.46, $p12);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} $i14 := zd_rfwrite_locked($p5, $i13, 24);
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb6;

  SeqInstr_1096:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;

  SeqInstr_1093:
    assume !assertsPassed;
    return;
}



const rf2959_switch_radio_on: ref;

axiom rf2959_switch_radio_on == $sub.ref(0, 766501);

procedure rf2959_switch_radio_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation rf2959_switch_radio_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $sub.i16(0, 28632));
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 137);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $sub.i16(0, 28628));
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 0);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} $p10 := zd_rf_to_chip($p0);
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $i12 := zd_iowrite16a_locked($p10, $p11, 2);
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    call {:si_unique_call 2190} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_1099:
    assume !assertsPassed;
    return;
}



const rf2959_switch_radio_off: ref;

axiom rf2959_switch_radio_off == $sub.ref(0, 767533);

procedure rf2959_switch_radio_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation rf2959_switch_radio_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $sub.i16(0, 28632));
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 21);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $sub.i16(0, 28628));
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 129);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} $p10 := zd_rf_to_chip($p0);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} $i12 := zd_iowrite16a_locked($p10, $p11, 2);
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    call {:si_unique_call 2194} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_1102:
    assume !assertsPassed;
    return;
}



const hw_reset_phy: ref;

axiom hw_reset_phy == $sub.ref(0, 768565);

procedure hw_reset_phy($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation hw_reset_phy($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i5: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} $i1 := zd_chip_is_zd1211b($p0);
    call {:si_unique_call 2196} {:cexpr "tmp___3"} boogie_si_record_i32($i1);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} $i5 := zd1211_hw_reset_phy($p0);
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    call {:si_unique_call 2200} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} $i3 := zd1211b_hw_reset_phy($p0);
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    call {:si_unique_call 2198} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb3;

  SeqInstr_1105:
    assume !assertsPassed;
    return;
}



const hw_init_hmac: ref;

axiom hw_init_hmac == $sub.ref(0, 769597);

procedure hw_init_hmac($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation hw_init_hmac($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i24;
  var $i97: i24;
  var $i98: i24;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i114: i32;
  var $i113: i32;
  var $i109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} $p1 := $alloc($mul.ref(160, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 26992));
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 32);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27384));
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 805308424);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $sub.i16(0, 27020));
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $sub.i16(0, 26996));
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 604045311);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $sub.i16(0, 27100));
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $sub.i16(0, 27096));
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $sub.i32(0, 2147483648));
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $sub.i16(0, 27008));
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 164);
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $sub.i16(0, 27388));
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 127);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $sub.i16(0, 27104));
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 15729665);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, $sub.i16(0, 27028));
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $sub.i16(0, 26992));
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 128);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p48, $sub.i16(0, 27388));
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $sub.i16(0, 27048));
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 256);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(13, 8)), $mul.ref(0, 1));
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, $sub.i16(0, 27524));
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(13, 8)), $mul.ref(4, 1));
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 112);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(14, 8)), $mul.ref(0, 1));
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, $sub.i16(0, 27392));
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(14, 8)), $mul.ref(4, 1));
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 268435456);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(15, 8)), $mul.ref(0, 1));
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p64, $sub.i16(0, 27080));
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(15, 8)), $mul.ref(4, 1));
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 33751555);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 8)), $mul.ref(0, 1));
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, $sub.i16(0, 27064));
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 8)), $mul.ref(4, 1));
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 1);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(17, 8)), $mul.ref(0, 1));
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $sub.i16(0, 27076));
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(17, 8)), $mul.ref(4, 1));
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 276);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(18, 8)), $mul.ref(0, 1));
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p76, $sub.i16(0, 26984));
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(18, 8)), $mul.ref(4, 1));
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 172474418);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(19, 8)), $mul.ref(0, 1));
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, $sub.i16(0, 26880));
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(19, 8)), $mul.ref(4, 1));
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 3);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} $i84 := mutex_is_locked($p83);
    call {:si_unique_call 2204} {:cexpr "tmp___0"} boogie_si_record_i32($i84);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i32($i85);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 2206} {:cexpr "tmp___1"} boogie_si_record_i64($i88);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p1);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} $i107 := zd_iowrite32a_locked($p0, $p106, 20);
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    call {:si_unique_call 2212} {:cexpr "r"} boogie_si_record_i32($i107);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} $i110 := zd_chip_is_zd1211b($p0);
    call {:si_unique_call 2214} {:cexpr "tmp___6"} boogie_si_record_i32($i110);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i111 == 1);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} $i114 := zd1211_hw_init_hmac($p0);
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    call {:si_unique_call 2218} {:cexpr "tmp___4"} boogie_si_record_i32($i114);
    assume {:verifier.code 0} true;
    $i113 := $i114;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $i109 := $i113;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $r := $i109;
    return;

  SeqInstr_1117:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i111 == 1;
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} $i112 := zd1211b_hw_init_hmac($p0);
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    call {:si_unique_call 2216} {:cexpr "tmp___3"} boogie_si_record_i32($i112);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $i113 := $i112;
    goto $bb13;

  SeqInstr_1114:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i108 == 1;
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $i109 := $i107;
    goto $bb9;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i89 == 1;
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p90, .str.1);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p91, .str.127);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p92, .str.3);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p93, .str.4);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $i96 := $load.i24($M.8, $p95);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $i97 := $and.i24($i96, $sub.i24(0, 262144));
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $i98 := $or.i24($i97, 836);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p95, $i98);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p99, 1);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.9, $p100);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i64($i101);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $i103 := $and.i64($i102, 1);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 2208} {:cexpr "tmp"} boogie_si_record_i64($i104);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} dump_stack();
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i105 == 1;
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 836, .str.10);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd1211b_hw_init_hmac: ref;

axiom zd1211b_hw_init_hmac == $sub.ref(0, 770629);

procedure zd1211b_hw_init_hmac($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211b_hw_init_hmac($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} $p1 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 25816));
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 25856));
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 8323135);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $sub.i16(0, 25852));
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 8323135);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $sub.i16(0, 25848));
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 4128799);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $sub.i16(0, 25844));
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 2031631);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $sub.i16(0, 25840));
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 2621480);
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $sub.i16(0, 25836));
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 9175100);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $sub.i16(0, 25824));
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 25167908);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $sub.i16(0, 27072));
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 790271);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} dev_printk.ref.ref.ref.ref(.str.6, $p42, .str.26, .str.128);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} $i44 := mutex_is_locked($p43);
    call {:si_unique_call 2223} {:cexpr "tmp___0"} boogie_si_record_i32($i44);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 2225} {:cexpr "tmp___1"} boogie_si_record_i64($i48);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p1);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} $i67 := zd_iowrite32a_locked($p0, $p66, 9);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    call {:si_unique_call 2231} {:cexpr "tmp___2"} boogie_si_record_i32($i67);
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $r := $i67;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i49 == 1;
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, .str.1);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p51, .str.128);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p52, .str.3);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p53, .str.4);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.8, $p55);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 806);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p55, $i58);
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p59, 1);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.9, $p60);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 2227} {:cexpr "tmp"} boogie_si_record_i64($i64);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} dump_stack();
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i65 == 1;
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 806, .str.10);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd1211_hw_init_hmac: ref;

axiom zd1211_hw_init_hmac == $sub.ref(0, 771661);

procedure zd1211_hw_init_hmac($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211_hw_init_hmac($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i24;
  var $i29: i24;
  var $i30: i24;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $sub.i16(0, 27012));
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $sub.i16(0, 27072));
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 788032);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} dev_printk.ref.ref.ref.ref(.str.6, $p14, .str.26, .str.129);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} $i16 := mutex_is_locked($p15);
    call {:si_unique_call 2236} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 2238} {:cexpr "tmp___1"} boogie_si_record_i64($i20);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} $i39 := zd_iowrite32a_locked($p0, $p38, 2);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    call {:si_unique_call 2244} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p22, .str.1);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p23, .str.129);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p24, .str.3);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p25, .str.4);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i28 := $load.i24($M.8, $p27);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $i29 := $and.i24($i28, $sub.i24(0, 262144));
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $i30 := $or.i24($i29, 787);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p27, $i30);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p31, 1);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.9, $p32);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i64($i33);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 1);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 2240} {:cexpr "tmp"} boogie_si_record_i64($i36);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} dump_stack();
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i37 == 1;
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.3, 787, .str.10);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd1211b_hw_reset_phy: ref;

axiom zd1211b_hw_reset_phy == $sub.ref(0, 772693);

procedure zd1211b_hw_reset_phy($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211b_hw_reset_phy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p203: ref;
  var $p205: ref;
  var $p207: ref;
  var $p209: ref;
  var $p211: ref;
  var $p213: ref;
  var $p215: ref;
  var $p217: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p225: ref;
  var $p227: ref;
  var $p229: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $p245: ref;
  var $p247: ref;
  var $p249: ref;
  var $p251: ref;
  var $p253: ref;
  var $p255: ref;
  var $p257: ref;
  var $p259: ref;
  var $p261: ref;
  var $p263: ref;
  var $p265: ref;
  var $p267: ref;
  var $p269: ref;
  var $p271: ref;
  var $p273: ref;
  var $p275: ref;
  var $p277: ref;
  var $p279: ref;
  var $p281: ref;
  var $p283: ref;
  var $p285: ref;
  var $p287: ref;
  var $p289: ref;
  var $p291: ref;
  var $p293: ref;
  var $p295: ref;
  var $p297: ref;
  var $p299: ref;
  var $p301: ref;
  var $p303: ref;
  var $p305: ref;
  var $p307: ref;
  var $p309: ref;
  var $p311: ref;
  var $p313: ref;
  var $p315: ref;
  var $p317: ref;
  var $p319: ref;
  var $p321: ref;
  var $p323: ref;
  var $p325: ref;
  var $p327: ref;
  var $p329: ref;
  var $p331: ref;
  var $p333: ref;
  var $p335: ref;
  var $p337: ref;
  var $p339: ref;
  var $p341: ref;
  var $p343: ref;
  var $p345: ref;
  var $p347: ref;
  var $p349: ref;
  var $p351: ref;
  var $p353: ref;
  var $p355: ref;
  var $p357: ref;
  var $p359: ref;
  var $p361: ref;
  var $p363: ref;
  var $p365: ref;
  var $p367: ref;
  var $p369: ref;
  var $p371: ref;
  var $p373: ref;
  var $p375: ref;
  var $p377: ref;
  var $p379: ref;
  var $p381: ref;
  var $p383: ref;
  var $p385: ref;
  var $p387: ref;
  var $p389: ref;
  var $p391: ref;
  var $p393: ref;
  var $p395: ref;
  var $p397: ref;
  var $p399: ref;
  var $p401: ref;
  var $p403: ref;
  var $p405: ref;
  var $p407: ref;
  var $p409: ref;
  var $p411: ref;
  var $p413: ref;
  var $p415: ref;
  var $p417: ref;
  var $p419: ref;
  var $p421: ref;
  var $p423: ref;
  var $p425: ref;
  var $p427: ref;
  var $p429: ref;
  var $p431: ref;
  var $p433: ref;
  var $p435: ref;
  var $p437: ref;
  var $p439: ref;
  var $p441: ref;
  var $p443: ref;
  var $p445: ref;
  var $p447: ref;
  var $p449: ref;
  var $p451: ref;
  var $p453: ref;
  var $p455: ref;
  var $p457: ref;
  var $p459: ref;
  var $p461: ref;
  var $p463: ref;
  var $p465: ref;
  var $p467: ref;
  var $p469: ref;
  var $p471: ref;
  var $p473: ref;
  var $p475: ref;
  var $p477: ref;
  var $p479: ref;
  var $p481: ref;
  var $p483: ref;
  var $p485: ref;
  var $p487: ref;
  var $p489: ref;
  var $p491: ref;
  var $p493: ref;
  var $p495: ref;
  var $p497: ref;
  var $p499: ref;
  var $p501: ref;
  var $p503: ref;
  var $p505: ref;
  var $p507: ref;
  var $p509: ref;
  var $p511: ref;
  var $p513: ref;
  var $p515: ref;
  var $p517: ref;
  var $p519: ref;
  var $p521: ref;
  var $p523: ref;
  var $p525: ref;
  var $p527: ref;
  var $p529: ref;
  var $p531: ref;
  var $p533: ref;
  var $p535: ref;
  var $p537: ref;
  var $p539: ref;
  var $p541: ref;
  var $p543: ref;
  var $p545: ref;
  var $p547: ref;
  var $p549: ref;
  var $p551: ref;
  var $p553: ref;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $i558: i32;
  var $i559: i1;
  var $p561: ref;
  var $i562: i32;
  var $i563: i32;
  var $i564: i1;
  var $i565: i1;
  var $i566: i32;
  var $i560: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} $p1 := $alloc($mul.ref(552, $zext.i32.i64(1)));
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $sub.i16(0, 28672));
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 20);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $sub.i16(0, 28668));
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 6);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $sub.i16(0, 28664));
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, 38);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $sub.i16(0, 28660));
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, 56);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, $sub.i16(0, 28640));
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 128);
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $sub.i16(0, 28636));
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 224);
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $sub.i16(0, 28632));
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, 129);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $sub.i16(0, 28628));
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, 0);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $sub.i16(0, 28624));
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, 240);
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $sub.i16(0, 28620));
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, 140);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $sub.i16(0, 28616));
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, 128);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $sub.i16(0, 28612));
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, 61);
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, $sub.i16(0, 28608));
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p53, 32);
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, $sub.i16(0, 28604));
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p57, 30);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $sub.i16(0, 28600));
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, 10);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, $sub.i16(0, 28596));
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, 72);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p67, $sub.i16(0, 28592));
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, 16);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, $sub.i16(0, 28588));
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, 14);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p75, $sub.i16(0, 28584));
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, 35);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, $sub.i16(0, 28580));
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, 144);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p83, $sub.i16(0, 28576));
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, 20);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p87, $sub.i16(0, 28572));
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, 64);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p91, $sub.i16(0, 28568));
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p93, 16);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, $sub.i16(0, 28564));
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p97, 16);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p99, $sub.i16(0, 28560));
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p101, 127);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p103, $sub.i16(0, 28556));
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, 128);
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p107, $sub.i16(0, 28552));
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p109, 75);
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p111, $sub.i16(0, 28548));
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p113, 96);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, $sub.i16(0, 28544));
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p117, 67);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p119, $sub.i16(0, 28540));
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p121, 8);
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p123, $sub.i16(0, 28536));
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p125, 6);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p127, $sub.i16(0, 28532));
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p129, 10);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p131, $sub.i16(0, 28528));
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p133, 0);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p135, $sub.i16(0, 28524));
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p137, 0);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p139, $sub.i16(0, 28520));
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p141, 56);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p143, $sub.i16(0, 28516));
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p145, 12);
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p147, $sub.i16(0, 28512));
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p149, 132);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p151, $sub.i16(0, 28508));
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p153, 42);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p155, $sub.i16(0, 28504));
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p157, 128);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p159, $sub.i16(0, 28500));
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p161, 16);
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p163, $sub.i16(0, 28496));
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p165, 51);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p167, $sub.i16(0, 28488));
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p169, 255);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p171, $sub.i16(0, 28484));
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p173, 30);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p175, $sub.i16(0, 28480));
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p177, 38);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p179, $sub.i16(0, 28476));
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p181, 91);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p183, $sub.i16(0, 28416));
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p185, 208);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p187, $sub.i16(0, 28412));
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p189, 4);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p191, $sub.i16(0, 28408));
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p193, 88);
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p195, $sub.i16(0, 28404));
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p197, 201);
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p199, $sub.i16(0, 28400));
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p201, 136);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p203, $sub.i16(0, 28396));
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p205, 65);
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p207, $sub.i16(0, 28392));
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p209, 35);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p211, $sub.i16(0, 28388));
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p213, 16);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p215, $sub.i16(0, 28384));
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p217, 255);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p219, $sub.i16(0, 28380));
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p221, 50);
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p223, $sub.i16(0, 28376));
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p225, 48);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(56, 4)), $mul.ref(0, 1));
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p227, $sub.i16(0, 28372));
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(56, 4)), $mul.ref(2, 1));
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p229, 101);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(57, 4)), $mul.ref(0, 1));
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p231, $sub.i16(0, 28368));
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(57, 4)), $mul.ref(2, 1));
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p233, 65);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(58, 4)), $mul.ref(0, 1));
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p235, $sub.i16(0, 28364));
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(58, 4)), $mul.ref(2, 1));
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p237, 27);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(59, 4)), $mul.ref(0, 1));
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p239, $sub.i16(0, 28360));
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(59, 4)), $mul.ref(2, 1));
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p241, 48);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(60, 4)), $mul.ref(0, 1));
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p243, $sub.i16(0, 28356));
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(60, 4)), $mul.ref(2, 1));
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p245, 240);
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(61, 4)), $mul.ref(0, 1));
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p247, $sub.i16(0, 28352));
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(61, 4)), $mul.ref(2, 1));
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p249, 100);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(62, 4)), $mul.ref(0, 1));
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p251, $sub.i16(0, 28348));
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(62, 4)), $mul.ref(2, 1));
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p253, 100);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(63, 4)), $mul.ref(0, 1));
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p255, $sub.i16(0, 28344));
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(63, 4)), $mul.ref(2, 1));
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p257, 0);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(64, 4)), $mul.ref(0, 1));
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p259, $sub.i16(0, 28340));
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(64, 4)), $mul.ref(2, 1));
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p261, 36);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(65, 4)), $mul.ref(0, 1));
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p263, $sub.i16(0, 28336));
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(65, 4)), $mul.ref(2, 1));
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p265, 4);
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(66, 4)), $mul.ref(0, 1));
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p267, $sub.i16(0, 28332));
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(66, 4)), $mul.ref(2, 1));
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p269, 0);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(67, 4)), $mul.ref(0, 1));
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p271, $sub.i16(0, 28328));
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(67, 4)), $mul.ref(2, 1));
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p273, 12);
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(68, 4)), $mul.ref(0, 1));
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p275, $sub.i16(0, 28324));
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(68, 4)), $mul.ref(2, 1));
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p277, 18);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(69, 4)), $mul.ref(0, 1));
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p279, $sub.i16(0, 28320));
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(69, 4)), $mul.ref(2, 1));
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p281, 12);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(70, 4)), $mul.ref(0, 1));
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p283, $sub.i16(0, 28316));
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(70, 4)), $mul.ref(2, 1));
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p285, 0);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(71, 4)), $mul.ref(0, 1));
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p287, $sub.i16(0, 28312));
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(71, 4)), $mul.ref(2, 1));
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p289, 88);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(72, 4)), $mul.ref(0, 1));
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p291, $sub.i16(0, 28308));
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(72, 4)), $mul.ref(2, 1));
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p293, 4);
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(73, 4)), $mul.ref(0, 1));
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p295, $sub.i16(0, 28304));
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(73, 4)), $mul.ref(2, 1));
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p297, 0);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(74, 4)), $mul.ref(0, 1));
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p299, $sub.i16(0, 28300));
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(74, 4)), $mul.ref(2, 1));
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p301, 0);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(75, 4)), $mul.ref(0, 1));
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p303, $sub.i16(0, 28296));
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(75, 4)), $mul.ref(2, 1));
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p305, 1);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(76, 4)), $mul.ref(0, 1));
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p307, $sub.i16(0, 28292));
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(76, 4)), $mul.ref(2, 1));
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p309, 32);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(77, 4)), $mul.ref(0, 1));
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p311, $sub.i16(0, 28288));
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(77, 4)), $mul.ref(2, 1));
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p313, 80);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(78, 4)), $mul.ref(0, 1));
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p315, $sub.i16(0, 28284));
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(78, 4)), $mul.ref(2, 1));
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p317, 55);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(79, 4)), $mul.ref(0, 1));
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p319, $sub.i16(0, 28280));
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(79, 4)), $mul.ref(2, 1));
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p321, 53);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(80, 4)), $mul.ref(0, 1));
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p323, $sub.i16(0, 28276));
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(80, 4)), $mul.ref(2, 1));
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p325, 0);
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(81, 4)), $mul.ref(0, 1));
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p327, $sub.i16(0, 28272));
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(81, 4)), $mul.ref(2, 1));
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p329, 1);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(82, 4)), $mul.ref(0, 1));
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p331, $sub.i16(0, 28268));
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(82, 4)), $mul.ref(2, 1));
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p333, 19);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(83, 4)), $mul.ref(0, 1));
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p335, $sub.i16(0, 28264));
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(83, 4)), $mul.ref(2, 1));
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p337, 39);
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(84, 4)), $mul.ref(0, 1));
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p339, $sub.i16(0, 28260));
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(84, 4)), $mul.ref(2, 1));
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p341, 39);
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(85, 4)), $mul.ref(0, 1));
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p343, $sub.i16(0, 28256));
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(85, 4)), $mul.ref(2, 1));
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p345, 24);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(86, 4)), $mul.ref(0, 1));
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p347, $sub.i16(0, 28252));
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(86, 4)), $mul.ref(2, 1));
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p349, 18);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(87, 4)), $mul.ref(0, 1));
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p351, $sub.i16(0, 28248));
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(87, 4)), $mul.ref(2, 1));
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p353, 4);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(88, 4)), $mul.ref(0, 1));
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p355, $sub.i16(0, 28244));
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(88, 4)), $mul.ref(2, 1));
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p357, 0);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(89, 4)), $mul.ref(0, 1));
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p359, $sub.i16(0, 28240));
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(89, 4)), $mul.ref(2, 1));
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p361, 10);
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(90, 4)), $mul.ref(0, 1));
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p363, $sub.i16(0, 28236));
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(90, 4)), $mul.ref(2, 1));
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p365, 39);
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(91, 4)), $mul.ref(0, 1));
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p367, $sub.i16(0, 28232));
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(91, 4)), $mul.ref(2, 1));
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p369, 39);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(92, 4)), $mul.ref(0, 1));
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p371, $sub.i16(0, 28228));
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(92, 4)), $mul.ref(2, 1));
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p373, 39);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(93, 4)), $mul.ref(0, 1));
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p375, $sub.i16(0, 28224));
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(93, 4)), $mul.ref(2, 1));
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p377, 39);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(94, 4)), $mul.ref(0, 1));
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p379, $sub.i16(0, 28220));
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(94, 4)), $mul.ref(2, 1));
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p381, 39);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(95, 4)), $mul.ref(0, 1));
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p383, $sub.i16(0, 28216));
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(95, 4)), $mul.ref(2, 1));
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p385, 39);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(96, 4)), $mul.ref(0, 1));
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p387, $sub.i16(0, 28212));
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(96, 4)), $mul.ref(2, 1));
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p389, 38);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(97, 4)), $mul.ref(0, 1));
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p391, $sub.i16(0, 28208));
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(97, 4)), $mul.ref(2, 1));
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p393, 36);
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(98, 4)), $mul.ref(0, 1));
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p395, $sub.i16(0, 28204));
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(98, 4)), $mul.ref(2, 1));
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p397, 252);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(99, 4)), $mul.ref(0, 1));
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p399, $sub.i16(0, 28200));
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(99, 4)), $mul.ref(2, 1));
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p401, 250);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(100, 4)), $mul.ref(0, 1));
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p403, $sub.i16(0, 28196));
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(100, 4)), $mul.ref(2, 1));
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p405, 30);
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(101, 4)), $mul.ref(0, 1));
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p407, $sub.i16(0, 28172));
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(101, 4)), $mul.ref(2, 1));
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p409, 144);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(102, 4)), $mul.ref(0, 1));
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p411, $sub.i16(0, 28168));
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(102, 4)), $mul.ref(2, 1));
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p413, 0);
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(103, 4)), $mul.ref(0, 1));
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p415, $sub.i16(0, 28164));
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(103, 4)), $mul.ref(2, 1));
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p417, 0);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(104, 4)), $mul.ref(0, 1));
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p419, $sub.i16(0, 28160));
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(104, 4)), $mul.ref(2, 1));
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p421, 20);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(105, 4)), $mul.ref(0, 1));
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p423, $sub.i16(0, 28156));
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(105, 4)), $mul.ref(2, 1));
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p425, 18);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(106, 4)), $mul.ref(0, 1));
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p427, $sub.i16(0, 28152));
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(106, 4)), $mul.ref(2, 1));
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p429, 16);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(107, 4)), $mul.ref(0, 1));
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p431, $sub.i16(0, 28148));
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(107, 4)), $mul.ref(2, 1));
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p433, 12);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(108, 4)), $mul.ref(0, 1));
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p435, $sub.i16(0, 28128));
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(108, 4)), $mul.ref(2, 1));
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p437, 223);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(109, 4)), $mul.ref(0, 1));
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p439, $sub.i16(0, 28124));
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(109, 4)), $mul.ref(2, 1));
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p441, 160);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(110, 4)), $mul.ref(0, 1));
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p443, $sub.i16(0, 28120));
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(110, 4)), $mul.ref(2, 1));
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p445, 168);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(111, 4)), $mul.ref(0, 1));
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p447, $sub.i16(0, 28116));
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(111, 4)), $mul.ref(2, 1));
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p449, 180);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(112, 4)), $mul.ref(0, 1));
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p451, $sub.i16(0, 28112));
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(112, 4)), $mul.ref(2, 1));
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p453, 152);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(113, 4)), $mul.ref(0, 1));
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p455, $sub.i16(0, 28108));
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(113, 4)), $mul.ref(2, 1));
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p457, 130);
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(114, 4)), $mul.ref(0, 1));
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p459, $sub.i16(0, 28104));
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(114, 4)), $mul.ref(2, 1));
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p461, 83);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(115, 4)), $mul.ref(0, 1));
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p463, $sub.i16(0, 28100));
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(115, 4)), $mul.ref(2, 1));
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p465, 28);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(116, 4)), $mul.ref(0, 1));
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p467, $sub.i16(0, 28096));
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(116, 4)), $mul.ref(2, 1));
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p469, 108);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(117, 4)), $mul.ref(0, 1));
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p471, $sub.i16(0, 28084));
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(117, 4)), $mul.ref(2, 1));
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p473, 7);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(118, 4)), $mul.ref(0, 1));
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p475, $sub.i16(0, 28080));
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(118, 4)), $mul.ref(2, 1));
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p477, 64);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(119, 4)), $mul.ref(0, 1));
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p479, $sub.i16(0, 28076));
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(119, 4)), $mul.ref(2, 1));
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p481, 64);
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(120, 4)), $mul.ref(0, 1));
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p483, $sub.i16(0, 28072));
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(120, 4)), $mul.ref(2, 1));
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p485, 20);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(121, 4)), $mul.ref(0, 1));
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p487, $sub.i16(0, 28068));
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(121, 4)), $mul.ref(2, 1));
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p489, 24);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(122, 4)), $mul.ref(0, 1));
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p491, $sub.i16(0, 28036));
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(122, 4)), $mul.ref(2, 1));
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p493, 112);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(123, 4)), $mul.ref(0, 1));
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p495, $sub.i16(0, 28032));
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(123, 4)), $mul.ref(2, 1));
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p497, 254);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(124, 4)), $mul.ref(0, 1));
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p499, $sub.i16(0, 28028));
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(124, 4)), $mul.ref(2, 1));
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p501, 238);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(125, 4)), $mul.ref(0, 1));
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p503, $sub.i16(0, 28024));
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(125, 4)), $mul.ref(2, 1));
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p505, 170);
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(126, 4)), $mul.ref(0, 1));
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p507, $sub.i16(0, 28020));
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(126, 4)), $mul.ref(2, 1));
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p509, 250);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(127, 4)), $mul.ref(0, 1));
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p511, $sub.i16(0, 28016));
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(127, 4)), $mul.ref(2, 1));
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p513, 250);
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(128, 4)), $mul.ref(0, 1));
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p515, $sub.i16(0, 28012));
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(128, 4)), $mul.ref(2, 1));
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p517, 234);
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(129, 4)), $mul.ref(0, 1));
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p519, $sub.i16(0, 28008));
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(129, 4)), $mul.ref(2, 1));
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p521, 190);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(130, 4)), $mul.ref(0, 1));
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p523, $sub.i16(0, 28004));
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(130, 4)), $mul.ref(2, 1));
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p525, 190);
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(131, 4)), $mul.ref(0, 1));
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p527, $sub.i16(0, 28000));
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(131, 4)), $mul.ref(2, 1));
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p529, 106);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(132, 4)), $mul.ref(0, 1));
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p531, $sub.i16(0, 27996));
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(132, 4)), $mul.ref(2, 1));
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p533, 186);
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(133, 4)), $mul.ref(0, 1));
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p535, $sub.i16(0, 27992));
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(133, 4)), $mul.ref(2, 1));
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p537, 186);
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(134, 4)), $mul.ref(0, 1));
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p539, $sub.i16(0, 27988));
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(134, 4)), $mul.ref(2, 1));
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p541, 186);
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(135, 4)), $mul.ref(0, 1));
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p543, $sub.i16(0, 27856));
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(135, 4)), $mul.ref(2, 1));
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p545, 125);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(136, 4)), $mul.ref(0, 1));
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p547, 0);
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(136, 4)), $mul.ref(2, 1));
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p549, 0);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(137, 4)), $mul.ref(0, 1));
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p551, $sub.i16(0, 27860));
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(137, 4)), $mul.ref(2, 1));
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p553, 48);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $p556 := $load.ref($M.0, $p555);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p556, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} dev_printk.ref.ref.ref.ref(.str.6, $p557, .str.26, .str.123);
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} $i558 := zd_chip_lock_phy_regs($p0);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    call {:si_unique_call 2248} {:cexpr "r"} boogie_si_record_i32($i558);
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    $i559 := $ne.i32($i558, 0);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i559} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i559 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p561 := $bitcast.ref.ref($p1);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} $i562 := zd_iowrite16a_locked($p0, $p561, 138);
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    call {:si_unique_call 2250} {:cexpr "r"} boogie_si_record_i32($i562);
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} $i563 := zd_chip_unlock_phy_regs($p0);
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    call {:si_unique_call 2252} {:cexpr "t"} boogie_si_record_i32($i563);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $i564 := $ne.i32($i563, 0);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i564} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i564 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i566 := $i562;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    $i560 := $i566;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $r := $i560;
    return;

  $bb5:
    assume $i564 == 1;
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    $i565 := $eq.i32($i562, 0);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i565} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i565 == 1);
    goto $bb7;

  $bb8:
    assume $i565 == 1;
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    $i566 := $i563;
    goto $bb10;

  SeqInstr_1132:
    assume !assertsPassed;
    return;

  SeqInstr_1129:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i559 == 1;
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $i560 := $i558;
    goto $bb3;

  SeqInstr_1126:
    assume !assertsPassed;
    return;
}



const zd1211_hw_reset_phy: ref;

axiom zd1211_hw_reset_phy == $sub.ref(0, 773725);

procedure zd1211_hw_reset_phy($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.10, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd1211_hw_reset_phy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p193: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p203: ref;
  var $p205: ref;
  var $p207: ref;
  var $p209: ref;
  var $p211: ref;
  var $p213: ref;
  var $p215: ref;
  var $p217: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p225: ref;
  var $p227: ref;
  var $p229: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $p245: ref;
  var $p247: ref;
  var $p249: ref;
  var $p251: ref;
  var $p253: ref;
  var $p255: ref;
  var $p257: ref;
  var $p259: ref;
  var $p261: ref;
  var $p263: ref;
  var $p265: ref;
  var $p267: ref;
  var $p269: ref;
  var $p271: ref;
  var $p273: ref;
  var $p275: ref;
  var $p277: ref;
  var $p279: ref;
  var $p281: ref;
  var $p283: ref;
  var $p285: ref;
  var $p287: ref;
  var $p289: ref;
  var $p291: ref;
  var $p293: ref;
  var $p295: ref;
  var $p297: ref;
  var $p299: ref;
  var $p301: ref;
  var $p303: ref;
  var $p305: ref;
  var $p307: ref;
  var $p309: ref;
  var $p311: ref;
  var $p313: ref;
  var $p315: ref;
  var $p317: ref;
  var $p319: ref;
  var $p321: ref;
  var $p323: ref;
  var $p325: ref;
  var $p327: ref;
  var $p329: ref;
  var $p331: ref;
  var $p333: ref;
  var $p335: ref;
  var $p337: ref;
  var $p339: ref;
  var $p341: ref;
  var $p343: ref;
  var $p345: ref;
  var $p347: ref;
  var $p349: ref;
  var $p351: ref;
  var $p353: ref;
  var $p355: ref;
  var $p357: ref;
  var $p359: ref;
  var $p361: ref;
  var $p363: ref;
  var $p365: ref;
  var $p367: ref;
  var $p369: ref;
  var $p371: ref;
  var $p373: ref;
  var $p375: ref;
  var $p377: ref;
  var $p379: ref;
  var $p381: ref;
  var $p383: ref;
  var $p385: ref;
  var $p387: ref;
  var $p389: ref;
  var $p391: ref;
  var $p393: ref;
  var $p395: ref;
  var $p397: ref;
  var $p399: ref;
  var $p401: ref;
  var $p403: ref;
  var $p405: ref;
  var $p407: ref;
  var $p409: ref;
  var $p411: ref;
  var $p413: ref;
  var $p415: ref;
  var $p417: ref;
  var $p419: ref;
  var $p421: ref;
  var $p423: ref;
  var $p425: ref;
  var $p427: ref;
  var $p429: ref;
  var $p431: ref;
  var $p433: ref;
  var $p435: ref;
  var $p437: ref;
  var $p439: ref;
  var $p441: ref;
  var $p443: ref;
  var $p445: ref;
  var $p447: ref;
  var $p449: ref;
  var $p451: ref;
  var $p453: ref;
  var $p455: ref;
  var $p457: ref;
  var $p459: ref;
  var $p461: ref;
  var $p463: ref;
  var $p465: ref;
  var $p467: ref;
  var $p469: ref;
  var $p471: ref;
  var $p473: ref;
  var $p475: ref;
  var $p477: ref;
  var $p479: ref;
  var $p481: ref;
  var $p483: ref;
  var $p485: ref;
  var $p487: ref;
  var $p489: ref;
  var $p491: ref;
  var $p493: ref;
  var $p495: ref;
  var $p497: ref;
  var $p499: ref;
  var $p501: ref;
  var $p503: ref;
  var $p505: ref;
  var $p507: ref;
  var $p509: ref;
  var $p511: ref;
  var $p513: ref;
  var $p515: ref;
  var $p517: ref;
  var $p519: ref;
  var $p521: ref;
  var $p523: ref;
  var $p525: ref;
  var $p527: ref;
  var $p529: ref;
  var $p531: ref;
  var $p533: ref;
  var $p535: ref;
  var $p537: ref;
  var $p539: ref;
  var $p541: ref;
  var $p543: ref;
  var $p545: ref;
  var $p547: ref;
  var $p549: ref;
  var $p551: ref;
  var $p553: ref;
  var $p555: ref;
  var $p557: ref;
  var $p559: ref;
  var $p561: ref;
  var $p563: ref;
  var $p565: ref;
  var $p567: ref;
  var $p569: ref;
  var $p571: ref;
  var $p573: ref;
  var $p575: ref;
  var $p577: ref;
  var $p579: ref;
  var $p581: ref;
  var $p583: ref;
  var $p585: ref;
  var $p587: ref;
  var $p589: ref;
  var $p591: ref;
  var $p593: ref;
  var $p595: ref;
  var $p597: ref;
  var $p599: ref;
  var $p601: ref;
  var $p603: ref;
  var $p605: ref;
  var $p607: ref;
  var $p609: ref;
  var $p611: ref;
  var $p613: ref;
  var $p615: ref;
  var $p617: ref;
  var $p619: ref;
  var $p621: ref;
  var $p623: ref;
  var $p625: ref;
  var $p627: ref;
  var $p629: ref;
  var $p631: ref;
  var $p633: ref;
  var $p635: ref;
  var $p637: ref;
  var $p639: ref;
  var $p641: ref;
  var $p643: ref;
  var $p645: ref;
  var $p647: ref;
  var $p649: ref;
  var $p651: ref;
  var $p653: ref;
  var $p655: ref;
  var $p657: ref;
  var $p659: ref;
  var $p661: ref;
  var $p663: ref;
  var $p665: ref;
  var $p667: ref;
  var $p669: ref;
  var $p671: ref;
  var $p673: ref;
  var $p675: ref;
  var $p677: ref;
  var $p679: ref;
  var $p681: ref;
  var $p683: ref;
  var $p685: ref;
  var $p687: ref;
  var $p689: ref;
  var $p691: ref;
  var $p693: ref;
  var $p695: ref;
  var $p697: ref;
  var $p699: ref;
  var $p701: ref;
  var $p703: ref;
  var $p705: ref;
  var $p707: ref;
  var $p709: ref;
  var $p711: ref;
  var $p712: ref;
  var $p713: ref;
  var $i714: i32;
  var $i715: i1;
  var $p717: ref;
  var $i718: i32;
  var $i719: i1;
  var $i721: i32;
  var $i720: i32;
  var $i722: i32;
  var $i723: i1;
  var $i724: i1;
  var $i725: i32;
  var $i716: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} $p1 := $alloc($mul.ref(708, $zext.i32.i64(1)));
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $sub.i16(0, 28672));
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 10);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $sub.i16(0, 28668));
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 6);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $sub.i16(0, 28664));
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, 38);
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $sub.i16(0, 28660));
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, 56);
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(4, 4)), $mul.ref(0, 1));
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, $sub.i16(0, 28640));
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(4, 4)), $mul.ref(2, 1));
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 128);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(5, 4)), $mul.ref(0, 1));
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $sub.i16(0, 28636));
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(5, 4)), $mul.ref(2, 1));
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 160);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(6, 4)), $mul.ref(0, 1));
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $sub.i16(0, 28632));
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(6, 4)), $mul.ref(2, 1));
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, 129);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(7, 4)), $mul.ref(0, 1));
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $sub.i16(0, 28628));
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(7, 4)), $mul.ref(2, 1));
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, 0);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(8, 4)), $mul.ref(0, 1));
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $sub.i16(0, 28624));
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(8, 4)), $mul.ref(2, 1));
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, 127);
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(9, 4)), $mul.ref(0, 1));
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $sub.i16(0, 28620));
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(9, 4)), $mul.ref(2, 1));
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, 140);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(10, 4)), $mul.ref(0, 1));
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $sub.i16(0, 28616));
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(10, 4)), $mul.ref(2, 1));
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, 128);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(11, 4)), $mul.ref(0, 1));
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $sub.i16(0, 28612));
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(11, 4)), $mul.ref(2, 1));
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, 61);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(12, 4)), $mul.ref(0, 1));
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, $sub.i16(0, 28608));
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(12, 4)), $mul.ref(2, 1));
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p53, 32);
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(13, 4)), $mul.ref(0, 1));
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, $sub.i16(0, 28604));
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(13, 4)), $mul.ref(2, 1));
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p57, 30);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(14, 4)), $mul.ref(0, 1));
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $sub.i16(0, 28600));
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(14, 4)), $mul.ref(2, 1));
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, 10);
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(15, 4)), $mul.ref(0, 1));
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, $sub.i16(0, 28596));
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(15, 4)), $mul.ref(2, 1));
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, 72);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(16, 4)), $mul.ref(0, 1));
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p67, $sub.i16(0, 28592));
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(16, 4)), $mul.ref(2, 1));
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, 12);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(17, 4)), $mul.ref(0, 1));
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, $sub.i16(0, 28588));
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(17, 4)), $mul.ref(2, 1));
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, 12);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(18, 4)), $mul.ref(0, 1));
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p75, $sub.i16(0, 28584));
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(18, 4)), $mul.ref(2, 1));
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, 35);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(19, 4)), $mul.ref(0, 1));
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, $sub.i16(0, 28580));
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(19, 4)), $mul.ref(2, 1));
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, 144);
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(20, 4)), $mul.ref(0, 1));
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p83, $sub.i16(0, 28576));
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(20, 4)), $mul.ref(2, 1));
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, 20);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(21, 4)), $mul.ref(0, 1));
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p87, $sub.i16(0, 28572));
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(21, 4)), $mul.ref(2, 1));
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, 64);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(22, 4)), $mul.ref(0, 1));
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p91, $sub.i16(0, 28568));
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(22, 4)), $mul.ref(2, 1));
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p93, 16);
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(23, 4)), $mul.ref(0, 1));
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, $sub.i16(0, 28564));
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(23, 4)), $mul.ref(2, 1));
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p97, 25);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(24, 4)), $mul.ref(0, 1));
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p99, $sub.i16(0, 28560));
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(24, 4)), $mul.ref(2, 1));
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p101, 127);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(25, 4)), $mul.ref(0, 1));
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p103, $sub.i16(0, 28556));
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(25, 4)), $mul.ref(2, 1));
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, 128);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(26, 4)), $mul.ref(0, 1));
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p107, $sub.i16(0, 28552));
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(26, 4)), $mul.ref(2, 1));
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p109, 75);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(27, 4)), $mul.ref(0, 1));
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p111, $sub.i16(0, 28548));
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(27, 4)), $mul.ref(2, 1));
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p113, 96);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(28, 4)), $mul.ref(0, 1));
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, $sub.i16(0, 28544));
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(28, 4)), $mul.ref(2, 1));
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p117, 67);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(29, 4)), $mul.ref(0, 1));
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p119, $sub.i16(0, 28540));
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(29, 4)), $mul.ref(2, 1));
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p121, 8);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(30, 4)), $mul.ref(0, 1));
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p123, $sub.i16(0, 28536));
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(30, 4)), $mul.ref(2, 1));
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p125, 6);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(31, 4)), $mul.ref(0, 1));
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p127, $sub.i16(0, 28532));
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(31, 4)), $mul.ref(2, 1));
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p129, 10);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(32, 4)), $mul.ref(0, 1));
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p131, $sub.i16(0, 28528));
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(32, 4)), $mul.ref(2, 1));
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p133, 0);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(33, 4)), $mul.ref(0, 1));
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p135, $sub.i16(0, 28524));
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(33, 4)), $mul.ref(2, 1));
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p137, 0);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(34, 4)), $mul.ref(0, 1));
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p139, $sub.i16(0, 28520));
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(34, 4)), $mul.ref(2, 1));
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p141, 56);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(35, 4)), $mul.ref(0, 1));
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p143, $sub.i16(0, 28516));
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(35, 4)), $mul.ref(2, 1));
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p145, 12);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(36, 4)), $mul.ref(0, 1));
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p147, $sub.i16(0, 28512));
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(36, 4)), $mul.ref(2, 1));
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p149, 132);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(37, 4)), $mul.ref(0, 1));
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p151, $sub.i16(0, 28508));
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(37, 4)), $mul.ref(2, 1));
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p153, 42);
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(38, 4)), $mul.ref(0, 1));
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p155, $sub.i16(0, 28504));
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(38, 4)), $mul.ref(2, 1));
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p157, 128);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(39, 4)), $mul.ref(0, 1));
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p159, $sub.i16(0, 28500));
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(39, 4)), $mul.ref(2, 1));
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p161, 16);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(40, 4)), $mul.ref(0, 1));
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p163, $sub.i16(0, 28496));
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(40, 4)), $mul.ref(2, 1));
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p165, 18);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(41, 4)), $mul.ref(0, 1));
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p167, $sub.i16(0, 28488));
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(41, 4)), $mul.ref(2, 1));
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p169, 255);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(42, 4)), $mul.ref(0, 1));
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p171, $sub.i16(0, 28484));
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(42, 4)), $mul.ref(2, 1));
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p173, 30);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(43, 4)), $mul.ref(0, 1));
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p175, $sub.i16(0, 28480));
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(43, 4)), $mul.ref(2, 1));
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p177, 38);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(44, 4)), $mul.ref(0, 1));
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p179, $sub.i16(0, 28476));
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(44, 4)), $mul.ref(2, 1));
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p181, 91);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(45, 4)), $mul.ref(0, 1));
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p183, $sub.i16(0, 28416));
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(45, 4)), $mul.ref(2, 1));
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p185, 208);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(46, 4)), $mul.ref(0, 1));
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p187, $sub.i16(0, 28412));
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(46, 4)), $mul.ref(2, 1));
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p189, 4);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(47, 4)), $mul.ref(0, 1));
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p191, $sub.i16(0, 28408));
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(47, 4)), $mul.ref(2, 1));
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p193, 88);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(48, 4)), $mul.ref(0, 1));
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p195, $sub.i16(0, 28404));
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(48, 4)), $mul.ref(2, 1));
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p197, 201);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(49, 4)), $mul.ref(0, 1));
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p199, $sub.i16(0, 28400));
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(49, 4)), $mul.ref(2, 1));
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p201, 136);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(50, 4)), $mul.ref(0, 1));
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p203, $sub.i16(0, 28396));
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(50, 4)), $mul.ref(2, 1));
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p205, 65);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(51, 4)), $mul.ref(0, 1));
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p207, $sub.i16(0, 28392));
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(51, 4)), $mul.ref(2, 1));
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p209, 35);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(52, 4)), $mul.ref(0, 1));
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p211, $sub.i16(0, 28388));
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(52, 4)), $mul.ref(2, 1));
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p213, 16);
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(53, 4)), $mul.ref(0, 1));
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p215, $sub.i16(0, 28384));
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(53, 4)), $mul.ref(2, 1));
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p217, 255);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(54, 4)), $mul.ref(0, 1));
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p219, $sub.i16(0, 28380));
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(54, 4)), $mul.ref(2, 1));
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p221, 50);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(55, 4)), $mul.ref(0, 1));
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p223, $sub.i16(0, 28376));
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(55, 4)), $mul.ref(2, 1));
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p225, 48);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(56, 4)), $mul.ref(0, 1));
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p227, $sub.i16(0, 28372));
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(56, 4)), $mul.ref(2, 1));
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p229, 101);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(57, 4)), $mul.ref(0, 1));
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p231, $sub.i16(0, 28368));
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(57, 4)), $mul.ref(2, 1));
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p233, 65);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(58, 4)), $mul.ref(0, 1));
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p235, $sub.i16(0, 28364));
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(58, 4)), $mul.ref(2, 1));
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p237, 27);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(59, 4)), $mul.ref(0, 1));
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p239, $sub.i16(0, 28360));
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(59, 4)), $mul.ref(2, 1));
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p241, 48);
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(60, 4)), $mul.ref(0, 1));
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p243, $sub.i16(0, 28356));
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(60, 4)), $mul.ref(2, 1));
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p245, 104);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(61, 4)), $mul.ref(0, 1));
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p247, $sub.i16(0, 28352));
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(61, 4)), $mul.ref(2, 1));
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p249, 100);
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(62, 4)), $mul.ref(0, 1));
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p251, $sub.i16(0, 28348));
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(62, 4)), $mul.ref(2, 1));
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p253, 100);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(63, 4)), $mul.ref(0, 1));
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p255, $sub.i16(0, 28344));
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(63, 4)), $mul.ref(2, 1));
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p257, 0);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(64, 4)), $mul.ref(0, 1));
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p259, $sub.i16(0, 28340));
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(64, 4)), $mul.ref(2, 1));
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p261, 0);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(65, 4)), $mul.ref(0, 1));
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p263, $sub.i16(0, 28336));
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(65, 4)), $mul.ref(2, 1));
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p265, 0);
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(66, 4)), $mul.ref(0, 1));
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p267, $sub.i16(0, 28332));
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(66, 4)), $mul.ref(2, 1));
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p269, 2);
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(67, 4)), $mul.ref(0, 1));
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p271, $sub.i16(0, 28328));
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(67, 4)), $mul.ref(2, 1));
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p273, 0);
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(68, 4)), $mul.ref(0, 1));
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p275, $sub.i16(0, 28324));
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(68, 4)), $mul.ref(2, 1));
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p277, 0);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(69, 4)), $mul.ref(0, 1));
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p279, $sub.i16(0, 28320));
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(69, 4)), $mul.ref(2, 1));
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p281, 255);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(70, 4)), $mul.ref(0, 1));
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p283, $sub.i16(0, 28316));
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(70, 4)), $mul.ref(2, 1));
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p285, 252);
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(71, 4)), $mul.ref(0, 1));
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p287, $sub.i16(0, 28312));
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(71, 4)), $mul.ref(2, 1));
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p289, 0);
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(72, 4)), $mul.ref(0, 1));
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p291, $sub.i16(0, 28308));
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(72, 4)), $mul.ref(2, 1));
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p293, 0);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(73, 4)), $mul.ref(0, 1));
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p295, $sub.i16(0, 28304));
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(73, 4)), $mul.ref(2, 1));
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p297, 0);
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(74, 4)), $mul.ref(0, 1));
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p299, $sub.i16(0, 28300));
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(74, 4)), $mul.ref(2, 1));
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p301, 8);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(75, 4)), $mul.ref(0, 1));
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p303, $sub.i16(0, 28296));
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(75, 4)), $mul.ref(2, 1));
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p305, 0);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(76, 4)), $mul.ref(0, 1));
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p307, $sub.i16(0, 28292));
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(76, 4)), $mul.ref(2, 1));
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p309, 0);
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(77, 4)), $mul.ref(0, 1));
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p311, $sub.i16(0, 28288));
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(77, 4)), $mul.ref(2, 1));
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p313, 255);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(78, 4)), $mul.ref(0, 1));
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p315, $sub.i16(0, 28284));
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(78, 4)), $mul.ref(2, 1));
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p317, 231);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(79, 4)), $mul.ref(0, 1));
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p319, $sub.i16(0, 28280));
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(79, 4)), $mul.ref(2, 1));
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p321, 0);
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(80, 4)), $mul.ref(0, 1));
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p323, $sub.i16(0, 28276));
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(80, 4)), $mul.ref(2, 1));
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p325, 0);
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(81, 4)), $mul.ref(0, 1));
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p327, $sub.i16(0, 28272));
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(81, 4)), $mul.ref(2, 1));
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p329, 0);
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(82, 4)), $mul.ref(0, 1));
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p331, $sub.i16(0, 28268));
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(82, 4)), $mul.ref(2, 1));
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p333, 174);
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(83, 4)), $mul.ref(0, 1));
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p335, $sub.i16(0, 28264));
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(83, 4)), $mul.ref(2, 1));
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p337, 2);
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(84, 4)), $mul.ref(0, 1));
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p339, $sub.i16(0, 28260));
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(84, 4)), $mul.ref(2, 1));
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p341, 0);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(85, 4)), $mul.ref(0, 1));
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p343, $sub.i16(0, 28256));
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(85, 4)), $mul.ref(2, 1));
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p345, 3);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(86, 4)), $mul.ref(0, 1));
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p347, $sub.i16(0, 28252));
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(86, 4)), $mul.ref(2, 1));
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p349, 101);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(87, 4)), $mul.ref(0, 1));
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p351, $sub.i16(0, 28248));
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(87, 4)), $mul.ref(2, 1));
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p353, 4);
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(88, 4)), $mul.ref(0, 1));
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p355, $sub.i16(0, 28244));
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(88, 4)), $mul.ref(2, 1));
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p357, 0);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(89, 4)), $mul.ref(0, 1));
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p359, $sub.i16(0, 28240));
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(89, 4)), $mul.ref(2, 1));
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p361, 10);
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(90, 4)), $mul.ref(0, 1));
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p363, $sub.i16(0, 28236));
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(90, 4)), $mul.ref(2, 1));
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p365, 170);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(91, 4)), $mul.ref(0, 1));
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p367, $sub.i16(0, 28232));
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(91, 4)), $mul.ref(2, 1));
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p369, 170);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(92, 4)), $mul.ref(0, 1));
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p371, $sub.i16(0, 28228));
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(92, 4)), $mul.ref(2, 1));
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p373, 37);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(93, 4)), $mul.ref(0, 1));
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p375, $sub.i16(0, 28224));
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(93, 4)), $mul.ref(2, 1));
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p377, 37);
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(94, 4)), $mul.ref(0, 1));
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p379, $sub.i16(0, 28220));
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(94, 4)), $mul.ref(2, 1));
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p381, 0);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(95, 4)), $mul.ref(0, 1));
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p383, $sub.i16(0, 28196));
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(95, 4)), $mul.ref(2, 1));
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p385, 30);
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(96, 4)), $mul.ref(0, 1));
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p387, $sub.i16(0, 28172));
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(96, 4)), $mul.ref(2, 1));
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p389, 144);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(97, 4)), $mul.ref(0, 1));
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p391, $sub.i16(0, 28168));
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(97, 4)), $mul.ref(2, 1));
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p393, 0);
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(98, 4)), $mul.ref(0, 1));
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p395, $sub.i16(0, 28164));
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(98, 4)), $mul.ref(2, 1));
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p397, 0);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(99, 4)), $mul.ref(0, 1));
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p399, 0);
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(99, 4)), $mul.ref(2, 1));
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p401, 0);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(100, 4)), $mul.ref(0, 1));
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p403, $sub.i16(0, 28656));
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(100, 4)), $mul.ref(2, 1));
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p405, 0);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(101, 4)), $mul.ref(0, 1));
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p407, $sub.i16(0, 28652));
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(101, 4)), $mul.ref(2, 1));
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p409, 0);
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(102, 4)), $mul.ref(0, 1));
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p411, $sub.i16(0, 28648));
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(102, 4)), $mul.ref(2, 1));
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p413, 0);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(103, 4)), $mul.ref(0, 1));
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p415, $sub.i16(0, 28644));
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(103, 4)), $mul.ref(2, 1));
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p417, 0);
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(104, 4)), $mul.ref(0, 1));
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p419, $sub.i16(0, 28636));
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(104, 4)), $mul.ref(2, 1));
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p421, 32);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(105, 4)), $mul.ref(0, 1));
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p423, $sub.i16(0, 28624));
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(105, 4)), $mul.ref(2, 1));
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p425, 240);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(106, 4)), $mul.ref(0, 1));
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p427, $sub.i16(0, 28592));
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(106, 4)), $mul.ref(2, 1));
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p429, 14);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(107, 4)), $mul.ref(0, 1));
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p431, $sub.i16(0, 28588));
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(107, 4)), $mul.ref(2, 1));
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p433, 14);
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(108, 4)), $mul.ref(0, 1));
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p435, $sub.i16(0, 28564));
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(108, 4)), $mul.ref(2, 1));
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p437, 16);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(109, 4)), $mul.ref(0, 1));
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p439, $sub.i16(0, 28496));
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(109, 4)), $mul.ref(2, 1));
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p441, 51);
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(110, 4)), $mul.ref(0, 1));
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p443, $sub.i16(0, 28484));
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(110, 4)), $mul.ref(2, 1));
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p445, 30);
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(111, 4)), $mul.ref(0, 1));
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p447, $sub.i16(0, 28340));
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(111, 4)), $mul.ref(2, 1));
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p449, 36);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(112, 4)), $mul.ref(0, 1));
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p451, $sub.i16(0, 28336));
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(112, 4)), $mul.ref(2, 1));
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p453, 4);
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(113, 4)), $mul.ref(0, 1));
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p455, $sub.i16(0, 28332));
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(113, 4)), $mul.ref(2, 1));
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p457, 0);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(114, 4)), $mul.ref(0, 1));
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p459, $sub.i16(0, 28328));
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(114, 4)), $mul.ref(2, 1));
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p461, 12);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(115, 4)), $mul.ref(0, 1));
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p463, $sub.i16(0, 28324));
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(115, 4)), $mul.ref(2, 1));
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p465, 18);
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(116, 4)), $mul.ref(0, 1));
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p467, $sub.i16(0, 28320));
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(116, 4)), $mul.ref(2, 1));
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p469, 12);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(117, 4)), $mul.ref(0, 1));
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p471, $sub.i16(0, 28316));
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(117, 4)), $mul.ref(2, 1));
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p473, 0);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(118, 4)), $mul.ref(0, 1));
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p475, $sub.i16(0, 28312));
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(118, 4)), $mul.ref(2, 1));
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p477, 16);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(119, 4)), $mul.ref(0, 1));
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p479, $sub.i16(0, 28308));
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(119, 4)), $mul.ref(2, 1));
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p481, 8);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(120, 4)), $mul.ref(0, 1));
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p483, $sub.i16(0, 28300));
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(120, 4)), $mul.ref(2, 1));
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p485, 0);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(121, 4)), $mul.ref(0, 1));
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p487, $sub.i16(0, 28296));
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(121, 4)), $mul.ref(2, 1));
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p489, 1);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(122, 4)), $mul.ref(0, 1));
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p491, $sub.i16(0, 28292));
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(122, 4)), $mul.ref(2, 1));
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p493, 0);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(123, 4)), $mul.ref(0, 1));
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p495, $sub.i16(0, 28288));
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(123, 4)), $mul.ref(2, 1));
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p497, 80);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(124, 4)), $mul.ref(0, 1));
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p499, $sub.i16(0, 28284));
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(124, 4)), $mul.ref(2, 1));
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p501, 55);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(125, 4)), $mul.ref(0, 1));
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p503, $sub.i16(0, 28280));
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(125, 4)), $mul.ref(2, 1));
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p505, 53);
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(126, 4)), $mul.ref(0, 1));
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p507, $sub.i16(0, 28268));
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(126, 4)), $mul.ref(2, 1));
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p509, 19);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(127, 4)), $mul.ref(0, 1));
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p511, $sub.i16(0, 28264));
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(127, 4)), $mul.ref(2, 1));
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p513, 39);
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(128, 4)), $mul.ref(0, 1));
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p515, $sub.i16(0, 28260));
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(128, 4)), $mul.ref(2, 1));
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p517, 39);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(129, 4)), $mul.ref(0, 1));
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p519, $sub.i16(0, 28256));
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(129, 4)), $mul.ref(2, 1));
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p521, 24);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(130, 4)), $mul.ref(0, 1));
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p523, $sub.i16(0, 28252));
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(130, 4)), $mul.ref(2, 1));
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p525, 18);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(131, 4)), $mul.ref(0, 1));
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p527, $sub.i16(0, 28236));
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(131, 4)), $mul.ref(2, 1));
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p529, 39);
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(132, 4)), $mul.ref(0, 1));
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p531, $sub.i16(0, 28232));
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(132, 4)), $mul.ref(2, 1));
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p533, 39);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(133, 4)), $mul.ref(0, 1));
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p535, $sub.i16(0, 28228));
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(133, 4)), $mul.ref(2, 1));
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p537, 39);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(134, 4)), $mul.ref(0, 1));
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p539, $sub.i16(0, 28224));
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(134, 4)), $mul.ref(2, 1));
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p541, 39);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(135, 4)), $mul.ref(0, 1));
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p543, $sub.i16(0, 28220));
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(135, 4)), $mul.ref(2, 1));
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p545, 39);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(136, 4)), $mul.ref(0, 1));
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p547, $sub.i16(0, 28216));
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(136, 4)), $mul.ref(2, 1));
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p549, 39);
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(137, 4)), $mul.ref(0, 1));
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p551, $sub.i16(0, 28212));
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(137, 4)), $mul.ref(2, 1));
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p553, 38);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(138, 4)), $mul.ref(0, 1));
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p555, $sub.i16(0, 28208));
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(138, 4)), $mul.ref(2, 1));
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p557, 36);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(139, 4)), $mul.ref(0, 1));
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p559, $sub.i16(0, 28204));
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(139, 4)), $mul.ref(2, 1));
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p561, 252);
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(140, 4)), $mul.ref(0, 1));
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p563, $sub.i16(0, 28200));
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(140, 4)), $mul.ref(2, 1));
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p565, 250);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(141, 4)), $mul.ref(0, 1));
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p567, $sub.i16(0, 28192));
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(141, 4)), $mul.ref(2, 1));
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p569, 79);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(142, 4)), $mul.ref(0, 1));
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p571, $sub.i16(0, 28172));
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(142, 4)), $mul.ref(2, 1));
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p573, 170);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(143, 4)), $mul.ref(0, 1));
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p575, $sub.i16(0, 28164));
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(143, 4)), $mul.ref(2, 1));
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p577, 3);
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(144, 4)), $mul.ref(0, 1));
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p579, $sub.i16(0, 28160));
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(144, 4)), $mul.ref(2, 1));
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p581, 20);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(145, 4)), $mul.ref(0, 1));
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p583, $sub.i16(0, 28156));
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(145, 4)), $mul.ref(2, 1));
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p585, 18);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(146, 4)), $mul.ref(0, 1));
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p587, $sub.i16(0, 28152));
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(146, 4)), $mul.ref(2, 1));
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p589, 16);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(147, 4)), $mul.ref(0, 1));
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p591, $sub.i16(0, 28148));
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(147, 4)), $mul.ref(2, 1));
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p593, 12);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(148, 4)), $mul.ref(0, 1));
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p595, $sub.i16(0, 28128));
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(148, 4)), $mul.ref(2, 1));
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p597, 223);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(149, 4)), $mul.ref(0, 1));
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p599, $sub.i16(0, 28124));
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(149, 4)), $mul.ref(2, 1));
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p601, 64);
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(150, 4)), $mul.ref(0, 1));
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p603, $sub.i16(0, 28120));
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(150, 4)), $mul.ref(2, 1));
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p605, 160);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(151, 4)), $mul.ref(0, 1));
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p607, $sub.i16(0, 28116));
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(151, 4)), $mul.ref(2, 1));
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p609, 176);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(152, 4)), $mul.ref(0, 1));
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p611, $sub.i16(0, 28112));
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(152, 4)), $mul.ref(2, 1));
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p613, 153);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(153, 4)), $mul.ref(0, 1));
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p615, $sub.i16(0, 28108));
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(153, 4)), $mul.ref(2, 1));
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p617, 130);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(154, 4)), $mul.ref(0, 1));
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p619, $sub.i16(0, 28104));
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(154, 4)), $mul.ref(2, 1));
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p621, 84);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(155, 4)), $mul.ref(0, 1));
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p623, $sub.i16(0, 28100));
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(155, 4)), $mul.ref(2, 1));
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p625, 28);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(156, 4)), $mul.ref(0, 1));
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p627, $sub.i16(0, 28096));
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(156, 4)), $mul.ref(2, 1));
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p629, 108);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(157, 4)), $mul.ref(0, 1));
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p631, $sub.i16(0, 28084));
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(157, 4)), $mul.ref(2, 1));
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p633, 7);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(158, 4)), $mul.ref(0, 1));
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p635, $sub.i16(0, 28080));
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(158, 4)), $mul.ref(2, 1));
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p637, 76);
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(159, 4)), $mul.ref(0, 1));
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p639, $sub.i16(0, 28076));
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(159, 4)), $mul.ref(2, 1));
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p641, 80);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(160, 4)), $mul.ref(0, 1));
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p643, $sub.i16(0, 28072));
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(160, 4)), $mul.ref(2, 1));
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p645, 14);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(161, 4)), $mul.ref(0, 1));
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p647, $sub.i16(0, 28068));
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(161, 4)), $mul.ref(2, 1));
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p649, 24);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(162, 4)), $mul.ref(0, 1));
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p651, $sub.i16(0, 28032));
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(162, 4)), $mul.ref(2, 1));
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p653, 254);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(163, 4)), $mul.ref(0, 1));
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p655, $sub.i16(0, 28028));
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(163, 4)), $mul.ref(2, 1));
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p657, 238);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(164, 4)), $mul.ref(0, 1));
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p659, $sub.i16(0, 28024));
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(164, 4)), $mul.ref(2, 1));
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p661, 170);
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(165, 4)), $mul.ref(0, 1));
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p663, $sub.i16(0, 28020));
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(165, 4)), $mul.ref(2, 1));
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p665, 250);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(166, 4)), $mul.ref(0, 1));
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p667, $sub.i16(0, 28016));
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(166, 4)), $mul.ref(2, 1));
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p669, 250);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(167, 4)), $mul.ref(0, 1));
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p671, $sub.i16(0, 28012));
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(167, 4)), $mul.ref(2, 1));
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p673, 234);
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(168, 4)), $mul.ref(0, 1));
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p675, $sub.i16(0, 28008));
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(168, 4)), $mul.ref(2, 1));
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p677, 190);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(169, 4)), $mul.ref(0, 1));
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p679, $sub.i16(0, 28004));
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(169, 4)), $mul.ref(2, 1));
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p681, 190);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(170, 4)), $mul.ref(0, 1));
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p683, $sub.i16(0, 28000));
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(170, 4)), $mul.ref(2, 1));
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p685, 106);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(171, 4)), $mul.ref(0, 1));
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p687, $sub.i16(0, 27996));
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(171, 4)), $mul.ref(2, 1));
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p689, 186);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(172, 4)), $mul.ref(0, 1));
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p691, $sub.i16(0, 27992));
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(172, 4)), $mul.ref(2, 1));
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p693, 186);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(173, 4)), $mul.ref(0, 1));
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p695, $sub.i16(0, 27988));
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(173, 4)), $mul.ref(2, 1));
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p697, 186);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(174, 4)), $mul.ref(0, 1));
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p699, $sub.i16(0, 27856));
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(174, 4)), $mul.ref(2, 1));
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p701, 125);
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(175, 4)), $mul.ref(0, 1));
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p703, 0);
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(175, 4)), $mul.ref(2, 1));
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p705, 0);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(176, 4)), $mul.ref(0, 1));
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p707, $sub.i16(0, 27860));
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 708)), $mul.ref(176, 4)), $mul.ref(2, 1));
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p709, 48);
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    $p712 := $load.ref($M.0, $p711);
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($p712, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} dev_printk.ref.ref.ref.ref(.str.6, $p713, .str.26, .str.124);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} $i714 := zd_chip_lock_phy_regs($p0);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    call {:si_unique_call 2256} {:cexpr "r"} boogie_si_record_i32($i714);
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $i715 := $ne.i32($i714, 0);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i715} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i715 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p717 := $bitcast.ref.ref($p1);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} $i718 := zd_iowrite16a_locked($p0, $p717, 177);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    call {:si_unique_call 2258} {:cexpr "r"} boogie_si_record_i32($i718);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    $i719 := $ne.i32($i718, 0);
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i719} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i719 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} $i721 := patch_cr157($p0);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    call {:si_unique_call 2262} {:cexpr "r"} boogie_si_record_i32($i721);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    $i720 := $i721;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} $i722 := zd_chip_unlock_phy_regs($p0);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    call {:si_unique_call 2260} {:cexpr "t"} boogie_si_record_i32($i722);
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $i723 := $ne.i32($i722, 0);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i723} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i723 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i725 := $i720;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    $i716 := $i725;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $r := $i716;
    return;

  $bb9:
    assume $i723 == 1;
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $i724 := $eq.i32($i720, 0);
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i724} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i724 == 1);
    goto $bb11;

  $bb12:
    assume $i724 == 1;
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i725 := $i722;
    goto $bb14;

  SeqInstr_1141:
    assume !assertsPassed;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i719 == 1;
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    $i720 := $i718;
    goto $bb7;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i715 == 1;
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $i716 := $i714;
    goto $bb3;

  SeqInstr_1135:
    assume !assertsPassed;
    return;
}



const patch_cr157: ref;

axiom patch_cr157 == $sub.ref(0, 774757);

procedure patch_cr157($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.10, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation patch_cr157($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(11578, 1));
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $i8 := zd_ioread16_locked($p0, $p1, $sub.i16(0, 1988));
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    call {:si_unique_call 2265} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p1);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i32($i15, 8);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} dev_printk.ref.ref.ref.ref.i32(.str.6, $p13, .str.125, .str.126, $i16);
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p1);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    $i19 := $ashr.i32($i18, 8);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} $i20 := zd_iowrite32_locked($p0, $i19, $sub.i16(0, 28044));
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    call {:si_unique_call 2268} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const dump_cr: ref;

axiom dump_cr == $sub.ref(0, 775789);

procedure dump_cr($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation dump_cr($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 2270} {:cexpr "dump_cr:arg:addr"} boogie_si_record_i16($i1);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} $i6 := zd_ioread32_locked($p0, $p3, $i5);
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    call {:si_unique_call 2272} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p3);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p16, .str.115, .str.114, $p2, $i17);
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p11, .str.113, .str.114, $p2, $i6);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $i12 := $i6;
    goto $bb3;

  SeqInstr_1153:
    assume !assertsPassed;
    return;
}



const get_fw_name: ref;

axiom get_fw_name == $sub.ref(0, 776821);

procedure get_fw_name($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_fw_name($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} {:cexpr "get_fw_name:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(11276, 1));
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    $p9 := (if $i8 == 1 then .str.255 else .str.256);
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} vslice_dummy_var_121 := scnprintf.ref.i64.ref.ref.ref($p1, $i2, .str.254, $p9, $p3);
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const request_fw_file: ref;

axiom request_fw_file == $sub.ref(0, 777853);

procedure request_fw_file($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_fw_file($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} dev_printk.ref.ref.ref.ref.ref(.str.6, $p2, .str.257, .str.258, $p1);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} $i3 := request_firmware($p0, $p1, $p2);
    call {:si_unique_call 2279} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} dev_err.ref.ref.ref.i32($p2, .str.259, $p1, $i3);
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_word: ref;

axiom get_word == $sub.ref(0, 778885);

procedure get_word($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;



implementation get_word($p0: ref, $i1: i16) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} {:cexpr "get_word:arg:offset"} boogie_si_record_i16($i1);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i64($i1);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 2));
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const handle_version_mismatch: ref;

axiom handle_version_mismatch == $sub.ref(0, 779917);

procedure handle_version_mismatch($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $CurrAddr, assertsPassed;



implementation handle_version_mismatch($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i10: i32;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} $p3 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} $p4 := zd_usb_to_usbdev($p0);
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p2, $0.ref);
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} $p6 := get_fw_name($p0, $p5, 128, .str.260);
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} $i8 := request_fw_file($p2, $p6, $p7);
    call {:si_unique_call 2287} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.28, $p2);
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.30, $p12);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.28, $p2);
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.31, $p15);
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} $i17 := upload_code($p4, $p13, $i16, $sub.i16(0, 4608), 1);
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    call {:si_unique_call 2290} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.30, $p19);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64(298);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p20, $mul.ref($i21, 1));
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.31, $p23);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64(298);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64($i24, $i25);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} $i27 := upload_code($p4, $p22, $i26, $sub.i16(0, 1899), 1);
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    call {:si_unique_call 2292} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $i10 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.28, $p2);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} release_firmware($p28);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_1159:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb3;

  SeqInstr_1156:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const upload_code: ref;

axiom upload_code == $sub.ref(0, 780949);

procedure upload_code($p0: ref, $p1: ref, $i2: i64, $i3: i16, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation upload_code($p0: ref, $p1: ref, $i2: i64, $i3: i16, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i64;
  var $i10: i1;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $i21: i16;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i16;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i1;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i8: i32;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} {:cexpr "upload_code:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 2294} {:cexpr "upload_code:arg:code_offset"} boogie_si_record_i16($i3);
    call {:si_unique_call 2295} {:cexpr "upload_code:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} $p5 := kmalloc(4096, 208);
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i2, $sub.i64(0, 2));
    call {:si_unique_call 2298} {:cexpr "size"} boogie_si_record_i64($i9);
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i4, 1);
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} kfree($p5);
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} $i41 := __create_pipe($p0, 0);
    call {:si_unique_call 2310} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, $sub.i32(0, 2147483520));
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} $i43 := usb_control_msg($p0, $i42, 49, $sub.i8(0, 64), 0, 0, $p5, 1, 5000);
    call {:si_unique_call 2312} {:cexpr "r"} boogie_si_record_i32($i43);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 1);
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p5);
    call {:si_unique_call 2314} {:cexpr "ret"} boogie_si_record_i8($i48);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    $i49 := $sext.i8.i32($i48);
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i48);
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} dev_printk.ref.ref.ref.ref.i32(.str.6, $p53, .str.266, .str.262, $i54);
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i50 == 1;
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i48);
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} dev_err.ref.ref.i32($p51, .str.265, $i52);
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb21:
    assume $i44 == 1;
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} dev_err.ref.ref.i32($p45, .str.264, $i43);
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $i46 := $sge.i32($i43, 0);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i43;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $i8 := $i47;
    goto $bb3;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 19);
    goto $bb25;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $p11, $i12, $i13 := $p1, $i9, $i3;
    goto $bb8;

  $bb8:
    call $i14, $i15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p11, $i12, $i13, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35 := upload_code_loop_$bb8($p0, $p5, $i14, $i15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p11, $i12, $i13, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35);
    goto $bb8_last;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $ult.i64(4096, $i12);
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} dev_printk.ref.ref.ref.ref.i64(.str.6, $p16, .str.261, .str.262, $i15);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 2300} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p5, $p11, $i15, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} $i17 := __create_pipe($p0, 0);
    call {:si_unique_call 2302} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, $sub.i32(0, 2147483648));
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i13);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i16($i15);
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} $i24 := usb_control_msg($p0, $i18, 48, 64, $i20, 0, $p5, $i23, 1000);
    call {:si_unique_call 2304} {:cexpr "r"} boogie_si_record_i32($i24);
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i24, $sub.i32(0, 2));
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    call {:si_unique_call 2306} {:cexpr "transfer_size"} boogie_si_record_i64($i29);
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64($i12, $i29);
    call {:si_unique_call 2307} {:cexpr "size"} boogie_si_record_i64($i30);
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p11, $mul.ref($i29, 1));
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $i32 := $udiv.i64($i29, 2);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i16($i32);
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i13);
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i34, $i35);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    call {:si_unique_call 2308} {:cexpr "code_offset"} boogie_si_record_i16($i37);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i30, 0);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb16:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $p11, $i12, $i13 := $p31, $i30, $i37;
    goto $bb16_dummy;

  $bb13:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} dev_err.ref.ref.i32($p27, .str.263, $i26);
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $i8 := $i26;
    goto $bb3;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    $i15 := 4096;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1162:
    assume !assertsPassed;
    return;

  $bb16_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12656;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 781981);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 783013);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2317} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2318} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 2319} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 2320} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 2321} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 2322} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 2323} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2324} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 2325} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 784045);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2326} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2327} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fill_ctrlset: ref;

axiom fill_ctrlset == $sub.ref(0, 785077);

procedure fill_ctrlset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.47, $CurrAddr;



implementation fill_ctrlset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i16;
  var $i56: i16;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i16;
  var $i62: i8;
  var $p63: ref;
  var $i64: i16;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i24;
  var $i79: i24;
  var $i80: i24;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i91: i16;
  var $i92: i32;
  var $i93: i16;
  var $i94: i32;
  var $i95: i32;
  var $i97: i16;
  var $i98: i32;
  var $i96: i32;
  var $i99: i16;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $i107: i8;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $i111: i16;
  var $i112: i32;
  var $i113: i1;
  var $i115: i16;
  var $p116: ref;
  var $p117: ref;
  var $i114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 4);
    call {:si_unique_call 2330} {:cexpr "frag_len"} boogie_si_record_i32($i9);
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} $p10 := skb_push($p1, 11);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} $p12 := IEEE80211_SKB_CB($p1);
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i9, 65535);
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 2334} {:cexpr "tmp___2"} boogie_si_record_i64($i16);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} $i38 := ieee80211_is_pspoll($i37);
    call {:si_unique_call 2340} {:cexpr "tmp___3"} boogie_si_record_i32($i38);
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} $p43 := ieee80211_get_tx_rate($p42, $p12);
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i16.i8($i45);
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i46);
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p12, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p51, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    $i56 := $and.i16($i55, 2047);
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 4);
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i9);
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(2, 1));
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $i64);
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} cs_set_control($p0, $p11, $p6, $p12);
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i9, 21);
    call {:si_unique_call 2343} {:cexpr "packet_length"} boogie_si_record_i32($i66);
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $i67 := $ugt.i32($i66, 65535);
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 2345} {:cexpr "tmp___5"} boogie_si_record_i64($i70);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} $i89 := zd_chip_is_zd1211b($p88);
    call {:si_unique_call 2351} {:cexpr "tmp___6"} boogie_si_record_i32($i89);
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i90 == 1);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i66);
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i97);
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    $i96 := $i98;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i96);
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(6, 1));
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p100, $i99);
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(10, 1));
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, 0);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(10, 1));
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 31);
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(2, 1));
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.0, $p108);
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} $i112 := zd_calc_tx_length_us($p102, $i107, $i111);
    call {:si_unique_call 2353} {:cexpr "r"} boogie_si_record_i32($i112);
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i112, 0);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i112);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(8, 1));
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p116, $i115);
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p117, 0);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $r := $i114;
    return;

  $bb22:
    assume $i113 == 1;
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    $i114 := $i112;
    goto $bb24;

  $bb19:
    assume $i90 == 1;
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i16($i66);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32($i91);
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i16($i9);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32($i92, $i94);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    $i96 := $i95;
    goto $bb21;

  $bb13:
    assume $i71 == 1;
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p72, .str.1);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p73, .str.180);
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p74, .str.31);
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p75, .str.4);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $i78 := $load.i24($M.8, $p77);
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    $i79 := $and.i24($i78, $sub.i24(0, 262144));
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    $i80 := $or.i24($i79, 896);
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p77, $i80);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p81, 1);
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.9, $p82);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i64($i83);
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 1);
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 2347} {:cexpr "tmp___4"} boogie_si_record_i64($i86);
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} dump_stack();
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i87 == 1;
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.31, 896, .str.182);
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i59 == 1;
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p43, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i16.i8($i61);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, $i62);
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(2, 1));
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, 0);
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str.1);
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, .str.180);
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, .str.31);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p21, .str.4);
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.8, $p23);
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 875);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p23, $i26);
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p27, 1);
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.9, $p28);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 2336} {:cexpr "tmp___1"} boogie_si_record_i64($i32);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} dump_stack();
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i33 == 1;
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} __dynamic_pr_debug.ref.ref.ref.i32.ref($p2, .str.4, .str.31, 875, .str.181);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const zd_usb_tx: ref;

axiom zd_usb_tx == $sub.ref(0, 786109);

procedure zd_usb_tx($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, assertsPassed;



implementation zd_usb_tx($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i8: i32;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} $p2 := IEEE80211_SKB_CB($p1);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} $p3 := zd_usb_to_usbdev($p0);
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(0, 1));
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} $i6 := atomic_read($p5);
    call {:si_unique_call 2357} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} $p9 := ldv_usb_alloc_urb_386(0, 32);
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} $i12 := __create_pipe($p3, 1);
    call {:si_unique_call 2360} {:cexpr "tmp___2"} boogie_si_record_i32($i12);
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, $sub.i32(0, 1073741824));
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} usb_fill_bulk_urb($p9, $p3, $i13, $p15, $i17, tx_urb_complete, $p18);
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, jiffies);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_12927;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(1, 8));
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p20);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(304, 1));
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} skb_queue_tail($p25, $p1);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(400, 1));
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} usb_anchor_urb($p9, $p26);
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} $i27 := ldv_usb_submit_urb_387($p9, 32);
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    call {:si_unique_call 2365} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} tx_inc_submitted_urbs($p0);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p31, .str.66, .str.67, $p9, $i27);
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} usb_unanchor_urb($p9);
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(304, 1));
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} skb_unlink($p1, $p32);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} usb_free_urb($p9);
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    $i33 := $i8;
    goto $bb12;

  SeqInstr_1168:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1165:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 2);
    goto $bb3;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 787141);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_386: ref;

axiom ldv_usb_alloc_urb_386 == $sub.ref(0, 788173);

procedure ldv_usb_alloc_urb_386($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_386($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} {:cexpr "ldv_usb_alloc_urb_386:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 2372} {:cexpr "ldv_usb_alloc_urb_386:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} ldv_check_alloc_flags($i1);
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} $p2 := ldv_undef_ptr();
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_1171:
    assume !assertsPassed;
    return;
}



const tx_urb_complete: ref;

axiom tx_urb_complete == $sub.ref(0, 789205);

procedure tx_urb_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, assertsPassed, $CurrAddr;



implementation tx_urb_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} $p4 := IEEE80211_SKB_CB($p3);
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 8));
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} $p11 := zd_hw_mac($p10);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i16, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i16, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i16, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p37, .str.206, .str.227, $p0, $i39);
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    $p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10416, 1)), $mul.ref(400, 1));
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} usb_anchor_urb($p0, $p44);
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} $i45 := ldv_usb_submit_urb_385($p0, 32);
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    call {:si_unique_call 2381} {:cexpr "r"} boogie_si_record_i32($i45);
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb39:
    assume $i46 == 1;
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} usb_unanchor_urb($p0);
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p49, .str.228, .str.227, $p0, $i45);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    $p41 := $add.ref($add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10416, 1)), $mul.ref(304, 1));
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} skb_unlink($p3, $p41);
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} zd_mac_tx_to_dev($p3, $i43);
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} usb_free_urb($p0);
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} tx_dec_submitted_urbs($p13);
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_1174:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i16, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} dev_printk.ref.ref.ref.ref.ref.i32(.str.6, $p32, .str.206, .str.227, $p0, $i34);
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb4:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i16, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i16, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i16, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i16, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i16, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i16, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb10;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb27;

  $bb24:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i16, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb22:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i16, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb10;

  $bb32:
    assume $i29 == 1;
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    goto $bb20;
}



const skb_queue_tail: ref;

axiom skb_queue_tail == $sub.ref(0, 790237);

procedure skb_queue_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_queue_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_387: ref;

axiom ldv_usb_submit_urb_387 == $sub.ref(0, 791269);

procedure ldv_usb_submit_urb_387($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_387($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} {:cexpr "ldv_usb_submit_urb_387:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} ldv_check_alloc_flags($i1);
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} $p2 := ldv_undef_ptr();
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_1177:
    assume !assertsPassed;
    return;
}



const skb_unlink: ref;

axiom skb_unlink == $sub.ref(0, 792301);

procedure skb_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_unlink($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    return;
}



const tx_inc_submitted_urbs: ref;

axiom tx_inc_submitted_urbs == $sub.ref(0, 793333);

procedure tx_inc_submitted_urbs($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0;



implementation tx_inc_submitted_urbs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $i18: i8;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1));
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} ldv_spin_lock();
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(584, 1));
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(584, 1));
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(588, 1));
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} spin_unlock_irqrestore($p19, $u0);
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(584, 1));
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 5);
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} $p14 := zd_usb_to_hw($p0);
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} ieee80211_stop_queues($p14);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(588, 1));
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, $sub.i8(0, 2));
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    $i18 := $or.i8($i17, 1);
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i18);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ieee80211_stop_queues: ref;

axiom ieee80211_stop_queues == $sub.ref(0, 794365);

procedure ieee80211_stop_queues($p0: ref);
  free requires assertsPassed;



implementation ieee80211_stop_queues($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    return;
}



const zd_mac_tx_to_dev: ref;

axiom zd_mac_tx_to_dev == $sub.ref(0, 795397);

procedure zd_mac_tx_to_dev($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation zd_mac_tx_to_dev($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i12: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var vslice_dummy_var_122: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} {:cexpr "zd_mac_tx_to_dev:arg:error"} boogie_si_record_i32($i1);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} $p2 := IEEE80211_SKB_CB($p0);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 8));
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} $p9 := zd_hw_mac($p8);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} ieee80211_tx_info_clear_status($p2);
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} vslice_dummy_var_122 := skb_pull($p0, 11);
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i1, 0);
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    $i12 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i11 == 1);
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 4);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    $i12 := $i16;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i12);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 2401} {:cexpr "tmp___3"} boogie_si_record_i64($i19);
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(12472, 1));
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} skb_queue_tail($p21, $p0);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} $i22 := skb_queue_len($p21);
    call {:si_unique_call 2405} {:cexpr "tmp___2"} boogie_si_record_i32($i22);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 50);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p24, $p25, $p26, $i27, $i28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i37 := zd_mac_tx_to_dev_loop_$bb10($p8, $p9, $p21, $p24, $p25, $p26, $i27, $i28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i37);
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} $p24 := skb_dequeue($p21);
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p9);
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(13680, 1));
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_13089;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} zd_mac_tx_status($p8, $p24, $i32, $0.ref);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i34, $sub.i8(0, 9));
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i35);
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} $i36 := skb_queue_len($p21);
    call {:si_unique_call 2409} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i32($i36, 50);
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb15_dummy;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(13684, 1));
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb14;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} ieee80211_tx_status_irqsafe($p8, $p0);
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb15_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const tx_dec_submitted_urbs: ref;

axiom tx_dec_submitted_urbs == $sub.ref(0, 796429);

procedure tx_dec_submitted_urbs($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0;



implementation tx_dec_submitted_urbs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1));
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} ldv_spin_lock();
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(584, 1));
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(584, 1));
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(588, 1));
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} spin_unlock_irqrestore($p18, $u0);
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(584, 1));
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    $i13 := $sle.i32($i12, 2);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} $p14 := zd_usb_to_hw($p0);
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} ieee80211_wake_queues($p14);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(588, 1));
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, $sub.i8(0, 2));
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i17);
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_usb_submit_urb_385: ref;

axiom ldv_usb_submit_urb_385 == $sub.ref(0, 797461);

procedure ldv_usb_submit_urb_385($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_385($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} {:cexpr "ldv_usb_submit_urb_385:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} ldv_check_alloc_flags($i1);
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    goto corral_source_split_13135;

  corral_source_split_13135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} $p2 := ldv_undef_ptr();
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_1180:
    assume !assertsPassed;
    return;
}



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 798493);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} $p2 := external_alloc();
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_queue_len: ref;

axiom skb_queue_len == $sub.ref(0, 799525);

procedure skb_queue_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_push: ref;

axiom skb_push == $sub.ref(0, 800557);

procedure skb_push($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_push($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} {:cexpr "skb_push:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} $p2 := external_alloc();
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_is_pspoll: ref;

axiom ieee80211_is_pspoll == $sub.ref(0, 801589);

procedure ieee80211_is_pspoll($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_pspoll($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} {:cexpr "ieee80211_is_pspoll:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 252);
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 164);
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_get_tx_rate: ref;

axiom ieee80211_get_tx_rate == $sub.ref(0, 802621);

procedure ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $p57: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 2422} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i12);
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 2424} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i12, 0);
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 2432} {:cexpr "tmp___2"} boogie_si_record_i64($i34);
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 1776)), $mul.ref(224, 1)), $mul.ref($i40, 8));
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p51, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i64($i55);
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p47, $mul.ref($i56, 12));
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    $p36 := $p57;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $r := $p36;
    return;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    $p36 := $0.ref;
    goto $bb12;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1(1);
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    $i19 := $xor.i1($i18, 1);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 2425} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i20);
    goto corral_source_split_13175;

  corral_source_split_13175:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 2427} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 2430} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} warn_slowpath_null(.str.183, 2151);
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const cs_set_control: ref;

axiom cs_set_control == $sub.ref(0, 803653);

procedure cs_set_control($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cs_set_control($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $i62: i16;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $p72: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 16);
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 4);
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_13256;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} $i29 := ieee80211_is_pspoll($i28);
    call {:si_unique_call 2434} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_13271;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p40, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    $i45 := $and.i16($i44, 2047);
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1);
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p58, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    $i63 := $and.i16($i62, 2047);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 2);
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i66 == 1;
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i69, 128);
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $i71);
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i48 == 1;
    goto corral_source_split_13280;

  corral_source_split_13280:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, 32);
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, $i53);
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_13263;

  corral_source_split_13263:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 4);
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 2);
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i23);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 1);
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_calc_tx_length_us: ref;

axiom zd_calc_tx_length_us == $sub.ref(0, 804685);

procedure zd_calc_tx_length_us($p0: ref, $i1: i8, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.47, $M.0, $CurrAddr;



implementation zd_calc_tx_length_us($p0: ref, $i1: i8, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $i44: i1;
  var $i45: i1;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i36: i32;
  var $i51: i32;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 2436} {:cexpr "zd_calc_tx_length_us:arg:zd_rate"} boogie_si_record_i8($i1);
    call {:si_unique_call 2437} {:cexpr "zd_calc_tx_length_us:arg:tx_length"} boogie_si_record_i16($i2);
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p4, 1);
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p5, 2);
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p6, 11);
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p7, 11);
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p8, 0);
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p9, 0);
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p10, 0);
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p11, 0);
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p12, 48);
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(9, 1));
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p13, 24);
    goto corral_source_split_13329;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p14, 12);
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(11, 1));
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p15, 6);
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p16, 54);
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(13, 1));
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p17, 36);
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p18, 18);
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(15, 1));
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p19, 9);
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i2);
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i20, 8);
    call {:si_unique_call 2438} {:cexpr "bits"} boogie_si_record_i32($i21);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 15);
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref($i24, 1));
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.47, $p25);
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    call {:si_unique_call 2439} {:cexpr "divisor"} boogie_si_record_i32($i27);
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i30, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i36 := $i21;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    $i51 := $udiv.i32($i36, $i27);
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    $i29 := $i51;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p0);
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i21, 10);
    call {:si_unique_call 2442} {:cexpr "bits"} boogie_si_record_i32($i50);
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    $i36 := $i50;
    goto $bb13;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $i39 := $urem.i32($i21, 11);
    call {:si_unique_call 2441} {:cexpr "t"} boogie_si_record_i32($i39);
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p0);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 127);
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i43);
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i39, 0);
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    $i45 := $ule.i32($i39, 3);
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb18;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p0);
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 128);
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i49);
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb6:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i30, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb10;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i21, 5);
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $i35 := $mul.i32($i34, 2);
    call {:si_unique_call 2440} {:cexpr "bits"} boogie_si_record_i32($i35);
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb13;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb3;
}



const probe: ref;

axiom probe == $sub.ref(0, 805717);

procedure probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.55, $CurrAddr, assertsPassed, $M.16, $M.18, $M.20, $M.22, $M.13, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.17, $M.19, $M.21, $M.23, $M.10, $M.40, $M.2, $M.3, $M.47, $M.28, $M.33, $M.34, $M.39;



implementation probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $i33: i8;
  var $i34: i8;
  var $i35: i8;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i16: i32;
  var $p17: ref;
  var $p48: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i8: i32;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} $p2 := interface_to_usbdev($p0);
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} print_id___0($p2);
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 2);
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} dev_printk.ref.ref.ref.ref(.str.6, $p15, .str.273, .str.274);
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    $i16, $p17 := $sub.i32(0, 19), $0.ref;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} $p48 := interface_to_usbdev($p0);
    goto corral_source_split_13412;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} vslice_dummy_var_123 := usb_reset_device($p48);
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p17);
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_13415;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i8 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb32:
    assume $i51 == 1;
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} $p52 := zd_hw_mac($p17);
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} zd_mac_clear($p52);
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} ldv_ieee80211_free_hw_389($p17);
    goto corral_source_split_13464;

  corral_source_split_13464:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_1189:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} $i18 := usb_reset_device($p2);
    call {:si_unique_call 2448} {:cexpr "r"} boogie_si_record_i32($i18);
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} $p21 := zd_mac_alloc_hw($p0);
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} $p24 := zd_hw_mac($p21);
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 1);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_13432;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    $p32 := $add.ref($add.ref($add.ref($add.ref($p24, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11276, 1));
    goto corral_source_split_13433;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    $i34 := $and.i8($i31, 1);
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i33, $sub.i8(0, 2));
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    $i36 := $or.i8($i35, $i34);
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i36);
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} $i37 := zd_mac_preinit_hw($p21);
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    call {:si_unique_call 2456} {:cexpr "r"} boogie_si_record_i32($i37);
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} $i40 := ieee80211_register_hw($p21);
    call {:si_unique_call 2459} {:cexpr "r"} boogie_si_record_i32($i40);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13453;

  corral_source_split_13453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} dev_printk.ref.ref.ref.ref(.str.6, $p43, .str.277, .str.274);
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} $p46 := wiphy_name($p45);
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} _dev_info.ref.ref.ref($p47, .str.139, $p46);
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb29:
    assume $i41 == 1;
    goto corral_source_split_13449;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} dev_printk.ref.ref.ref.ref.i32(.str.6, $p42, .str.276, .str.274, $i40);
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    $i16, $p17 := $i40, $p21;
    goto $bb19;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13443;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} dev_printk.ref.ref.ref.ref.i32(.str.6, $p39, .str.73, .str.274, $i37);
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $i16, $p17 := $i37, $p21;
    goto $bb19;

  SeqInstr_1186:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i23 == 1;
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    $i16, $p17 := $sub.i32(0, 12), $p21;
    goto $bb19;

  $bb20:
    assume $i19 == 1;
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} dev_err.ref.ref.i32($p20, .str.275, $i18);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    $i16, $p17 := $i18, $0.ref;
    goto $bb19;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb14;

  $bb15:
    assume $i14 == 1;
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} $i7 := eject_installer($p0);
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    call {:si_unique_call 2446} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  SeqInstr_1183:
    assume !assertsPassed;
    return;
}



const disconnect: ref;

axiom disconnect == $sub.ref(0, 806749);

procedure disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.16, $M.18, $M.20, $M.22, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $CurrAddr, $M.17, $M.19, $M.21, $M.23, $M.10, $M.40, assertsPassed, $M.2, $M.3, $M.47, $M.28, $M.33, $M.34, $M.29, $M.39;



implementation disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} $p2 := zd_intf_to_hw($p0);
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} $p5 := zd_hw_mac($p2);
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1));
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} dev_printk.ref.ref.ref.ref(.str.6, $p10, .str.26, .str.282);
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} ieee80211_unregister_hw($p2);
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} zd_usb_disable_tx($p7);
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} zd_usb_disable_rx($p7);
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} zd_usb_disable_int($p7);
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} $p11 := interface_to_usbdev($p0);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} vslice_dummy_var_124 := usb_reset_device($p11);
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} zd_mac_clear($p5);
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} ldv_ieee80211_free_hw_390($p2);
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    $M.48 := $store.ref($M.48, $p13, .str.1);
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p14, .str.282);
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    $M.50 := $store.ref($M.50, $p15, .str.60);
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    $M.51 := $store.ref($M.51, $p16, .str.283);
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.52, $p18);
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 1453);
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    $M.52 := $store.i24($M.52, $p18, $i21);
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    $M.53 := $store.i8($M.53, $p22, 1);
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.53, $p23);
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_13504;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 2480} {:cexpr "tmp___1"} boogie_si_record_i64($i27);
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} __dynamic_dev_dbg.ref.ref.ref($p1, $p29, .str.283);
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_1192:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pre_reset: ref;

axiom pre_reset == $sub.ref(0, 807781);

procedure pre_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.10, $M.40, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation pre_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $i18: i8;
  var $i19: i8;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13516;

  corral_source_split_13516:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(36, 1));
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 2);
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} $p8 := zd_hw_mac($p2);
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13525;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 13688)), $mul.ref(12464, 1));
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} $i12 := constant_test_bit(0, $p11);
    call {:si_unique_call 2485} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11276, 1));
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i13, 1);
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    $i17 := $shl.i8($i16, 2);
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i15, $sub.i8(0, 5));
    goto corral_source_split_13532;

  corral_source_split_13532:
    assume {:verifier.code 0} true;
    $i19 := $or.i8($i18, $i17);
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i19);
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} zd_usb_stop($p10);
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(11344, 1));
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} mutex_lock_nested($p21, 0);
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1195:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const post_reset: ref;

axiom post_reset == $sub.ref(0, 808813);

procedure post_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.0, $M.13, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.28, $M.33, $M.34, $M.16, $M.18, $M.20, $M.22, $M.40, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.10, $M.39;



implementation post_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(36, 1));
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 2);
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} $p8 := zd_hw_mac($p2);
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(11344, 1));
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} mutex_unlock($p12);
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p10);
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(11276, 1));
    goto corral_source_split_13555;

  corral_source_split_13555:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_13560;

  corral_source_split_13560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} zd_usb_resume($p10);
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_1198:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const zd_usb_resume: ref;

axiom zd_usb_resume == $sub.ref(0, 809845);

procedure zd_usb_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.0, $M.13, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.28, $M.33, $M.34, $M.16, $M.18, $M.20, $M.22, $M.40, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.10, $M.39;



implementation zd_usb_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} $p2 := zd_usb_to_mac($p0);
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.287);
    goto corral_source_split_13568;

  corral_source_split_13568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} $p6 := zd_usb_to_hw($p0);
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} $i7 := zd_op_start($p6);
    goto SeqInstr_1201, SeqInstr_1202;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  SeqInstr_1203:
    call {:si_unique_call 2497} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} $i23 := zd_restore_settings($p2);
    goto SeqInstr_1204, SeqInstr_1205;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  SeqInstr_1206:
    call {:si_unique_call 2502} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    $M.48 := $store.ref($M.48, $p25, .str.1);
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p26, .str.287);
    goto corral_source_split_13604;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    $M.50 := $store.ref($M.50, $p27, .str.60);
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    $M.51 := $store.ref($M.51, $p28, .str.289);
    goto corral_source_split_13608;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.52, $p30);
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 1477);
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    $M.52 := $store.i24($M.52, $p30, $i33);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    $M.53 := $store.i8($M.53, $p34, 1);
    goto corral_source_split_13616;

  corral_source_split_13616:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.53, $p35);
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_13620;

  corral_source_split_13620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 2504} {:cexpr "tmp___1"} boogie_si_record_i64($i39);
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p43, .str.289, $i23);
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_1204:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} dev_warn.ref.ref.i32($p11, .str.288, $i7);
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(11276, 1));
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_13588;

  corral_source_split_13588:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} usb_queue_reset_device($p19);
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(12464, 1));
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} set_bit(0, $p17);
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_1201:
    assume !assertsPassed;
    return;
}



const zd_restore_settings: ref;

axiom zd_restore_settings == $sub.ref(0, 810877);

procedure zd_restore_settings($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, assertsPassed, $M.40, $M.10, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_restore_settings($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i8;
  var $i14: i32;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i16;
  var $i79: i8;
  var $i80: i32;
  var $i81: i8;
  var $p82: ref;
  var $i83: i32;
  var $p85: ref;
  var $i86: i64;
  var $p88: ref;
  var $p89: ref;
  var $i33: i32;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} dev_printk.ref.ref.ref.ref(.str.6, $p6, .str.26, .str.37);
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} spin_lock_irq($p7);
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(12376, 1));
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 2509} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p9, $p10, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    $i13 := $and.i8($i12, 1);
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    call {:si_unique_call 2510} {:cexpr "short_preamble"} boogie_si_record_i32($i14);
    goto corral_source_split_13644;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(240, 1));
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    call {:si_unique_call 2511} {:cexpr "beacon_interval"} boogie_si_record_i32($i18);
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(242, 1));
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    call {:si_unique_call 2512} {:cexpr "beacon_period"} boogie_si_record_i32($i22);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(12450, 1));
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    call {:si_unique_call 2513} {:cexpr "channel"} boogie_si_record_i8($i24);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} spin_unlock_irq($p25);
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} $i26 := set_mac_and_bssid($p0);
    goto SeqInstr_1207, SeqInstr_1208;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  SeqInstr_1209:
    call {:si_unique_call 2516} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i24);
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} $i37 := zd_chip_set_channel($p34, $i36);
    goto SeqInstr_1210, SeqInstr_1211;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  SeqInstr_1212:
    call {:si_unique_call 2519} {:cexpr "r"} boogie_si_record_i32($i37);
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} set_rts_cts($p0, $i14);
    goto SeqInstr_1213, SeqInstr_1214;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  SeqInstr_1215:
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} $i45 := zd_chip_set_multicast_hash($p44, $p1);
    goto SeqInstr_1216, SeqInstr_1217;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  SeqInstr_1218:
    call {:si_unique_call 2523} {:cexpr "r"} boogie_si_record_i32($i45);
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 7);
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i54 == 1);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i57 == 1);
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_13704;

  corral_source_split_13704:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 3);
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_13694;

  corral_source_split_13694:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i18);
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i8($i22);
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_13730;

  corral_source_split_13730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} vslice_dummy_var_126 := zd_set_beacon_interval($p75, $i78, $i81, $i83);
    goto SeqInstr_1222, SeqInstr_1223;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  SeqInstr_1224:
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} spin_lock_irq($p85);
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, jiffies);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(232, 1));
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p88, $i86);
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} spin_unlock_irq($p89);
    goto corral_source_split_13738;

  corral_source_split_13738:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_1222:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i64 == 1;
    goto corral_source_split_13708;

  corral_source_split_13708:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_13712;

  corral_source_split_13712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} $p69 := ieee80211_beacon_get($p66, $p68);
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i71 == 1;
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} vslice_dummy_var_125 := zd_mac_config_beacon($p73, $p69, 0);
    goto SeqInstr_1219, SeqInstr_1220;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  SeqInstr_1221:
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1219:
    assume !assertsPassed;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb12;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} dev_printk.ref.ref.ref.ref.i32(.str.6, $p51, .str.40, .str.37, $i45);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    $i33 := $i45;
    goto $bb3;

  SeqInstr_1216:
    assume !assertsPassed;
    return;

  SeqInstr_1213:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i38 == 1;
    goto corral_source_split_13672;

  corral_source_split_13672:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} dev_printk.ref.ref.ref.ref.i32(.str.6, $p43, .str.39, .str.37, $i37);
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    $i33 := $i37;
    goto $bb3;

  SeqInstr_1210:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_13658;

  corral_source_split_13658:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_13660;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} dev_printk.ref.ref.ref.ref.i32(.str.6, $p32, .str.38, .str.37, $i26);
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    $i33 := $i26;
    goto $bb3;

  SeqInstr_1207:
    assume !assertsPassed;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 811909);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13740;

  corral_source_split_13740:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_13742;

  corral_source_split_13742:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_stop: ref;

axiom zd_usb_stop == $sub.ref(0, 812941);

procedure zd_usb_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.10, $M.40, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_usb_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13746;

  corral_source_split_13746:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} dev_printk.ref.ref.ref.ref(.str.6, $p3, .str.26, .str.286);
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} $p4 := zd_usb_to_hw($p0);
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} zd_op_stop($p4);
    goto SeqInstr_1225, SeqInstr_1226;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  SeqInstr_1227:
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} zd_usb_disable_tx($p0);
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} zd_usb_disable_rx($p0);
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} zd_usb_disable_int($p0);
    goto corral_source_split_13753;

  corral_source_split_13753:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11276, 1));
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 3));
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i7);
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1225:
    assume !assertsPassed;
    return;
}



const ieee80211_unregister_hw: ref;

axiom ieee80211_unregister_hw == $sub.ref(0, 813973);

procedure ieee80211_unregister_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_unregister_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    return;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 815005);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2536} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2537} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const zd_mac_clear: ref;

axiom zd_mac_clear == $sub.ref(0, 816037);

procedure zd_mac_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.13, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.56, $M.17, $M.19, $M.21, $M.23, $M.10, $M.40, assertsPassed, $M.2, $M.3, $M.47, $M.28, $M.33, $M.34, $M.29, $M.39;



implementation zd_mac_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13764;

  corral_source_split_13764:
    assume {:verifier.code 0} true;
    $p2 := $M.1;
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} ldv_flush_workqueue_90($p2);
    goto SeqInstr_1228, SeqInstr_1229;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  SeqInstr_1230:
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} zd_chip_clear($p3);
    goto SeqInstr_1231, SeqInstr_1232;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  SeqInstr_1233:
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} $i5 := spin_is_locked($p4);
    call {:si_unique_call 2542} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_13770;

  corral_source_split_13770:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 2544} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p0);
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 2549} cmdloc_dummy_var_40 := $memset.i8(cmdloc_dummy_var_39, $p27, $sub.i8(0, 1), 13688, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.1);
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.33);
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str.31);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.4);
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.8, $p16);
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 238);
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p16, $i19);
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p20, 1);
    goto corral_source_split_13793;

  corral_source_split_13793:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.9, $p21);
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 2546} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} dump_stack();
    goto corral_source_split_13804;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.31, 238, .str.34);
    goto corral_source_split_13802;

  corral_source_split_13802:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_1231:
    assume !assertsPassed;
    return;

  SeqInstr_1228:
    assume !assertsPassed;
    return;
}



const ldv_ieee80211_free_hw_390: ref;

axiom ldv_ieee80211_free_hw_390 == $sub.ref(0, 817069);

procedure ldv_ieee80211_free_hw_390($p0: ref);
  free requires assertsPassed;
  modifies $M.56;



implementation ldv_ieee80211_free_hw_390($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} ieee80211_free_hw($p0);
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    $p1 := $M.55;
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_13812;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 2551} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ieee80211_free_hw: ref;

axiom ieee80211_free_hw == $sub.ref(0, 818101);

procedure ieee80211_free_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_free_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    return;
}



const ldv_flush_workqueue_90: ref;

axiom ldv_flush_workqueue_90 == $sub.ref(0, 819133);

procedure ldv_flush_workqueue_90($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $M.17, $M.19, $M.21, $M.23, $CurrAddr, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.29, $M.39;



implementation ldv_flush_workqueue_90($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} flush_workqueue($p0);
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} call_and_disable_all_3(2);
    goto SeqInstr_1234, SeqInstr_1235;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  SeqInstr_1236:
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1234:
    assume !assertsPassed;
    return;
}



const zd_chip_clear: ref;

axiom zd_chip_clear == $sub.ref(0, 820165);

procedure zd_chip_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.13, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.16, $M.18, $M.20, $M.22, $M.56, $M.17, $M.19, $M.21, $M.23, $M.10, $M.40, assertsPassed, $M.2, $M.3, $M.47, $M.28, $M.33, $M.34, $M.29, $M.39;



implementation zd_chip_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} $i3 := mutex_is_locked($p2);
    call {:si_unique_call 2556} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_13828;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 2558} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_13831;

  corral_source_split_13831:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} zd_usb_clear($p25);
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11280, 1));
    goto corral_source_split_13865;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} zd_rf_clear($p26);
    goto SeqInstr_1237, SeqInstr_1238;

  SeqInstr_1238:
    assume assertsPassed;
    goto SeqInstr_1239;

  SeqInstr_1239:
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} mutex_destroy($p27);
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p0);
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 2566} cmdloc_dummy_var_42 := $memset.i8(cmdloc_dummy_var_41, $p28, $sub.i8(0, 1), 11584, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_13870;

  corral_source_split_13870:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1237:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13835;

  corral_source_split_13835:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.1);
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13837;

  corral_source_split_13837:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p10, .str.2);
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, .str.3);
    goto corral_source_split_13840;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p12, .str.4);
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.8, $p14);
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 46);
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p14, $i17);
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p18, 1);
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.9, $p19);
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_13854;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 2560} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_13856;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} dump_stack();
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} __dynamic_pr_debug.ref.ref.ref.i32.ref($p1, .str.4, .str.3, 46, .str.5);
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const spin_is_locked: ref;

axiom spin_is_locked == $sub.ref(0, 821197);

procedure spin_is_locked($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation spin_is_locked($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13874;

  corral_source_split_13874:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} $i4 := queued_spin_is_locked($p3);
    call {:si_unique_call 2568} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queued_spin_is_locked: ref;

axiom queued_spin_is_locked == $sub.ref(0, 822229);

procedure queued_spin_is_locked($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation queued_spin_is_locked($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_13879;

  corral_source_split_13879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} $i2 := atomic_read($p1);
    call {:si_unique_call 2570} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const zd_usb_clear: ref;

axiom zd_usb_clear == $sub.ref(0, 823261);

procedure zd_usb_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_usb_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} usb_set_intfdata($p2, $0.ref);
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} usb_put_intf($p4);
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 2573} cmdloc_dummy_var_44 := $memset.i8(cmdloc_dummy_var_43, $p5, $sub.i8(0, 1), 11280, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    return;
}



const zd_rf_clear: ref;

axiom zd_rf_clear == $sub.ref(0, 824293);

procedure zd_rf_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.16, $M.18, $M.20, $M.22, $M.56, $M.17, $M.19, $M.21, $M.23, $M.10, $M.40, $CurrAddr, assertsPassed, $M.2, $M.3, $M.47, $M.28, $M.33, $M.34, $M.29, $M.39;



implementation zd_rf_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 2575} cmdloc_dummy_var_46 := $memset.i8(cmdloc_dummy_var_45, $p7, $sub.i8(0, 1), 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    goto corral_source_split_13903;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 2574} devirtbounce.7($p6, $p0);
    goto SeqInstr_1240, SeqInstr_1241;

  SeqInstr_1241:
    assume assertsPassed;
    goto SeqInstr_1242;

  SeqInstr_1242:
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1240:
    assume !assertsPassed;
    return;
}



const mutex_destroy: ref;

axiom mutex_destroy == $sub.ref(0, 825325);

procedure mutex_destroy($p0: ref);
  free requires assertsPassed;



implementation mutex_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 826357);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} dev_set_drvdata($p2, $p1);
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_intf: ref;

axiom usb_put_intf == $sub.ref(0, 827389);

procedure usb_put_intf($p0: ref);
  free requires assertsPassed;



implementation usb_put_intf($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 828421);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    return;
}



const print_id___0: ref;

axiom print_id___0 == $sub.ref(0, 829453);

procedure print_id___0($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $CurrAddr;



implementation print_id___0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} vslice_dummy_var_127 := scnprint_id___0($p0, $p2, 40);
    goto corral_source_split_13919;

  corral_source_split_13919:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(39, 1));
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p4, 0);
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} dev_printk.ref.ref.ref.ref.ref(.str.6, $p5, .str.278, .str.279, $p6);
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    return;
}



const eject_installer: ref;

axiom eject_installer == $sub.ref(0, 830485);

procedure eject_installer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation eject_installer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i20: i32;
  var $i21: i1;
  var $i4: i32;
  var $i22: i32;
  var $i18: i32;
  var $i19: i8;
  var $i23: i1;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} $p1 := interface_to_usbdev($p0);
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_13928;

  corral_source_split_13928:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb1;

  $bb1:
    call $p5, $p6, $i7, $p9, $i10, $i11, $i12, $i13, $i14, $p15, $i20, $i21, $i4, $i22 := eject_installer_loop_$bb1($p3, $p5, $p6, $i7, $p9, $i10, $i11, $i12, $i13, $i14, $p15, $i20, $i21, $i4, $i22);
    goto $bb1_last;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i4);
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 72)), $mul.ref(0, 1));
    goto corral_source_split_13937;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} $i10 := usb_endpoint_dir_out($p9);
    call {:si_unique_call 2582} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i4, 1);
    call {:si_unique_call 2586} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    $i21 := $sge.i32($i20, 0);
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i22, $u1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i18, $sub.i32(0, 1));
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} $p26 := kmalloc(31, 208);
    goto SeqInstr_1243, SeqInstr_1244;

  SeqInstr_1244:
    assume assertsPassed;
    goto SeqInstr_1245;

  SeqInstr_1245:
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_13963;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 85);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p26, $mul.ref(1, 1));
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 83);
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p26, $mul.ref(2, 1));
    goto corral_source_split_13970;

  corral_source_split_13970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 66);
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p26, $mul.ref(3, 1));
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 67);
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p26, $mul.ref(14, 1));
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 6);
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p26, $mul.ref(15, 1));
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 27);
    goto corral_source_split_13977;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p26, $mul.ref(19, 1));
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 2);
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_13980;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} _dev_info.ref.ref($p35, .str.281);
    goto corral_source_split_13981;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i19);
    goto corral_source_split_13982;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} $i37 := __create_pipe($p1, $i36);
    call {:si_unique_call 2591} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, $sub.i32(0, 1073741824));
    goto corral_source_split_13984;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} $i39 := usb_bulk_msg($p1, $i38, $p26, 31, $0.ref, 2000);
    call {:si_unique_call 2593} {:cexpr "r"} boogie_si_record_i32($i39);
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} kfree($p26);
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_13987;

  corral_source_split_13987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_13991;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    $i25 := $i39;
    goto $bb15;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 19);
    goto $bb15;

  SeqInstr_1243:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_13956;

  corral_source_split_13956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} dev_err.ref.ref($p24, .str.280);
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 19);
    goto $bb15;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i20;
    goto $bb10_dummy;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} $i12 := usb_endpoint_xfer_bulk($p9);
    call {:si_unique_call 2584} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    $i14, $p15 := $i4, $p9;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    call {:si_unique_call 2585} {:cexpr "bulk_out_ep"} boogie_si_record_i8($i17);
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i14, $i17;
    goto $bb7;

  $bb10_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13931;
}



const zd_mac_alloc_hw: ref;

axiom zd_mac_alloc_hw == $sub.ref(0, 831517);

procedure zd_mac_alloc_hw($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.56, $M.55, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation zd_mac_alloc_hw($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p8: ref;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var vslice_dummy_var_128: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} $p4 := ldv_ieee80211_alloc_hw_92(13688, zd_ops);
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} $p9 := zd_hw_mac($p4);
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_14005;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 2602} cmdloc_dummy_var_48 := $memset.i8(cmdloc_dummy_var_47, $p10, 0, 13688, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} vslice_dummy_var_128 := spinlock_check($p11);
    goto corral_source_split_14008;

  corral_source_split_14008:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(11584, 1)), $mul.ref(0, 1));
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_14010;

  corral_source_split_14010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} __raw_spin_lock_init($p15, .str.45, $p1);
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_14012;

  corral_source_split_14012:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p4);
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(12452, 1));
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(12568, 1));
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.0;
    cmdloc_dummy_var_50 := $M.0;
    call {:si_unique_call 2605} cmdloc_dummy_var_51 := $memcpy.i8(cmdloc_dummy_var_49, cmdloc_dummy_var_50, $p19, zd_channels, 896, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_51;
    goto corral_source_split_14018;

  corral_source_split_14018:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(13464, 1));
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_52 := $M.0;
    cmdloc_dummy_var_53 := $M.0;
    call {:si_unique_call 2606} cmdloc_dummy_var_54 := $memcpy.i8(cmdloc_dummy_var_52, cmdloc_dummy_var_53, $p21, zd_rates, 144, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_54;
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(13608, 1)), $mul.ref(24, 1));
    goto corral_source_split_14022;

  corral_source_split_14022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 12);
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(13464, 1));
    goto corral_source_split_14024;

  corral_source_split_14024:
    assume {:verifier.code 0} true;
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(13608, 1)), $mul.ref(8, 1));
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p24);
    goto corral_source_split_14027;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(13608, 1)), $mul.ref(20, 1));
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 14);
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(12568, 1));
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(13608, 1)), $mul.ref(0, 1));
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p30);
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(13608, 1));
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_14036;

  corral_source_split_14036:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 1776)), $mul.ref(224, 1)), $mul.ref(0, 8));
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p34);
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} _ieee80211_hw_set($p4, 11);
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} _ieee80211_hw_set($p4, 2);
    goto corral_source_split_14040;

  corral_source_split_14040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} _ieee80211_hw_set($p4, 1);
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} _ieee80211_hw_set($p4, 3);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_14043;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1776)), $mul.ref(48, 1));
    goto corral_source_split_14045;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, 142);
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(116, 1));
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 100);
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, 1);
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 11);
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(117, 1));
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 4);
    goto corral_source_split_14054;

  corral_source_split_14054:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(119, 1));
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 18);
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(12472, 1));
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} skb_queue_head_init($p47);
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_14059;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    $i50 := $and.i8($i49, $sub.i8(0, 9));
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i50);
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} zd_chip_init($p51, $p4, $p0);
    goto corral_source_split_14064;

  corral_source_split_14064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} housekeeping_init($p9);
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} beacon_init($p9);
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(12296, 1));
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} __init_work($p52, 0);
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, 137438953408);
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(12296, 1)), $mul.ref(0, 1));
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_14072;

  corral_source_split_14072:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p3);
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.0;
    cmdloc_dummy_var_56 := $M.0;
    call {:si_unique_call 2616} cmdloc_dummy_var_57 := $memcpy.i8(cmdloc_dummy_var_55, cmdloc_dummy_var_56, $p56, $p57, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_57;
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(12296, 1)), $mul.ref(32, 1));
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} lockdep_init_map($p59, .str.46, $p2, 0);
    goto corral_source_split_14076;

  corral_source_split_14076:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(12296, 1)), $mul.ref(8, 1));
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} INIT_LIST_HEAD($p61);
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 13688)), $mul.ref(12296, 1)), $mul.ref(24, 1));
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, zd_process_intr);
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} SET_IEEE80211_DEV($p4, $p64);
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} dev_printk.ref.ref.ref.ref(.str.6, $p7, .str.43, .str.44);
    goto corral_source_split_14000;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const zd_mac_preinit_hw: ref;

axiom zd_mac_preinit_hw == $sub.ref(0, 832549);

procedure zd_mac_preinit_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation zd_mac_preinit_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_14084;

  corral_source_split_14084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} $p2 := zd_hw_mac($p0);
    goto corral_source_split_14085;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} $i5 := zd_chip_read_mac_addr_fw($p3, $p4);
    goto SeqInstr_1246, SeqInstr_1247;

  SeqInstr_1247:
    assume assertsPassed;
    goto SeqInstr_1248;

  SeqInstr_1248:
    call {:si_unique_call 2623} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_14088;

  corral_source_split_14088:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} SET_IEEE80211_PERM_ADDR($p0, $p8);
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  SeqInstr_1246:
    assume !assertsPassed;
    return;
}



const ieee80211_register_hw: ref;

axiom ieee80211_register_hw == $sub.ref(0, 833581);

procedure ieee80211_register_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_register_hw($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2625} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2626} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wiphy_name: ref;

axiom wiphy_name == $sub.ref(0, 834613);

procedure wiphy_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation wiphy_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} $p2 := dev_name($p1);
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_ieee80211_free_hw_389: ref;

axiom ldv_ieee80211_free_hw_389 == $sub.ref(0, 835645);

procedure ldv_ieee80211_free_hw_389($p0: ref);
  free requires assertsPassed;
  modifies $M.56;



implementation ldv_ieee80211_free_hw_389($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} ieee80211_free_hw($p0);
    goto corral_source_split_14106;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    $p1 := $M.55;
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_14108;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_14112;

  corral_source_split_14112:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 2629} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 836677);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} $p9 := kobject_name($p8);
    goto corral_source_split_14128;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 837709);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_14132;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const zd_chip_read_mac_addr_fw: ref;

axiom zd_chip_read_mac_addr_fw == $sub.ref(0, 838741);

procedure zd_chip_read_mac_addr_fw($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation zd_chip_read_mac_addr_fw($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_14136;

  corral_source_split_14136:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} dev_printk.ref.ref.ref.ref(.str.6, $p5, .str.26, .str.27);
    goto corral_source_split_14138;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} $i7 := zd_usb_read_fw($p6, $sub.i16(0, 2021), $p1, 6);
    goto SeqInstr_1249, SeqInstr_1250;

  SeqInstr_1250:
    assume assertsPassed;
    goto SeqInstr_1251;

  SeqInstr_1251:
    call {:si_unique_call 2633} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_14140;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_1249:
    assume !assertsPassed;
    return;
}



const SET_IEEE80211_PERM_ADDR: ref;

axiom SET_IEEE80211_PERM_ADDR == $sub.ref(0, 839773);

procedure SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_14143;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_14144;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1776)), $mul.ref(0, 1));
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.0;
    cmdloc_dummy_var_59 := $M.0;
    call {:si_unique_call 2634} cmdloc_dummy_var_60 := $memcpy.i8(cmdloc_dummy_var_58, cmdloc_dummy_var_59, $p5, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_60;
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_read_fw: ref;

axiom zd_usb_read_fw == $sub.ref(0, 840805);

procedure zd_usb_read_fw($p0: ref, $i1: i16, $p2: ref, $i3: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation zd_usb_read_fw($p0: ref, $i1: i16, $p2: ref, $i3: i16) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i19: i32;
  var $i9: i32;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} {:cexpr "zd_usb_read_fw:arg:addr"} boogie_si_record_i16($i1);
    call {:si_unique_call 2636} {:cexpr "zd_usb_read_fw:arg:len"} boogie_si_record_i16($i3);
    goto corral_source_split_14149;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} $p4 := zd_usb_to_usbdev($p0);
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i3);
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} $p6 := kmalloc($i5, 208);
    goto SeqInstr_1252, SeqInstr_1253;

  SeqInstr_1253:
    assume assertsPassed;
    goto SeqInstr_1254;

  SeqInstr_1254:
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} $i10 := __create_pipe($p4, 0);
    call {:si_unique_call 2640} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, $sub.i32(0, 2147483520));
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i1);
    goto corral_source_split_14162;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i3);
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} $i16 := usb_control_msg($p4, $i11, 50, $sub.i8(0, 64), $i13, 0, $p6, $i15, 5000);
    call {:si_unique_call 2642} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_14166;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i3);
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, $i16);
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i64($i3);
    goto corral_source_split_14185;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_61 := $M.0;
    cmdloc_dummy_var_62 := $M.0;
    call {:si_unique_call 2646} cmdloc_dummy_var_63 := $memcpy.i8(cmdloc_dummy_var_61, cmdloc_dummy_var_62, $p2, $p6, $i24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_63;
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} kfree($p6);
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    $i9 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_14180;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i3);
    goto corral_source_split_14182;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} dev_err.ref.ref.i32.i32($p22, .str.58, $i16, $i23);
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 5);
    goto $bb7;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} dev_err.ref.ref.i32($p18, .str.57, $i16);
    goto corral_source_split_14171;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    $i19 := $i16;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1252:
    assume !assertsPassed;
    return;
}



const ldv_ieee80211_alloc_hw_92: ref;

axiom ldv_ieee80211_alloc_hw_92 == $sub.ref(0, 841837);

procedure ldv_ieee80211_alloc_hw_92($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.56, $M.55, $M.0, $CurrAddr;



implementation ldv_ieee80211_alloc_hw_92($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} {:cexpr "ldv_ieee80211_alloc_hw_92:arg:priv_data_len"} boogie_si_record_i64($i0);
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} $p2 := ieee80211_alloc_hw($i0, $p1);
    goto corral_source_split_14189;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2649} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} ldv_initialize_ieee80211_ops_7();
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    $M.55 := $p2;
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 842869);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14198;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14200;

  corral_source_split_14200:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 843901);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14202;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    return;
}



const _ieee80211_hw_set: ref;

axiom _ieee80211_hw_set == $sub.ref(0, 844933);

procedure _ieee80211_hw_set($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation _ieee80211_hw_set($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} {:cexpr "_ieee80211_hw_set:arg:flg"} boogie_si_record_i32($i1);
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    return;
}



const skb_queue_head_init: ref;

axiom skb_queue_head_init == $sub.ref(0, 845965);

procedure skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation skb_queue_head_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_129: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} vslice_dummy_var_129 := spinlock_check($p2);
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_14209;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} __raw_spin_lock_init($p6, .str.160, $p1);
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} __skb_queue_head_init($p0);
    goto corral_source_split_14212;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    return;
}



const zd_chip_init: ref;

axiom zd_chip_init == $sub.ref(0, 846997);

procedure zd_chip_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation zd_chip_init($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_64 := $M.0;
    call {:si_unique_call 2657} cmdloc_dummy_var_65 := $memset.i8(cmdloc_dummy_var_64, $p4, 0, 11584, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_65;
    goto corral_source_split_14216;

  corral_source_split_14216:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11344, 1));
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} __mutex_init($p5, .str, $p3);
    goto corral_source_split_14218;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} zd_usb_init($p6, $p1, $p2);
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 11584)), $mul.ref(11280, 1));
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} zd_rf_init($p7);
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    return;
}



const housekeeping_init: ref;

axiom housekeeping_init == $sub.ref(0, 848029);

procedure housekeeping_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation housekeeping_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p17: ref;
  var $p21: ref;
  var $p25: ref;
  var $p28: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p39: ref;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14225;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} __init_work($p6, 0);
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 137438953408);
    goto corral_source_split_14228;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_66 := $M.0;
    cmdloc_dummy_var_67 := $M.0;
    call {:si_unique_call 2665} cmdloc_dummy_var_68 := $memcpy.i8(cmdloc_dummy_var_66, cmdloc_dummy_var_67, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_68;
    goto corral_source_split_14232;

  corral_source_split_14232:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} lockdep_init_map($p17, .str.167, $p1, 0);
    goto corral_source_split_14234;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_14235;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} INIT_LIST_HEAD($p21);
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, link_led_handler);
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} init_timer_key($p28, 2097152, .str.168, $p3);
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, delayed_work_timer_fn);
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1));
    goto corral_source_split_14243;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11744, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i35);
    goto corral_source_split_14246;

  corral_source_split_14246:
    assume {:verifier.code 0} true;
    return;
}



const beacon_init: ref;

axiom beacon_init == $sub.ref(0, 849061);

procedure beacon_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation beacon_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p17: ref;
  var $p21: ref;
  var $p25: ref;
  var $p28: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p39: ref;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14248;

  corral_source_split_14248:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} __init_work($p6, 0);
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 137438953408);
    goto corral_source_split_14252;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.0;
    cmdloc_dummy_var_70 := $M.0;
    call {:si_unique_call 2673} cmdloc_dummy_var_71 := $memcpy.i8(cmdloc_dummy_var_69, cmdloc_dummy_var_70, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_71;
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} lockdep_init_map($p17, .str.163, $p1, 0);
    goto corral_source_split_14258;

  corral_source_split_14258:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} INIT_LIST_HEAD($p21);
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, beacon_watchdog_handler);
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_14263;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} init_timer_key($p28, 2097152, .str.164, $p3);
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, delayed_work_timer_fn);
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1));
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i35);
    goto corral_source_split_14270;

  corral_source_split_14270:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 850093);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_14272;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 851125);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 852157);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    return;
}



const zd_process_intr: ref;

axiom zd_process_intr == $sub.ref(0, 853189);

procedure zd_process_intr($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.47, assertsPassed, $M.40, $M.10, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_process_intr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 12296), 13688));
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} ldv_spin_lock();
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 12296), 13688)), $mul.ref(12384, 1));
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(4, 2));
    goto corral_source_split_14288;

  corral_source_split_14288:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    call {:si_unique_call 2680} {:cexpr "int_status"} boogie_si_record_i16($i6);
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 12296), 13688)), $mul.ref(11584, 1));
    goto corral_source_split_14290;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} spin_unlock_irqrestore($p7, $u0);
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i6);
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 64);
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 12296), 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} dev_printk.ref.ref.ref.ref(.str.6, $p15, .str.161, .str.162);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 12296), 13688)), $mul.ref(0, 1));
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} vslice_dummy_var_130 := zd_chip_enable_hwint($p16);
    goto SeqInstr_1258, SeqInstr_1259;

  SeqInstr_1259:
    assume assertsPassed;
    goto SeqInstr_1260;

  SeqInstr_1260:
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1258:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} zd_beacon_done($p2);
    goto SeqInstr_1255, SeqInstr_1256;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  SeqInstr_1257:
    goto corral_source_split_14297;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1255:
    assume !assertsPassed;
    return;
}



const SET_IEEE80211_DEV: ref;

axiom SET_IEEE80211_DEV == $sub.ref(0, 854221);

procedure SET_IEEE80211_DEV($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_DEV($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14307;

  corral_source_split_14307:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} set_wiphy_dev($p3, $p1);
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    return;
}



const set_wiphy_dev: ref;

axiom set_wiphy_dev == $sub.ref(0, 855253);

procedure set_wiphy_dev($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_wiphy_dev($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14312;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1776)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    return;
}



const zd_beacon_done: ref;

axiom zd_beacon_done == $sub.ref(0, 856285);

procedure zd_beacon_done($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.47, $CurrAddr, assertsPassed, $M.40, $M.10, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_beacon_done($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(12464, 1));
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 2687} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_14323;

  corral_source_split_14323:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_14324;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i7 == 1);
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_14329;

  corral_source_split_14329:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_14331;

  corral_source_split_14331:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 3);
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} $i15 := ieee80211_queue_stopped($p14, 0);
    call {:si_unique_call 2689} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_14337;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_14354;

  corral_source_split_14354:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} $p33 := ieee80211_beacon_get($p30, $p32);
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} spin_lock_irq($p39);
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, jiffies);
    goto corral_source_split_14376;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11968, 1)), $mul.ref(232, 1));
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i40);
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11584, 1));
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} spin_unlock_irq($p43);
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_14369;

  corral_source_split_14369:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2695} vslice_dummy_var_131 := zd_mac_config_beacon($p37, $p33, 1);
    goto SeqInstr_1264, SeqInstr_1265;

  SeqInstr_1265:
    assume assertsPassed;
    goto SeqInstr_1266;

  SeqInstr_1266:
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_1264:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call $p17, $p18, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $i27, $i28 := zd_beacon_done_loop_$bb14($p0, $p13, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $i27, $i28);
    goto $bb14_last;

  $bb15:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_14344;

  corral_source_split_14344:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} $p21 := ieee80211_get_buffered_bc($p18, $p20);
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_14348;

  corral_source_split_14348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_14360;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} zd_op_tx($p25, $0.ref, $p21);
    goto SeqInstr_1261, SeqInstr_1262;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  SeqInstr_1263:
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p13);
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} $i27 := ieee80211_queue_stopped($p26, 0);
    call {:si_unique_call 2694} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb20_dummy;

  SeqInstr_1261:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ieee80211_get_buffered_bc: ref;

axiom ieee80211_get_buffered_bc == $sub.ref(0, 857317);

procedure ieee80211_get_buffered_bc($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_buffered_bc($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} $p2 := external_alloc();
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ieee80211_queue_stopped: ref;

axiom ieee80211_queue_stopped == $sub.ref(0, 858349);

procedure ieee80211_queue_stopped($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_queue_stopped($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2699} {:cexpr "ieee80211_queue_stopped:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2700} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2701} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_14387;

  corral_source_split_14387:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const beacon_watchdog_handler: ref;

axiom beacon_watchdog_handler == $sub.ref(0, 859381);

procedure beacon_watchdog_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.13, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, assertsPassed, $M.40, $M.10, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.33, $M.34, $M.29, $M.39;



implementation beacon_watchdog_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i1;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i16;
  var $i56: i8;
  var $i57: i32;
  var $i58: i8;
  var $p59: ref;
  var $i60: i32;
  var $p62: ref;
  var $p64: ref;
  var $i65: i64;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $p72: ref;
  var vslice_dummy_var_132: i1;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688));
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(12464, 1));
    goto corral_source_split_14392;

  corral_source_split_14392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} $i4 := constant_test_bit(0, $p3);
    call {:si_unique_call 2703} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_14394;

  corral_source_split_14394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(12452, 1));
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 3);
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11736, 1));
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_14410;

  corral_source_split_14410:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11584, 1));
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} spin_lock_irq($p13);
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11968, 1)), $mul.ref(240, 1));
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    call {:si_unique_call 2708} {:cexpr "interval"} boogie_si_record_i32($i17);
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11968, 1)), $mul.ref(242, 1));
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    call {:si_unique_call 2709} {:cexpr "period"} boogie_si_record_i32($i21);
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i17, 1024);
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    $i23 := $sdiv.i32($i22, 1000);
    goto corral_source_split_14422;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} $i24 := msecs_to_jiffies($i23);
    call {:si_unique_call 2711} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_14423;

  corral_source_split_14423:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11968, 1)), $mul.ref(232, 1));
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    $i28 := $mul.i64($i24, 3);
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i27, $i28);
    call {:si_unique_call 2712} {:cexpr "timeout"} boogie_si_record_i64($i29);
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11584, 1));
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} spin_unlock_irq($p30);
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i17, 0);
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} $i69 := round_jiffies_relative(250);
    call {:si_unique_call 2705} {:cexpr "tmp___1"} boogie_si_record_i64($i69);
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    $p70 := $M.1;
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11968, 1)), $mul.ref(0, 1));
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} vslice_dummy_var_132 := queue_delayed_work($p70, $p72, $i69);
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_14432;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, jiffies);
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64($i29, $i32);
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    $i34 := $slt.i64($i33, 0);
    goto corral_source_split_14435;

  corral_source_split_14435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb13;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_14439;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} dev_printk.ref.ref.ref.ref.i32.i32(.str.6, $p39, .str.173, .str.174, $i17, $i21);
    goto corral_source_split_14441;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(0, 1));
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} vslice_dummy_var_133 := zd_chip_disable_hwint($p40);
    goto SeqInstr_1267, SeqInstr_1268;

  SeqInstr_1268:
    assume assertsPassed;
    goto SeqInstr_1269;

  SeqInstr_1269:
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11728, 1));
    goto corral_source_split_14444;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_14445;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11736, 1));
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} $p46 := ieee80211_beacon_get($p43, $p45);
    goto corral_source_split_14448;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_14449;

  corral_source_split_14449:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(0, 1));
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i17);
    goto corral_source_split_14459;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_14460;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i21);
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_14464;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(12452, 1));
    goto corral_source_split_14465;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} vslice_dummy_var_135 := zd_set_beacon_interval($p52, $i55, $i58, $i60);
    goto SeqInstr_1273, SeqInstr_1274;

  SeqInstr_1274:
    assume assertsPassed;
    goto SeqInstr_1275;

  SeqInstr_1275:
    goto corral_source_split_14467;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(0, 1));
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} vslice_dummy_var_136 := zd_chip_enable_hwint($p62);
    goto SeqInstr_1276, SeqInstr_1277;

  SeqInstr_1277:
    assume assertsPassed;
    goto SeqInstr_1278;

  SeqInstr_1278:
    goto corral_source_split_14469;

  corral_source_split_14469:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11584, 1));
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} spin_lock_irq($p64);
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, jiffies);
    goto corral_source_split_14472;

  corral_source_split_14472:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11968, 1)), $mul.ref(232, 1));
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, $i65);
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11584, 1));
    goto corral_source_split_14475;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} spin_unlock_irq($p68);
    goto corral_source_split_14476;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_1276:
    assume !assertsPassed;
    return;

  SeqInstr_1273:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_14452;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} zd_mac_free_cur_beacon($p2);
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 11968), 13688)), $mul.ref(11728, 1));
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} vslice_dummy_var_134 := zd_mac_config_beacon($p50, $p46, 0);
    goto SeqInstr_1270, SeqInstr_1271;

  SeqInstr_1271:
    assume assertsPassed;
    goto SeqInstr_1272;

  SeqInstr_1272:
    goto corral_source_split_14456;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_1270:
    assume !assertsPassed;
    return;

  SeqInstr_1267:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_14396;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 860413);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_14478;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 861445);

procedure delayed_work_timer_fn($i0: i64);



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 862477);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14480;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    return;
}



const zd_usb_init: ref;

axiom zd_usb_init == $sub.ref(0, 863509);

procedure zd_usb_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation zd_usb_init($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.0;
    call {:si_unique_call 2724} cmdloc_dummy_var_73 := $memset.i8(cmdloc_dummy_var_72, $p3, 0, 11280, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_73;
    goto corral_source_split_14484;

  corral_source_split_14484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} $p4 := usb_get_intf($p2);
    goto corral_source_split_14485;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p4);
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_14488;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} usb_set_intfdata($p7, $p8);
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11016, 1));
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} init_usb_anchor($p9);
    goto corral_source_split_14493;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} init_usb_interrupt($p0);
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} init_usb_tx($p0);
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} init_usb_rx($p0);
    goto corral_source_split_14496;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    return;
}



const zd_rf_init: ref;

axiom zd_rf_init == $sub.ref(0, 864541);

procedure zd_rf_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation zd_rf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i8;
  var $i5: i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14499;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_74 := $M.0;
    call {:si_unique_call 2731} cmdloc_dummy_var_75 := $memset.i8(cmdloc_dummy_var_74, $p1, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_75;
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_14501;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    $i4 := $and.i8($i3, $sub.i8(0, 2));
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    $i5 := $or.i8($i4, 1);
    goto corral_source_split_14504;

  corral_source_split_14504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i5);
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    return;
}



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 865573);

procedure usb_get_intf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} $p1 := external_alloc();
    goto corral_source_split_14508;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const init_usb_anchor: ref;

axiom init_usb_anchor == $sub.ref(0, 866605);

procedure init_usb_anchor($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_usb_anchor($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var vslice_dummy_var_137: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_14512;

  corral_source_split_14512:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_76 := $M.0;
    call {:si_unique_call 2735} cmdloc_dummy_var_77 := $memset.i8(cmdloc_dummy_var_76, $p3, 0, 184, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_77;
    goto corral_source_split_14513;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} INIT_LIST_HEAD($p4);
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_14516;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} __init_waitqueue_head($p5, .str.229, $p1);
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} vslice_dummy_var_137 := spinlock_check($p6);
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_14520;

  corral_source_split_14520:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} __raw_spin_lock_init($p10, .str.230, $p2);
    goto corral_source_split_14522;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    return;
}



const init_usb_interrupt: ref;

axiom init_usb_interrupt == $sub.ref(0, 867637);

procedure init_usb_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_usb_interrupt($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var vslice_dummy_var_138: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14524;

  corral_source_split_14524:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} vslice_dummy_var_138 := spinlock_check($p3);
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} __raw_spin_lock_init($p7, .str.231, $p1);
    goto corral_source_split_14528;

  corral_source_split_14528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} $p8 := zd_usb_to_usbdev($p0);
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} $i9 := int_urb_interval($p8);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_14530;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} init_completion($p12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(284, 1));
    goto corral_source_split_14532;

  corral_source_split_14532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} atomic_set($p13, 0);
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $sub.i16(0, 27376));
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    return;
}



const init_usb_tx: ref;

axiom init_usb_tx == $sub.ref(0, 868669);

procedure init_usb_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_usb_tx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p34: ref;
  var $p37: ref;
  var $p39: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p47: ref;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var vslice_dummy_var_139: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14536;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(8, 1));
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} vslice_dummy_var_139 := spinlock_check($p6);
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} __raw_spin_lock_init($p10, .str.233, $p1);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(0, 1));
    goto corral_source_split_14540;

  corral_source_split_14540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} atomic_set($p11, 0);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(588, 1));
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, $sub.i8(0, 2));
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i14);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(304, 1));
    goto corral_source_split_14544;

  corral_source_split_14544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} skb_queue_head_init($p15);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(400, 1));
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} init_usb_anchor($p16);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(584, 1));
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(588, 1));
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_14548;

  corral_source_split_14548:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, $sub.i8(0, 3));
    goto corral_source_split_14549;

  corral_source_split_14549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i20);
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} __init_work($p22, 0);
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_14552;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, 137438953408);
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_14554;

  corral_source_split_14554:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_14555;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_78 := $M.0;
    cmdloc_dummy_var_79 := $M.0;
    call {:si_unique_call 2757} cmdloc_dummy_var_80 := $memcpy.i8(cmdloc_dummy_var_78, cmdloc_dummy_var_79, $p27, $p28, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_80;
    $p31 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_14556;

  corral_source_split_14556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} lockdep_init_map($p31, .str.234, $p2, 0);
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} INIT_LIST_HEAD($p34);
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, zd_tx_watchdog_handler);
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(80, 1));
    goto corral_source_split_14559;

  corral_source_split_14559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} init_timer_key($p39, 2097152, .str.235, $p4);
    $p42 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, delayed_work_timer_fn);
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1));
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    $p47 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i44);
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    return;
}



const init_usb_rx: ref;

axiom init_usb_rx == $sub.ref(0, 869701);

procedure init_usb_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation init_usb_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p55: ref;
  var $p58: ref;
  var $p61: ref;
  var $p63: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p71: ref;
  var $p73: ref;
  var $i74: i64;
  var $p76: ref;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var vslice_dummy_var_140: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} vslice_dummy_var_140 := spinlock_check($p8);
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14567;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} __raw_spin_lock_init($p12, .str.236, $p1);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} __mutex_init($p13, .str.237, $p2);
    goto corral_source_split_14570;

  corral_source_split_14570:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} $p16 := interface_to_usbdev($p15);
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_14576;

  corral_source_split_14576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10100, 1));
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 64);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10096, 1));
    goto corral_source_split_14583;

  corral_source_split_14583:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_14585;

  corral_source_split_14585:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_14587;

  corral_source_split_14587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 2772} {:cexpr "tmp___1"} boogie_si_record_i64($i27);
    goto corral_source_split_14588;

  corral_source_split_14588:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(232, 1)), $mul.ref(0, 1));
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} __init_work($p46, 0);
    goto corral_source_split_14621;

  corral_source_split_14621:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, 137438953408);
    $p50 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(232, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14623;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p5);
    goto corral_source_split_14625;

  corral_source_split_14625:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_81 := $M.0;
    cmdloc_dummy_var_82 := $M.0;
    call {:si_unique_call 2778} cmdloc_dummy_var_83 := $memcpy.i8(cmdloc_dummy_var_81, cmdloc_dummy_var_82, $p51, $p52, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_83;
    $p55 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(232, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} lockdep_init_map($p55, .str.240, $p4, 0);
    $p58 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(232, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_14627;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} INIT_LIST_HEAD($p58);
    $p61 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(232, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, zd_rx_idle_timer_handler);
    $p63 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(232, 1)), $mul.ref(80, 1));
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} init_timer_key($p63, 2097152, .str.241, $p6);
    $p66 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(232, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_14630;

  corral_source_split_14630:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, delayed_work_timer_fn);
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(232, 1));
    goto corral_source_split_14631;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    $p71 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(232, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p71, $i68);
    $p73 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(456, 1)), $mul.ref(24, 1));
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, zd_usb_reset_rx_idle_timer_tasklet);
    goto corral_source_split_14634;

  corral_source_split_14634:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p0);
    $p76 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(456, 1)), $mul.ref(32, 1));
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i74);
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_14591;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p29, .str.1);
    goto corral_source_split_14593;

  corral_source_split_14593:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_14594;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p30, .str.238);
    goto corral_source_split_14595;

  corral_source_split_14595:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p31, .str.60);
    goto corral_source_split_14597;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p32, .str.4);
    goto corral_source_split_14599;

  corral_source_split_14599:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_14601;

  corral_source_split_14601:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.8, $p34);
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_14603;

  corral_source_split_14603:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 1190);
    goto corral_source_split_14604;

  corral_source_split_14604:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p34, $i37);
    goto corral_source_split_14605;

  corral_source_split_14605:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p38, 1);
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_14608;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.9, $p39);
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2773} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 2774} {:cexpr "tmp___0"} boogie_si_record_i64($i43);
    goto corral_source_split_14612;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} dump_stack();
    goto corral_source_split_14618;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i44 == 1;
    goto corral_source_split_14615;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} __dynamic_pr_debug.ref.ref.ref.i32.ref($p3, .str.4, .str.60, 1190, .str.239);
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i19 == 1;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10100, 1));
    goto corral_source_split_14578;

  corral_source_split_14578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 512);
    goto corral_source_split_14579;

  corral_source_split_14579:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_rx_idle_timer_handler: ref;

axiom zd_rx_idle_timer_handler == $sub.ref(0, 870733);

procedure zd_rx_idle_timer_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, assertsPassed;



implementation zd_rx_idle_timer_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14639;

  corral_source_split_14639:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 528), 11280));
    goto corral_source_split_14640;

  corral_source_split_14640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} $p3 := zd_usb_to_mac($p2);
    goto corral_source_split_14641;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 13688)), $mul.ref(12464, 1));
    goto corral_source_split_14642;

  corral_source_split_14642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} $i5 := constant_test_bit(0, $p4);
    call {:si_unique_call 2784} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_14643;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_14644;

  corral_source_split_14644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 528), 11280)), $mul.ref(11008, 1));
    goto corral_source_split_14648;

  corral_source_split_14648:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} dev_printk.ref.ref.ref.ref(.str.6, $p9, .str.26, .str.272);
    goto corral_source_split_14651;

  corral_source_split_14651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} zd_usb_reset_rx($p2);
    goto SeqInstr_1279, SeqInstr_1280;

  SeqInstr_1280:
    assume assertsPassed;
    goto SeqInstr_1281;

  SeqInstr_1281:
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1279:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const zd_usb_reset_rx_idle_timer_tasklet: ref;

axiom zd_usb_reset_rx_idle_timer_tasklet == $sub.ref(0, 871765);

procedure zd_usb_reset_rx_idle_timer_tasklet($i0: i64);



const zd_usb_reset_rx: ref;

axiom zd_usb_reset_rx == $sub.ref(0, 872797);

procedure zd_usb_reset_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, assertsPassed;



implementation zd_usb_reset_rx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;
  var $p11: ref;
  var $i12: i1;
  var vslice_dummy_var_141: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_14655;

  corral_source_split_14655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} mutex_lock_nested($p2, 0);
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} ldv_spin_lock();
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(10104, 1));
    goto corral_source_split_14657;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_14658;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_14660;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2789} {:cexpr "do_reset"} boogie_si_record_i8($i7);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_14662;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_14669;

  corral_source_split_14669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} mutex_unlock($p11);
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i7);
    goto corral_source_split_14671;

  corral_source_split_14671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} zd_usb_reset_rx_idle_timer($p0);
    goto corral_source_split_14674;

  corral_source_split_14674:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_14665;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} __zd_usb_disable_rx($p0);
    goto corral_source_split_14666;

  corral_source_split_14666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} vslice_dummy_var_141 := __zd_usb_enable_rx($p0);
    goto SeqInstr_1282, SeqInstr_1283;

  SeqInstr_1283:
    assume assertsPassed;
    goto SeqInstr_1284;

  SeqInstr_1284:
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1282:
    assume !assertsPassed;
    return;
}



const zd_tx_watchdog_handler: ref;

axiom zd_tx_watchdog_handler == $sub.ref(0, 873829);

procedure zd_tx_watchdog_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.13;



implementation zd_tx_watchdog_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_142: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14676;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14677;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 10496), 11280));
    goto corral_source_split_14678;

  corral_source_split_14678:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10496), 11280)), $mul.ref(10416, 1));
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10496), 11280)), $mul.ref(10416, 1)), $mul.ref(0, 1));
    goto corral_source_split_14679;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} $i5 := atomic_read($p4);
    call {:si_unique_call 2796} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_14681;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_14683;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_14684;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(588, 1));
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_14686;

  corral_source_split_14686:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} $i12 := zd_tx_timeout($p2);
    goto corral_source_split_14694;

  corral_source_split_14694:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 2801} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_14696;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_14700;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10496), 11280)), $mul.ref(11008, 1));
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_14706;

  corral_source_split_14706:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_14707;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} dev_warn.ref.ref($p19, .str.271);
    goto corral_source_split_14708;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10496), 11280)), $mul.ref(11008, 1));
    goto corral_source_split_14709;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} usb_queue_reset_device($p21);
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} $i22 := round_jiffies_relative(250);
    call {:si_unique_call 2798} {:cexpr "tmp___2"} boogie_si_record_i64($i22);
    goto corral_source_split_14690;

  corral_source_split_14690:
    assume {:verifier.code 0} true;
    $p23 := $M.1;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 10496), 11280)), $mul.ref(10416, 1)), $mul.ref(80, 1));
    goto corral_source_split_14691;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} vslice_dummy_var_142 := queue_delayed_work___0($p23, $p24, $i22);
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_14698;

  corral_source_split_14698:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const zd_tx_timeout: ref;

axiom zd_tx_timeout == $sub.ref(0, 874861);

procedure zd_tx_timeout($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.13;



implementation zd_tx_timeout($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p13: ref;
  var $p14: ref;
  var $i26: i8;
  var $p33: ref;
  var $i34: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(304, 1));
    goto corral_source_split_14714;

  corral_source_split_14714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} ldv_spin_lock();
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(304, 1)), $mul.ref(0, 1));
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_14716;

  corral_source_split_14716:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_14719;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_14720;

  corral_source_split_14720:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p4);
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_14722;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i9, $i11);
    goto corral_source_split_14724;

  corral_source_split_14724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 11280)), $mul.ref(10416, 1)), $mul.ref(304, 1)), $mul.ref(24, 1));
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} spin_unlock_irqrestore($p33, $u0);
    goto corral_source_split_14744;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i26);
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_14726;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    $p13, $p14 := $p8, $p4;
    goto $bb4;

  $bb4:
    call $p15, $p16, $p17, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p27, $p28, $p29, $p30, $i31, $i32, $p13, $p14 := zd_tx_timeout_loop_$bb4($i11, $p15, $p16, $p17, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p27, $p28, $p29, $p30, $i31, $i32, $p13, $p14);
    goto $bb4_last;

  corral_source_split_14728:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} $p15 := IEEE80211_SKB_CB($p14);
    goto corral_source_split_14730;

  corral_source_split_14730:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_14731;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_14732;

  corral_source_split_14732:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(1, 8));
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_14734;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    call {:si_unique_call 2806} {:cexpr "trans_start"} boogie_si_record_i64($i21);
    goto corral_source_split_14735;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, jiffies);
    goto corral_source_split_14736;

  corral_source_split_14736:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($i21, $i22);
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 1250);
    goto corral_source_split_14738;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    $i25 := $slt.i64($i24, 0);
    goto corral_source_split_14739;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p13, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_14747;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_14748;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_14749;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p13);
    goto corral_source_split_14751;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $i11);
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    goto corral_source_split_14754;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p13, $p14 := $p30, $p13;
    goto $bb10_dummy;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_14741;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14728;
}



const int_urb_interval: ref;

axiom int_urb_interval == $sub.ref(0, 875893);

procedure int_urb_interval($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation int_urb_interval($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_14757;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_14765;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_14761;

  corral_source_split_14761:
    assume {:verifier.code 0} true;
    $i7 := 4;
    goto $bb11;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_14763;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    $i7 := 10;
    goto $bb11;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 876925);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14767;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_14770;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} __init_waitqueue_head($p3, .str.232, $p1);
    goto corral_source_split_14771;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 877957);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_head_init: ref;

axiom __skb_queue_head_init == $sub.ref(0, 878989);

procedure __skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_head_init($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14775;

  corral_source_split_14775:
    assume {:verifier.code 0} true;
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_14777;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_14779;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_14781;

  corral_source_split_14781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_alloc_hw: ref;

axiom ieee80211_alloc_hw == $sub.ref(0, 880021);

procedure ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} {:cexpr "ieee80211_alloc_hw:arg:priv_data_len"} boogie_si_record_i64($i0);
    goto corral_source_split_14784;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2811} $p2 := ieee80211_alloc_hw_nm($i0, $p1, $0.ref);
    goto corral_source_split_14785;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_initialize_ieee80211_ops_7: ref;

axiom ldv_initialize_ieee80211_ops_7 == $sub.ref(0, 881053);

procedure ldv_initialize_ieee80211_ops_7();
  free requires assertsPassed;
  modifies $M.55, $M.0, $CurrAddr;



implementation ldv_initialize_ieee80211_ops_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14787;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    $M.55 := $p0;
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 882085);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_14792;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} $p1 := calloc(1, $i0);
    goto corral_source_split_14793;

  corral_source_split_14793:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_14794;

  corral_source_split_14794:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2815} __VERIFIER_assume($i4);
    goto corral_source_split_14797;

  corral_source_split_14797:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ieee80211_alloc_hw_nm: ref;

axiom ieee80211_alloc_hw_nm == $sub.ref(0, 883117);

procedure ieee80211_alloc_hw_nm($i0: i64, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_alloc_hw_nm($i0: i64, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} {:cexpr "ieee80211_alloc_hw_nm:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} $p3 := external_alloc();
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14801;

  corral_source_split_14801:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 884149);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14803;

  corral_source_split_14803:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_14804;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_14805;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_14807;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_14808;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 885181);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14810;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_14811;

  corral_source_split_14811:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_14812;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_14813;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_14814;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_14815;

  corral_source_split_14815:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_14816;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 886213);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.57;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 2819} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_14818;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_14819;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_84 := $M.57;
    call {:si_unique_call 2820} cmdloc_dummy_var_85 := $memset.i8(cmdloc_dummy_var_84, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.57 := cmdloc_dummy_var_85;
    goto corral_source_split_14820;

  corral_source_split_14820:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const work_init_3: ref;

axiom work_init_3 == $sub.ref(0, 887245);

procedure work_init_3();
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation work_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 2821} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_14823;

  corral_source_split_14823:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 2822} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_14824;

  corral_source_split_14824:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 2823} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_14825;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 2824} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_14826;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    return;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 888277);

procedure work_init_2();
  free requires assertsPassed;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14828;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_14829;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_14831;

  corral_source_split_14831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_14832;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 889309);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14834;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 890341);

procedure work_init_1();
  free requires assertsPassed;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14836;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_14837;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_14838;

  corral_source_split_14838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_14839;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_7: ref;

axiom ldv_main_exported_7 == $sub.ref(0, 891373);

procedure ldv_main_exported_7();
  free requires assertsPassed;
  modifies $M.57, $M.66, $M.56, $M.67, $M.0, $M.13, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.28, $M.16, $M.18, $M.20, $M.22, $M.47, $M.33, $M.34, $M.40, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.10, $M.29, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.39;



implementation ldv_main_exported_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var vslice_dummy_var_143: ref;
  var vslice_dummy_var_144: ref;
  var vslice_dummy_var_145: ref;
  var vslice_dummy_var_146: ref;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i64;
  var vslice_dummy_var_150: i64;
  var vslice_dummy_var_151: i64;
  var vslice_dummy_var_152: i64;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_14842;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} $p4 := ldv_init_zalloc(232);
    goto corral_source_split_14843;

  corral_source_split_14843:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} $p6 := ldv_init_zalloc(4);
    goto corral_source_split_14845;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_14846;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} $p8 := ldv_init_zalloc(296);
    goto corral_source_split_14847;

  corral_source_split_14847:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_14848;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2840} $p10 := ldv_init_zalloc(296);
    goto corral_source_split_14849;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_14850;

  corral_source_split_14850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} $p12 := ldv_init_zalloc(296);
    goto corral_source_split_14851;

  corral_source_split_14851:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_14852;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} $p14 := ldv_init_zalloc(240);
    goto corral_source_split_14853;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} $p16 := ldv_init_zalloc(24);
    goto corral_source_split_14855;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_14856;

  corral_source_split_14856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} $p18 := ldv_init_zalloc(8);
    goto corral_source_split_14857;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_14858;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} $p20 := ldv_init_zalloc(296);
    goto corral_source_split_14859;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_14860;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p0);
    goto corral_source_split_14861;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} vslice_dummy_var_143 := ldv_memset($p22, 0, 8);
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_14863;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} vslice_dummy_var_144 := ldv_memset($p24, 0, 4);
    goto corral_source_split_14864;

  corral_source_split_14864:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_14865;

  corral_source_split_14865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} vslice_dummy_var_145 := ldv_memset($p26, 0, 4);
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} vslice_dummy_var_146 := ldv_memset($p28, 0, 4);
    goto corral_source_split_14868;

  corral_source_split_14868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2850} $i30 := __VERIFIER_nondet_int();
    call {:si_unique_call 2851} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i30);
    call {:si_unique_call 2852} {:cexpr "tmp___8"} boogie_si_record_i32($i30);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i30, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i30, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i30, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i30, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} ldv_stop();
    goto corral_source_split_15043;

  corral_source_split_15043:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    $i113 := $M.56;
    goto corral_source_split_14879;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 1);
    goto corral_source_split_14880;

  corral_source_split_14880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i116 := $M.56;
    goto corral_source_split_15035;

  corral_source_split_15035:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 2);
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb80:
    assume $i117 == 1;
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 0} true;
    $p118 := $M.55;
    goto corral_source_split_15039;

  corral_source_split_15039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} zd_op_remove_interface($p118, $p13);
    goto SeqInstr_1330, SeqInstr_1331;

  SeqInstr_1331:
    assume assertsPassed;
    goto SeqInstr_1332;

  SeqInstr_1332:
    goto corral_source_split_15040;

  corral_source_split_15040:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 2891} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_15041;

  corral_source_split_15041:
    assume {:verifier.code 0} true;
    goto $bb82;

  SeqInstr_1330:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i114 == 1;
    goto corral_source_split_15030;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    $p115 := $M.55;
    goto corral_source_split_15031;

  corral_source_split_15031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2888} zd_op_remove_interface($p115, $p13);
    goto SeqInstr_1327, SeqInstr_1328;

  SeqInstr_1328:
    assume assertsPassed;
    goto SeqInstr_1329;

  SeqInstr_1329:
    goto corral_source_split_15032;

  corral_source_split_15032:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2889} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_15033;

  corral_source_split_15033:
    assume {:verifier.code 0} true;
    goto $bb79;

  SeqInstr_1327:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_14874;

  corral_source_split_14874:
    assume {:verifier.code 0} true;
    $i107 := $M.56;
    goto corral_source_split_14875;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 1);
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i110 := $M.56;
    goto corral_source_split_15022;

  corral_source_split_15022:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 2);
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb74:
    assume $i111 == 1;
    goto corral_source_split_15025;

  corral_source_split_15025:
    assume {:verifier.code 0} true;
    $p112 := $M.55;
    goto corral_source_split_15026;

  corral_source_split_15026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} zd_op_tx($p112, $p19, $p5);
    goto SeqInstr_1324, SeqInstr_1325;

  SeqInstr_1325:
    assume assertsPassed;
    goto SeqInstr_1326;

  SeqInstr_1326:
    goto corral_source_split_15027;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 2887} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_15028;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    goto $bb76;

  SeqInstr_1324:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i108 == 1;
    goto corral_source_split_15017;

  corral_source_split_15017:
    assume {:verifier.code 0} true;
    $p109 := $M.55;
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} zd_op_tx($p109, $p19, $p5);
    goto SeqInstr_1321, SeqInstr_1322;

  SeqInstr_1322:
    assume assertsPassed;
    goto SeqInstr_1323;

  SeqInstr_1323:
    goto corral_source_split_15019;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2885} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_15020;

  corral_source_split_15020:
    assume {:verifier.code 0} true;
    goto $bb73;

  SeqInstr_1321:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i33 == 1;
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    $i102 := $M.56;
    goto corral_source_split_14871;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 2);
    goto corral_source_split_14872;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb68:
    assume $i103 == 1;
    goto corral_source_split_15009;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    $p104 := $M.55;
    goto corral_source_split_15010;

  corral_source_split_15010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} zd_op_stop($p104);
    goto SeqInstr_1318, SeqInstr_1319;

  SeqInstr_1319:
    assume assertsPassed;
    goto SeqInstr_1320;

  SeqInstr_1320:
    goto corral_source_split_15011;

  corral_source_split_15011:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2882} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    $i105 := $M.67;
    goto corral_source_split_15013;

  corral_source_split_15013:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32($i105, 1);
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    $M.67 := $i106;
    call {:si_unique_call 2883} {:cexpr "ref_cnt"} boogie_si_record_i32($i106);
    goto corral_source_split_15015;

  corral_source_split_15015:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_1318:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i30, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    goto corral_source_split_14886;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    $i94 := $M.56;
    goto corral_source_split_14887;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i98 := $M.56;
    goto corral_source_split_15001;

  corral_source_split_15001:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 2);
    goto corral_source_split_15002;

  corral_source_split_15002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb65:
    assume $i99 == 1;
    goto corral_source_split_15004;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    $p100 := $M.55;
    goto corral_source_split_15005;

  corral_source_split_15005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} vslice_dummy_var_154 := zd_op_add_interface($p100, $p9);
    goto SeqInstr_1315, SeqInstr_1316;

  SeqInstr_1316:
    assume assertsPassed;
    goto SeqInstr_1317;

  SeqInstr_1317:
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 2880} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_15007;

  corral_source_split_15007:
    assume {:verifier.code 0} true;
    goto $bb67;

  SeqInstr_1315:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i95 == 1;
    goto corral_source_split_14996;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    $p96 := $M.55;
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} vslice_dummy_var_153 := zd_op_add_interface($p96, $p9);
    goto SeqInstr_1312, SeqInstr_1313;

  SeqInstr_1313:
    assume assertsPassed;
    goto SeqInstr_1314;

  SeqInstr_1314:
    goto corral_source_split_14998;

  corral_source_split_14998:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2878} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14999;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_1312:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_14882;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    $i86 := $M.56;
    goto corral_source_split_14883;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 1);
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i90 := $M.56;
    goto corral_source_split_14987;

  corral_source_split_14987:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 2);
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb59:
    assume $i91 == 1;
    goto corral_source_split_14990;

  corral_source_split_14990:
    assume {:verifier.code 0} true;
    $p92 := $M.55;
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.57, $p2);
    goto corral_source_split_14992;

  corral_source_split_14992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} zd_op_bss_info_changed($p92, $p21, $p15, $i93);
    goto SeqInstr_1309, SeqInstr_1310;

  SeqInstr_1310:
    assume assertsPassed;
    goto SeqInstr_1311;

  SeqInstr_1311:
    goto corral_source_split_14993;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 2876} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14994;

  corral_source_split_14994:
    assume {:verifier.code 0} true;
    goto $bb61;

  SeqInstr_1309:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i87 == 1;
    goto corral_source_split_14981;

  corral_source_split_14981:
    assume {:verifier.code 0} true;
    $p88 := $M.55;
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.57, $p2);
    goto corral_source_split_14983;

  corral_source_split_14983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} zd_op_bss_info_changed($p88, $p21, $p15, $i89);
    goto SeqInstr_1306, SeqInstr_1307;

  SeqInstr_1307:
    assume assertsPassed;
    goto SeqInstr_1308;

  SeqInstr_1308:
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2874} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14985;

  corral_source_split_14985:
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_1306:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i30, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i30, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i30, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_14898;

  corral_source_split_14898:
    assume {:verifier.code 0} true;
    $i78 := $M.56;
    goto corral_source_split_14899;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_14900;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i82 := $M.56;
    goto corral_source_split_14973;

  corral_source_split_14973:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 2);
    goto corral_source_split_14974;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb53:
    assume $i83 == 1;
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    $p84 := $M.55;
    goto corral_source_split_14977;

  corral_source_split_14977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} vslice_dummy_var_152 := zd_op_get_tsf($p84, $p11);
    goto SeqInstr_1303, SeqInstr_1304;

  SeqInstr_1304:
    assume assertsPassed;
    goto SeqInstr_1305;

  SeqInstr_1305:
    goto corral_source_split_14978;

  corral_source_split_14978:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 2872} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14979;

  corral_source_split_14979:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_1303:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i79 == 1;
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    $p80 := $M.55;
    goto corral_source_split_14969;

  corral_source_split_14969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} vslice_dummy_var_151 := zd_op_get_tsf($p80, $p11);
    goto SeqInstr_1300, SeqInstr_1301;

  SeqInstr_1301:
    assume assertsPassed;
    goto SeqInstr_1302;

  SeqInstr_1302:
    goto corral_source_split_14970;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2870} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14971;

  corral_source_split_14971:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1300:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    $i68 := $M.56;
    goto corral_source_split_14895;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 1);
    goto corral_source_split_14896;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i73 := $M.56;
    goto corral_source_split_14958;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 2);
    goto corral_source_split_14959;

  corral_source_split_14959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb47:
    assume $i74 == 1;
    goto corral_source_split_14961;

  corral_source_split_14961:
    assume {:verifier.code 0} true;
    $p75 := $M.55;
    goto corral_source_split_14962;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.57, $p3);
    goto corral_source_split_14963;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.57, $p0);
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2867} zd_op_configure_filter($p75, $i76, $p7, $i77);
    goto SeqInstr_1297, SeqInstr_1298;

  SeqInstr_1298:
    assume assertsPassed;
    goto SeqInstr_1299;

  SeqInstr_1299:
    goto corral_source_split_14965;

  corral_source_split_14965:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 2868} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_1297:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i69 == 1;
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    $p70 := $M.55;
    goto corral_source_split_14952;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.57, $p3);
    goto corral_source_split_14953;

  corral_source_split_14953:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.57, $p0);
    goto corral_source_split_14954;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} zd_op_configure_filter($p70, $i71, $p7, $i72);
    goto SeqInstr_1294, SeqInstr_1295;

  SeqInstr_1295:
    assume assertsPassed;
    goto SeqInstr_1296;

  SeqInstr_1296:
    goto corral_source_split_14955;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2866} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14956;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_1294:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_14890;

  corral_source_split_14890:
    assume {:verifier.code 0} true;
    $i60 := $M.56;
    goto corral_source_split_14891;

  corral_source_split_14891:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i64 := $M.56;
    goto corral_source_split_14943;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 2);
    goto corral_source_split_14944;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb41:
    assume $i65 == 1;
    goto corral_source_split_14946;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    $p66 := $M.55;
    goto corral_source_split_14947;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} vslice_dummy_var_150 := zd_op_prepare_multicast($p66, $p17);
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 2864} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14949;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i61 == 1;
    goto corral_source_split_14938;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    $p62 := $M.55;
    goto corral_source_split_14939;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} vslice_dummy_var_149 := zd_op_prepare_multicast($p62, $p17);
    goto corral_source_split_14940;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2862} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14941;

  corral_source_split_14941:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb15:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    $i50 := $M.56;
    goto corral_source_split_14903;

  corral_source_split_14903:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_14904;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i55 := $M.56;
    goto corral_source_split_14929;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 2);
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35:
    assume $i56 == 1;
    goto corral_source_split_14932;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    $p57 := $M.55;
    goto corral_source_split_14933;

  corral_source_split_14933:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.57, $p1);
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} vslice_dummy_var_148 := zd_op_config($p57, $i58);
    goto SeqInstr_1291, SeqInstr_1292;

  SeqInstr_1292:
    assume assertsPassed;
    goto SeqInstr_1293;

  SeqInstr_1293:
    goto corral_source_split_14935;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 2860} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14936;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_1291:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i51 == 1;
    goto corral_source_split_14923;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    $p52 := $M.55;
    goto corral_source_split_14924;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.57, $p1);
    goto corral_source_split_14925;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} vslice_dummy_var_147 := zd_op_config($p52, $i53);
    goto SeqInstr_1288, SeqInstr_1289;

  SeqInstr_1289:
    assume assertsPassed;
    goto SeqInstr_1290;

  SeqInstr_1290:
    goto corral_source_split_14926;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2858} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14927;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_1288:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i30, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb12;

  $bb23:
    assume $i41 == 1;
    goto corral_source_split_14906;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    $i42 := $M.56;
    goto corral_source_split_14907;

  corral_source_split_14907:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_14908;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_14910;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    $p44 := $M.55;
    goto corral_source_split_14911;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} $i45 := zd_op_start($p44);
    goto SeqInstr_1285, SeqInstr_1286;

  SeqInstr_1286:
    assume assertsPassed;
    goto SeqInstr_1287;

  SeqInstr_1287:
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    $M.66 := $i45;
    call {:si_unique_call 2854} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i45);
    goto corral_source_split_14913;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    $i46 := $M.66;
    goto corral_source_split_14914;

  corral_source_split_14914:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_14915;

  corral_source_split_14915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i47 == 1;
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 2855} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_14918;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    $i48 := $M.67;
    goto corral_source_split_14919;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_14920;

  corral_source_split_14920:
    assume {:verifier.code 0} true;
    $M.67 := $i49;
    call {:si_unique_call 2856} {:cexpr "ref_cnt"} boogie_si_record_i32($i49);
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_1285:
    assume !assertsPassed;
    return;
}



const work_init_5: ref;

axiom work_init_5 == $sub.ref(0, 892405);

procedure work_init_5();
  free requires assertsPassed;
  modifies $M.68, $M.69, $M.70, $M.71;



implementation work_init_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15045;

  corral_source_split_15045:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 2893} {:cexpr "ldv_work_5_0"} boogie_si_record_i32(0);
    goto corral_source_split_15046;

  corral_source_split_15046:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 2894} {:cexpr "ldv_work_5_1"} boogie_si_record_i32(0);
    goto corral_source_split_15047;

  corral_source_split_15047:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 2895} {:cexpr "ldv_work_5_2"} boogie_si_record_i32(0);
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 2896} {:cexpr "ldv_work_5_3"} boogie_si_record_i32(0);
    goto corral_source_split_15049;

  corral_source_split_15049:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_5: ref;

axiom invoke_work_5 == $sub.ref(0, 893437);

procedure invoke_work_5();
  free requires assertsPassed;
  modifies $M.68, $M.69, $M.70, $M.71, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $M.13;



implementation invoke_work_5()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15051;

  corral_source_split_15051:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2897} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2898} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2899} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} ldv_stop();
    goto corral_source_split_15105;

  corral_source_split_15105:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_15057;

  corral_source_split_15057:
    assume {:verifier.code 0} true;
    $i21 := $M.71;
    goto corral_source_split_15058;

  corral_source_split_15058:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_15059;

  corral_source_split_15059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_15101;

  corral_source_split_15101:
    assume {:verifier.code 0} true;
    $i23 := $M.71;
    goto corral_source_split_15102;

  corral_source_split_15102:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_15103;

  corral_source_split_15103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.71 := 4;
    call {:si_unique_call 2909} {:cexpr "ldv_work_5_3"} boogie_si_record_i32(4);
    goto corral_source_split_15096;

  corral_source_split_15096:
    assume {:verifier.code 0} true;
    $p25 := $M.72;
    goto corral_source_split_15097;

  corral_source_split_15097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} zd_tx_watchdog_handler($p25);
    goto corral_source_split_15098;

  corral_source_split_15098:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 2911} {:cexpr "ldv_work_5_3"} boogie_si_record_i32(1);
    goto corral_source_split_15099;

  corral_source_split_15099:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_15053;

  corral_source_split_15053:
    assume {:verifier.code 0} true;
    $i16 := $M.70;
    goto corral_source_split_15054;

  corral_source_split_15054:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_15055;

  corral_source_split_15055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_15092;

  corral_source_split_15092:
    assume {:verifier.code 0} true;
    $i18 := $M.70;
    goto corral_source_split_15093;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_15094;

  corral_source_split_15094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 2906} {:cexpr "ldv_work_5_2"} boogie_si_record_i32(4);
    goto corral_source_split_15087;

  corral_source_split_15087:
    assume {:verifier.code 0} true;
    $p20 := $M.72;
    goto corral_source_split_15088;

  corral_source_split_15088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} zd_tx_watchdog_handler($p20);
    goto corral_source_split_15089;

  corral_source_split_15089:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 2908} {:cexpr "ldv_work_5_2"} boogie_si_record_i32(1);
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_15061;

  corral_source_split_15061:
    assume {:verifier.code 0} true;
    $i11 := $M.69;
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_15063;

  corral_source_split_15063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_15083;

  corral_source_split_15083:
    assume {:verifier.code 0} true;
    $i13 := $M.69;
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_15085;

  corral_source_split_15085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.69 := 4;
    call {:si_unique_call 2903} {:cexpr "ldv_work_5_1"} boogie_si_record_i32(4);
    goto corral_source_split_15078;

  corral_source_split_15078:
    assume {:verifier.code 0} true;
    $p15 := $M.72;
    goto corral_source_split_15079;

  corral_source_split_15079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2904} zd_tx_watchdog_handler($p15);
    goto corral_source_split_15080;

  corral_source_split_15080:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 2905} {:cexpr "ldv_work_5_1"} boogie_si_record_i32(1);
    goto corral_source_split_15081;

  corral_source_split_15081:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_15065;

  corral_source_split_15065:
    assume {:verifier.code 0} true;
    $i6 := $M.68;
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_15067;

  corral_source_split_15067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_15074;

  corral_source_split_15074:
    assume {:verifier.code 0} true;
    $i8 := $M.68;
    goto corral_source_split_15075;

  corral_source_split_15075:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_15076;

  corral_source_split_15076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.68 := 4;
    call {:si_unique_call 2900} {:cexpr "ldv_work_5_0"} boogie_si_record_i32(4);
    goto corral_source_split_15069;

  corral_source_split_15069:
    assume {:verifier.code 0} true;
    $p10 := $M.72;
    goto corral_source_split_15070;

  corral_source_split_15070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} zd_tx_watchdog_handler($p10);
    goto corral_source_split_15071;

  corral_source_split_15071:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 2902} {:cexpr "ldv_work_5_0"} boogie_si_record_i32(1);
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_usb_driver_6: ref;

axiom ldv_usb_driver_6 == $sub.ref(0, 894469);

procedure ldv_usb_driver_6();
  free requires assertsPassed;
  modifies $M.73, $M.0, $CurrAddr;



implementation ldv_usb_driver_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15107;

  corral_source_split_15107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} $p0 := ldv_init_zalloc(1560);
    goto corral_source_split_15108;

  corral_source_split_15108:
    assume {:verifier.code 0} true;
    goto corral_source_split_15109;

  corral_source_split_15109:
    assume {:verifier.code 0} true;
    $M.73 := $p0;
    goto corral_source_split_15110;

  corral_source_split_15110:
    assume {:verifier.code 0} true;
    return;
}



const work_init_4: ref;

axiom work_init_4 == $sub.ref(0, 895501);

procedure work_init_4();
  free requires assertsPassed;
  modifies $M.74, $M.75, $M.76, $M.77;



implementation work_init_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    $M.74 := 0;
    call {:si_unique_call 2914} {:cexpr "ldv_work_4_0"} boogie_si_record_i32(0);
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    $M.75 := 0;
    call {:si_unique_call 2915} {:cexpr "ldv_work_4_1"} boogie_si_record_i32(0);
    goto corral_source_split_15114;

  corral_source_split_15114:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 2916} {:cexpr "ldv_work_4_2"} boogie_si_record_i32(0);
    goto corral_source_split_15115;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 2917} {:cexpr "ldv_work_4_3"} boogie_si_record_i32(0);
    goto corral_source_split_15116;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_4: ref;

axiom invoke_work_4 == $sub.ref(0, 896533);

procedure invoke_work_4();
  free requires assertsPassed;
  modifies $M.74, $M.75, $M.76, $M.77, $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, assertsPassed;



implementation invoke_work_4()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2918} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2919} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2920} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} ldv_stop();
    goto corral_source_split_15172;

  corral_source_split_15172:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_15124;

  corral_source_split_15124:
    assume {:verifier.code 0} true;
    $i21 := $M.77;
    goto corral_source_split_15125;

  corral_source_split_15125:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_15126;

  corral_source_split_15126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_15168;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    $i23 := $M.77;
    goto corral_source_split_15169;

  corral_source_split_15169:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_15170;

  corral_source_split_15170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.77 := 4;
    call {:si_unique_call 2930} {:cexpr "ldv_work_4_3"} boogie_si_record_i32(4);
    goto corral_source_split_15163;

  corral_source_split_15163:
    assume {:verifier.code 0} true;
    $p25 := $M.78;
    goto corral_source_split_15164;

  corral_source_split_15164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} zd_rx_idle_timer_handler($p25);
    goto SeqInstr_1342, SeqInstr_1343;

  SeqInstr_1343:
    assume assertsPassed;
    goto SeqInstr_1344;

  SeqInstr_1344:
    goto corral_source_split_15165;

  corral_source_split_15165:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2932} {:cexpr "ldv_work_4_3"} boogie_si_record_i32(1);
    goto corral_source_split_15166;

  corral_source_split_15166:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_1342:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_15120;

  corral_source_split_15120:
    assume {:verifier.code 0} true;
    $i16 := $M.76;
    goto corral_source_split_15121;

  corral_source_split_15121:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_15122;

  corral_source_split_15122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_15159;

  corral_source_split_15159:
    assume {:verifier.code 0} true;
    $i18 := $M.76;
    goto corral_source_split_15160;

  corral_source_split_15160:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_15161;

  corral_source_split_15161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.76 := 4;
    call {:si_unique_call 2927} {:cexpr "ldv_work_4_2"} boogie_si_record_i32(4);
    goto corral_source_split_15154;

  corral_source_split_15154:
    assume {:verifier.code 0} true;
    $p20 := $M.78;
    goto corral_source_split_15155;

  corral_source_split_15155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} zd_rx_idle_timer_handler($p20);
    goto SeqInstr_1339, SeqInstr_1340;

  SeqInstr_1340:
    assume assertsPassed;
    goto SeqInstr_1341;

  SeqInstr_1341:
    goto corral_source_split_15156;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2929} {:cexpr "ldv_work_4_2"} boogie_si_record_i32(1);
    goto corral_source_split_15157;

  corral_source_split_15157:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_1339:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    $i11 := $M.75;
    goto corral_source_split_15129;

  corral_source_split_15129:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_15130;

  corral_source_split_15130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_15150;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    $i13 := $M.75;
    goto corral_source_split_15151;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_15152;

  corral_source_split_15152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.75 := 4;
    call {:si_unique_call 2924} {:cexpr "ldv_work_4_1"} boogie_si_record_i32(4);
    goto corral_source_split_15145;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    $p15 := $M.78;
    goto corral_source_split_15146;

  corral_source_split_15146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} zd_rx_idle_timer_handler($p15);
    goto SeqInstr_1336, SeqInstr_1337;

  SeqInstr_1337:
    assume assertsPassed;
    goto SeqInstr_1338;

  SeqInstr_1338:
    goto corral_source_split_15147;

  corral_source_split_15147:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 2926} {:cexpr "ldv_work_4_1"} boogie_si_record_i32(1);
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_1336:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_15132;

  corral_source_split_15132:
    assume {:verifier.code 0} true;
    $i6 := $M.74;
    goto corral_source_split_15133;

  corral_source_split_15133:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_15134;

  corral_source_split_15134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_15141;

  corral_source_split_15141:
    assume {:verifier.code 0} true;
    $i8 := $M.74;
    goto corral_source_split_15142;

  corral_source_split_15142:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_15143;

  corral_source_split_15143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.74 := 4;
    call {:si_unique_call 2921} {:cexpr "ldv_work_4_0"} boogie_si_record_i32(4);
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 0} true;
    $p10 := $M.78;
    goto corral_source_split_15137;

  corral_source_split_15137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} zd_rx_idle_timer_handler($p10);
    goto SeqInstr_1333, SeqInstr_1334;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  SeqInstr_1335:
    goto corral_source_split_15138;

  corral_source_split_15138:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 2923} {:cexpr "ldv_work_4_0"} boogie_si_record_i32(1);
    goto corral_source_split_15139;

  corral_source_split_15139:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_1333:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 897565);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.79, $M.16, $M.18, $M.20, $M.22, $M.56, $M.74, $M.75, $M.76, $M.77, $M.83, $M.67, $M.84, $M.68, $M.69, $M.70, $M.71, $M.85, $M.0, $M.86, $M.13, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.57, $M.66, $M.88, $M.1, $M.55, $M.17, $M.19, $M.21, $M.23, $M.72, $M.78, $M.73, $M.87, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.40, $M.89, $M.37, $M.45, $M.41, $M.44, $M.43, $M.42, $M.46, $M.26, $M.32, $M.206, $CurrAddr, $M.29, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.2, $M.3, $M.28, $M.47, assertsPassed, $M.33, $M.34, $M.10, $M.39;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;

  $bb0:
    call {:si_unique_call 2934} $initialize();
    goto corral_source_split_15174;

  corral_source_split_15174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_15175;

  corral_source_split_15175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} $p0 := ldv_init_zalloc(32);
    goto corral_source_split_15176;

  corral_source_split_15176:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_15177;

  corral_source_split_15177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} ldv_initialize();
    goto corral_source_split_15178;

  corral_source_split_15178:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 2938} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_15179;

  corral_source_split_15179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} work_init_3();
    goto corral_source_split_15180;

  corral_source_split_15180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_15181;

  corral_source_split_15181:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 2941} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_15182;

  corral_source_split_15182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} work_init_2();
    goto corral_source_split_15183;

  corral_source_split_15183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_15184;

  corral_source_split_15184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} work_init_1();
    goto corral_source_split_15185;

  corral_source_split_15185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_15186;

  corral_source_split_15186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} work_init_4();
    goto corral_source_split_15187;

  corral_source_split_15187:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2947} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_15188;

  corral_source_split_15188:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 2948} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_15189;

  corral_source_split_15189:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 2949} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_15190;

  corral_source_split_15190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} work_init_5();
    goto corral_source_split_15191;

  corral_source_split_15191:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2951} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15192;

  corral_source_split_15192:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55 := main_loop_$bb1($p1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} ldv_stop();
    goto corral_source_split_15303;

  corral_source_split_15303:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb48_dummy;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_15198;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    $i54 := $M.85;
    goto corral_source_split_15199;

  corral_source_split_15199:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_15200;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb85:
    assume $i55 == 1;
    goto corral_source_split_15300;

  corral_source_split_15300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} invoke_work_5();
    goto corral_source_split_15301;

  corral_source_split_15301:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_15194;

  corral_source_split_15194:
    assume {:verifier.code 0} true;
    $i37 := $M.84;
    goto corral_source_split_15195;

  corral_source_split_15195:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_15196;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb55:
    assume $i38 == 1;
    goto corral_source_split_15263;

  corral_source_split_15263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2968} $i39 := __VERIFIER_nondet_int();
    call {:si_unique_call 2969} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i39);
    call {:si_unique_call 2970} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} ldv_stop();
    goto corral_source_split_15298;

  corral_source_split_15298:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb60:
    assume $i41 == 1;
    goto corral_source_split_15265;

  corral_source_split_15265:
    assume {:verifier.code 0} true;
    $i47 := $M.84;
    goto corral_source_split_15266;

  corral_source_split_15266:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_15267;

  corral_source_split_15267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb73:
    assume $i48 == 1;
    goto corral_source_split_15283;

  corral_source_split_15283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} $i49 := usb_init();
    goto SeqInstr_1360, SeqInstr_1361;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  SeqInstr_1362:
    goto corral_source_split_15284;

  corral_source_split_15284:
    assume {:verifier.code 0} true;
    $M.88 := $i49;
    call {:si_unique_call 2975} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i49);
    goto corral_source_split_15285;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    $i50 := $M.88;
    goto corral_source_split_15286;

  corral_source_split_15286:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_15287;

  corral_source_split_15287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i52 := $M.88;
    goto corral_source_split_15292;

  corral_source_split_15292:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_15293;

  corral_source_split_15293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume $i53 == 1;
    goto corral_source_split_15295;

  corral_source_split_15295:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 2977} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_15296;

  corral_source_split_15296:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i51 == 1;
    goto corral_source_split_15289;

  corral_source_split_15289:
    assume {:verifier.code 0} true;
    $M.84 := 3;
    call {:si_unique_call 2976} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_15290;

  corral_source_split_15290:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2973} ldv_check_final_state();
    goto corral_source_split_15281;

  corral_source_split_15281:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1360:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb62;

  $bb63:
    assume $i42 == 1;
    goto corral_source_split_15269;

  corral_source_split_15269:
    assume {:verifier.code 0} true;
    $i43 := $M.84;
    goto corral_source_split_15270;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 2);
    goto corral_source_split_15271;

  corral_source_split_15271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb65:
    assume $i44 == 1;
    goto corral_source_split_15273;

  corral_source_split_15273:
    assume {:verifier.code 0} true;
    $i45 := $M.67;
    goto corral_source_split_15274;

  corral_source_split_15274:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_15275;

  corral_source_split_15275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb67;

  $bb68:
    assume $i46 == 1;
    goto corral_source_split_15277;

  corral_source_split_15277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2971} usb_exit();
    goto SeqInstr_1357, SeqInstr_1358;

  SeqInstr_1358:
    assume assertsPassed;
    goto SeqInstr_1359;

  SeqInstr_1359:
    goto corral_source_split_15278;

  corral_source_split_15278:
    assume {:verifier.code 0} true;
    $M.84 := 3;
    call {:si_unique_call 2972} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_15279;

  corral_source_split_15279:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_1357:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i7 == 1);
    goto corral_source_split_15204;

  corral_source_split_15204:
    assume {:verifier.code 0} true;
    $i35 := $M.83;
    goto corral_source_split_15205;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_15206;

  corral_source_split_15206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb52:
    assume $i36 == 1;
    goto corral_source_split_15260;

  corral_source_split_15260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2967} invoke_work_4();
    goto SeqInstr_1354, SeqInstr_1355;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  SeqInstr_1356:
    goto corral_source_split_15261;

  corral_source_split_15261:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_1354:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i7 == 1;
    goto corral_source_split_15202;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb3:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    goto corral_source_split_15212;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb16:
    assume $i9 == 1;
    goto corral_source_split_15208;

  corral_source_split_15208:
    assume {:verifier.code 0} true;
    $i33 := $M.56;
    goto corral_source_split_15209;

  corral_source_split_15209:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_15210;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb49:
    assume $i34 == 1;
    goto corral_source_split_15257;

  corral_source_split_15257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} ldv_main_exported_7();
    goto SeqInstr_1351, SeqInstr_1352;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  SeqInstr_1353:
    goto corral_source_split_15258;

  corral_source_split_15258:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_1351:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i10 == 1);
    goto corral_source_split_15214;

  corral_source_split_15214:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb18:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb20:
    assume $i11 == 1;
    goto corral_source_split_15216;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    $i12 := $M.79;
    goto corral_source_split_15217;

  corral_source_split_15217:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_15218;

  corral_source_split_15218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb22:
    assume $i13 == 1;
    goto corral_source_split_15220;

  corral_source_split_15220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2955} $i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 2956} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
    call {:si_unique_call 2957} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} ldv_stop();
    goto corral_source_split_15255;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb27:
    assume $i16 == 1;
    goto corral_source_split_15222;

  corral_source_split_15222:
    assume {:verifier.code 0} true;
    $i26 := $M.79;
    goto corral_source_split_15223;

  corral_source_split_15223:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2);
    goto corral_source_split_15224;

  corral_source_split_15224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume $i27 == 1;
    goto corral_source_split_15243;

  corral_source_split_15243:
    assume {:verifier.code 0} true;
    $i28 := $M.87;
    goto corral_source_split_15244;

  corral_source_split_15244:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_15245;

  corral_source_split_15245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb41;

  $bb42:
    assume $i29 == 1;
    goto corral_source_split_15247;

  corral_source_split_15247:
    assume {:verifier.code 0} true;
    $p30 := $M.73;
    goto corral_source_split_15248;

  corral_source_split_15248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} disconnect($p30);
    goto SeqInstr_1348, SeqInstr_1349;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  SeqInstr_1350:
    goto corral_source_split_15249;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2963} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15250;

  corral_source_split_15250:
    assume {:verifier.code 0} true;
    $i31 := $M.67;
    goto corral_source_split_15251;

  corral_source_split_15251:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 1);
    goto corral_source_split_15252;

  corral_source_split_15252:
    assume {:verifier.code 0} true;
    $M.67 := $i32;
    call {:si_unique_call 2964} {:cexpr "ref_cnt"} boogie_si_record_i32($i32);
    goto corral_source_split_15253;

  corral_source_split_15253:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_1348:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb29;

  $bb30:
    assume $i17 == 1;
    goto corral_source_split_15226;

  corral_source_split_15226:
    assume {:verifier.code 0} true;
    $i18 := $M.79;
    goto corral_source_split_15227;

  corral_source_split_15227:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_15228;

  corral_source_split_15228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i19 == 1;
    goto corral_source_split_15230;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    $p20 := $M.73;
    goto corral_source_split_15231;

  corral_source_split_15231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} $i21 := probe($p20, $p1);
    goto SeqInstr_1345, SeqInstr_1346;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  SeqInstr_1347:
    goto corral_source_split_15232;

  corral_source_split_15232:
    assume {:verifier.code 0} true;
    $M.86 := $i21;
    call {:si_unique_call 2959} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i21);
    goto corral_source_split_15233;

  corral_source_split_15233:
    assume {:verifier.code 0} true;
    $i22 := $M.86;
    goto corral_source_split_15234;

  corral_source_split_15234:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_15235;

  corral_source_split_15235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i23 == 1;
    goto corral_source_split_15237;

  corral_source_split_15237:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2960} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_15238;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    $i24 := $M.67;
    goto corral_source_split_15239;

  corral_source_split_15239:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    goto corral_source_split_15240;

  corral_source_split_15240:
    assume {:verifier.code 0} true;
    $M.67 := $i25;
    call {:si_unique_call 2961} {:cexpr "ref_cnt"} boogie_si_record_i32($i25);
    goto corral_source_split_15241;

  corral_source_split_15241:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_1345:
    assume !assertsPassed;
    return;

  $bb48_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2952} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2953} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2954} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 898597);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15305;

  corral_source_split_15305:
    assume {:verifier.code 0} true;
    return;
}



const usb_exit: ref;

axiom usb_exit == $sub.ref(0, 899629);

procedure usb_exit();
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.79, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.13, $M.0, $M.10, $M.40, $M.17, $M.19, $M.21, $M.23, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.29, $M.39;



implementation usb_exit()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i24;
  var $i8: i24;
  var $i9: i24;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2981} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_15307;

  corral_source_split_15307:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_15308;

  corral_source_split_15308:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p1, .str.1);
    goto corral_source_split_15309;

  corral_source_split_15309:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_15310;

  corral_source_split_15310:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p2, .str.284);
    goto corral_source_split_15311;

  corral_source_split_15311:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_15312;

  corral_source_split_15312:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p3, .str.60);
    goto corral_source_split_15313;

  corral_source_split_15313:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_15314;

  corral_source_split_15314:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p4, .str.285);
    goto corral_source_split_15315;

  corral_source_split_15315:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_15316;

  corral_source_split_15316:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_15317;

  corral_source_split_15317:
    assume {:verifier.code 0} true;
    $i7 := $load.i24($M.8, $p6);
    goto corral_source_split_15318;

  corral_source_split_15318:
    assume {:verifier.code 0} true;
    $i8 := $and.i24($i7, $sub.i24(0, 262144));
    goto corral_source_split_15319;

  corral_source_split_15319:
    assume {:verifier.code 0} true;
    $i9 := $or.i24($i8, 1573);
    goto corral_source_split_15320;

  corral_source_split_15320:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p6, $i9);
    goto corral_source_split_15321;

  corral_source_split_15321:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15322;

  corral_source_split_15322:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p10, 1);
    goto corral_source_split_15323;

  corral_source_split_15323:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15324;

  corral_source_split_15324:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.9, $p11);
    goto corral_source_split_15325;

  corral_source_split_15325:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i64($i12);
    goto corral_source_split_15326;

  corral_source_split_15326:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 1);
    goto corral_source_split_15327;

  corral_source_split_15327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 2983} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_15328;

  corral_source_split_15328:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_15329;

  corral_source_split_15329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} ldv_usb_deregister_393(driver);
    goto corral_source_split_15335;

  corral_source_split_15335:
    assume {:verifier.code 0} true;
    $p18 := $M.1;
    goto corral_source_split_15336;

  corral_source_split_15336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2986} ldv_destroy_workqueue_394($p18);
    goto SeqInstr_1363, SeqInstr_1364;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  SeqInstr_1365:
    goto corral_source_split_15337;

  corral_source_split_15337:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1363:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_15331;

  corral_source_split_15331:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.89, driver);
    goto corral_source_split_15332;

  corral_source_split_15332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} __dynamic_pr_debug.ref.ref.ref($p0, .str.285, $p17);
    goto corral_source_split_15333;

  corral_source_split_15333:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_init: ref;

axiom usb_init == $sub.ref(0, 900661);

procedure usb_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.1, $M.79, $M.87, $M.73, $CurrAddr, $M.0, $M.16, $M.18, $M.20, $M.22, $M.13, $M.10, $M.40, $M.17, $M.19, $M.21, $M.23, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.29, $M.39;



implementation usb_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i24;
  var $i40: i24;
  var $i41: i24;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i27: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_15339;

  corral_source_split_15339:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_15340;

  corral_source_split_15340:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p3, .str.1);
    goto corral_source_split_15341;

  corral_source_split_15341:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_15342;

  corral_source_split_15342:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p4, .str.290);
    goto corral_source_split_15343;

  corral_source_split_15343:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_15344;

  corral_source_split_15344:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, .str.60);
    goto corral_source_split_15345;

  corral_source_split_15345:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_15346;

  corral_source_split_15346:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p6, .str.291);
    goto corral_source_split_15347;

  corral_source_split_15347:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_15348;

  corral_source_split_15348:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_15349;

  corral_source_split_15349:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.8, $p8);
    goto corral_source_split_15350;

  corral_source_split_15350:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_15351;

  corral_source_split_15351:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1551);
    goto corral_source_split_15352;

  corral_source_split_15352:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p8, $i11);
    goto corral_source_split_15353;

  corral_source_split_15353:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15354;

  corral_source_split_15354:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p12, 1);
    goto corral_source_split_15355;

  corral_source_split_15355:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15356;

  corral_source_split_15356:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.9, $p13);
    goto corral_source_split_15357;

  corral_source_split_15357:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_15358;

  corral_source_split_15358:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_15359;

  corral_source_split_15359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 2991} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_15360;

  corral_source_split_15360:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_15361;

  corral_source_split_15361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.89, driver);
    goto corral_source_split_15367;

  corral_source_split_15367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} $p21 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.51, 131082, 1, $p1, .str.292, $p20);
    goto corral_source_split_15368;

  corral_source_split_15368:
    assume {:verifier.code 0} true;
    $M.1 := $p21;
    goto corral_source_split_15369;

  corral_source_split_15369:
    assume {:verifier.code 0} true;
    $p22 := $M.1;
    goto corral_source_split_15370;

  corral_source_split_15370:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_15371;

  corral_source_split_15371:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_15372;

  corral_source_split_15372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} $i28 := ldv_usb_register_driver_391(driver, __this_module, .str.1);
    call {:si_unique_call 2996} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_15380;

  corral_source_split_15380:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_15381;

  corral_source_split_15381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_15389;

  corral_source_split_15389:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p33, .str.1);
    goto corral_source_split_15390;

  corral_source_split_15390:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_15391;

  corral_source_split_15391:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p34, .str.290);
    goto corral_source_split_15392;

  corral_source_split_15392:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_15393;

  corral_source_split_15393:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p35, .str.60);
    goto corral_source_split_15394;

  corral_source_split_15394:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_15395;

  corral_source_split_15395:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p36, .str.295);
    goto corral_source_split_15396;

  corral_source_split_15396:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_15397;

  corral_source_split_15397:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_15398;

  corral_source_split_15398:
    assume {:verifier.code 0} true;
    $i39 := $load.i24($M.8, $p38);
    goto corral_source_split_15399;

  corral_source_split_15399:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, $sub.i24(0, 262144));
    goto corral_source_split_15400;

  corral_source_split_15400:
    assume {:verifier.code 0} true;
    $i41 := $or.i24($i40, 1567);
    goto corral_source_split_15401;

  corral_source_split_15401:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p38, $i41);
    goto corral_source_split_15402;

  corral_source_split_15402:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15403;

  corral_source_split_15403:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p42, 1);
    goto corral_source_split_15404;

  corral_source_split_15404:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15405;

  corral_source_split_15405:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.9, $p43);
    goto corral_source_split_15406;

  corral_source_split_15406:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_15407;

  corral_source_split_15407:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_15408;

  corral_source_split_15408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2999} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 3000} {:cexpr "tmp___1"} boogie_si_record_i64($i47);
    goto corral_source_split_15409;

  corral_source_split_15409:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_15410;

  corral_source_split_15410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_15378;

  corral_source_split_15378:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_15412;

  corral_source_split_15412:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.89, driver);
    goto corral_source_split_15413;

  corral_source_split_15413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} __dynamic_pr_debug.ref.ref.ref($p2, .str.295, $p49);
    goto corral_source_split_15414;

  corral_source_split_15414:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_15383;

  corral_source_split_15383:
    assume {:verifier.code 0} true;
    $p30 := $M.1;
    goto corral_source_split_15384;

  corral_source_split_15384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2997} ldv_destroy_workqueue_392($p30);
    goto SeqInstr_1366, SeqInstr_1367;

  SeqInstr_1367:
    assume assertsPassed;
    goto SeqInstr_1368;

  SeqInstr_1368:
    goto corral_source_split_15385;

  corral_source_split_15385:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.89, driver);
    goto corral_source_split_15386;

  corral_source_split_15386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} vslice_dummy_var_156 := printk.ref.ref.i32(.str.294, $p31, $i28);
    goto corral_source_split_15387;

  corral_source_split_15387:
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb6;

  SeqInstr_1366:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_15374;

  corral_source_split_15374:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.89, driver);
    goto corral_source_split_15375;

  corral_source_split_15375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} vslice_dummy_var_155 := printk.ref.ref(.str.293, $p25);
    goto corral_source_split_15376;

  corral_source_split_15376:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_15363;

  corral_source_split_15363:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.89, driver);
    goto corral_source_split_15364;

  corral_source_split_15364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} __dynamic_pr_debug.ref.ref.ref($p0, .str.291, $p19);
    goto corral_source_split_15365;

  corral_source_split_15365:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 901693);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15416;

  corral_source_split_15416:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 902725);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3002} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 3003} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_15418;

  corral_source_split_15418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} $p5 := external_alloc();
    goto corral_source_split_15419;

  corral_source_split_15419:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_15420;

  corral_source_split_15420:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 903757);

procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15422;

  corral_source_split_15422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3005} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 3006} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_15423;

  corral_source_split_15423:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_15425;

  corral_source_split_15425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3007} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 3008} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_15426;

  corral_source_split_15426:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_register_driver_391: ref;

axiom ldv_usb_register_driver_391 == $sub.ref(0, 904789);

procedure ldv_usb_register_driver_391($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.79, $M.87, $M.73, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_391($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15428;

  corral_source_split_15428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3009} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 3010} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_15429;

  corral_source_split_15429:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 3011} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15430;

  corral_source_split_15430:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 3012} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_15431;

  corral_source_split_15431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} ldv_usb_driver_6();
    goto corral_source_split_15432;

  corral_source_split_15432:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_destroy_workqueue_392: ref;

axiom ldv_destroy_workqueue_392 == $sub.ref(0, 905821);

procedure ldv_destroy_workqueue_392($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $M.17, $M.19, $M.21, $M.23, $CurrAddr, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.29, $M.39;



implementation ldv_destroy_workqueue_392($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15434;

  corral_source_split_15434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3014} destroy_workqueue($p0);
    goto corral_source_split_15435;

  corral_source_split_15435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3015} call_and_disable_all_3(2);
    goto SeqInstr_1369, SeqInstr_1370;

  SeqInstr_1370:
    assume assertsPassed;
    goto SeqInstr_1371;

  SeqInstr_1371:
    goto corral_source_split_15436;

  corral_source_split_15436:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1369:
    assume !assertsPassed;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 906853);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15438;

  corral_source_split_15438:
    assume {:verifier.code 0} true;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 907885);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15440;

  corral_source_split_15440:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3016} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 3017} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_15441;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_393: ref;

axiom ldv_usb_deregister_393 == $sub.ref(0, 908917);

procedure ldv_usb_deregister_393($p0: ref);
  free requires assertsPassed;
  modifies $M.79;



implementation ldv_usb_deregister_393($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15443;

  corral_source_split_15443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3018} usb_deregister($p0);
    goto corral_source_split_15444;

  corral_source_split_15444:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 3019} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_15445;

  corral_source_split_15445:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destroy_workqueue_394: ref;

axiom ldv_destroy_workqueue_394 == $sub.ref(0, 909949);

procedure ldv_destroy_workqueue_394($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $M.13, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.40, $M.17, $M.19, $M.21, $M.23, $CurrAddr, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, assertsPassed, $M.33, $M.34, $M.29, $M.39;



implementation ldv_destroy_workqueue_394($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15447;

  corral_source_split_15447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3020} destroy_workqueue($p0);
    goto corral_source_split_15448;

  corral_source_split_15448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3021} call_and_disable_all_3(2);
    goto SeqInstr_1372, SeqInstr_1373;

  SeqInstr_1373:
    assume assertsPassed;
    goto SeqInstr_1374;

  SeqInstr_1374:
    goto corral_source_split_15449;

  corral_source_split_15449:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1372:
    assume !assertsPassed;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 910981);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15451;

  corral_source_split_15451:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 912013);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3022} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_15453;

  corral_source_split_15453:
    assume {:verifier.code 1} true;
    goto corral_source_split_15454;

  corral_source_split_15454:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_15455;

  corral_source_split_15455:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 913045);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 914077);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 915109);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15457;

  corral_source_split_15457:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_1375, SeqInstr_1376;

  SeqInstr_1376:
    assume assertsPassed;
    goto SeqInstr_1377;

  SeqInstr_1377:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_15458;

  corral_source_split_15458:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1375:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 916141);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 917173);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 918205);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 919237);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 920269);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 921301);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 922333);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 923365);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 924397);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 925429);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15460;

  corral_source_split_15460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3023} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 3024} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3025} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15461;

  corral_source_split_15461:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_15462;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15466;

  corral_source_split_15466:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15467;

  corral_source_split_15467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3026} __VERIFIER_assume($i4);
    goto corral_source_split_15468;

  corral_source_split_15468:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15464;

  corral_source_split_15464:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 926461);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 927493);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 928525);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 929557);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 930589);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 931621);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 932653);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 933685);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 934717);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15470;

  corral_source_split_15470:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3027} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3028} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3029} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15471;

  corral_source_split_15471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3030} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3031} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 3032} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_15472;

  corral_source_split_15472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3033} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3034} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 3035} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_15473;

  corral_source_split_15473:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_15474;

  corral_source_split_15474:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15479;

  corral_source_split_15479:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15480;

  corral_source_split_15480:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3036} __VERIFIER_assume($i7);
    goto corral_source_split_15481;

  corral_source_split_15481:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_15482;

  corral_source_split_15482:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15488;

  corral_source_split_15488:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15489;

  corral_source_split_15489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3037} __VERIFIER_assume($i11);
    goto corral_source_split_15490;

  corral_source_split_15490:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15486;

  corral_source_split_15486:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15476;

  corral_source_split_15476:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_15477;

  corral_source_split_15477:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15484;

  corral_source_split_15484:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 935749);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 936781);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 937813);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 938845);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 939877);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 940909);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 941941);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 942973);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 944005);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15492;

  corral_source_split_15492:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3038} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3039} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15493;

  corral_source_split_15493:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15494;

  corral_source_split_15494:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3040} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_15495;

  corral_source_split_15495:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_15496;

  corral_source_split_15496:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_15497;

  corral_source_split_15497:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_15498;

  corral_source_split_15498:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_15505;

  corral_source_split_15505:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_15506;

  corral_source_split_15506:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_15507;

  corral_source_split_15507:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_15508;

  corral_source_split_15508:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_15500;

  corral_source_split_15500:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_15501;

  corral_source_split_15501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3041} __VERIFIER_assume($i10);
    goto corral_source_split_15502;

  corral_source_split_15502:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_15503;

  corral_source_split_15503:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 945037);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15510;

  corral_source_split_15510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3042} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 3043} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3044} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15511;

  corral_source_split_15511:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 946069);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15513;

  corral_source_split_15513:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3045} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 3046} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_15514;

  corral_source_split_15514:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 947101);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 948133);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3047} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3048} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 949165);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 950197);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15516;

  corral_source_split_15516:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_15517;

  corral_source_split_15517:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 951229);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3049} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 3050} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_15519;

  corral_source_split_15519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3051} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3052} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_15520;

  corral_source_split_15520:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_15521;

  corral_source_split_15521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_15525;

  corral_source_split_15525:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_15526;

  corral_source_split_15526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3053} $p6 := malloc($i5);
    goto corral_source_split_15527;

  corral_source_split_15527:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_15528;

  corral_source_split_15528:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.0;
    call {:si_unique_call 3054} cmdloc_dummy_var_87 := $memset.i8(cmdloc_dummy_var_86, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_87;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15530;

  corral_source_split_15530:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15523;

  corral_source_split_15523:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 952261);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 953293);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.1, $M.16, $M.18, $M.20, $M.22, $M.55, $M.17, $M.19, $M.21, $M.23, $M.56, $M.66, $M.67, $M.68, $M.72, $M.69, $M.70, $M.71, $M.74, $M.78, $M.75, $M.76, $M.77, $M.73, $M.79, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.13, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.40, $M.89, $M.37, $M.45, $M.41, $M.44, $M.43, $M.42, $M.46, $M.0, $M.26, $M.32, $M.206;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 3055} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.1 := $0.ref;
    $M.16 := 0;
    call {:si_unique_call 3056} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 3057} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 3058} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 3059} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    call {:si_unique_call 3060} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    call {:si_unique_call 3061} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    call {:si_unique_call 3062} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 3063} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    call {:si_unique_call 3064} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    call {:si_unique_call 3065} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    call {:si_unique_call 3066} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    call {:si_unique_call 3067} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.55 := $0.ref;
    $M.17 := $0.ref;
    $M.19 := $0.ref;
    $M.21 := $0.ref;
    $M.23 := $0.ref;
    $M.56 := 0;
    call {:si_unique_call 3068} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 3069} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 3070} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 3071} {:cexpr "ldv_work_5_0"} boogie_si_record_i32(0);
    $M.72 := $0.ref;
    $M.69 := 0;
    call {:si_unique_call 3072} {:cexpr "ldv_work_5_1"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 3073} {:cexpr "ldv_work_5_2"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 3074} {:cexpr "ldv_work_5_3"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 3075} {:cexpr "ldv_work_4_0"} boogie_si_record_i32(0);
    $M.78 := $0.ref;
    $M.75 := 0;
    call {:si_unique_call 3076} {:cexpr "ldv_work_4_1"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 3077} {:cexpr "ldv_work_4_2"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 3078} {:cexpr "ldv_work_4_3"} boogie_si_record_i32(0);
    $M.73 := $0.ref;
    $M.79 := 0;
    call {:si_unique_call 3079} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    call {:si_unique_call 3080} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    call {:si_unique_call 3081} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    call {:si_unique_call 3082} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 3083} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 3084} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 3085} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 3086} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 3087} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 3088} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.13 := 0;
    call {:si_unique_call 3089} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.105 := $store.i16($M.105, __mod_usb__usb_ids_device_table, 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(24, 1)), 0);
    $M.105 := $store.i16($M.105, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(0, 1)), 0);
    $M.106 := $store.i16($M.106, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(2, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(4, 1)), 0);
    $M.108 := $store.i16($M.108, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(6, 1)), 0);
    $M.109 := $store.i16($M.109, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(10, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(11, 1)), 0);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(12, 1)), 0);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(13, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(14, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i64($M.117, $add.ref($add.ref($add.ref(__mod_usb__usb_ids_device_table, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, usb_ids, 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(2, 1)), 261);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(4, 1)), 5215);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1414);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(4, 1)), 13313);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1414);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(4, 1)), 13314);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(2, 1)), 1414);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(4, 1)), 13319);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(2, 1)), 1414);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(4, 1)), 13321);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(2, 1)), 1947);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(4, 1)), 74);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(2, 1)), 1976);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(4, 1)), 24577);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(2, 1)), 2766);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(4, 1)), 4625);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(2, 1)), 2766);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(4, 1)), $sub.i16(0, 24047));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(2, 1)), 2821);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(4, 1)), 5900);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(2, 1)), 2875);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(4, 1)), 5680);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(2, 1)), 2875);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(4, 1)), 22064);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(2, 1)), 3574);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(4, 1)), $sub.i16(0, 28559));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(2, 1)), 3574);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(4, 1)), $sub.i16(0, 28555));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(2, 1)), 4719);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(4, 1)), $sub.i16(0, 24570));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(2, 1)), 4763);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(4, 1)), 5734);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(2, 1)), 5041);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(4, 1)), 30);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(2, 1)), 5173);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(4, 1)), 1809);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(2, 1)), 5354);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(4, 1)), $sub.i16(0, 21744));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(2, 1)), 5354);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(4, 1)), $sub.i16(0, 21741));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(2, 1)), 5502);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(4, 1)), 12298);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(2, 1)), 5502);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(4, 1)), 12299);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(2, 1)), 5502);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(4, 1)), 12804);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(22, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(2, 1)), 5502);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(4, 1)), 12807);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(23, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(2, 1)), 5952);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(4, 1)), 8192);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(24, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(2, 1)), 26769);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(4, 1)), $sub.i16(0, 22745));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(25, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(2, 1)), 83);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(4, 1)), 21249);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(26, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(2, 1)), 1033);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(4, 1)), 584);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(27, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(2, 1)), 1041);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(4, 1)), 218);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(28, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(2, 1)), 1137);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(4, 1)), 4662);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(29, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(2, 1)), 1137);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(4, 1)), 4663);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(30, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(2, 1)), 1293);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(4, 1)), 28764);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(31, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(2, 1)), 1356);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(4, 1)), 599);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(32, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(2, 1)), 1414);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(4, 1)), 13322);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(33, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(2, 1)), 1414);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(4, 1)), 13327);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(34, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(2, 1)), 1414);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(4, 1)), 13328);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(35, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(2, 1)), 1414);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(4, 1)), 13330);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(36, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(2, 1)), 1414);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(4, 1)), 13331);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(37, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(2, 1)), 1947);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(4, 1)), 98);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(38, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(2, 1)), 1976);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(4, 1)), 24577);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(39, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(2, 1)), 2042);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(4, 1)), 4502);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(40, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(2, 1)), 2106);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(4, 1)), 17669);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(41, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(2, 1)), 2106);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(4, 1)), $sub.i16(0, 6911));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(42, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(2, 1)), 2106);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(4, 1)), $sub.i16(0, 6909));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(43, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(2, 1)), 2106);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(4, 1)), $sub.i16(0, 6906));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(44, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(2, 1)), 2766);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(4, 1)), 4629);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(45, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(2, 1)), 2766);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(4, 1)), $sub.i16(0, 19947));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(46, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(2, 1)), 2821);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(4, 1)), 5915);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(47, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(2, 1)), 2991);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(4, 1)), 289);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(48, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(2, 1)), 3294);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(4, 1)), 26);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(49, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(2, 1)), 3574);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(4, 1)), 54);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(50, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(2, 1)), 4763);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(4, 1)), 5735);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(51, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(2, 1)), 5041);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(4, 1)), 36);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(52, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(2, 1)), 5502);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(4, 1)), 12301);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(53, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(2, 1)), 5506);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(4, 1)), 24579);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(54, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(2, 1)), 8217);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(4, 1)), 21251);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(55, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(2, 1)), 8217);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(4, 1)), $sub.i16(0, 4863));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(56, 32)), $mul.ref(24, 1)), 1);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(2, 1)), 2766);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(4, 1)), 8209);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(57, 32)), $mul.ref(24, 1)), 2);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(0, 1)), 3);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(2, 1)), 2766);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(4, 1)), 8447);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(58, 32)), $mul.ref(24, 1)), 2);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(2, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(4, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(6, 1)), 0);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(8, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(10, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(11, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(12, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(13, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(14, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(15, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i64($M.40, $add.ref($add.ref($add.ref(usb_ids, $mul.ref(0, 1920)), $mul.ref(59, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.ref($M.89, driver, .str.1);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(8, 1)), probe);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(16, 1)), disconnect);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(56, 1)), pre_reset);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(64, 1)), post_reset);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(72, 1)), usb_ids);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 4);
    $M.37 := $store.ref($M.37, rfs, .str.190);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(1, 8)), .str.191);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(2, 8)), .str.192);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(3, 8)), .str.193);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(4, 8)), .str.194);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(5, 8)), .str.195);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(6, 8)), .str.196);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(7, 8)), .str.197);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(8, 8)), .str.198);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(9, 8)), .str.199);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(10, 8)), .str.200);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(11, 8)), .str.201);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(12, 8)), .str.202);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(13, 8)), .str.203);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(14, 8)), .str.204);
    $M.37 := $store.ref($M.37, $add.ref($add.ref(rfs, $mul.ref(0, 128)), $mul.ref(15, 8)), .str.205);
    $M.45 := $store.i32($M.45, uw2453_txgain, 58131);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(1, 4)), 64275);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(2, 4)), 57491);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(3, 4)), 63635);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(4, 4)), 60051);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(5, 4)), 127123);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(6, 4)), 128147);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(7, 4)), 128659);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(8, 4)), 127891);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(9, 4)), 127835);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(10, 4)), 124635);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(11, 4)), 130879);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(12, 4)), 131071);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(13, 4)), 221655);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(14, 4)), 229311);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(15, 4)), 262027);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(16, 4)), 261939);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(17, 4)), 260927);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(uw2453_txgain, $mul.ref(0, 76)), $mul.ref(18, 4)), 262143);
    $M.41 := $store.i16($M.41, uw2453_std_vco_cfg, 26189);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(1, 2)), 24653);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(2, 2)), 26229);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(3, 2)), 25717);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(4, 2)), 26197);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(5, 2)), 25685);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(0, 14)), $mul.ref(6, 2)), 26213);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(0, 2)), 26221);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(1, 2)), 24685);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(2, 2)), 26189);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(3, 2)), 25677);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(4, 2)), 26229);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(5, 2)), 25717);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(1, 14)), $mul.ref(6, 2)), 26197);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(0, 2)), 26205);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(1, 2)), 24669);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(2, 2)), 26221);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(3, 2)), 25709);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(4, 2)), 26189);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(5, 2)), 25677);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(2, 14)), $mul.ref(6, 2)), 26229);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(0, 2)), 26237);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(1, 2)), 24701);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(2, 2)), 26205);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(3, 2)), 25693);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(4, 2)), 26221);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(5, 2)), 25709);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(3, 14)), $mul.ref(6, 2)), 26189);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(0, 2)), 26179);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(1, 2)), 24643);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(2, 2)), 26237);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(3, 2)), 25725);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(4, 2)), 26205);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(5, 2)), 25693);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(4, 14)), $mul.ref(6, 2)), 26221);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(0, 2)), 26211);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(1, 2)), 24675);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(2, 2)), 26179);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(3, 2)), 25667);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(4, 2)), 26237);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(5, 2)), 25725);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(5, 14)), $mul.ref(6, 2)), 26205);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(0, 2)), 26195);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(1, 2)), 24659);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(2, 2)), 26211);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(3, 2)), 25699);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(4, 2)), 26179);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(5, 2)), 25667);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(6, 14)), $mul.ref(6, 2)), 26237);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(0, 2)), 26227);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(1, 2)), 24691);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(2, 2)), 26195);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(3, 2)), 25683);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(4, 2)), 26211);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(5, 2)), 25699);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(7, 14)), $mul.ref(6, 2)), 26179);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(0, 2)), 26187);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(1, 2)), 24651);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(2, 2)), 26227);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(3, 2)), 25715);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(4, 2)), 26195);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(5, 2)), 25683);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(8, 14)), $mul.ref(6, 2)), 26211);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(0, 2)), 26219);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(1, 2)), 24683);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(2, 2)), 26187);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(3, 2)), 25675);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(4, 2)), 26227);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(5, 2)), 25715);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(9, 14)), $mul.ref(6, 2)), 26195);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(0, 2)), 26203);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(1, 2)), 24667);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(2, 2)), 26219);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(3, 2)), 25707);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(4, 2)), 26187);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(5, 2)), 25675);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(uw2453_std_vco_cfg, $mul.ref(0, 154)), $mul.ref(10, 14)), $mul.ref(6, 2)), 26227);
    $M.44 := $store.i16($M.44, uw2453_synth_divide, 2457);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(1, 2)), 2459);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(2, 2)), 2456);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(3, 2)), 2458);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(4, 2)), 2457);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(5, 2)), 2459);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(6, 2)), 2456);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(7, 2)), 2458);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(8, 2)), 2457);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(9, 2)), 2459);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(10, 2)), 2456);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(11, 2)), 2458);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(12, 2)), 2457);
    $M.44 := $store.i16($M.44, $add.ref($add.ref(uw2453_synth_divide, $mul.ref(0, 28)), $mul.ref(13, 2)), 3276);
    $M.43 := $store.i8($M.43, uw2453_std_synth, 71);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(1, 1)), 71);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(2, 1)), 103);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(3, 1)), 103);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(4, 1)), 103);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(5, 1)), 103);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(6, 1)), 87);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(7, 1)), 87);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(8, 1)), 87);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(9, 1)), 87);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(10, 1)), 119);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(11, 1)), 119);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(12, 1)), 119);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(uw2453_std_synth, $mul.ref(0, 14)), $mul.ref(13, 1)), 79);
    $M.42 := $store.i16($M.42, uw2453_autocal_synth, 26695);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(1, 2)), 26695);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(2, 2)), 26727);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(3, 2)), 26727);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(4, 2)), 26727);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(5, 2)), 26727);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(6, 2)), 26711);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(7, 2)), 26711);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(8, 2)), 26711);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(9, 2)), 26711);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(10, 2)), 26743);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(11, 2)), 26743);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(12, 2)), 26743);
    $M.42 := $store.i16($M.42, $add.ref($add.ref(uw2453_autocal_synth, $mul.ref(0, 28)), $mul.ref(13, 2)), 26703);
    $M.40 := $store.i16($M.40, ioreqs_sw, $sub.i16(0, 28160));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(0, 4)), $mul.ref(2, 1)), 20);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(1, 4)), $mul.ref(0, 1)), $sub.i16(0, 28156));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(1, 4)), $mul.ref(2, 1)), 18);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(2, 4)), $mul.ref(0, 1)), $sub.i16(0, 28152));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(2, 4)), $mul.ref(2, 1)), 16);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(3, 4)), $mul.ref(0, 1)), $sub.i16(0, 28520));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(3, 4)), $mul.ref(2, 1)), 56);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(4, 4)), $mul.ref(0, 1)), $sub.i16(0, 28128));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_sw, $mul.ref(0, 20)), $mul.ref(4, 4)), $mul.ref(2, 1)), 223);
    $M.40 := $store.i32($M.40, rv_init2, 15818073);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(rv_init2, $mul.ref(0, 12)), $mul.ref(1, 4)), 15818076);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(rv_init2, $mul.ref(0, 12)), $mul.ref(2, 4)), 15818072);
    $M.40 := $store.i32($M.40, rv_init1, 3969024);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(rv_init1, $mul.ref(0, 16)), $mul.ref(1, 4)), 12582911);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(rv_init1, $mul.ref(0, 16)), $mul.ref(2, 4)), 7340032);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(rv_init1, $mul.ref(0, 16)), $mul.ref(3, 4)), 15818072);
    $M.40 := $store.i32($M.40, std_rv, 5240865);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(1, 4)), 12975100);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(2, 4)), 2223102);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(3, 4)), 11523073);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(4, 4)), 7140714);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(5, 4)), 14696563);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(6, 4)), 1654134);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(7, 4)), 10344516);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(8, 4)), 5242887);
    $M.40 := $store.i32($M.40, $add.ref($add.ref(std_rv, $mul.ref(0, 40)), $mul.ref(9, 4)), 14204944);
    $M.40 := $store.i32($M.40, chan_rv, 650240);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref(1, 4)), 9227464);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(1, 8)), $mul.ref(0, 4)), 650240);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(1, 8)), $mul.ref(1, 4)), 9227480);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(2, 8)), $mul.ref(0, 4)), 650240);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(2, 8)), $mul.ref(1, 4)), 9227456);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(3, 8)), $mul.ref(0, 4)), 650240);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(3, 8)), $mul.ref(1, 4)), 9227472);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(4, 8)), $mul.ref(0, 4)), 388096);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(4, 8)), $mul.ref(1, 4)), 9227464);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(5, 8)), $mul.ref(0, 4)), 388096);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(5, 8)), $mul.ref(1, 4)), 9227480);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(6, 8)), $mul.ref(0, 4)), 388096);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(6, 8)), $mul.ref(1, 4)), 9227456);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(7, 8)), $mul.ref(0, 4)), 388096);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(7, 8)), $mul.ref(1, 4)), 9227472);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(8, 8)), $mul.ref(0, 4)), 912384);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(8, 8)), $mul.ref(1, 4)), 9227464);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(9, 8)), $mul.ref(0, 4)), 912384);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(9, 8)), $mul.ref(1, 4)), 9227480);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(10, 8)), $mul.ref(0, 4)), 912384);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(10, 8)), $mul.ref(1, 4)), 9227456);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(11, 8)), $mul.ref(0, 4)), 912384);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(11, 8)), $mul.ref(1, 4)), 9227472);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(12, 8)), $mul.ref(0, 4)), 257024);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(12, 8)), $mul.ref(1, 4)), 9227464);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(13, 8)), $mul.ref(0, 4)), 257024);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(chan_rv, $mul.ref(0, 112)), $mul.ref(13, 8)), $mul.ref(1, 4)), 8808032);
    $M.46 := $store.i32($M.46, rf2959_table, 1579385);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(0, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(1, 8)), $mul.ref(0, 4)), 1579401);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(1, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(2, 8)), $mul.ref(0, 4)), 1579417);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(2, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(3, 8)), $mul.ref(0, 4)), 1579433);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(3, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(4, 8)), $mul.ref(0, 4)), 1579449);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(4, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(5, 8)), $mul.ref(0, 4)), 1579465);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(5, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(6, 8)), $mul.ref(0, 4)), 1579481);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(6, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(7, 8)), $mul.ref(0, 4)), 1579497);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(7, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(8, 8)), $mul.ref(0, 4)), 1579513);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(8, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(9, 8)), $mul.ref(0, 4)), 1579529);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(9, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(10, 8)), $mul.ref(0, 4)), 1579545);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(10, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(11, 8)), $mul.ref(0, 4)), 1579561);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(11, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(12, 8)), $mul.ref(0, 4)), 1579577);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(12, 8)), $mul.ref(1, 4)), 1992294);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(13, 8)), $mul.ref(0, 4)), 1579616);
    $M.46 := $store.i32($M.46, $add.ref($add.ref($add.ref(rf2959_table, $mul.ref(0, 112)), $mul.ref(13, 8)), $mul.ref(1, 4)), 1835008);
    $M.40 := $store.i32($M.40, zd1211_al2230_table, 259984);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref(1, 4)), 209713);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(0, 4)), 259984);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(1, 4)), 734001);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(0, 4)), 255888);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(1, 4)), 209713);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(0, 4)), 255888);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(1, 4)), 734001);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(0, 4)), 260000);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(1, 4)), 209713);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(0, 4)), 260000);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(1, 4)), 734001);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(0, 4)), 255904);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(1, 4)), 209713);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(0, 4)), 255904);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(1, 4)), 734001);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(0, 4)), 260016);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(1, 4)), 209713);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(0, 4)), 260016);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(1, 4)), 734001);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(0, 4)), 255920);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(1, 4)), 209713);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(0, 4)), 255920);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(1, 4)), 734001);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(0, 4)), 260032);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(1, 4)), 209713);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(0, 4)), 255936);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(1, 4)), 419425);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(2, 4)), 13);
    $M.40 := $store.i32($M.40, zd1211b_al2230_table, 651200);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref(1, 4)), 9227456);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(0, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(0, 4)), 651200);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(1, 4)), 9227472);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(1, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(0, 4)), 649152);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(1, 4)), 9227456);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(2, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(0, 4)), 649152);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(1, 4)), 9227472);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(3, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(0, 4)), 389056);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(1, 4)), 9227456);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(4, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(0, 4)), 389056);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(1, 4)), 9227472);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(5, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(0, 4)), 387008);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(1, 4)), 9227456);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(6, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(0, 4)), 387008);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(1, 4)), 9227472);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(7, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(0, 4)), 913344);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(1, 4)), 9227456);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(8, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(0, 4)), 913344);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(1, 4)), 9227472);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(9, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(0, 4)), 911296);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(1, 4)), 9227456);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(10, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(0, 4)), 911296);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(1, 4)), 9227472);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(11, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(0, 4)), 257984);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(1, 4)), 9227456);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(12, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(0, 4)), 255936);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(1, 4)), 8808032);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(zd1211b_al2230_table, $mul.ref(0, 168)), $mul.ref(13, 12)), $mul.ref(2, 4)), 11534336);
    $M.40 := $store.i16($M.40, ioreqs_init_al2230s, $sub.i16(0, 28484));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(0, 4)), $mul.ref(2, 1)), 30);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(1, 4)), $mul.ref(0, 1)), $sub.i16(0, 28248));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(1, 4)), $mul.ref(2, 1)), 34);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(2, 4)), $mul.ref(0, 1)), $sub.i16(0, 28244));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(2, 4)), $mul.ref(2, 1)), 42);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(3, 4)), $mul.ref(0, 1)), $sub.i16(0, 28236));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(3, 4)), $mul.ref(2, 1)), 19);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(4, 4)), $mul.ref(0, 1)), $sub.i16(0, 28200));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(4, 4)), $mul.ref(2, 1)), 248);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(5, 4)), $mul.ref(0, 1)), $sub.i16(0, 28196));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(5, 4)), $mul.ref(2, 1)), 18);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(6, 4)), $mul.ref(0, 1)), $sub.i16(0, 28184));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(6, 4)), $mul.ref(2, 1)), 224);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(7, 4)), $mul.ref(0, 1)), $sub.i16(0, 28160));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(7, 4)), $mul.ref(2, 1)), 16);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(8, 4)), $mul.ref(0, 1)), $sub.i16(0, 28156));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(8, 4)), $mul.ref(2, 1)), 14);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(9, 4)), $mul.ref(0, 1)), $sub.i16(0, 28152));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(ioreqs_init_al2230s, $mul.ref(0, 40)), $mul.ref(9, 4)), $mul.ref(2, 1)), 16);
    $M.40 := $store.i16($M.40, zd1211b_ioreqs_shared_1, $sub.i16(0, 27712));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(zd1211b_ioreqs_shared_1, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1)), 87);
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(zd1211b_ioreqs_shared_1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1)), $sub.i16(0, 28636));
    $M.40 := $store.i16($M.40, $add.ref($add.ref($add.ref(zd1211b_ioreqs_shared_1, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1)), 224);
    $M.0 := $store.i32($M.0, zd_channels, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(4, 1)), 2412);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(4, 1)), 2417);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(4, 1)), 2422);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(4, 1)), 2427);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(6, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(4, 1)), 2432);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(6, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(4, 1)), 2437);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(4, 1)), 2442);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(6, 1)), 7);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(4, 1)), 2447);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(6, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(4, 1)), 2452);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(6, 1)), 9);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(4, 1)), 2457);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(6, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(4, 1)), 2462);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(6, 1)), 11);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(4, 1)), 2467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(6, 1)), 12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(4, 1)), 2472);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(6, 1)), 13);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(4, 1)), 2484);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(6, 1)), 14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, zd_rates, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(4, 1)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(8, 1)), 33);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(8, 1)), 34);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(8, 1)), 35);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(4, 1)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(6, 1)), 27);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(4, 1)), 90);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(6, 1)), 31);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(4, 1)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(6, 1)), 26);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(4, 1)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(6, 1)), 30);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(4, 1)), 240);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(6, 1)), 25);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(4, 1)), 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(6, 1)), 29);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(4, 1)), 480);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(6, 1)), 24);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(4, 1)), 540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(6, 1)), 28);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(8, 1)), 0);
    $M.26 := $store.i32($M.26, zd_retry_rates, 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(0, 1)), 2);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(1, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(0, 1)), 3);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 2);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(2, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(0, 1)), 4);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 3);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 2);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(3, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(0, 1)), 5);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 4);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 3);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 2);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(4, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(0, 1)), 6);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 5);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 4);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 3);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 2);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(5, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(0, 1)), 5);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 6);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 3);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 2);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(6, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(0, 1)), 6);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 7);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 6);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 3);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 2);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(7, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(0, 1)), 6);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 8);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 6);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 3);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 2);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(8, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(0, 1)), 7);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 9);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 8);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 6);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 3);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 2);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(9, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(0, 1)), 8);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 10);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 9);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 8);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 6);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 3);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 2);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(10, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(0, 1)), 9);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(0, 4)), 11);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(1, 4)), 10);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(2, 4)), 9);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(3, 4)), 8);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(4, 4)), 6);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(5, 4)), 3);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(6, 4)), 2);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(7, 4)), 1);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(8, 4)), 0);
    $M.26 := $store.i32($M.26, $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(11, 44)), $mul.ref(4, 1)), $mul.ref(9, 4)), 0);
    $M.32 := $store.i32($M.32, reg_alpha2_map, 16);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 85);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 83);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1)), 32);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 67);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 65);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1)), 48);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 68);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 69);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1)), 65);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 74);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 80);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1)), 64);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 74);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 80);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1)), 73);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 74);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 80);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1)), 49);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 69);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 83);
    $M.32 := $store.i32($M.32, $add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1)), 50);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(4, 1)), $mul.ref(0, 1)), 70);
    $M.32 := $store.i8($M.32, $add.ref($add.ref($add.ref($add.ref(reg_alpha2_map, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(4, 1)), $mul.ref(1, 1)), 82);
    $M.206 := $store.i8($M.206, .str.131, 37);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(.str.131, $mul.ref(0, 6)), $mul.ref(1, 1)), 48);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(.str.131, $mul.ref(0, 6)), $mul.ref(2, 1)), 52);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(.str.131, $mul.ref(0, 6)), $mul.ref(3, 1)), 104);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(.str.131, $mul.ref(0, 6)), $mul.ref(4, 1)), 120);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(.str.131, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    call {:si_unique_call 3090} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 954325);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 955357);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.40, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i57 := $eq.ref(post_reset, $p0);
    assume {:branchcond $i57} true;
    goto $bb20, $bb39;

  $bb39:
    assume !($i57 == 1);
    $i56 := $eq.ref(pre_reset, $p0);
    assume true;
    goto $bb19, $bb38;

  $bb38:
    assume !($i56 == 1);
    $i55 := $eq.ref(rf2959_switch_radio_off, $p0);
    assume true;
    goto $bb18, $bb37;

  $bb37:
    assume !($i55 == 1);
    $i54 := $eq.ref(rf2959_switch_radio_on, $p0);
    assume {:branchcond $i54} true;
    goto $bb17, $bb36;

  $bb36:
    assume !($i54 == 1);
    $i53 := $eq.ref(rf2959_init_hw, $p0);
    assume true;
    goto $bb16, $bb35;

  $bb35:
    assume !($i53 == 1);
    $i52 := $eq.ref(zd1211_al2230_switch_radio_on, $p0);
    assume true;
    goto $bb15, $bb34;

  $bb34:
    assume !($i52 == 1);
    $i51 := $eq.ref(zd1211_al2230_init_hw, $p0);
    assume true;
    goto $bb14, $bb33;

  $bb33:
    assume !($i51 == 1);
    $i50 := $eq.ref(zd1211b_al2230_switch_radio_on, $p0);
    assume {:branchcond $i50} true;
    goto $bb13, $bb32;

  $bb32:
    assume !($i50 == 1);
    $i49 := $eq.ref(zd1211b_al2230_init_hw, $p0);
    assume true;
    goto $bb12, $bb31;

  $bb31:
    assume !($i49 == 1);
    $i48 := $eq.ref(al2230_switch_radio_off, $p0);
    assume true;
    goto $bb11, $bb30;

  $bb30:
    assume !($i48 == 1);
    $i47 := $eq.ref(al7230b_switch_radio_off, $p0);
    assume true;
    goto $bb10, $bb29;

  $bb29:
    assume !($i47 == 1);
    $i46 := $eq.ref(zd1211_al7230b_switch_radio_on, $p0);
    assume true;
    goto $bb9, $bb28;

  $bb28:
    assume !($i46 == 1);
    $i45 := $eq.ref(zd1211_al7230b_init_hw, $p0);
    assume {:branchcond $i45} true;
    goto $bb8, $bb27;

  $bb27:
    assume !($i45 == 1);
    $i44 := $eq.ref(zd1211b_al7230b_switch_radio_on, $p0);
    assume true;
    goto $bb7, $bb26;

  $bb26:
    assume !($i44 == 1);
    $i43 := $eq.ref(zd1211b_al7230b_init_hw, $p0);
    assume true;
    goto $bb6, $bb25;

  $bb25:
    assume !($i43 == 1);
    $i42 := $eq.ref(uw2453_switch_radio_off, $p0);
    assume true;
    goto $bb5, $bb24;

  $bb24:
    assume !($i42 == 1);
    $i41 := $eq.ref(uw2453_switch_radio_on, $p0);
    assume true;
    goto $bb4, $bb23;

  $bb23:
    assume !($i41 == 1);
    $i40 := $eq.ref(uw2453_init_hw, $p0);
    assume true;
    goto $bb3, $bb22;

  $bb22:
    assume !($i40 == 1);
    $i39 := $eq.ref(zd_op_start, $p0);
    assume true;
    goto $bb2, $bb21;

  $bb21:
    assume !($i39 == 1);
    assume false;
    return;

  $bb2:
    assume $i39 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3091} $i2 := zd_op_start($p1);
    goto SeqInstr_1378, SeqInstr_1379;

  SeqInstr_1379:
    assume assertsPassed;
    goto SeqInstr_1380;

  SeqInstr_1380:
    $r := $i2;
    return;

  SeqInstr_1378:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i40 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3092} $i4 := uw2453_init_hw($p3);
    goto SeqInstr_1381, SeqInstr_1382;

  SeqInstr_1382:
    assume assertsPassed;
    goto SeqInstr_1383;

  SeqInstr_1383:
    $r := $i4;
    return;

  SeqInstr_1381:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i41 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3093} $i6 := uw2453_switch_radio_on($p5);
    goto SeqInstr_1384, SeqInstr_1385;

  SeqInstr_1385:
    assume assertsPassed;
    goto SeqInstr_1386;

  SeqInstr_1386:
    $r := $i6;
    return;

  SeqInstr_1384:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i42 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3094} $i8 := uw2453_switch_radio_off($p7);
    goto SeqInstr_1387, SeqInstr_1388;

  SeqInstr_1388:
    assume assertsPassed;
    goto SeqInstr_1389;

  SeqInstr_1389:
    $r := $i8;
    return;

  SeqInstr_1387:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i43 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3095} $i10 := zd1211b_al7230b_init_hw($p9);
    goto SeqInstr_1390, SeqInstr_1391;

  SeqInstr_1391:
    assume assertsPassed;
    goto SeqInstr_1392;

  SeqInstr_1392:
    $r := $i10;
    return;

  SeqInstr_1390:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i44 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3096} $i12 := zd1211b_al7230b_switch_radio_on($p11);
    goto SeqInstr_1393, SeqInstr_1394;

  SeqInstr_1394:
    assume assertsPassed;
    goto SeqInstr_1395;

  SeqInstr_1395:
    $r := $i12;
    return;

  SeqInstr_1393:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i45 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3097} $i14 := zd1211_al7230b_init_hw($p13);
    goto SeqInstr_1396, SeqInstr_1397;

  SeqInstr_1397:
    assume assertsPassed;
    goto SeqInstr_1398;

  SeqInstr_1398:
    $r := $i14;
    return;

  SeqInstr_1396:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i46 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3098} $i16 := zd1211_al7230b_switch_radio_on($p15);
    goto SeqInstr_1399, SeqInstr_1400;

  SeqInstr_1400:
    assume assertsPassed;
    goto SeqInstr_1401;

  SeqInstr_1401:
    $r := $i16;
    return;

  SeqInstr_1399:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i47 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3099} $i18 := al7230b_switch_radio_off($p17);
    goto SeqInstr_1402, SeqInstr_1403;

  SeqInstr_1403:
    assume assertsPassed;
    goto SeqInstr_1404;

  SeqInstr_1404:
    $r := $i18;
    return;

  SeqInstr_1402:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i48 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3100} $i20 := al2230_switch_radio_off($p19);
    goto SeqInstr_1405, SeqInstr_1406;

  SeqInstr_1406:
    assume assertsPassed;
    goto SeqInstr_1407;

  SeqInstr_1407:
    $r := $i20;
    return;

  SeqInstr_1405:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i49 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3101} $i22 := zd1211b_al2230_init_hw($p21);
    goto SeqInstr_1408, SeqInstr_1409;

  SeqInstr_1409:
    assume assertsPassed;
    goto SeqInstr_1410;

  SeqInstr_1410:
    $r := $i22;
    return;

  SeqInstr_1408:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i50 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3102} $i24 := zd1211b_al2230_switch_radio_on($p23);
    goto SeqInstr_1411, SeqInstr_1412;

  SeqInstr_1412:
    assume assertsPassed;
    goto SeqInstr_1413;

  SeqInstr_1413:
    $r := $i24;
    return;

  SeqInstr_1411:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i51 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3103} $i26 := zd1211_al2230_init_hw($p25);
    goto SeqInstr_1414, SeqInstr_1415;

  SeqInstr_1415:
    assume assertsPassed;
    goto SeqInstr_1416;

  SeqInstr_1416:
    $r := $i26;
    return;

  SeqInstr_1414:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i52 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3104} $i28 := zd1211_al2230_switch_radio_on($p27);
    goto SeqInstr_1417, SeqInstr_1418;

  SeqInstr_1418:
    assume assertsPassed;
    goto SeqInstr_1419;

  SeqInstr_1419:
    $r := $i28;
    return;

  SeqInstr_1417:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i53 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3105} $i30 := rf2959_init_hw($p29);
    goto SeqInstr_1420, SeqInstr_1421;

  SeqInstr_1421:
    assume assertsPassed;
    goto SeqInstr_1422;

  SeqInstr_1422:
    $r := $i30;
    return;

  SeqInstr_1420:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i54 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3106} $i32 := rf2959_switch_radio_on($p31);
    goto SeqInstr_1423, SeqInstr_1424;

  SeqInstr_1424:
    assume assertsPassed;
    goto SeqInstr_1425;

  SeqInstr_1425:
    $r := $i32;
    return;

  SeqInstr_1423:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i55 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3107} $i34 := rf2959_switch_radio_off($p33);
    goto SeqInstr_1426, SeqInstr_1427;

  SeqInstr_1427:
    assume assertsPassed;
    goto SeqInstr_1428;

  SeqInstr_1428:
    $r := $i34;
    return;

  SeqInstr_1426:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i56 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3108} $i36 := pre_reset($p35);
    goto SeqInstr_1429, SeqInstr_1430;

  SeqInstr_1430:
    assume assertsPassed;
    goto SeqInstr_1431;

  SeqInstr_1431:
    $r := $i36;
    return;

  SeqInstr_1429:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i57 == 1;
    $p37 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3109} $i38 := post_reset($p37);
    goto SeqInstr_1432, SeqInstr_1433;

  SeqInstr_1433:
    assume assertsPassed;
    goto SeqInstr_1434;

  SeqInstr_1434:
    $r := $i38;
    return;

  SeqInstr_1432:
    assume !assertsPassed;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 956389);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.10, $M.13, $CurrAddr, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i8) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(rf2959_set_channel, $p0);
    assume {:branchcond $i20} true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i20 == 1);
    $i19 := $eq.ref(zd1211_al2230_set_channel, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i19 == 1);
    $i18 := $eq.ref(zd1211b_al2230_set_channel, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i18 == 1);
    $i17 := $eq.ref(zd1211_al7230b_set_channel, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i17 == 1);
    $i16 := $eq.ref(zd1211b_al7230b_patch_6m, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i16 == 1);
    $i15 := $eq.ref(zd1211b_al7230b_set_channel, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i15 == 1);
    $i14 := $eq.ref(zd_rf_generic_patch_6m, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i14 == 1);
    $i13 := $eq.ref(uw2453_set_channel, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i13 == 1);
    $i12 := $eq.ref(zd_op_config, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i8.i32(arg1);
    call {:si_unique_call 3110} $i3 := zd_op_config($p1, $i2);
    goto SeqInstr_1435, SeqInstr_1436;

  SeqInstr_1436:
    assume assertsPassed;
    goto SeqInstr_1437;

  SeqInstr_1437:
    $r := $i3;
    return;

  SeqInstr_1435:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    call {:si_unique_call 3111} $i4 := uw2453_set_channel(arg, arg1);
    goto SeqInstr_1438, SeqInstr_1439;

  SeqInstr_1439:
    assume assertsPassed;
    goto SeqInstr_1440;

  SeqInstr_1440:
    $r := $i4;
    return;

  SeqInstr_1438:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    call {:si_unique_call 3112} $i5 := zd_rf_generic_patch_6m(arg, arg1);
    goto SeqInstr_1441, SeqInstr_1442;

  SeqInstr_1442:
    assume assertsPassed;
    goto SeqInstr_1443;

  SeqInstr_1443:
    $r := $i5;
    return;

  SeqInstr_1441:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    call {:si_unique_call 3113} $i6 := zd1211b_al7230b_set_channel(arg, arg1);
    goto SeqInstr_1444, SeqInstr_1445;

  SeqInstr_1445:
    assume assertsPassed;
    goto SeqInstr_1446;

  SeqInstr_1446:
    $r := $i6;
    return;

  SeqInstr_1444:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    call {:si_unique_call 3114} $i7 := zd1211b_al7230b_patch_6m(arg, arg1);
    goto SeqInstr_1447, SeqInstr_1448;

  SeqInstr_1448:
    assume assertsPassed;
    goto SeqInstr_1449;

  SeqInstr_1449:
    $r := $i7;
    return;

  SeqInstr_1447:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    call {:si_unique_call 3115} $i8 := zd1211_al7230b_set_channel(arg, arg1);
    goto SeqInstr_1450, SeqInstr_1451;

  SeqInstr_1451:
    assume assertsPassed;
    goto SeqInstr_1452;

  SeqInstr_1452:
    $r := $i8;
    return;

  SeqInstr_1450:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i18 == 1;
    call {:si_unique_call 3116} $i9 := zd1211b_al2230_set_channel(arg, arg1);
    goto SeqInstr_1453, SeqInstr_1454;

  SeqInstr_1454:
    assume assertsPassed;
    goto SeqInstr_1455;

  SeqInstr_1455:
    $r := $i9;
    return;

  SeqInstr_1453:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i19 == 1;
    call {:si_unique_call 3117} $i10 := zd1211_al2230_set_channel(arg, arg1);
    goto SeqInstr_1456, SeqInstr_1457;

  SeqInstr_1457:
    assume assertsPassed;
    goto SeqInstr_1458;

  SeqInstr_1458:
    $r := $i10;
    return;

  SeqInstr_1456:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i20 == 1;
    call {:si_unique_call 3118} $i11 := rf2959_set_channel(arg, arg1);
    goto SeqInstr_1459, SeqInstr_1460;

  SeqInstr_1460:
    assume assertsPassed;
    goto SeqInstr_1461;

  SeqInstr_1461:
    $r := $i11;
    return;

  SeqInstr_1459:
    assume !assertsPassed;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 957421);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 958453);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.40, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i41 := $eq.ref(post_reset, $p0);
    assume true;
    goto $bb20, $bb39;

  $bb39:
    assume !($i41 == 1);
    $i40 := $eq.ref(pre_reset, $p0);
    assume true;
    goto $bb19, $bb38;

  $bb38:
    assume !($i40 == 1);
    $i39 := $eq.ref(rf2959_switch_radio_off, $p0);
    assume true;
    goto $bb18, $bb37;

  $bb37:
    assume !($i39 == 1);
    $i38 := $eq.ref(rf2959_switch_radio_on, $p0);
    assume true;
    goto $bb17, $bb36;

  $bb36:
    assume !($i38 == 1);
    $i37 := $eq.ref(rf2959_init_hw, $p0);
    assume true;
    goto $bb16, $bb35;

  $bb35:
    assume !($i37 == 1);
    $i36 := $eq.ref(zd1211_al2230_switch_radio_on, $p0);
    assume true;
    goto $bb15, $bb34;

  $bb34:
    assume !($i36 == 1);
    $i35 := $eq.ref(zd1211_al2230_init_hw, $p0);
    assume {:branchcond $i35} true;
    goto $bb14, $bb33;

  $bb33:
    assume !($i35 == 1);
    $i34 := $eq.ref(zd1211b_al2230_switch_radio_on, $p0);
    assume true;
    goto $bb13, $bb32;

  $bb32:
    assume !($i34 == 1);
    $i33 := $eq.ref(zd1211b_al2230_init_hw, $p0);
    assume true;
    goto $bb12, $bb31;

  $bb31:
    assume !($i33 == 1);
    $i32 := $eq.ref(al2230_switch_radio_off, $p0);
    assume true;
    goto $bb11, $bb30;

  $bb30:
    assume !($i32 == 1);
    $i31 := $eq.ref(al7230b_switch_radio_off, $p0);
    assume true;
    goto $bb10, $bb29;

  $bb29:
    assume !($i31 == 1);
    $i30 := $eq.ref(zd1211_al7230b_switch_radio_on, $p0);
    assume true;
    goto $bb9, $bb28;

  $bb28:
    assume !($i30 == 1);
    $i29 := $eq.ref(zd1211_al7230b_init_hw, $p0);
    assume true;
    goto $bb8, $bb27;

  $bb27:
    assume !($i29 == 1);
    $i28 := $eq.ref(zd1211b_al7230b_switch_radio_on, $p0);
    assume true;
    goto $bb7, $bb26;

  $bb26:
    assume !($i28 == 1);
    $i27 := $eq.ref(zd1211b_al7230b_init_hw, $p0);
    assume true;
    goto $bb6, $bb25;

  $bb25:
    assume !($i27 == 1);
    $i26 := $eq.ref(uw2453_switch_radio_off, $p0);
    assume true;
    goto $bb5, $bb24;

  $bb24:
    assume !($i26 == 1);
    $i25 := $eq.ref(uw2453_switch_radio_on, $p0);
    assume true;
    goto $bb4, $bb23;

  $bb23:
    assume !($i25 == 1);
    $i24 := $eq.ref(uw2453_init_hw, $p0);
    assume {:branchcond $i24} true;
    goto $bb3, $bb22;

  $bb22:
    assume !($i24 == 1);
    $i23 := $eq.ref(zd_op_start, $p0);
    assume true;
    goto $bb2, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume false;
    return;

  $bb2:
    assume $i23 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3119} $i2 := zd_op_start($p1);
    goto SeqInstr_1462, SeqInstr_1463;

  SeqInstr_1463:
    assume assertsPassed;
    goto SeqInstr_1464;

  SeqInstr_1464:
    $r := $i2;
    return;

  SeqInstr_1462:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i24 == 1;
    call {:si_unique_call 3120} $i3 := uw2453_init_hw(arg);
    goto SeqInstr_1465, SeqInstr_1466;

  SeqInstr_1466:
    assume assertsPassed;
    goto SeqInstr_1467;

  SeqInstr_1467:
    $r := $i3;
    return;

  SeqInstr_1465:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i25 == 1;
    call {:si_unique_call 3121} $i4 := uw2453_switch_radio_on(arg);
    goto SeqInstr_1468, SeqInstr_1469;

  SeqInstr_1469:
    assume assertsPassed;
    goto SeqInstr_1470;

  SeqInstr_1470:
    $r := $i4;
    return;

  SeqInstr_1468:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    call {:si_unique_call 3122} $i5 := uw2453_switch_radio_off(arg);
    goto SeqInstr_1471, SeqInstr_1472;

  SeqInstr_1472:
    assume assertsPassed;
    goto SeqInstr_1473;

  SeqInstr_1473:
    $r := $i5;
    return;

  SeqInstr_1471:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i27 == 1;
    call {:si_unique_call 3123} $i6 := zd1211b_al7230b_init_hw(arg);
    goto SeqInstr_1474, SeqInstr_1475;

  SeqInstr_1475:
    assume assertsPassed;
    goto SeqInstr_1476;

  SeqInstr_1476:
    $r := $i6;
    return;

  SeqInstr_1474:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i28 == 1;
    call {:si_unique_call 3124} $i7 := zd1211b_al7230b_switch_radio_on(arg);
    goto SeqInstr_1477, SeqInstr_1478;

  SeqInstr_1478:
    assume assertsPassed;
    goto SeqInstr_1479;

  SeqInstr_1479:
    $r := $i7;
    return;

  SeqInstr_1477:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i29 == 1;
    call {:si_unique_call 3125} $i8 := zd1211_al7230b_init_hw(arg);
    goto SeqInstr_1480, SeqInstr_1481;

  SeqInstr_1481:
    assume assertsPassed;
    goto SeqInstr_1482;

  SeqInstr_1482:
    $r := $i8;
    return;

  SeqInstr_1480:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i30 == 1;
    call {:si_unique_call 3126} $i9 := zd1211_al7230b_switch_radio_on(arg);
    goto SeqInstr_1483, SeqInstr_1484;

  SeqInstr_1484:
    assume assertsPassed;
    goto SeqInstr_1485;

  SeqInstr_1485:
    $r := $i9;
    return;

  SeqInstr_1483:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i31 == 1;
    call {:si_unique_call 3127} $i10 := al7230b_switch_radio_off(arg);
    goto SeqInstr_1486, SeqInstr_1487;

  SeqInstr_1487:
    assume assertsPassed;
    goto SeqInstr_1488;

  SeqInstr_1488:
    $r := $i10;
    return;

  SeqInstr_1486:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i32 == 1;
    call {:si_unique_call 3128} $i11 := al2230_switch_radio_off(arg);
    goto SeqInstr_1489, SeqInstr_1490;

  SeqInstr_1490:
    assume assertsPassed;
    goto SeqInstr_1491;

  SeqInstr_1491:
    $r := $i11;
    return;

  SeqInstr_1489:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i33 == 1;
    call {:si_unique_call 3129} $i12 := zd1211b_al2230_init_hw(arg);
    goto SeqInstr_1492, SeqInstr_1493;

  SeqInstr_1493:
    assume assertsPassed;
    goto SeqInstr_1494;

  SeqInstr_1494:
    $r := $i12;
    return;

  SeqInstr_1492:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i34 == 1;
    call {:si_unique_call 3130} $i13 := zd1211b_al2230_switch_radio_on(arg);
    goto SeqInstr_1495, SeqInstr_1496;

  SeqInstr_1496:
    assume assertsPassed;
    goto SeqInstr_1497;

  SeqInstr_1497:
    $r := $i13;
    return;

  SeqInstr_1495:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i35 == 1;
    call {:si_unique_call 3131} $i14 := zd1211_al2230_init_hw(arg);
    goto SeqInstr_1498, SeqInstr_1499;

  SeqInstr_1499:
    assume assertsPassed;
    goto SeqInstr_1500;

  SeqInstr_1500:
    $r := $i14;
    return;

  SeqInstr_1498:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i36 == 1;
    call {:si_unique_call 3132} $i15 := zd1211_al2230_switch_radio_on(arg);
    goto SeqInstr_1501, SeqInstr_1502;

  SeqInstr_1502:
    assume assertsPassed;
    goto SeqInstr_1503;

  SeqInstr_1503:
    $r := $i15;
    return;

  SeqInstr_1501:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i37 == 1;
    call {:si_unique_call 3133} $i16 := rf2959_init_hw(arg);
    goto SeqInstr_1504, SeqInstr_1505;

  SeqInstr_1505:
    assume assertsPassed;
    goto SeqInstr_1506;

  SeqInstr_1506:
    $r := $i16;
    return;

  SeqInstr_1504:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i38 == 1;
    call {:si_unique_call 3134} $i17 := rf2959_switch_radio_on(arg);
    goto SeqInstr_1507, SeqInstr_1508;

  SeqInstr_1508:
    assume assertsPassed;
    goto SeqInstr_1509;

  SeqInstr_1509:
    $r := $i17;
    return;

  SeqInstr_1507:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i39 == 1;
    call {:si_unique_call 3135} $i18 := rf2959_switch_radio_off(arg);
    goto SeqInstr_1510, SeqInstr_1511;

  SeqInstr_1511:
    assume assertsPassed;
    goto SeqInstr_1512;

  SeqInstr_1512:
    $r := $i18;
    return;

  SeqInstr_1510:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i40 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3136} $i20 := pre_reset($p19);
    goto SeqInstr_1513, SeqInstr_1514;

  SeqInstr_1514:
    assume assertsPassed;
    goto SeqInstr_1515;

  SeqInstr_1515:
    $r := $i20;
    return;

  SeqInstr_1513:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i41 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3137} $i22 := post_reset($p21);
    goto SeqInstr_1516, SeqInstr_1517;

  SeqInstr_1517:
    assume assertsPassed;
    goto SeqInstr_1518;

  SeqInstr_1518:
    $r := $i22;
    return;

  SeqInstr_1516:
    assume !assertsPassed;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 959485);

procedure devirtbounce.5(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 960517);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 961549);

procedure devirtbounce.7(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.13, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.16, $M.18, $M.20, $M.22, $M.56, $M.17, $M.19, $M.21, $M.23, $M.10, $M.40, $CurrAddr, assertsPassed, $M.2, $M.3, $M.47, $M.28, $M.33, $M.34, $M.29, $M.39;



implementation devirtbounce.7(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i23 := $eq.ref(zd_tx_watchdog_handler, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i23 == 1);
    $i22 := $eq.ref(zd_rx_idle_timer_handler, $p0);
    assume {:branchcond $i22} true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i22 == 1);
    $i21 := $eq.ref(beacon_watchdog_handler, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(zd_process_intr, $p0);
    assume {:branchcond $i20} true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(disconnect, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(tx_urb_complete, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i18 == 1);
    $i17 := $eq.ref(uw2453_clear, $p0);
    assume true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(int_urb_complete, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(rx_urb_complete, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(link_led_handler, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(iowrite16v_urb_complete, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(zd_op_stop, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3138} zd_op_stop($p1);
    goto SeqInstr_1519, SeqInstr_1520;

  SeqInstr_1520:
    assume assertsPassed;
    goto SeqInstr_1521;

  SeqInstr_1521:
    return;

  SeqInstr_1519:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3139} iowrite16v_urb_complete($p2);
    return;

  $bb4:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3140} link_led_handler($p3);
    goto SeqInstr_1522, SeqInstr_1523;

  SeqInstr_1523:
    assume assertsPassed;
    goto SeqInstr_1524;

  SeqInstr_1524:
    return;

  SeqInstr_1522:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3141} rx_urb_complete($p4);
    goto SeqInstr_1525, SeqInstr_1526;

  SeqInstr_1526:
    assume assertsPassed;
    goto SeqInstr_1527;

  SeqInstr_1527:
    return;

  SeqInstr_1525:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3142} int_urb_complete($p5);
    goto SeqInstr_1528, SeqInstr_1529;

  SeqInstr_1529:
    assume assertsPassed;
    goto SeqInstr_1530;

  SeqInstr_1530:
    return;

  SeqInstr_1528:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    call {:si_unique_call 3143} uw2453_clear(arg);
    return;

  $bb8:
    assume $i18 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3144} tx_urb_complete($p6);
    goto SeqInstr_1531, SeqInstr_1532;

  SeqInstr_1532:
    assume assertsPassed;
    goto SeqInstr_1533;

  SeqInstr_1533:
    return;

  SeqInstr_1531:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3145} disconnect($p7);
    goto SeqInstr_1534, SeqInstr_1535;

  SeqInstr_1535:
    assume assertsPassed;
    goto SeqInstr_1536;

  SeqInstr_1536:
    return;

  SeqInstr_1534:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i20 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3146} zd_process_intr($p8);
    goto SeqInstr_1537, SeqInstr_1538;

  SeqInstr_1538:
    assume assertsPassed;
    goto SeqInstr_1539;

  SeqInstr_1539:
    return;

  SeqInstr_1537:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3147} beacon_watchdog_handler($p9);
    goto SeqInstr_1540, SeqInstr_1541;

  SeqInstr_1541:
    assume assertsPassed;
    goto SeqInstr_1542;

  SeqInstr_1542:
    return;

  SeqInstr_1540:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i22 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3148} zd_rx_idle_timer_handler($p10);
    goto SeqInstr_1543, SeqInstr_1544;

  SeqInstr_1544:
    assume assertsPassed;
    goto SeqInstr_1545;

  SeqInstr_1545:
    return;

  SeqInstr_1543:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i23 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3149} zd_tx_watchdog_handler($p11);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: i8;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.1, $M.16, $M.18, $M.20, $M.22, $M.55, $M.17, $M.19, $M.21, $M.23, $M.56, $M.66, $M.67, $M.68, $M.72, $M.69, $M.70, $M.71, $M.74, $M.78, $M.75, $M.76, $M.77, $M.73, $M.79, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.13, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.40, $M.89, $M.37, $M.45, $M.41, $M.44, $M.43, $M.42, $M.46, $M.0, $M.26, $M.32, $M.206, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3150} __SMACK_static_init();
    call {:si_unique_call 3151} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.79, $M.16, $M.18, $M.20, $M.22, $M.56, $M.74, $M.75, $M.76, $M.77, $M.83, $M.67, $M.84, $M.68, $M.69, $M.70, $M.71, $M.85, $M.0, $M.86, $M.13, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.57, $M.66, $M.88, $M.1, $M.55, $M.17, $M.19, $M.21, $M.23, $M.72, $M.78, $M.73, $M.87, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.40, $M.89, $M.37, $M.45, $M.41, $M.44, $M.43, $M.42, $M.46, $M.26, $M.32, $M.206, $CurrAddr, $M.29, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.2, $M.3, $M.28, $M.47, $M.33, $M.34, $M.10, $M.39;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation zd_op_stop_loop_$bb4(in_$p3: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$p11 := in_$p12, in_$i13, in_$i14, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p12;
    goto $bb6_dummy;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_118;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_117;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} out_$p12 := skb_dequeue(in_$p3);
    goto corral_source_split_116;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} dev_kfree_skb_any(out_$p11);
    goto corral_source_split_115;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$p11 := zd_op_stop_loop_$bb4(in_$p3, out_$p12, out_$i13, out_$i14, out_$p11);
    return;

  exit:
    return;
}



procedure zd_op_stop_loop_$bb4(in_$p3: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p11: ref);



implementation zd_op_prepare_multicast_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$i9: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref)
{

  entry:
    out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11 := in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_299;

  $bb6:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p23;
    goto $bb6_dummy;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i9);
    goto corral_source_split_314;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} zd_mc_add_addr(in_$p2, out_$p20);
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p11, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} dev_printk.ref.ref.ref.ref.ref(.str.6, out_$p16, .str.175, .str.176, out_$p18);
    goto corral_source_split_306;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_305;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p11, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_304;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_303;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_302;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11 := zd_op_prepare_multicast_loop_$bb4(in_$p2, in_$p3, in_$i9, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11);
    return;

  exit:
    return;
}



procedure zd_op_prepare_multicast_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$i9: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref);
  modifies $M.2, $M.3;



implementation zd_ioread32v_locked_loop_$bb27(in_$p1: ref, in_$i3: i32, in_$p5: ref, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i64, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$i51: i32) returns (out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i64, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$i51: i32)
{

  entry:
    out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i51 := in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i51;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_503;

  $bb29:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := out_$i66;
    goto $bb29_dummy;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    out_$i67 := $ult.i32(out_$i66, in_$i3);
    goto corral_source_split_521;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i51, 1);
    call {:si_unique_call 125} {:cexpr "i"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_520;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p65, out_$i63);
    goto corral_source_split_519;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(in_$p1, $mul.ref(out_$i64, 4));
    goto corral_source_split_518;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i51);
    goto corral_source_split_517;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    out_$i63 := $or.i32(out_$i57, out_$i62);
    goto corral_source_split_516;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i16.i32(out_$i61);
    goto corral_source_split_515;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i16($M.0, out_$p60);
    goto corral_source_split_514;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p5, $mul.ref(0, 28)), $mul.ref(out_$i59, 2));
    goto corral_source_split_513;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i58);
    goto corral_source_split_512;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i52, 1);
    goto corral_source_split_511;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    out_$i57 := $shl.i32(out_$i56, 16);
    goto corral_source_split_510;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i16.i32(out_$i55);
    goto corral_source_split_509;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i16($M.0, out_$p54);
    goto corral_source_split_508;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p5, $mul.ref(0, 28)), $mul.ref(out_$i53, 2));
    goto corral_source_split_507;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i52);
    goto corral_source_split_506;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i52 := $mul.i32(out_$i51, 2);
    call {:si_unique_call 124} {:cexpr "j___0"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_505;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i51 := zd_ioread32v_locked_loop_$bb27(in_$p1, in_$i3, in_$p5, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i51);
    return;

  exit:
    return;
}



procedure zd_ioread32v_locked_loop_$bb27(in_$p1: ref, in_$i3: i32, in_$p5: ref, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i64, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$i51: i32) returns (out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i64, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$i51: i32);
  modifies $M.0;



implementation zd_ioread32v_locked_loop_$bb16(in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i16, in_$i31: i16, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i24: i32) returns (out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i16, out_$i31: i16, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i24: i32)
{

  entry:
    out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i24 := in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i24;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  $bb18:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i40;
    goto $bb18_dummy;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$i41 := $ult.i32(out_$i40, in_$i3);
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i24, 1);
    call {:si_unique_call 120} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_483;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p39, out_$i36);
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p4, $mul.ref(0, 28)), $mul.ref(out_$i38, 2));
    goto corral_source_split_481;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_480;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i25, 1);
    goto corral_source_split_479;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i16($M.0, out_$p35);
    goto corral_source_split_478;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(in_$p2, $mul.ref(out_$i34, 2));
    goto corral_source_split_477;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i24);
    goto corral_source_split_476;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p33, out_$i31);
    goto corral_source_split_475;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p4, $mul.ref(0, 28)), $mul.ref(out_$i32, 2));
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i25);
    goto corral_source_split_473;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} out_$i31 := inc_addr(out_$i30);
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i32.i16(out_$i29);
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i28);
    goto corral_source_split_470;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i16($M.0, out_$p27);
    goto corral_source_split_469;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(in_$p2, $mul.ref(out_$i26, 2));
    goto corral_source_split_468;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i24);
    goto corral_source_split_467;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i25 := $mul.i32(out_$i24, 2);
    call {:si_unique_call 118} {:cexpr "j"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_466;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i24 := zd_ioread32v_locked_loop_$bb16(in_$p2, in_$i3, in_$p4, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i24);
    return;

  exit:
    return;
}



procedure zd_ioread32v_locked_loop_$bb16(in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i16, in_$i31: i16, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i24: i32) returns (out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i16, out_$i31: i16, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i24: i32);
  modifies $M.0;



implementation zd_ioread32v_locked_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} zd_ioread32v_locked_loop_$bb11();
    return;

  exit:
    return;
}



procedure zd_ioread32v_locked_loop_$bb11();



implementation zd_ioread32v_locked_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} zd_ioread32v_locked_loop_$bb7();
    return;

  exit:
    return;
}



procedure zd_ioread32v_locked_loop_$bb7();



implementation zd_usb_ioread16v_loop_$bb35(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$i61: i32, in_$p63: ref, in_$p76: ref, in_$i81: i32, in_$i80: i32, in_$i86: i32, in_$i87: i1, in_$i92: i64, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$i101: i32, in_$i102: i8, in_$i103: i1, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$i104: i32) returns (out_$i81: i32, out_$i80: i32, out_$i86: i32, out_$i87: i1, out_$i92: i64, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$i101: i32, out_$i102: i8, out_$i103: i1, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$i104: i32)
{

  entry:
    out_$i81, out_$i80, out_$i86, out_$i87, out_$i92, out_$p95, out_$i96, out_$i97, out_$i101, out_$i102, out_$i103, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i104 := in_$i81, in_$i80, in_$i86, in_$i87, in_$i92, in_$p95, in_$i96, in_$i97, in_$i101, in_$i102, in_$i103, in_$i105, in_$p106, in_$p107, in_$p108, in_$i109, in_$p110, in_$i111, in_$i112, in_$i104;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb50:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := out_$i109;
    goto $bb50_dummy;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    out_$i81 := out_$i111;
    assume true;
    goto $bb50;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i32(out_$i111, 0);
    goto corral_source_split_786;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} out_$i111 := zd_ep_regs_out_msg(out_$p110, in_$p76, in_$i61, in_$p4, 50);
    call {:si_unique_call 191} {:cexpr "r"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} prepare_read_regs_int(in_$p0, in_$p63, in_$i3);
    goto corral_source_split_784;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} out_$p110 := zd_usb_to_usbdev(in_$p0);
    goto corral_source_split_783;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i80, 1);
    call {:si_unique_call 187} {:cexpr "try_count"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} dev_printk.ref.ref.ref.ref.i32(.str.6, out_$p108, .str.83, .str.75, out_$i80);
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p107, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.0, out_$p106);
    goto corral_source_split_779;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11280)), $mul.ref(11008, 1));
    goto corral_source_split_778;

  $bb48:
    assume out_$i105 == 1;
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i101;
    assume true;
    goto $bb48;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$i105 := $sle.i32(out_$i80, 19);
    goto corral_source_split_775;

  $bb45:
    assume out_$i103 == 1;
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i101;
    assume true;
    goto $bb45;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i8.i1(out_$i102);
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.10, in_$p5);
    goto corral_source_split_771;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} out_$i101 := get_results(in_$p0, in_$p1, in_$p63, in_$i3, in_$p5);
    call {:si_unique_call 185} {:cexpr "r"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_770;

  $bb43:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i64(out_$i96, 0);
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} out_$i96 := wait_for_completion_timeout(out_$p95, out_$i92);
    call {:si_unique_call 181} {:cexpr "timeout"} boogie_si_record_i64(out_$i96);
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 11280)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_759;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} out_$i92 := msecs_to_jiffies(50);
    call {:si_unique_call 179} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i92);
    goto corral_source_split_758;

  $bb40:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(in_$i61, out_$i86);
    goto corral_source_split_749;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.11, in_$p4);
    goto corral_source_split_748;

  $bb50_dummy:
    call {:si_unique_call 1} out_$i81, out_$i80, out_$i86, out_$i87, out_$i92, out_$p95, out_$i96, out_$i97, out_$i101, out_$i102, out_$i103, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i104 := zd_usb_ioread16v_loop_$bb35(in_$p0, in_$p1, in_$i3, in_$p4, in_$p5, in_$i61, in_$p63, in_$p76, out_$i81, out_$i80, out_$i86, out_$i87, out_$i92, out_$p95, out_$i96, out_$i97, out_$i101, out_$i102, out_$i103, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i104);
    return;

  exit:
    return;
}



procedure zd_usb_ioread16v_loop_$bb35(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$i61: i32, in_$p63: ref, in_$p76: ref, in_$i81: i32, in_$i80: i32, in_$i86: i32, in_$i87: i1, in_$i92: i64, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$i101: i32, in_$i102: i8, in_$i103: i1, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$p110: ref, in_$i111: i32, in_$i112: i1, in_$i104: i32) returns (out_$i81: i32, out_$i80: i32, out_$i86: i32, out_$i87: i1, out_$i92: i64, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$i101: i32, out_$i102: i8, out_$i103: i1, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$p110: ref, out_$i111: i32, out_$i112: i1, out_$i104: i32);
  modifies $M.0, $M.13, $M.10;



implementation zd_usb_ioread16v_loop_$bb27(in_$p2: ref, in_$i3: i32, in_$p63: ref, in_$i67: i64, in_$p68: ref, in_$i69: i16, in_$i70: i64, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$i66: i32) returns (out_$i67: i64, out_$p68: ref, out_$i69: i16, out_$i70: i64, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$i66: i32)
{

  entry:
    out_$i67, out_$p68, out_$i69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i66 := in_$i67, in_$p68, in_$i69, in_$i70, in_$p72, in_$i73, in_$i74, in_$i66;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_717;

  $bb29:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := out_$i73;
    goto $bb29_dummy;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$i74 := $ult.i32(out_$i73, in_$i3);
    goto corral_source_split_726;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i66, 1);
    call {:si_unique_call 171} {:cexpr "i"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_725;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p72, out_$i69);
    goto corral_source_split_724;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p63, $mul.ref(0, 2)), $mul.ref(2, 1)), $mul.ref(out_$i70, 2));
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i66);
    goto corral_source_split_722;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i16($M.0, out_$p68);
    goto corral_source_split_721;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(in_$p2, $mul.ref(out_$i67, 2));
    goto corral_source_split_720;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i66);
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i67, out_$p68, out_$i69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i66 := zd_usb_ioread16v_loop_$bb27(in_$p2, in_$i3, in_$p63, out_$i67, out_$p68, out_$i69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i66);
    return;

  exit:
    return;
}



procedure zd_usb_ioread16v_loop_$bb27(in_$p2: ref, in_$i3: i32, in_$p63: ref, in_$i67: i64, in_$p68: ref, in_$i69: i16, in_$i70: i64, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$i66: i32) returns (out_$i67: i64, out_$p68: ref, out_$i69: i16, out_$i70: i64, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$i66: i32);
  modifies $M.0;



implementation zd_usb_ioread16v_loop_$bb22()
{

  entry:
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb22_dummy:
    call {:si_unique_call 1} zd_usb_ioread16v_loop_$bb22();
    return;

  exit:
    return;
}



procedure zd_usb_ioread16v_loop_$bb22();



implementation get_results_loop_$bb14(in_$p1: ref, in_$i3: i32, in_$p8: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p33: ref, in_$i34: i16, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i28: i32) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p33: ref, out_$i34: i16, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i28: i32)
{

  entry:
    out_$p29, out_$p30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i28 := in_$p29, in_$p30, in_$i31, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i28;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  $bb16:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i37;
    goto $bb16_dummy;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$i38 := $ult.i32(out_$i37, in_$i3);
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i28, 1);
    call {:si_unique_call 232} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p36, out_$i34);
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(in_$p1, $mul.ref(out_$i35, 2));
    goto corral_source_split_900;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i28);
    goto corral_source_split_899;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i16($M.0, out_$p33);
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p30, $mul.ref(out_$i31, 4)), $mul.ref(2, 1));
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i28);
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_894;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p8, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i28 := get_results_loop_$bb14(in_$p1, in_$i3, in_$p8, out_$p29, out_$p30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i28);
    return;

  exit:
    return;
}



procedure get_results_loop_$bb14(in_$p1: ref, in_$i3: i32, in_$p8: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p33: ref, in_$i34: i16, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i28: i32) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p33: ref, out_$i34: i16, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i28: i32);
  modifies $M.0;



implementation check_read_regs_loop_$bb11(in_$p1: ref, in_$i2: i32, in_$p6: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$p42: ref, in_$i54: i32, in_$i55: i1, in_$i27: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i64, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$p42: ref, out_$i54: i32, out_$i55: i1, out_$i27: i32)
{

  entry:
    out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i54, out_$i55, out_$i27 := in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i54, in_$i55, in_$i27;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  $bb16:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i54;
    goto $bb16_dummy;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    out_$i55 := $ult.i32(out_$i54, in_$i2);
    goto corral_source_split_972;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i27, 1);
    call {:si_unique_call 243} {:cexpr "i"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_971;

  $bb14:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$i41, out_$p42 := out_$i27, out_$p31;
    assume true;
    goto $bb14;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i34, out_$i39);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i38);
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i16($M.0, out_$p37);
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 2)), $mul.ref(2, 1)), $mul.ref(out_$i35, 2));
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i27);
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 4)), $mul.ref(0, 1));
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p29, $mul.ref(out_$i30, 4));
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i27);
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_946;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i54, out_$i55, out_$i27 := check_read_regs_loop_$bb11(in_$p1, in_$i2, in_$p6, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i54, out_$i55, out_$i27);
    return;

  exit:
    return;
}



procedure check_read_regs_loop_$bb11(in_$p1: ref, in_$i2: i32, in_$p6: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$p42: ref, in_$i54: i32, in_$i55: i1, in_$i27: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i64, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$p42: ref, out_$i54: i32, out_$i55: i1, out_$i27: i32);



implementation _zd_iowrite32v_async_locked_loop_$bb21(in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$i41: i32, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i16, in_$i48: i64, in_$p50: ref, in_$i51: i64, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i16, in_$i57: i16, in_$i58: i64, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$i64: i32, in_$i65: i16, in_$i66: i32, in_$i67: i64, in_$p69: ref, in_$i70: i64, in_$p72: ref, in_$i73: i16, in_$i74: i32, in_$i75: i64, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i40: i32) returns (out_$i41: i32, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i16, out_$i48: i64, out_$p50: ref, out_$i51: i64, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i16, out_$i57: i16, out_$i58: i64, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$i64: i32, out_$i65: i16, out_$i66: i32, out_$i67: i64, out_$p69: ref, out_$i70: i64, out_$p72: ref, out_$i73: i16, out_$i74: i32, out_$i75: i64, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i40: i32)
{

  entry:
    out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p60, out_$i61, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i40 := in_$i41, in_$i42, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p50, in_$i51, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p60, in_$i61, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p69, in_$i70, in_$p72, in_$i73, in_$i74, in_$i75, in_$p77, in_$i78, in_$i79, in_$i40;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1382;

  $bb23:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := out_$i78;
    goto $bb23_dummy;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i79 := $ult.i32(out_$i78, in_$i2);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i40, 1);
    call {:si_unique_call 349} {:cexpr "i"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p77, out_$i73);
    goto corral_source_split_1420;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 56)), $mul.ref(out_$i75, 4)), $mul.ref(0, 1));
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i74);
    goto corral_source_split_1418;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i41, 1);
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i16($M.0, out_$p72);
    goto corral_source_split_1416;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i70, 8)), $mul.ref(0, 1));
    goto corral_source_split_1415;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    goto corral_source_split_1414;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i40);
    goto corral_source_split_1413;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p69, out_$i65);
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 56)), $mul.ref(out_$i67, 4)), $mul.ref(2, 1));
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i66);
    goto corral_source_split_1410;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i41, 1);
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i32.i16(out_$i64);
    goto corral_source_split_1408;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i61, 8)), $mul.ref(4, 1));
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i40);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p60, out_$i57);
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 56)), $mul.ref(out_$i58, 4)), $mul.ref(0, 1));
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(out_$i41);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} out_$i57 := inc_addr(out_$i56);
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i32.i16(out_$i55);
    goto corral_source_split_1399;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i16.i32(out_$i54);
    goto corral_source_split_1398;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i16($M.0, out_$p53);
    goto corral_source_split_1397;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i51, 8)), $mul.ref(0, 1));
    goto corral_source_split_1396;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    goto corral_source_split_1395;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i40);
    goto corral_source_split_1394;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p50, out_$i47);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 56)), $mul.ref(out_$i48, 4)), $mul.ref(2, 1));
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i41);
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i32.i16(out_$i46);
    goto corral_source_split_1390;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    out_$i46 := $lshr.i32(out_$i45, 16);
    goto corral_source_split_1389;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i42, 8)), $mul.ref(4, 1));
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i40);
    goto corral_source_split_1385;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i41 := $mul.i32(out_$i40, 2);
    call {:si_unique_call 347} {:cexpr "j"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1384;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p60, out_$i61, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i40 := _zd_iowrite32v_async_locked_loop_$bb21(in_$p1, in_$i2, in_$p3, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p60, out_$i61, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i40);
    return;

  exit:
    return;
}



procedure _zd_iowrite32v_async_locked_loop_$bb21(in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$i41: i32, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i16, in_$i48: i64, in_$p50: ref, in_$i51: i64, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i16, in_$i57: i16, in_$i58: i64, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$i64: i32, in_$i65: i16, in_$i66: i32, in_$i67: i64, in_$p69: ref, in_$i70: i64, in_$p72: ref, in_$i73: i16, in_$i74: i32, in_$i75: i64, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i40: i32) returns (out_$i41: i32, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i16, out_$i48: i64, out_$p50: ref, out_$i51: i64, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i16, out_$i57: i16, out_$i58: i64, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$i64: i32, out_$i65: i16, out_$i66: i32, out_$i67: i64, out_$p69: ref, out_$i70: i64, out_$p72: ref, out_$i73: i16, out_$i74: i32, out_$i75: i64, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i40: i32);
  modifies $M.0;



implementation _zd_iowrite32v_async_locked_loop_$bb16()
{

  entry:
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;

  $bb16_dummy:
    call {:si_unique_call 1} _zd_iowrite32v_async_locked_loop_$bb16();
    return;

  exit:
    return;
}



procedure _zd_iowrite32v_async_locked_loop_$bb16();



implementation zd_usb_iowrite16v_async_loop_$bb36(in_$p1: ref, in_$i2: i32, in_$p78: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i89: i64, in_$p91: ref, in_$i92: i16, in_$p93: ref, in_$i94: i64, in_$p96: ref, in_$i97: i16, in_$p98: ref, in_$i99: i32, in_$i100: i1, in_$i84: i32) returns (out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i89: i64, out_$p91: ref, out_$i92: i16, out_$p93: ref, out_$i94: i64, out_$p96: ref, out_$i97: i16, out_$p98: ref, out_$i99: i32, out_$i100: i1, out_$i84: i32)
{

  entry:
    out_$p85, out_$p86, out_$i87, out_$i89, out_$p91, out_$i92, out_$p93, out_$i94, out_$p96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i84 := in_$p85, in_$p86, in_$i87, in_$i89, in_$p91, in_$i92, in_$p93, in_$i94, in_$p96, in_$i97, in_$p98, in_$i99, in_$i100, in_$i84;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;

  $bb38:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := out_$i99;
    goto $bb38_dummy;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$i100 := $ult.i32(out_$i99, in_$i2);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i84, 1);
    call {:si_unique_call 428} {:cexpr "i"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p98, out_$i97);
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p86, $mul.ref(out_$i87, 4)), $mul.ref(2, 1));
    goto corral_source_split_1778;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i16($M.0, out_$p96);
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i94, 4)), $mul.ref(2, 1));
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i84);
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p93, out_$i92);
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p86, $mul.ref(out_$i87, 4)), $mul.ref(0, 1));
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i16($M.0, out_$p91);
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i89, 4)), $mul.ref(0, 1));
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i84);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i84);
    goto corral_source_split_1766;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    out_$p86 := $bitcast.ref.ref(out_$p85);
    goto corral_source_split_1765;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p78, $mul.ref(0, 2)), $mul.ref(2, 1));
    goto corral_source_split_1764;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p85, out_$p86, out_$i87, out_$i89, out_$p91, out_$i92, out_$p93, out_$i94, out_$p96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i84 := zd_usb_iowrite16v_async_loop_$bb36(in_$p1, in_$i2, in_$p78, out_$p85, out_$p86, out_$i87, out_$i89, out_$p91, out_$i92, out_$p93, out_$i94, out_$p96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i84);
    return;

  exit:
    return;
}



procedure zd_usb_iowrite16v_async_loop_$bb36(in_$p1: ref, in_$i2: i32, in_$p78: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i89: i64, in_$p91: ref, in_$i92: i16, in_$p93: ref, in_$i94: i64, in_$p96: ref, in_$i97: i16, in_$p98: ref, in_$i99: i32, in_$i100: i1, in_$i84: i32) returns (out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i89: i64, out_$p91: ref, out_$i92: i16, out_$p93: ref, out_$i94: i64, out_$p96: ref, out_$i97: i16, out_$p98: ref, out_$i99: i32, out_$i100: i1, out_$i84: i32);
  modifies $M.0;



implementation zd_iowrite32a_locked_loop_$bb12(in_$p1: ref, in_$i8: i32, in_$i12: i32, in_$i13: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i22: i32, in_$i23: i1, in_$i11: i32, in_$i24: i32, in_$i5: i32) returns (out_$i12: i32, out_$i13: i64, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i22: i32, out_$i23: i1, out_$i11: i32, out_$i24: i32)
{

  entry:
    out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24 := in_$i12, in_$i13, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i22, in_$i23, in_$i11, in_$i24;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1956;

  $bb18:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i22;
    goto $bb18_dummy;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    assume true;
    goto $bb18;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$i23 := $ult.i32(out_$i22, in_$i8);
    goto corral_source_split_1975;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i11, 1);
    call {:si_unique_call 466} {:cexpr "j"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1974;

  $bb15:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i11;
    assume true;
    goto $bb15;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, out_$p15);
    goto corral_source_split_1962;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i13, 8)), $mul.ref(0, 1));
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i12);
    goto corral_source_split_1959;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(in_$i5, out_$i11);
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24 := zd_iowrite32a_locked_loop_$bb12(in_$p1, in_$i8, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24, in_$i5);
    return;

  exit:
    return;
}



procedure zd_iowrite32a_locked_loop_$bb12(in_$p1: ref, in_$i8: i32, in_$i12: i32, in_$i13: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i22: i32, in_$i23: i1, in_$i11: i32, in_$i24: i32, in_$i5: i32) returns (out_$i12: i32, out_$i13: i64, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i22: i32, out_$i23: i1, out_$i11: i32, out_$i24: i32);



implementation zd_iowrite32a_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i12: i32, in_$i13: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i22: i32, in_$i23: i1, in_$i11: i32, in_$i24: i32, in_$i10: i32, in_$i20: i32, in_$i21: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i12: i32, out_$i13: i64, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i22: i32, out_$i23: i1, out_$i11: i32, out_$i24: i32, out_$i10: i32, out_$i20: i32, out_$i21: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i9, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24, out_$i10, out_$i20, out_$i21, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i37, out_$i38, out_$i39, out_$i5 := in_$i6, in_$i7, in_$i8, in_$i9, in_$i12, in_$i13, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i22, in_$i23, in_$i11, in_$i24, in_$i10, in_$i20, in_$i21, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i37, in_$i38, in_$i39, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;

  $bb25:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i38;
    goto $bb25_dummy;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$i39 := $ult.i32(out_$i38, in_$i2);
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i37, out_$i5);
    call {:si_unique_call 469} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_1990;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i20, out_$i21);
    goto corral_source_split_1989;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i27;
    assume true;
    goto $bb22;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_1972;

  SeqInstr_156:
    call {:si_unique_call 465} {:cexpr "r"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_1971;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} out_$i27 := _zd_iowrite32v_async_locked(in_$p0, out_$p26, out_$i20);
    goto SeqInstr_155;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(in_$p1, $mul.ref(out_$i25, 8));
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i32.i64(out_$i5);
    goto corral_source_split_1969;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1968;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i10, 0;
    goto $bb16;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i19, 1;
    goto $bb16;

  $bb14:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i11;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, out_$p15);
    goto corral_source_split_1962;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i13, 8)), $mul.ref(0, 1));
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i12);
    goto corral_source_split_1959;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i5, out_$i11);
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    call out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24 := zd_iowrite32a_locked_loop_$bb12(in_$p1, out_$i8, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24, out_$i5);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    out_$i11 := 0;
    goto $bb12;

  $bb18:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i22;
    assume false;
    return;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$i23 := $ult.i32(out_$i22, out_$i8);
    goto corral_source_split_1975;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i11, 1);
    call {:si_unique_call 466} {:cexpr "j"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1974;

  $bb15:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume out_$i9 == 1;
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i10 := 0;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    out_$i9 := $ult.i32(0, out_$i8);
    goto corral_source_split_1952;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1951;

  $bb7:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := out_$i6;
    goto $bb8;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$i8 := 7;
    goto $bb8;

  $bb6:
    assume out_$i7 == 1;
    goto corral_source_split_1949;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    out_$i7 := $ugt.i32(out_$i6, 7);
    goto corral_source_split_1947;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sub.i32(in_$i2, out_$i5);
    call {:si_unique_call 463} {:cexpr "max"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_1946;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb11;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i24;
    goto $bb11;

  $bb19:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1977;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i9, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24, out_$i10, out_$i20, out_$i21, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i37, out_$i38, out_$i39, out_$i5 := zd_iowrite32a_locked_loop_$bb4(in_$p0, in_$p1, in_$i2, out_$i6, out_$i7, out_$i8, out_$i9, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i11, out_$i24, out_$i10, out_$i20, out_$i21, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i37, out_$i38, out_$i39, out_$i5);
    return;

  exit:
    return;
}



procedure zd_iowrite32a_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i12: i32, in_$i13: i64, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i22: i32, in_$i23: i1, in_$i11: i32, in_$i24: i32, in_$i10: i32, in_$i20: i32, in_$i21: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i12: i32, out_$i13: i64, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i22: i32, out_$i23: i1, out_$i11: i32, out_$i24: i32, out_$i10: i32, out_$i20: i32, out_$i21: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i5: i32);
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_mac_config_beacon_loop_$bb62(in_$i4: i8, in_$p5: ref, in_$i132: i64, in_$i137: i1, in_$i138: i64, in_$i139: i64, in_$i140: i1, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$i145: i32) returns (out_$i137: i1, out_$i138: i64, out_$i139: i64, out_$i140: i1, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$i145: i32)
{

  entry:
    out_$i137, out_$i138, out_$i139, out_$i140, out_$p142, out_$i143, out_$i144, out_$i145 := in_$i137, in_$i138, in_$i139, in_$i140, in_$p142, in_$i143, in_$i144, in_$i145;
    goto $bb62, exit;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb71:
    assume {:verifier.code 0} true;
    assume out_$i144 == 1;
    goto $bb71_dummy;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    out_$i145 := out_$i143;
    assume true;
    goto $bb71;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    out_$i144 := $slt.i32(out_$i143, 0);
    goto corral_source_split_2263;

  SeqInstr_186:
    call {:si_unique_call 527} {:cexpr "ret"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_2262;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} out_$i143 := zd_iowrite32_locked(out_$p142, 1, $sub.i16(0, 26988));
    goto SeqInstr_185;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p5, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2261;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} msleep(20);
    goto corral_source_split_2260;

  $bb68:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    out_$i140 := $sge.i64(out_$i139, 0);
    goto corral_source_split_2255;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    out_$i139 := $sub.i64(out_$i138, in_$i132);
    goto corral_source_split_2254;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i64($M.0, jiffies);
    goto corral_source_split_2253;

  $bb66:
    assume !(out_$i137 == 1);
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i137 := $trunc.i8.i1(in_$i4);
    goto corral_source_split_2250;

  $bb71_dummy:
    call {:si_unique_call 1} out_$i137, out_$i138, out_$i139, out_$i140, out_$p142, out_$i143, out_$i144, out_$i145 := zd_mac_config_beacon_loop_$bb62(in_$i4, in_$p5, in_$i132, out_$i137, out_$i138, out_$i139, out_$i140, out_$p142, out_$i143, out_$i144, out_$i145);
    return;

  exit:
    return;
}



procedure zd_mac_config_beacon_loop_$bb62(in_$i4: i8, in_$p5: ref, in_$i132: i64, in_$i137: i1, in_$i138: i64, in_$i139: i64, in_$i140: i1, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$i145: i32) returns (out_$i137: i1, out_$i138: i64, out_$i139: i64, out_$i140: i1, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$i145: i32);
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation zd_mac_config_beacon_loop_$bb57()
{

  entry:
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb57_dummy;

  $bb57_dummy:
    call {:si_unique_call 1} zd_mac_config_beacon_loop_$bb57();
    return;

  exit:
    return;
}



procedure zd_mac_config_beacon_loop_$bb57();



implementation zd_mac_config_beacon_loop_$bb46(in_$p1: ref, in_$p23: ref, in_$p93: ref, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i64, in_$p110: ref, in_$i111: i32, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i97: i32, in_$i98: i32, in_$i115: i32) returns (out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i64, out_$p110: ref, out_$i111: i32, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i97: i32, out_$i98: i32, out_$i115: i32)
{

  entry:
    out_$i99, out_$p101, out_$p102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i97, out_$i98, out_$i115 := in_$i99, in_$p101, in_$p102, in_$p103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$p110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i97, in_$i98, in_$i115;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2194;

  $bb48:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i97, out_$i98 := out_$i112, out_$i111;
    goto $bb48_dummy;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    out_$i115 := out_$i111;
    assume true;
    goto $bb48;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    out_$i114 := $ugt.i32(out_$i113, out_$i112);
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, in_$p93);
    goto corral_source_split_2212;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i97, 1);
    call {:si_unique_call 518} {:cexpr "j"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i98, 1);
    call {:si_unique_call 517} {:cexpr "req_pos"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_2210;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p110, out_$i107);
    goto corral_source_split_2209;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p23, $mul.ref(out_$i108, 8)), $mul.ref(4, 1));
    goto corral_source_split_2208;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    out_$i108 := $sext.i32.i64(out_$i98);
    goto corral_source_split_2206;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i32(out_$i106);
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i8($M.0, out_$p105);
    goto corral_source_split_2204;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref(out_$p103, $mul.ref(out_$i104, 1));
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i32.i64(out_$i97);
    goto corral_source_split_2202;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2200;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p101, $sub.i16(0, 27024));
    goto corral_source_split_2199;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p23, $mul.ref(out_$i99, 8)), $mul.ref(0, 1));
    goto corral_source_split_2198;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto corral_source_split_2197;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(out_$i98);
    goto corral_source_split_2196;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i99, out_$p101, out_$p102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i97, out_$i98, out_$i115 := zd_mac_config_beacon_loop_$bb46(in_$p1, in_$p23, in_$p93, out_$i99, out_$p101, out_$p102, out_$p103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i97, out_$i98, out_$i115);
    return;

  exit:
    return;
}



procedure zd_mac_config_beacon_loop_$bb46(in_$p1: ref, in_$p23: ref, in_$p93: ref, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i64, in_$p110: ref, in_$i111: i32, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i97: i32, in_$i98: i32, in_$i115: i32) returns (out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i64, out_$p110: ref, out_$i111: i32, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i97: i32, out_$i98: i32, out_$i115: i32);
  modifies $M.0;



implementation zd_mac_config_beacon_loop_$bb25(in_$p3: ref, in_$p5: ref, in_$i40: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i64, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$i63: i1, in_$i69: i64, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$i46: i64) returns (out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i64, out_$i55: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$i63: i1, out_$i69: i64, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$i46: i64)
{

  entry:
    out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i69, out_$i70, out_$i71, out_$i72, out_$i46 := in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i69, in_$i70, in_$i71, in_$i72, in_$i46;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2110;

  $bb37:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i69;
    goto $bb37_dummy;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$i71 := $and.i32(out_$i70, 2);
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, in_$p3);
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} msleep(20);
    goto corral_source_split_2154;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2153;

  $bb31:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := out_$i46;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i55;
    goto $bb36;

  $bb33:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    out_$i63 := $sge.i64(out_$i62, 0);
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i64(out_$i61, in_$i40);
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i64($M.0, jiffies);
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} dev_err.ref.ref(out_$p60, .str.152);
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 13688)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11008, 1));
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i54, 25);
    call {:si_unique_call 503} {:cexpr "message_jiffies"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_2124;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i64($M.0, jiffies);
    goto corral_source_split_2123;

  $bb30:
    assume out_$i53 == 1;
    goto corral_source_split_2122;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    out_$i53 := $sge.i64(out_$i52, 0);
    goto corral_source_split_2120;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i64(out_$i51, out_$i46);
    goto corral_source_split_2119;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.0, jiffies);
    goto corral_source_split_2118;

  $bb28:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i48;
    assume true;
    goto $bb28;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i48, 0);
    goto corral_source_split_2114;

  SeqInstr_180:
    call {:si_unique_call 502} {:cexpr "r"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_2113;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} out_$i48 := zd_ioread32_locked(out_$p47, in_$p3, $sub.i16(0, 26988));
    goto SeqInstr_179;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p5, $mul.ref(0, 13688)), $mul.ref(0, 1));
    goto corral_source_split_2112;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i69, out_$i70, out_$i71, out_$i72, out_$i46 := zd_mac_config_beacon_loop_$bb25(in_$p3, in_$p5, in_$i40, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i69, out_$i70, out_$i71, out_$i72, out_$i46);
    return;

  exit:
    return;
}



procedure zd_mac_config_beacon_loop_$bb25(in_$p3: ref, in_$p5: ref, in_$i40: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i64, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$i63: i1, in_$i69: i64, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$i46: i64) returns (out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i64, out_$i55: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$i63: i1, out_$i69: i64, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$i46: i64);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_iowrite16a_locked_loop_$bb18(in_$p1: ref, in_$i32: i32, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i46: i32, in_$i47: i1, in_$i35: i32, in_$i48: i32, in_$i29: i32) returns (out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i46: i32, out_$i47: i1, out_$i35: i32, out_$i48: i32)
{

  entry:
    out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47, out_$i35, out_$i48 := in_$i36, in_$i37, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i46, in_$i47, in_$i35, in_$i48;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3280;

  $bb24:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i46;
    goto $bb24_dummy;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i46;
    assume true;
    goto $bb24;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$i47 := $ult.i32(out_$i46, in_$i32);
    goto corral_source_split_3300;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i35, 1);
    call {:si_unique_call 770} {:cexpr "j"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_3299;

  $bb21:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i35;
    assume true;
    goto $bb21;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 0);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, out_$p39);
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i37, 4)), $mul.ref(0, 1));
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i32.i64(out_$i36);
    goto corral_source_split_3283;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(in_$i29, out_$i35);
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47, out_$i35, out_$i48 := zd_iowrite16a_locked_loop_$bb18(in_$p1, in_$i32, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47, out_$i35, out_$i48, in_$i29);
    return;

  exit:
    return;
}



procedure zd_iowrite16a_locked_loop_$bb18(in_$p1: ref, in_$i32: i32, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i46: i32, in_$i47: i1, in_$i35: i32, in_$i48: i32, in_$i29: i32) returns (out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i46: i32, out_$i47: i1, out_$i35: i32, out_$i48: i32);



implementation zd_iowrite16a_locked_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i46: i32, in_$i47: i1, in_$i35: i32, in_$i48: i32, in_$i34: i32, in_$i44: i32, in_$i45: i32, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i29: i32) returns (out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i46: i32, out_$i47: i1, out_$i35: i32, out_$i48: i32, out_$i34: i32, out_$i44: i32, out_$i45: i32, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i29: i32)
{

  entry:
    out_$i30, out_$i31, out_$i32, out_$i33, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47, out_$i35, out_$i48, out_$i34, out_$i44, out_$i45, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i62, out_$i63, out_$i64, out_$i29 := in_$i30, in_$i31, in_$i32, in_$i33, in_$i36, in_$i37, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i46, in_$i47, in_$i35, in_$i48, in_$i34, in_$i44, in_$i45, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i62, in_$i63, in_$i64, in_$i29;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3268;

  $bb31:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i63;
    goto $bb31_dummy;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i64 := $ult.i32(out_$i63, in_$i2);
    goto corral_source_split_3316;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, out_$i29);
    call {:si_unique_call 773} {:cexpr "i"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3315;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i44, out_$i45);
    goto corral_source_split_3314;

  $bb28:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i52;
    assume true;
    goto $bb28;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_3297;

  SeqInstr_306:
    call {:si_unique_call 769} {:cexpr "r"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3296;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} out_$i52 := zd_usb_iowrite16v_async(out_$p49, out_$p51, out_$i44);
    goto SeqInstr_305;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(in_$p1, $mul.ref(out_$i50, 4));
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i32.i64(out_$i29);
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 11584)), $mul.ref(0, 1));
    goto corral_source_split_3293;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3292;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i44, out_$i45 := out_$i34, 0;
    goto $bb22;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i44, out_$i45 := out_$i43, 1;
    goto $bb22;

  $bb20:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i35;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 0);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, out_$p39);
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i37, 4)), $mul.ref(0, 1));
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i32.i64(out_$i36);
    goto corral_source_split_3283;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i29, out_$i35);
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    call out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47, out_$i35, out_$i48 := zd_iowrite16a_locked_loop_$bb18(in_$p1, out_$i32, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47, out_$i35, out_$i48, out_$i29);
    goto $bb18_last;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$i35 := 0;
    goto $bb18;

  $bb24:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i46;
    assume false;
    return;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i46;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$i47 := $ult.i32(out_$i46, out_$i32);
    goto corral_source_split_3300;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i35, 1);
    call {:si_unique_call 770} {:cexpr "j"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_3299;

  $bb21:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume out_$i33 == 1;
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i34 := 0;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i33 := $ult.i32(0, out_$i32);
    goto corral_source_split_3276;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3275;

  $bb13:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    goto $bb14;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$i32 := 15;
    goto $bb14;

  $bb12:
    assume out_$i31 == 1;
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$i31 := $ugt.i32(out_$i30, 15);
    goto corral_source_split_3271;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i32(in_$i2, out_$i29);
    call {:si_unique_call 767} {:cexpr "max"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb17;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i48;
    goto $bb17;

  $bb25:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3302;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31, out_$i32, out_$i33, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47, out_$i35, out_$i48, out_$i34, out_$i44, out_$i45, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i62, out_$i63, out_$i64, out_$i29 := zd_iowrite16a_locked_loop_$bb10(in_$p0, in_$p1, in_$i2, out_$i30, out_$i31, out_$i32, out_$i33, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i46, out_$i47, out_$i35, out_$i48, out_$i34, out_$i44, out_$i45, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i62, out_$i63, out_$i64, out_$i29);
    return;

  exit:
    return;
}



procedure zd_iowrite16a_locked_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i46: i32, in_$i47: i1, in_$i35: i32, in_$i48: i32, in_$i34: i32, in_$i44: i32, in_$i45: i32, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i29: i32) returns (out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i46: i32, out_$i47: i1, out_$i35: i32, out_$i48: i32, out_$i34: i32, out_$i44: i32, out_$i45: i32, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i29: i32);
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation __zd_usb_disable_rx_loop_$bb8(in_$p3: ref, in_$i5: i32, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$i10: i32) returns (out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$i10: i32)
{

  entry:
    out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i10 := in_$i11, in_$p12, in_$p13, in_$i14, in_$p15, in_$p16, in_$i17, in_$i18, in_$i10;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4120;

  $bb10:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i17;
    goto $bb10_dummy;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$i18 := $ult.i32(out_$i17, in_$i5);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i10, 1);
    call {:si_unique_call 964} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} free_rx_urb(out_$p16);
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_4128;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(in_$p3, $mul.ref(out_$i14, 8));
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i10);
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} usb_kill_urb(out_$p13);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(in_$p3, $mul.ref(out_$i11, 8));
    goto corral_source_split_4123;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i10);
    goto corral_source_split_4122;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i10 := __zd_usb_disable_rx_loop_$bb8(in_$p3, in_$i5, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i10);
    return;

  exit:
    return;
}



procedure __zd_usb_disable_rx_loop_$bb8(in_$p3: ref, in_$i5: i32, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$i10: i32) returns (out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$i10: i32);



implementation __zd_usb_enable_rx_loop_$bb22(in_$p7: ref, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i54: i32) returns (out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i54: i32)
{

  entry:
    out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i54 := in_$i55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i54;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4439;

  $bb28:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := out_$i61;
    goto $bb28_dummy;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$i62 := $sle.i32(out_$i61, 4);
    goto corral_source_split_4450;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i54, 1);
    call {:si_unique_call 1067} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_4449;

  $bb25:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i58;
    assume true;
    goto $bb25;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_4445;

  SeqInstr_414:
    call {:si_unique_call 1066} {:cexpr "r"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_4444;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} out_$i58 := ldv_usb_submit_urb_383(out_$p57, 208);
    goto SeqInstr_413;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(in_$p7, $mul.ref(out_$i55, 8));
    goto corral_source_split_4442;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_4441;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i54 := __zd_usb_enable_rx_loop_$bb22(in_$p7, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i54);
    return;

  exit:
    return;
}



procedure __zd_usb_enable_rx_loop_$bb22(in_$p7: ref, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i54: i32) returns (out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i54: i32);
  modifies assertsPassed;



implementation __zd_usb_enable_rx_loop_$bb5(in_$p0: ref, in_$p7: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i11: i32) returns (out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i11: i32)
{

  entry:
    out_$p12, out_$i13, out_$p14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i11 := in_$p12, in_$i13, in_$p14, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i11;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4371;

  $bb10:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i20;
    goto $bb10_dummy;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$i21 := $sle.i32(out_$i20, 4);
    goto corral_source_split_4386;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i11, 1);
    call {:si_unique_call 1051} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_4385;

  $bb8:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i64(out_$i18, 0);
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_4379;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(in_$p7, $mul.ref(out_$i15, 8));
    goto corral_source_split_4378;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i11);
    goto corral_source_split_4377;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p14, out_$p12);
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(in_$p7, $mul.ref(out_$i13, 8));
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i11);
    goto corral_source_split_4374;

  SeqInstr_411:
    goto corral_source_split_4373;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} out_$p12 := alloc_rx_urb(in_$p0);
    goto SeqInstr_410;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$p14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i11 := __zd_usb_enable_rx_loop_$bb5(in_$p0, in_$p7, out_$p12, out_$i13, out_$p14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i11);
    return;

  exit:
    return;
}



procedure __zd_usb_enable_rx_loop_$bb5(in_$p0: ref, in_$p7: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i11: i32) returns (out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i11: i32);
  modifies $M.0, assertsPassed;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation handle_rx_packet_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p17: ref, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i1, in_vslice_dummy_var_117: i32) returns (out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i1, out_vslice_dummy_var_117: i32)
{

  entry:
    out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_vslice_dummy_var_117 := in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$p28, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_vslice_dummy_var_117;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i21, out_$i22, out_$i23 := out_$i37, out_$i32, out_$i33;
    goto $bb19_dummy;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 0);
    goto corral_source_split_4802;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i16.i32(out_$i36);
    call {:si_unique_call 1174} {:cexpr "k"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_4801;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} out_$i36 := get_unaligned_le16(out_$p35);
    call {:si_unique_call 1173} {:cexpr "tmp"} boogie_si_record_i16(out_$i36);
    goto corral_source_split_4800;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(in_$p17, $mul.ref(out_$i34, 1));
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i23, 1);
    call {:si_unique_call 1171} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, $sub.i32(0, 4));
    call {:si_unique_call 1170} {:cexpr "l"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_4796;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i24, 3);
    goto corral_source_split_4795;

  $bb17:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    out_$i30 := $sgt.i32(out_$i23, 1);
    goto corral_source_split_4791;

  SeqInstr_447:
    goto corral_source_split_4790;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} out_vslice_dummy_var_117 := zd_mac_rx(out_$p26, out_$p28, out_$i21);
    goto SeqInstr_446;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(in_$p1, $mul.ref(out_$i27, 1));
    goto corral_source_split_4789;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i32.i64(out_$i22);
    goto corral_source_split_4788;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} out_$p26 := zd_usb_to_hw(in_$p0);
    goto corral_source_split_4787;

  $bb14:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$i25 := $ugt.i32(out_$i24, in_$i2);
    goto corral_source_split_4783;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i22, out_$i21);
    call {:si_unique_call 1167} {:cexpr "n"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4782;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_vslice_dummy_var_117 := handle_rx_packet_loop_$bb10(in_$p0, in_$p1, in_$i2, in_$p17, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_vslice_dummy_var_117);
    return;

  exit:
    return;
}



procedure handle_rx_packet_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p17: ref, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i1, in_vslice_dummy_var_117: i32) returns (out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i1, out_vslice_dummy_var_117: i32);
  modifies $M.0, $M.13, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, assertsPassed;



implementation zd_mac_rx_loop_$bb17(in_$p3: ref, in_$p4: ref, in_$i47: i8, in_$p49: ref, in_$i53: i16, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i1, in_$i64: i8, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i52: i32) returns (out_$i53: i16, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i1, out_$i64: i8, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i52: i32)
{

  entry:
    out_$i53, out_$i54, out_$p56, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i52 := in_$i53, in_$i54, in_$p56, in_$p57, in_$i58, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i52;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4885;

  $bb22:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := out_$i66;
    goto $bb22_dummy;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i67, out_$i66);
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, in_$p49);
    goto corral_source_split_4904;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i52, 1);
    call {:si_unique_call 1191} {:cexpr "i"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_4903;

  $bb20:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p65, out_$i64);
    goto corral_source_split_4901;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_4900;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i32.i8(out_$i52);
    goto corral_source_split_4899;

  $bb19:
    assume out_$i63 == 1;
    goto corral_source_split_4898;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i54, out_$i62);
    goto corral_source_split_4896;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i16.i32(out_$i61);
    goto corral_source_split_4895;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i16($M.0, out_$p60);
    goto corral_source_split_4894;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p57, $mul.ref(out_$i58, 12)), $mul.ref(6, 1));
    goto corral_source_split_4893;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    goto corral_source_split_4892;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(out_$i52);
    goto corral_source_split_4891;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_4890;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 13688)), $mul.ref(13608, 1)), $mul.ref(8, 1));
    goto corral_source_split_4889;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i53);
    goto corral_source_split_4888;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i16(in_$i47);
    goto corral_source_split_4887;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i53, out_$i54, out_$p56, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i52 := zd_mac_rx_loop_$bb17(in_$p3, in_$p4, in_$i47, in_$p49, out_$i53, out_$i54, out_$p56, out_$p57, out_$i58, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i52);
    return;

  exit:
    return;
}



procedure zd_mac_rx_loop_$bb17(in_$p3: ref, in_$p4: ref, in_$i47: i8, in_$p49: ref, in_$i53: i16, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i1, in_$i64: i8, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i52: i32) returns (out_$i53: i16, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i1, out_$i64: i8, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i52: i32);
  modifies $M.0;



implementation filter_ack_loop_$bb29(in_$p0: ref, in_$p3: ref, in_$p11: ref, in_$i46: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$p66: ref, in_$i67: i8, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$i56: i32) returns (out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$p66: ref, out_$i67: i8, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$i56: i32)
{

  entry:
    out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i56 := in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i56;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_5090;

  $bb34:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := out_$i69;
    goto $bb34_dummy;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i69, in_$i46);
    goto corral_source_split_5112;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i56, 1);
    call {:si_unique_call 1232} {:cexpr "i"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_5111;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p66, out_$i68);
    goto corral_source_split_5110;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i8(out_$i67, $sub.i8(0, 9));
    goto corral_source_split_5109;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i8($M.0, out_$p66);
    goto corral_source_split_5108;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p3, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_5107;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} zd_mac_tx_status(in_$p0, out_$p57, out_$i65, $0.ref);
    goto corral_source_split_5106;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5105;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    out_$i65 := 0;
    goto $bb33;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i64;
    goto $bb33;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_5101;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p3, $mul.ref(0, 13688)), $mul.ref(13684, 1));
    goto corral_source_split_5100;

  $bb31:
    assume out_$i62 == 1;
    goto corral_source_split_5099;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_5097;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i8.i32(out_$i60);
    goto corral_source_split_5096;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i8($M.0, out_$p59);
    goto corral_source_split_5095;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p58, $mul.ref(13680, 1));
    goto corral_source_split_5094;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_5093;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} out_$p57 := __skb_dequeue(in_$p11);
    goto corral_source_split_5092;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb32:
    assume !(out_$i62 == 1);
    goto corral_source_split_5103;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i56 := filter_ack_loop_$bb29(in_$p0, in_$p3, in_$p11, in_$i46, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i56);
    return;

  exit:
    return;
}



procedure filter_ack_loop_$bb29(in_$p0: ref, in_$p3: ref, in_$p11: ref, in_$i46: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$p66: ref, in_$i67: i8, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$i56: i32) returns (out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$p66: ref, out_$i67: i8, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$i56: i32);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation filter_ack_loop_$bb8(in_$p1: ref, in_$p3: ref, in_$p11: ref, in_$i16: i64, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i8, in_$i29: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i1, in_$i39: i8, in_$i40: i1, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$p30: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$i19: i32, in_$p20: ref, in_$i53: i32) returns (out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i8, out_$i29: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i1, out_$i39: i8, out_$i40: i1, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$p30: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$i19: i32, out_$p20: ref, out_$i53: i32)
{

  entry:
    out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p30, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i19, out_$p20, out_$i53 := in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p30, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i19, in_$p20, in_$i53;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5040;

  $bb21:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i19, out_$p20 := out_$i21, out_$p50;
    goto $bb21_dummy;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i21;
    assume true;
    goto $bb21;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, in_$i16);
    goto corral_source_split_5062;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_5061;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_5060;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5059;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_5058;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p30, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_5057;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5056;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p20;
    goto $bb14;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p20;
    goto $bb14;

  $bb12:
    assume out_$i29 == 1;
    goto corral_source_split_5054;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i8.i1(out_$i28);
    goto corral_source_split_5052;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i8(out_$i27);
    call {:si_unique_call 1225} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i28);
    goto corral_source_split_5051;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} out_$i27 := skb_queue_is_first(in_$p11, out_$p20);
    goto corral_source_split_5050;

  $bb10:
    assume out_$i26 == 1;
    goto corral_source_split_5049;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_5047;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_5046;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, out_$p23);
    goto corral_source_split_5045;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p22, $mul.ref(13680, 1));
    goto corral_source_split_5044;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_5043;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i19, 1);
    call {:si_unique_call 1223} {:cexpr "position"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5042;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i21;
    assume true;
    goto $bb18;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_5076;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} out_$i42 := ldv__builtin_expect(out_$i41, 1);
    call {:si_unique_call 1229} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_5075;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i1.i64(out_$i40);
    goto corral_source_split_5074;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i8.i1(out_$i39);
    goto corral_source_split_5073;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i1.i8(out_$i38);
    call {:si_unique_call 1227} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_5072;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} out_$i38 := ether_addr_equal(out_$p35, out_$p37);
    goto corral_source_split_5071;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_5070;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_5069;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_5068;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 30)), $mul.ref(10, 1));
    goto corral_source_split_5067;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_5066;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_5065;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p20, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5064;

  $bb11:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p30, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i19, out_$p20, out_$i53 := filter_ack_loop_$bb8(in_$p1, in_$p3, in_$p11, in_$i16, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p30, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i19, out_$p20, out_$i53);
    return;

  exit:
    return;
}



procedure filter_ack_loop_$bb8(in_$p1: ref, in_$p3: ref, in_$p11: ref, in_$i16: i64, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i8, in_$i29: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i1, in_$i39: i8, in_$i40: i1, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$p30: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$i19: i32, in_$p20: ref, in_$i53: i32) returns (out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i8, out_$i29: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i1, out_$i39: i8, out_$i40: i1, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$p30: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$i19: i32, out_$p20: ref, out_$i53: i32);



implementation zd_mac_tx_status_loop_$bb36(in_$p6: ref, in_$i19: i32, in_$i59: i64, in_$i136: i32, in_$i137: i64, in_$p139: ref, in_$i140: i32, in_$i141: i8, in_$i142: i64, in_$p143: ref, in_$p144: ref, in_$p147: ref, in_$i148: i64, in_$p149: ref, in_$p150: ref, in_$p153: ref, in_$i154: i8, in_$i155: i8, in_$i156: i8, in_$i157: i32, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i135: i32, in_$i161: i32) returns (out_$i136: i32, out_$i137: i64, out_$p139: ref, out_$i140: i32, out_$i141: i8, out_$i142: i64, out_$p143: ref, out_$p144: ref, out_$p147: ref, out_$i148: i64, out_$p149: ref, out_$p150: ref, out_$p153: ref, out_$i154: i8, out_$i155: i8, out_$i156: i8, out_$i157: i32, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i135: i32, out_$i161: i32)
{

  entry:
    out_$i136, out_$i137, out_$p139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p147, out_$i148, out_$p149, out_$p150, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i135, out_$i161 := in_$i136, in_$i137, in_$p139, in_$i140, in_$i141, in_$i142, in_$p143, in_$p144, in_$p147, in_$i148, in_$p149, in_$p150, in_$p153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i135, in_$i161;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_5401;

  $bb38:
    assume out_$i160 == 1;
    assume {:verifier.code 0} true;
    out_$i135 := out_$i157;
    goto $bb38_dummy;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$i161 := out_$i157;
    assume true;
    goto $bb38;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    out_$i160 := $and.i1(out_$i158, out_$i159);
    goto corral_source_split_5423;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    out_$i159 := $slt.i32(out_$i157, in_$i19);
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$i158 := $sle.i32(out_$i157, 3);
    goto corral_source_split_5421;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i32(out_$i135, 1);
    call {:si_unique_call 1274} {:cexpr "i"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_5420;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p153, out_$i156);
    goto corral_source_split_5419;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    out_$i156 := $or.i8(out_$i155, 1);
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    out_$i155 := $and.i8(out_$i154, $sub.i8(0, 32));
    goto corral_source_split_5417;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i8($M.0, out_$p153);
    goto corral_source_split_5416;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref($add.ref($add.ref(out_$p150, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(out_$i148, 4)), $mul.ref(1, 1));
    goto corral_source_split_5415;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    out_$p150 := $bitcast.ref.ref(out_$p149);
    goto corral_source_split_5414;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(in_$p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5413;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    out_$i148 := $sext.i32.i64(out_$i135);
    goto corral_source_split_5412;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p147, out_$i141);
    goto corral_source_split_5411;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($add.ref($add.ref(out_$p144, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(out_$i142, 4)), $mul.ref(0, 1));
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    out_$p144 := $bitcast.ref.ref(out_$p143);
    goto corral_source_split_5409;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(in_$p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    out_$i142 := $sext.i32.i64(out_$i135);
    goto corral_source_split_5407;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    out_$i141 := $trunc.i32.i8(out_$i140);
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i32($M.26, out_$p139);
    goto corral_source_split_5405;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    out_$i137 := $sext.i32.i64(out_$i136);
    out_$p139 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(in_$i59, 44)), $mul.ref(4, 1)), $mul.ref(out_$i137, 4));
    goto corral_source_split_5404;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i136 := $add.i32(in_$i19, $sub.i32(0, 1));
    goto corral_source_split_5403;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i136, out_$i137, out_$p139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p147, out_$i148, out_$p149, out_$p150, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i135, out_$i161 := zd_mac_tx_status_loop_$bb36(in_$p6, in_$i19, in_$i59, out_$i136, out_$i137, out_$p139, out_$i140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p147, out_$i148, out_$p149, out_$p150, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i135, out_$i161);
    return;

  exit:
    return;
}



procedure zd_mac_tx_status_loop_$bb36(in_$p6: ref, in_$i19: i32, in_$i59: i64, in_$i136: i32, in_$i137: i64, in_$p139: ref, in_$i140: i32, in_$i141: i8, in_$i142: i64, in_$p143: ref, in_$p144: ref, in_$p147: ref, in_$i148: i64, in_$p149: ref, in_$p150: ref, in_$p153: ref, in_$i154: i8, in_$i155: i8, in_$i156: i8, in_$i157: i32, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i135: i32, in_$i161: i32) returns (out_$i136: i32, out_$i137: i64, out_$p139: ref, out_$i140: i32, out_$i141: i8, out_$i142: i64, out_$p143: ref, out_$p144: ref, out_$p147: ref, out_$i148: i64, out_$p149: ref, out_$p150: ref, out_$p153: ref, out_$i154: i8, out_$i155: i8, out_$i156: i8, out_$i157: i32, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i135: i32, out_$i161: i32);
  modifies $M.0;



implementation zd_mac_tx_status_loop_$bb28(in_$p6: ref, in_$i19: i32, in_$i59: i64, in_$i106: i64, in_$p108: ref, in_$i109: i32, in_$i110: i8, in_$i111: i64, in_$p112: ref, in_$p113: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$p119: ref, in_$p122: ref, in_$i123: i8, in_$i124: i8, in_$i125: i8, in_$i126: i32, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i105: i32, in_$i130: i32) returns (out_$i106: i64, out_$p108: ref, out_$i109: i32, out_$i110: i8, out_$i111: i64, out_$p112: ref, out_$p113: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$p119: ref, out_$p122: ref, out_$i123: i8, out_$i124: i8, out_$i125: i8, out_$i126: i32, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i105: i32, out_$i130: i32)
{

  entry:
    out_$i106, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p116, out_$i117, out_$p118, out_$p119, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i105, out_$i130 := in_$i106, in_$p108, in_$i109, in_$i110, in_$i111, in_$p112, in_$p113, in_$p116, in_$i117, in_$p118, in_$p119, in_$p122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i105, in_$i130;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5370;

  $bb30:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$i105 := out_$i126;
    goto $bb30_dummy;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    out_$i130 := out_$i126;
    assume true;
    goto $bb30;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$i129 := $and.i1(out_$i127, out_$i128);
    goto corral_source_split_5391;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i126, in_$i19);
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    out_$i127 := $sle.i32(out_$i126, 2);
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$i126 := $add.i32(out_$i105, 1);
    call {:si_unique_call 1273} {:cexpr "i"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p122, out_$i125);
    goto corral_source_split_5387;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    out_$i125 := $or.i8(out_$i124, 1);
    goto corral_source_split_5386;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    out_$i124 := $and.i8(out_$i123, $sub.i8(0, 32));
    goto corral_source_split_5385;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i8($M.0, out_$p122);
    goto corral_source_split_5384;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref($add.ref($add.ref(out_$p119, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(out_$i117, 4)), $mul.ref(1, 1));
    goto corral_source_split_5383;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    out_$p119 := $bitcast.ref.ref(out_$p118);
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5381;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    out_$i117 := $sext.i32.i64(out_$i105);
    goto corral_source_split_5380;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p116, out_$i110);
    goto corral_source_split_5379;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref($add.ref($add.ref(out_$p113, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(out_$i111, 4)), $mul.ref(0, 1));
    goto corral_source_split_5378;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(out_$p112);
    goto corral_source_split_5377;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p6, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5376;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    out_$i111 := $sext.i32.i64(out_$i105);
    goto corral_source_split_5375;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    out_$i110 := $trunc.i32.i8(out_$i109);
    goto corral_source_split_5374;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.26, out_$p108);
    goto corral_source_split_5373;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i105);
    out_$p108 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(in_$i59, 44)), $mul.ref(4, 1)), $mul.ref(out_$i106, 4));
    goto corral_source_split_5372;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i106, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p116, out_$i117, out_$p118, out_$p119, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i105, out_$i130 := zd_mac_tx_status_loop_$bb28(in_$p6, in_$i19, in_$i59, out_$i106, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p116, out_$i117, out_$p118, out_$p119, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i105, out_$i130);
    return;

  exit:
    return;
}



procedure zd_mac_tx_status_loop_$bb28(in_$p6: ref, in_$i19: i32, in_$i59: i64, in_$i106: i64, in_$p108: ref, in_$i109: i32, in_$i110: i8, in_$i111: i64, in_$p112: ref, in_$p113: ref, in_$p116: ref, in_$i117: i64, in_$p118: ref, in_$p119: ref, in_$p122: ref, in_$i123: i8, in_$i124: i8, in_$i125: i8, in_$i126: i32, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i105: i32, in_$i130: i32) returns (out_$i106: i64, out_$p108: ref, out_$i109: i32, out_$i110: i8, out_$i111: i64, out_$p112: ref, out_$p113: ref, out_$p116: ref, out_$i117: i64, out_$p118: ref, out_$p119: ref, out_$p122: ref, out_$i123: i8, out_$i124: i8, out_$i125: i8, out_$i126: i32, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i105: i32, out_$i130: i32);
  modifies $M.0;



implementation zd_mac_tx_failed_loop_$bb49(in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p19: ref, in_$i111: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i8, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$i134: i8, in_$i135: i8, in_$i136: i32, in_$i137: i1, in_$i121: i32) returns (out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i8, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$i134: i8, out_$i135: i8, out_$i136: i32, out_$i137: i1, out_$i121: i32)
{

  entry:
    out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i121 := in_$p122, in_$p123, in_$p124, in_$i125, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$i131, in_$p132, in_$p133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i121;
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_6158;

  $bb57:
    assume out_$i137 == 1;
    assume {:verifier.code 0} true;
    out_$i121 := out_$i136;
    goto $bb57_dummy;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    out_$i137 := $sle.i32(out_$i136, in_$i111);
    goto corral_source_split_6187;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    out_$i136 := $add.i32(out_$i121, 1);
    call {:si_unique_call 1417} {:cexpr "i"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_6186;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p133, out_$i135);
    goto corral_source_split_6185;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    out_$i135 := $and.i8(out_$i134, $sub.i8(0, 9));
    goto corral_source_split_6184;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i8($M.0, out_$p133);
    goto corral_source_split_6183;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p6, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_6182;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} zd_mac_tx_status(in_$p5, out_$p122, out_$i130, out_$p132);
    goto corral_source_split_6181;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_6180;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    out_$p132 := $0.ref;
    goto $bb56;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    out_$p132 := in_$p8;
    goto $bb56;

  $bb54:
    assume out_$i131 == 1;
    goto corral_source_split_6176;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i121, in_$i111);
    goto corral_source_split_6174;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i130 := 0;
    goto $bb53;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$i130 := out_$i129;
    goto $bb53;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i32($M.0, out_$p128);
    goto corral_source_split_6169;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p6, $mul.ref(0, 13688)), $mul.ref(13684, 1));
    goto corral_source_split_6168;

  $bb51:
    assume out_$i127 == 1;
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 0);
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$i126 := $zext.i8.i32(out_$i125);
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i8($M.0, out_$p124);
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref(out_$p123, $mul.ref(13680, 1));
    goto corral_source_split_6162;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    out_$p123 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_6161;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} out_$p122 := __skb_dequeue(in_$p19);
    goto corral_source_split_6160;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb52:
    assume !(out_$i127 == 1);
    goto corral_source_split_6171;

  $bb55:
    assume !(out_$i131 == 1);
    goto corral_source_split_6178;

  $bb57_dummy:
    call {:si_unique_call 1} out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i121 := zd_mac_tx_failed_loop_$bb49(in_$p5, in_$p6, in_$p8, in_$p19, in_$i111, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i121);
    return;

  exit:
    return;
}



procedure zd_mac_tx_failed_loop_$bb49(in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p19: ref, in_$i111: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i8, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$i134: i8, in_$i135: i8, in_$i136: i32, in_$i137: i1, in_$i121: i32) returns (out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i8, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$i134: i8, out_$i135: i8, out_$i136: i32, out_$i137: i1, out_$i121: i32);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation zd_mac_tx_failed_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$p9: ref, in_$i18: i32, in_$p19: ref, in_$i24: i64, in_$i29: i32, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i8, in_$i41: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i1, in_$i51: i8, in_$i52: i1, in_$i53: i32, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p62: ref, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i67: i1, in_$i66: i1, in_$i68: i32, in_$i69: i64, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i24, in_$i79: i24, in_$i80: i24, in_$p81: ref, in_$p82: ref, in_$i83: i8, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$i88: i64, in_$i90: i1, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i64, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p101: ref, in_$i102: i16, in_$i103: i8, in_$p104: ref, in_$i105: i8, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$p42: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$i27: i32, in_$p28: ref, in_$i118: i32) returns (out_$i29: i32, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i8, out_$i41: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i1, out_$i51: i8, out_$i52: i1, out_$i53: i32, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p62: ref, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i67: i1, out_$i66: i1, out_$i68: i32, out_$i69: i64, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i24, out_$i79: i24, out_$i80: i24, out_$p81: ref, out_$p82: ref, out_$i83: i8, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$i88: i64, out_$i90: i1, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i64, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p101: ref, out_$i102: i16, out_$i103: i8, out_$p104: ref, out_$i105: i8, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$p42: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$i27: i32, out_$p28: ref, out_$i118: i32)
{

  entry:
    out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i66, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p42, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i27, out_$p28, out_$i118 := in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p62, in_$i63, in_$i64, in_$i65, in_$i67, in_$i66, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p97, in_$i98, in_$i99, in_$p101, in_$i102, in_$i103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$p42, in_$p112, in_$p113, in_$p114, in_$p115, in_$i116, in_$i117, in_$i27, in_$p28, in_$i118;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6030;

  $bb41:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    out_$i27, out_$p28 := out_$i29, out_$p115;
    goto $bb41_dummy;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i29;
    assume true;
    goto $bb41;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i64(out_$i116, in_$i24);
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$i116 := $p2i.ref.i64(out_$p115);
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p113, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6055;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(out_$p112);
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p42, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6053;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6052;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$p42 := out_$p28;
    goto $bb13;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p42 := out_$p28;
    goto $bb13;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    out_$p42 := out_$p28;
    goto $bb13;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    out_$p42 := out_$p28;
    goto $bb13;

  $bb11:
    assume out_$i41 == 1;
    goto corral_source_split_6050;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i8.i1(out_$i40);
    goto corral_source_split_6048;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i8(out_$i39);
    call {:si_unique_call 1400} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i40);
    goto corral_source_split_6047;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} out_$i39 := skb_queue_is_first(in_$p19, out_$p28);
    goto corral_source_split_6046;

  $bb9:
    assume out_$i38 == 1;
    goto corral_source_split_6045;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i32(out_$i36);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.0, out_$p35);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p34, $mul.ref(13680, 1));
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_6039;

  $bb6:
    assume out_$i33 == 1;
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_6035;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.0, out_$p30);
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p9, $mul.ref(0, 12)), $mul.ref(11, 1));
    goto corral_source_split_6033;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i27, 1);
    call {:si_unique_call 1398} {:cexpr "position"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19:
    assume out_$i56 == 1;
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} out_$i55 := ldv__builtin_expect(out_$i54, 0);
    call {:si_unique_call 1404} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i53);
    goto corral_source_split_6074;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6073;

  $bb17:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := 1;
    goto $bb18;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$i53 := 0;
    goto $bb18;

  $bb16:
    assume out_$i52 == 1;
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i8.i1(out_$i51);
    goto corral_source_split_6069;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i1.i8(out_$i50);
    call {:si_unique_call 1402} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i51);
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} out_$i50 := ether_addr_equal(out_$p47, out_$p49);
    goto corral_source_split_6067;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_6066;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p9, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_6061;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p28, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_6060;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb8;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i93 == 1;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i90 == 1;
    goto $bb32;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$i90 := $sle.i32(in_$i18, 0);
    goto corral_source_split_6127;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i88 := $sext.i32.i64(out_$i64);
    goto corral_source_split_6126;

  $bb26:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} dump_stack();
    goto corral_source_split_6124;

  $bb28:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} __dynamic_pr_debug.ref.ref.ref.i32.ref(in_$p1, .str.4, .str.31, 542, .str.42);
    goto corral_source_split_6122;

  $bb27:
    assume out_$i87 == 1;
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, 0);
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} out_$i86 := ldv__builtin_expect(out_$i85, 0);
    call {:si_unique_call 1410} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$i85 := $and.i64(out_$i84, 1);
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i8.i64(out_$i83);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i8($M.9, out_$p82);
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, out_$p81, 1);
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, out_$p77, out_$i80);
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$i80 := $or.i24(out_$i79, 542);
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$i79 := $and.i24(out_$i78, $sub.i24(0, 262144));
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i24($M.8, out_$p77);
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p75, .str.4);
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p74, .str.31);
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p73, .str.41);
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p72, .str.1);
    goto corral_source_split_6099;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6098;

  $bb25:
    assume out_$i71 == 1;
    goto corral_source_split_6097;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, 0);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} out_$i70 := ldv__builtin_expect(out_$i69, 0);
    call {:si_unique_call 1408} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i70);
    goto corral_source_split_6091;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i68);
    goto corral_source_split_6090;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i1.i32(out_$i66);
    goto corral_source_split_6089;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6088;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i67;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    assume out_$i65 == 1;
    goto $bb23;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$i66 := 1;
    assume true;
    goto $bb22, $bb24;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i64, 0);
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i8.i32(out_$i63);
    call {:si_unique_call 1406} {:cexpr "first_idx"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_6085;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.0, out_$p62);
    goto corral_source_split_6084;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref($add.ref(out_$p59, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_6082;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6081;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} out_$p57 := IEEE80211_SKB_CB(out_$p28);
    goto corral_source_split_6080;

  $bb20:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$i67 := $ugt.i32(out_$i64, 11);
    goto corral_source_split_6095;

  $bb24:
    assume !(out_$i65 == 1);
    goto corral_source_split_6094;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i92, in_$i18);
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.26, out_$p91);
    goto corral_source_split_6130;

  $bb33:
    assume !(out_$i90 == 1);
    out_$p91 := $add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(out_$i88, 44)), $mul.ref(0, 1));
    goto corral_source_split_6129;

  $bb37:
    assume out_$i108 == 1;
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i29;
    assume true;
    goto $bb37;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i106, out_$i107);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i32(out_$i103);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i8.i32(out_$i105);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i8($M.0, out_$p104);
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p9, $mul.ref(0, 12)), $mul.ref(2, 1));
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i16.i8(out_$i102);
    call {:si_unique_call 1414} {:cexpr "final_rate"} boogie_si_record_i8(out_$i103);
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i16($M.0, out_$p101);
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(zd_rates, $mul.ref(0, 144)), $mul.ref(out_$i99, 12)), $mul.ref(6, 1));
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(out_$i98);
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.26, out_$p97);
    call {:si_unique_call 1413} {:cexpr "final_idx"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i94);
    out_$p97 := $add.ref($add.ref($add.ref($add.ref(zd_retry_rates, $mul.ref(0, 528)), $mul.ref(out_$i88, 44)), $mul.ref(4, 1)), $mul.ref(out_$i95, 4));
    goto corral_source_split_6134;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(in_$i18, $sub.i32(0, 1));
    goto corral_source_split_6133;

  $bb35:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i66, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p42, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i27, out_$p28, out_$i118 := zd_mac_tx_failed_loop_$bb4(in_$p1, in_$p6, in_$p9, in_$i18, in_$p19, in_$i24, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i66, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p42, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i27, out_$p28, out_$i118);
    return;

  exit:
    return;
}



procedure zd_mac_tx_failed_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$p9: ref, in_$i18: i32, in_$p19: ref, in_$i24: i64, in_$i29: i32, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i8, in_$i41: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i1, in_$i51: i8, in_$i52: i1, in_$i53: i32, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p62: ref, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i67: i1, in_$i66: i1, in_$i68: i32, in_$i69: i64, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i24, in_$i79: i24, in_$i80: i24, in_$p81: ref, in_$p82: ref, in_$i83: i8, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$i88: i64, in_$i90: i1, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i64, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p101: ref, in_$i102: i16, in_$i103: i8, in_$p104: ref, in_$i105: i8, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$p42: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$i27: i32, in_$p28: ref, in_$i118: i32) returns (out_$i29: i32, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i8, out_$i41: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i1, out_$i51: i8, out_$i52: i1, out_$i53: i32, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p62: ref, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i67: i1, out_$i66: i1, out_$i68: i32, out_$i69: i64, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i24, out_$i79: i24, out_$i80: i24, out_$p81: ref, out_$p82: ref, out_$i83: i8, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$i88: i64, out_$i90: i1, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i64, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p101: ref, out_$i102: i16, out_$i103: i8, out_$p104: ref, out_$i105: i8, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$p42: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$i27: i32, out_$p28: ref, out_$i118: i32);
  modifies $M.9, $M.8, $M.7, $M.6, $M.5, $M.4;



implementation read_values_loop_$bb21(in_$p1: ref, in_$i2: i64, in_$p5: ref, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i8, in_$i75: i64, in_$p76: ref, in_$i77: i32, in_$i78: i64, in_$i79: i1, in_$i69: i32) returns (out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i8, out_$i75: i64, out_$p76: ref, out_$i77: i32, out_$i78: i64, out_$i79: i1, out_$i69: i32)
{

  entry:
    out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i69 := in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i69;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7480;

  $bb23:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := out_$i77;
    goto $bb23_dummy;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    out_$i79 := $ult.i64(out_$i78, in_$i2);
    goto corral_source_split_7492;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i77);
    goto corral_source_split_7491;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i69, 1);
    call {:si_unique_call 1750} {:cexpr "i"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_7490;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p76, out_$i74);
    goto corral_source_split_7489;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(in_$p1, $mul.ref(out_$i75, 1));
    goto corral_source_split_7488;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i69);
    goto corral_source_split_7487;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i32.i8(out_$i73);
    goto corral_source_split_7486;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    out_$i73 := $lshr.i32(out_$i70, out_$i72);
    goto corral_source_split_7485;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    out_$i72 := $mul.i32(out_$i71, 8);
    goto corral_source_split_7484;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    out_$i71 := $srem.i32(out_$i69, 3);
    goto corral_source_split_7483;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7482;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i69 := read_values_loop_$bb21(in_$p1, in_$i2, in_$p5, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i69);
    return;

  exit:
    return;
}



procedure read_values_loop_$bb21(in_$p1: ref, in_$i2: i64, in_$p5: ref, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i8, in_$i75: i64, in_$p76: ref, in_$i77: i32, in_$i78: i64, in_$i79: i1, in_$i69: i32) returns (out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i8, out_$i75: i64, out_$p76: ref, out_$i77: i32, out_$i78: i64, out_$i79: i1, out_$i69: i32);
  modifies $M.0;



implementation read_values_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i4: i32, in_$p5: ref, in_$i30: i32, in_$i36: i32, in_$i35: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i64, in_$i42: i1, in_$i44: i32, in_$i45: i32, in_$i46: i8, in_$i47: i64, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i8, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i8, in_$i59: i64, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i8, in_$i65: i64, in_$p66: ref, in_$i43: i32, in_$i80: i32, in_$i81: i16, in_$i82: i32, in_$i83: i32, in_$i84: i16, in_$i85: i32, in_$i86: i1) returns (out_$i36: i32, out_$i35: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i64, out_$i42: i1, out_$i44: i32, out_$i45: i32, out_$i46: i8, out_$i47: i64, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i8, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i8, out_$i59: i64, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i8, out_$i65: i64, out_$p66: ref, out_$i43: i32, out_$i80: i32, out_$i81: i16, out_$i82: i32, out_$i83: i32, out_$i84: i16, out_$i85: i32, out_$i86: i1)
{

  entry:
    out_$i36, out_$i35, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i43, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86 := in_$i36, in_$i35, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i43, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb26:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := out_$i61;
    goto $bb26_dummy;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i85;
    assume true;
    goto $bb26;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 0);
    goto corral_source_split_7473;

  SeqInstr_642:
    call {:si_unique_call 1749} {:cexpr "r"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_7472;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} out_$i85 := zd_ioread32_locked(in_$p0, in_$p5, out_$i84);
    goto SeqInstr_641;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    out_$i84 := $trunc.i32.i16(out_$i83);
    goto corral_source_split_7471;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i82, in_$i30);
    goto corral_source_split_7470;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i16.i32(out_$i81);
    goto corral_source_split_7469;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    out_$i81 := $trunc.i32.i16(out_$i80);
    goto corral_source_split_7468;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i80 := $sdiv.i32(out_$i61, 2);
    goto corral_source_split_7467;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p66, out_$i64);
    goto corral_source_split_7465;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(in_$p1, $mul.ref(out_$i65, 1));
    goto corral_source_split_7464;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i55);
    goto corral_source_split_7463;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i32.i8(out_$i63);
    goto corral_source_split_7462;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    out_$i63 := $lshr.i32(out_$i62, 24);
    goto corral_source_split_7461;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7460;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i55, 1);
    call {:si_unique_call 1747} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_7459;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p60, out_$i58);
    goto corral_source_split_7458;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(in_$p1, $mul.ref(out_$i59, 1));
    goto corral_source_split_7457;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i49);
    goto corral_source_split_7456;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i32.i8(out_$i57);
    goto corral_source_split_7455;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    out_$i57 := $lshr.i32(out_$i56, 16);
    goto corral_source_split_7454;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7453;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i49, 1);
    call {:si_unique_call 1746} {:cexpr "i"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_7452;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p54, out_$i52);
    goto corral_source_split_7451;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(in_$p1, $mul.ref(out_$i53, 1));
    goto corral_source_split_7450;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i44);
    goto corral_source_split_7449;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i32.i8(out_$i51);
    goto corral_source_split_7448;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    out_$i51 := $lshr.i32(out_$i50, 8);
    goto corral_source_split_7447;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7446;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i44, 1);
    call {:si_unique_call 1745} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_7445;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p48, out_$i46);
    goto corral_source_split_7444;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(in_$p1, $mul.ref(out_$i47, 1));
    goto corral_source_split_7443;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i35);
    goto corral_source_split_7442;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i8(out_$i45);
    goto corral_source_split_7441;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7440;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i35, 1);
    call {:si_unique_call 1744} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_7439;

  $bb14:
    assume out_$i42 == 1;
    goto corral_source_split_7438;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i35;
    assume true;
    goto $bb14;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    out_$i42 := $ult.i64(out_$i41, in_$i2);
    goto corral_source_split_7436;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_7435;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i35, 4);
    goto corral_source_split_7434;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p5, out_$i39);
    goto corral_source_split_7433;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i32(out_$i38, in_$i4);
    goto corral_source_split_7432;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7431;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i36, out_$i35, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i43, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86 := read_values_loop_$bb10(in_$p0, in_$p1, in_$i2, in_$i4, in_$p5, in_$i30, out_$i36, out_$i35, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i43, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86);
    return;

  exit:
    return;
}



procedure read_values_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i4: i32, in_$p5: ref, in_$i30: i32, in_$i36: i32, in_$i35: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i64, in_$i42: i1, in_$i44: i32, in_$i45: i32, in_$i46: i8, in_$i47: i64, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i8, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i8, in_$i59: i64, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i8, in_$i65: i64, in_$p66: ref, in_$i43: i32, in_$i80: i32, in_$i81: i16, in_$i82: i32, in_$i83: i32, in_$i84: i16, in_$i85: i32, in_$i86: i1) returns (out_$i36: i32, out_$i35: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i64, out_$i42: i1, out_$i44: i32, out_$i45: i32, out_$i46: i8, out_$i47: i64, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i8, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i8, out_$i59: i64, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i8, out_$i65: i64, out_$p66: ref, out_$i43: i32, out_$i80: i32, out_$i81: i16, out_$i82: i32, out_$i83: i32, out_$i84: i16, out_$i85: i32, out_$i86: i1);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.10, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation {:SIextraRecBound 16} zd_usb_rfwrite_loop_$bb30(in_$i1: i32, in_$i2: i8, in_$p4: ref, in_$p84: ref, in_$i89: i32, in_$i92: i16, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i16, in_$i102: i16, in_$i103: i64, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i91: i32) returns (out_$i92: i16, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i16, out_$i102: i16, out_$i103: i64, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i91: i32)
{

  entry:
    out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i91 := in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p105, in_$i106, in_$i107, in_$i91;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_8485;

  $bb35:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := out_$i106;
    goto $bb35_dummy;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    out_$i107 := $sgt.i32(in_$i89, out_$i106);
    goto corral_source_split_8505;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i32(out_$i91, 1);
    call {:si_unique_call 1924} {:cexpr "i"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_8504;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p105, out_$i102);
    goto corral_source_split_8503;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($add.ref(in_$p84, $mul.ref(0, 6)), $mul.ref(6, 1)), $mul.ref(out_$i103, 2));
    goto corral_source_split_8502;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    out_$i103 := $sext.i32.i64(out_$i91);
    goto corral_source_split_8501;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8500;

  $bb33:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := out_$i92;
    goto $bb34;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    out_$i102 := out_$i101;
    goto $bb34;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    out_$i101 := $trunc.i32.i16(out_$i100);
    call {:si_unique_call 1923} {:cexpr "bv"} boogie_si_record_i16(out_$i101);
    goto corral_source_split_8498;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    out_$i100 := $or.i32(out_$i99, 8);
    goto corral_source_split_8497;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i16.i32(out_$i92);
    goto corral_source_split_8496;

  $bb32:
    assume out_$i98 == 1;
    goto corral_source_split_8495;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_8493;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    out_$i97 := $and.i32(out_$i96, in_$i1);
    goto corral_source_split_8492;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    out_$i96 := $shl.i32(1, out_$i95);
    goto corral_source_split_8491;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i32(out_$i94, out_$i91);
    goto corral_source_split_8490;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i93, $sub.i32(0, 1));
    goto corral_source_split_8489;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i8.i32(in_$i2);
    goto corral_source_split_8488;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i16($M.0, in_$p4);
    call {:si_unique_call 1922} {:cexpr "bv"} boogie_si_record_i16(out_$i92);
    goto corral_source_split_8487;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i91 := zd_usb_rfwrite_loop_$bb30(in_$i1, in_$i2, in_$p4, in_$p84, in_$i89, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i91);
    return;

  exit:
    return;
}



procedure zd_usb_rfwrite_loop_$bb30(in_$i1: i32, in_$i2: i8, in_$p4: ref, in_$p84: ref, in_$i89: i32, in_$i92: i16, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i16, in_$i102: i16, in_$i103: i64, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$i91: i32) returns (out_$i92: i16, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i16, out_$i102: i16, out_$i103: i64, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$i91: i32);
  modifies $M.0;



implementation zd_usb_rfwrite_loop_$bb25()
{

  entry:
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb25_dummy:
    call {:si_unique_call 1} zd_usb_rfwrite_loop_$bb25();
    return;

  exit:
    return;
}



procedure zd_usb_rfwrite_loop_$bb25();



implementation zd_rfwritev_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i8, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i32, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i15: i32, in_$i16: i1, in_$i5: i32) returns (out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i32, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i15: i32, out_$i16: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i5 := in_$i6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i15, in_$i16, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8613;

  $bb10:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i15;
    goto $bb10_dummy;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    out_$i16 := $ult.i32(out_$i15, in_$i2);
    goto corral_source_split_8628;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1955} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_8627;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i11;
    assume true;
    goto $bb7;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_8621;

  SeqInstr_852:
    call {:si_unique_call 1954} {:cexpr "r"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_8620;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} out_$i11 := zd_rfwrite_locked(in_$p0, out_$i8, out_$i10);
    goto SeqInstr_851;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    out_$i10 := $trunc.i32.i8(out_$i9);
    goto corral_source_split_8619;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i8.i32(in_$i3);
    goto corral_source_split_8618;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.40, out_$p7);
    goto corral_source_split_8617;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(in_$p1, $mul.ref(out_$i6, 4));
    goto corral_source_split_8616;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $zext.i32.i64(out_$i5);
    goto corral_source_split_8615;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i5 := zd_rfwritev_locked_loop_$bb4(in_$p0, in_$p1, in_$i2, in_$i3, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i5);
    return;

  exit:
    return;
}



procedure zd_rfwritev_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i8, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i32, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i15: i32, in_$i16: i1, in_$i5: i32) returns (out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i32, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i15: i32, out_$i16: i1, out_$i5: i32);
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.10, $CurrAddr, $M.40, $M.13, $M.2, $M.3, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, assertsPassed, $M.29, $M.39;



implementation zd_rfwritev_cr_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i5: i64, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i12: i32, in_$i13: i1, in_$i4: i32) returns (out_$i5: i64, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i12: i32, out_$i13: i1, out_$i4: i32)
{

  entry:
    out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i4 := in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i12, in_$i13, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9532;

  $bb10:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i12;
    goto $bb10_dummy;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    out_$i13 := $ult.i32(out_$i12, in_$i2);
    goto corral_source_split_9545;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i4, 1);
    call {:si_unique_call 2067} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_9544;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i8;
    assume true;
    goto $bb7;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_9538;

  SeqInstr_981:
    call {:si_unique_call 2066} {:cexpr "r"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_9537;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} out_$i8 := zd_rfwrite_cr_locked(in_$p0, out_$i7);
    goto SeqInstr_980;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.40, out_$p6);
    goto corral_source_split_9536;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref(in_$p1, $mul.ref(out_$i5, 4));
    goto corral_source_split_9535;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $zext.i32.i64(out_$i4);
    goto corral_source_split_9534;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i4 := zd_rfwritev_cr_locked_loop_$bb4(in_$p0, in_$p1, in_$i2, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i4);
    return;

  exit:
    return;
}



procedure zd_rfwritev_cr_locked_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i5: i64, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i12: i32, in_$i13: i1, in_$i4: i32) returns (out_$i5: i64, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i12: i32, out_$i13: i1, out_$i4: i32);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.40, $CurrAddr, $M.13, $M.2, $M.3, $M.10, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.28, $M.16, $M.18, $M.20, $M.22, assertsPassed, $M.33, $M.34, $M.17, $M.19, $M.21, $M.23, $M.29, $M.39;



implementation upload_code_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$i14: i1, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$i21: i16, in_$i22: i32, in_$i23: i16, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i16, in_$i38: i1, in_$p11: ref, in_$i12: i64, in_$i13: i16, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8) returns (out_$i14: i1, out_$i15: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$i21: i16, out_$i22: i32, out_$i23: i16, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i16, out_$i38: i1, out_$p11: ref, out_$i12: i64, out_$i13: i16, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8)
{

  entry:
    out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p11, out_$i12, out_$i13, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35 := in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p11, in_$i12, in_$i13, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12656;

  $bb16:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$i12, out_$i13 := out_$p31, out_$i30, out_$i37;
    goto $bb16_dummy;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i30, 0);
    goto corral_source_split_12692;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i16(out_$i36);
    call {:si_unique_call 2308} {:cexpr "code_offset"} boogie_si_record_i16(out_$i37);
    goto corral_source_split_12691;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i34, out_$i35);
    goto corral_source_split_12690;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i13);
    goto corral_source_split_12689;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_12688;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i64.i16(out_$i32);
    goto corral_source_split_12687;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    out_$i32 := $udiv.i64(out_$i29, 2);
    goto corral_source_split_12686;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p11, $mul.ref(out_$i29, 1));
    goto corral_source_split_12685;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i64(out_$i12, out_$i29);
    call {:si_unique_call 2307} {:cexpr "size"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_12684;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i28);
    call {:si_unique_call 2306} {:cexpr "transfer_size"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_12683;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i32(out_$i24, $sub.i32(0, 2));
    goto corral_source_split_12682;

  $bb14:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb14;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, 0);
    goto corral_source_split_12676;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} out_$i24 := usb_control_msg(in_$p0, out_$i18, 48, 64, out_$i20, 0, in_$p5, out_$i23, 1000);
    call {:si_unique_call 2304} {:cexpr "r"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_12675;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i32.i16(out_$i22);
    goto corral_source_split_12674;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i21);
    goto corral_source_split_12673;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i64.i16(out_$i15);
    goto corral_source_split_12672;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i16(out_$i19);
    goto corral_source_split_12671;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i16.i32(out_$i13);
    goto corral_source_split_12670;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    out_$i18 := $or.i32(out_$i17, $sub.i32(0, 2147483648));
    goto corral_source_split_12669;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} out_$i17 := __create_pipe(in_$p0, 0);
    call {:si_unique_call 2302} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_12668;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_33 := $M.0;
    out_cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 2300} out_cmdloc_dummy_var_35 := $memcpy.i8(out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, in_$p5, out_$p11, out_$i15, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_35;
    goto corral_source_split_12667;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} dev_printk.ref.ref.ref.ref.i64(.str.6, out_$p16, .str.261, .str.262, out_$i15);
    goto corral_source_split_12666;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_12665;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12664;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i12;
    goto $bb12;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    out_$i15 := 4096;
    goto $bb12;

  $bb10:
    assume out_$i14 == 1;
    goto corral_source_split_12660;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i14 := $ult.i64(4096, out_$i12);
    goto corral_source_split_12658;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume !(out_$i14 == 1);
    goto corral_source_split_12662;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p11, out_$i12, out_$i13, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35 := upload_code_loop_$bb8(in_$p0, in_$p5, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p11, out_$i12, out_$i13, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35);
    return;

  exit:
    return;
}



procedure upload_code_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$i14: i1, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$i21: i16, in_$i22: i32, in_$i23: i16, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i16, in_$i38: i1, in_$p11: ref, in_$i12: i64, in_$i13: i16, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8) returns (out_$i14: i1, out_$i15: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$i21: i16, out_$i22: i32, out_$i23: i16, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i16, out_$i38: i1, out_$p11: ref, out_$i12: i64, out_$i13: i16, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8);
  modifies $M.0;



implementation zd_mac_tx_to_dev_loop_$bb10(in_$p8: ref, in_$p9: ref, in_$p21: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i8, in_$i35: i8, in_$i36: i32, in_$i37: i1) returns (out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i8, out_$i35: i8, out_$i36: i32, out_$i37: i1)
{

  entry:
    out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37 := in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb15_dummy;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    out_$i37 := $ugt.i32(out_$i36, 50);
    goto corral_source_split_13104;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} out_$i36 := skb_queue_len(in_$p21);
    call {:si_unique_call 2409} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_13103;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p33, out_$i35);
    goto corral_source_split_13102;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i8(out_$i34, $sub.i8(0, 9));
    goto corral_source_split_13101;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_13100;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p9, $mul.ref(0, 13688)), $mul.ref(13680, 1));
    goto corral_source_split_13099;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} zd_mac_tx_status(in_$p8, out_$p24, out_$i32, $0.ref);
    goto corral_source_split_13098;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_13097;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    out_$i32 := 0;
    goto $bb14;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i31;
    goto $bb14;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_13093;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p9, $mul.ref(0, 13688)), $mul.ref(13684, 1));
    goto corral_source_split_13092;

  $bb12:
    assume out_$i29 == 1;
    goto corral_source_split_13091;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_13089;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(out_$i27);
    goto corral_source_split_13088;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.0, out_$p26);
    goto corral_source_split_13087;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p25, $mul.ref(13680, 1));
    goto corral_source_split_13086;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_13085;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} out_$p24 := skb_dequeue(in_$p21);
    goto corral_source_split_13084;

  $bb13:
    assume !(out_$i29 == 1);
    goto corral_source_split_13095;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37 := zd_mac_tx_to_dev_loop_$bb10(in_$p8, in_$p9, in_$p21, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure zd_mac_tx_to_dev_loop_$bb10(in_$p8: ref, in_$p9: ref, in_$p21: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i8, in_$i35: i8, in_$i36: i32, in_$i37: i1) returns (out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i8, out_$i35: i8, out_$i36: i32, out_$i37: i1);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation eject_installer_loop_$bb1(in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$p15: ref, in_$i20: i32, in_$i21: i1, in_$i4: i32, in_$i22: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$p15: ref, out_$i20: i32, out_$i21: i1, out_$i4: i32, out_$i22: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i20, out_$i21, out_$i4, out_$i22 := in_$p5, in_$p6, in_$i7, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i20, in_$i21, in_$i4, in_$i22;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_13931;

  $bb10:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i20;
    goto $bb10_dummy;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    assume true;
    goto $bb10;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    out_$i21 := $sge.i32(out_$i20, 0);
    goto corral_source_split_13953;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i4, 1);
    call {:si_unique_call 2586} {:cexpr "r"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_13952;

  $bb4:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    out_$i14, out_$p15 := out_$i4, out_$p9;
    assume true;
    goto $bb6;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_13943;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} out_$i12 := usb_endpoint_xfer_bulk(out_$p9);
    call {:si_unique_call 2584} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_13942;

  $bb3:
    assume out_$i11 == 1;
    goto corral_source_split_13941;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_13939;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} out_$i10 := usb_endpoint_dir_out(out_$p9);
    call {:si_unique_call 2582} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_13938;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 72)), $mul.ref(0, 1));
    goto corral_source_split_13937;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    goto corral_source_split_13936;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i4);
    goto corral_source_split_13935;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_13934;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13933;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i20, out_$i21, out_$i4, out_$i22 := eject_installer_loop_$bb1(in_$p3, out_$p5, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i20, out_$i21, out_$i4, out_$i22);
    return;

  exit:
    return;
}



procedure eject_installer_loop_$bb1(in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$p15: ref, in_$i20: i32, in_$i21: i1, in_$i4: i32, in_$i22: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$p15: ref, out_$i20: i32, out_$i21: i1, out_$i4: i32, out_$i22: i32);



implementation zd_beacon_done_loop_$bb14(in_$p0: ref, in_$p13: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1)
{

  entry:
    out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28 := in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    goto $bb20_dummy;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 0);
    goto corral_source_split_14365;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} out_$i27 := ieee80211_queue_stopped(out_$p26, 0);
    call {:si_unique_call 2694} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_14364;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, in_$p13);
    goto corral_source_split_14363;

  SeqInstr_1263:
    goto corral_source_split_14362;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} zd_op_tx(out_$p25, $0.ref, out_$p21);
    goto SeqInstr_1262;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_14361;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_14360;

  $bb17:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_14348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i64(out_$i22, 0);
    goto corral_source_split_14348;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_14347;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} out_$p21 := ieee80211_get_buffered_bc(out_$p18, out_$p20);
    goto corral_source_split_14346;

  corral_source_split_14344:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_14345;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 13688)), $mul.ref(11736, 1));
    goto corral_source_split_14344;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_14343;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 13688)), $mul.ref(11728, 1));
    goto corral_source_split_14342;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28 := zd_beacon_done_loop_$bb14(in_$p0, in_$p13, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure zd_beacon_done_loop_$bb14(in_$p0: ref, in_$p13: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.47, $M.13, $CurrAddr, assertsPassed;



implementation zd_tx_timeout_loop_$bb4(in_$i11: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p13: ref, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p13: ref, out_$p14: ref)
{

  entry:
    out_$p15, out_$p16, out_$p17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p13, out_$p14 := in_$p15, in_$p16, in_$p17, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p13, in_$p14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14728;

  $bb10:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$p14 := out_$p30, out_$p13;
    goto $bb10_dummy;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, in_$i11);
    goto corral_source_split_14752;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_14751;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_14750;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_14749;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_14748;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p13, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_14747;

  $bb7:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i64(out_$i24, 0);
    goto corral_source_split_14739;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i64(out_$i23, 1250);
    goto corral_source_split_14738;

  corral_source_split_14736:
    assume {:verifier.code 0} true;
    out_$i23 := $sub.i64(out_$i21, out_$i22);
    goto corral_source_split_14737;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, jiffies);
    goto corral_source_split_14736;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    call {:si_unique_call 2806} {:cexpr "trans_start"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_14735;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_14734;

  corral_source_split_14732:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(1, 8));
    goto corral_source_split_14733;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_14732;

  corral_source_split_14730:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_14731;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} out_$p15 := IEEE80211_SKB_CB(out_$p14);
    goto corral_source_split_14730;

  corral_source_split_14728:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p13, out_$p14 := zd_tx_timeout_loop_$bb4(in_$i11, out_$p15, out_$p16, out_$p17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p13, out_$p14);
    return;

  exit:
    return;
}



procedure zd_tx_timeout_loop_$bb4(in_$i11: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p13: ref, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p13: ref, out_$p14: ref);



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1)
{

  entry:
    out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55 := in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2952} out_$i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2953} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i2);
    call {:si_unique_call 2954} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i2);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb48_dummy;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_15214:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb23:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_15241:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_15240:
    assume {:verifier.code 0} true;
    $M.67 := out_$i25;
    call {:si_unique_call 2961} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_15241;

  corral_source_split_15239:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i24, 1);
    goto corral_source_split_15240;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    out_$i24 := $M.67;
    goto corral_source_split_15239;

  corral_source_split_15237:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2960} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_15238;

  $bb34:
    assume out_$i23 == 1;
    goto corral_source_split_15237;

  corral_source_split_15235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_15234:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_15235;

  corral_source_split_15233:
    assume {:verifier.code 0} true;
    out_$i22 := $M.86;
    goto corral_source_split_15234;

  corral_source_split_15232:
    assume {:verifier.code 0} true;
    $M.86 := out_$i21;
    call {:si_unique_call 2959} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_15233;

  SeqInstr_1347:
    goto corral_source_split_15232;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  corral_source_split_15231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} out_$i21 := probe(out_$p20, in_$p1);
    goto SeqInstr_1346;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    out_$p20 := $M.73;
    goto corral_source_split_15231;

  $bb32:
    assume out_$i19 == 1;
    goto corral_source_split_15230;

  corral_source_split_15228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_15227:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i18, 1);
    goto corral_source_split_15228;

  corral_source_split_15226:
    assume {:verifier.code 0} true;
    out_$i18 := $M.79;
    goto corral_source_split_15227;

  $bb30:
    assume out_$i17 == 1;
    goto corral_source_split_15226;

  $bb25:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i14, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_15220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2955} out_$i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 2956} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i14);
    call {:si_unique_call 2957} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i14);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i13 == 1;
    goto corral_source_split_15220;

  corral_source_split_15218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_15217:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_15218;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    out_$i12 := $M.79;
    goto corral_source_split_15217;

  $bb20:
    assume out_$i11 == 1;
    goto corral_source_split_15216;

  $bb18:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i3 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15253:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15252:
    assume {:verifier.code 0} true;
    $M.67 := out_$i32;
    call {:si_unique_call 2964} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_15253;

  corral_source_split_15251:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i32(out_$i31, 1);
    goto corral_source_split_15252;

  corral_source_split_15250:
    assume {:verifier.code 0} true;
    out_$i31 := $M.67;
    goto corral_source_split_15251;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2963} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15250;

  SeqInstr_1350:
    goto corral_source_split_15249;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  corral_source_split_15248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} disconnect(out_$p30);
    goto SeqInstr_1349;

  corral_source_split_15247:
    assume {:verifier.code 0} true;
    out_$p30 := $M.73;
    goto corral_source_split_15248;

  $bb42:
    assume out_$i29 == 1;
    goto corral_source_split_15247;

  corral_source_split_15245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_15244:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 0);
    goto corral_source_split_15245;

  corral_source_split_15243:
    assume {:verifier.code 0} true;
    out_$i28 := $M.87;
    goto corral_source_split_15244;

  $bb39:
    assume out_$i27 == 1;
    goto corral_source_split_15243;

  corral_source_split_15224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_15223:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 2);
    goto corral_source_split_15224;

  corral_source_split_15222:
    assume {:verifier.code 0} true;
    out_$i26 := $M.79;
    goto corral_source_split_15223;

  $bb27:
    assume out_$i16 == 1;
    goto corral_source_split_15222;

  $bb26:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb41;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb41;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} ldv_stop();
    goto corral_source_split_15255;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb29;

  $bb19:
    assume !(out_$i10 == 1);
    goto corral_source_split_15214;

  $bb50:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_15258:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_1353:
    goto corral_source_split_15258;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  corral_source_split_15257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} ldv_main_exported_7();
    goto SeqInstr_1352;

  $bb49:
    assume out_$i34 == 1;
    goto corral_source_split_15257;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_15209:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_15210;

  corral_source_split_15208:
    assume {:verifier.code 0} true;
    out_$i33 := $M.56;
    goto corral_source_split_15209;

  $bb16:
    assume out_$i9 == 1;
    goto corral_source_split_15208;

  $bb15:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !(out_$i9 == 1);
    goto corral_source_split_15212;

  $bb12:
    assume out_$i7 == 1;
    goto corral_source_split_15202;

  $bb5:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i2, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb53:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_15261:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_1356:
    goto corral_source_split_15261;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  corral_source_split_15260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2967} invoke_work_4();
    goto SeqInstr_1355;

  $bb52:
    assume out_$i36 == 1;
    goto corral_source_split_15260;

  corral_source_split_15206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_15206;

  corral_source_split_15204:
    assume {:verifier.code 0} true;
    out_$i35 := $M.83;
    goto corral_source_split_15205;

  $bb13:
    assume !(out_$i7 == 1);
    goto corral_source_split_15204;

  $bb56:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb67;

  $bb69:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb67;

  corral_source_split_15275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69;

  corral_source_split_15274:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 0);
    goto corral_source_split_15275;

  corral_source_split_15273:
    assume {:verifier.code 0} true;
    out_$i45 := $M.67;
    goto corral_source_split_15274;

  $bb65:
    assume out_$i44 == 1;
    goto corral_source_split_15273;

  corral_source_split_15271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 2);
    goto corral_source_split_15271;

  corral_source_split_15269:
    assume {:verifier.code 0} true;
    out_$i43 := $M.84;
    goto corral_source_split_15270;

  $bb63:
    assume out_$i42 == 1;
    goto corral_source_split_15269;

  $bb58:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_15263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2968} out_$i39 := __VERIFIER_nondet_int();
    call {:si_unique_call 2969} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i39);
    call {:si_unique_call 2970} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume out_$i38 == 1;
    goto corral_source_split_15263;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_15195:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_15196;

  corral_source_split_15194:
    assume {:verifier.code 0} true;
    out_$i37 := $M.84;
    goto corral_source_split_15195;

  $bb7:
    assume out_$i5 == 1;
    goto corral_source_split_15194;

  $bb6:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb74:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_15296:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_15295:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 2977} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_15296;

  $bb78:
    assume out_$i53 == 1;
    goto corral_source_split_15295;

  corral_source_split_15293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_15292:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_15293;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i52 := $M.88;
    goto corral_source_split_15292;

  $bb76:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_15287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76;

  corral_source_split_15286:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_15287;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    out_$i50 := $M.88;
    goto corral_source_split_15286;

  corral_source_split_15284:
    assume {:verifier.code 0} true;
    $M.88 := out_$i49;
    call {:si_unique_call 2975} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_15285;

  SeqInstr_1362:
    goto corral_source_split_15284;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  corral_source_split_15283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} out_$i49 := usb_init();
    goto SeqInstr_1361;

  $bb73:
    assume out_$i48 == 1;
    goto corral_source_split_15283;

  corral_source_split_15267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_15266:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 1);
    goto corral_source_split_15267;

  corral_source_split_15265:
    assume {:verifier.code 0} true;
    out_$i47 := $M.84;
    goto corral_source_split_15266;

  $bb60:
    assume out_$i41 == 1;
    goto corral_source_split_15265;

  $bb59:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_15298:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} ldv_stop();
    goto corral_source_split_15298;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb62;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb62;

  $bb86:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_15301:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_15300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} invoke_work_5();
    goto corral_source_split_15301;

  $bb85:
    assume out_$i55 == 1;
    goto corral_source_split_15300;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_15199:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_15200;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    out_$i54 := $M.85;
    goto corral_source_split_15199;

  $bb9:
    assume out_$i6 == 1;
    goto corral_source_split_15198;

  $bb8:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_15303:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} ldv_stop();
    goto corral_source_split_15303;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i6 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb11;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55 := main_loop_$bb1(in_$p1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1);
  modifies $M.67, $M.79, $M.86, $M.0, $M.29, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.56, $M.55, $CurrAddr, assertsPassed, $M.16, $M.18, $M.20, $M.22, $M.13, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.17, $M.19, $M.21, $M.23, $M.10, $M.40, $M.2, $M.3, $M.47, $M.28, $M.33, $M.34, $M.39, $M.57, $M.66, $M.74, $M.75, $M.76, $M.77, $M.84, $M.88, $M.1, $M.87, $M.73, $M.68, $M.69, $M.70, $M.71;


