var $M.0: [ref]i8;

var $M.1: i8;

var $M.2: i8;

var $M.3: i32;

var $M.4: [ref]i64;

var $M.5: [ref]i8;

var $M.6: [ref]i8;

var $M.7: [ref]i64;

var $M.8: [ref]i8;

var $M.9: [ref]i16;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]i8;

var $M.14: [ref]i32;

var $M.15: [ref]i8;

var $M.16: [ref]ref;

var $M.17: [ref]i32;

var $M.18: [ref]i8;

var $M.21: i32;

var $M.22: i32;

var $M.24: i32;

var $M.25: i32;

var $M.27: i32;

var $M.28: i32;

var $M.30: i32;

var $M.31: i32;

var $M.35: [ref]i64;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]ref;

var $M.40: [ref]ref;

var $M.41: [ref]i24;

var $M.42: [ref]i8;

var $M.43: i8;

var $M.44: [ref]i32;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $M.49: [ref]i16;

var $M.50: [ref]i8;

var $M.51: [ref]i8;

var $M.52: [ref]i32;

var $M.53: [ref]i32;

var $M.54: [ref]i8;

var $M.55: [ref]i16;

var $M.56: [ref]i32;

var $M.57: [ref]i8;

var $M.58: ref;

var $M.59: i32;

var $M.60: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: ref;

var $M.71: ref;

var $M.72: [ref]i8;

var $M.73: [ref]ref;

var $M.74: [ref]i32;

var $M.97: [ref]i8;

var $M.98: [ref]i8;

var $M.99: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 435563);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_irq_2_0: ref;

axiom ldv_irq_2_0 == $sub.ref(0, 3084);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 4112);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 5140);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 6168);

const ldv_irq_2_3: ref;

axiom ldv_irq_2_3 == $sub.ref(0, 7196);

const ldv_irq_2_2: ref;

axiom ldv_irq_2_2 == $sub.ref(0, 8224);

const ldv_irq_2_1: ref;

axiom ldv_irq_2_1 == $sub.ref(0, 9252);

const vfio_pci_driver_group1: ref;

axiom vfio_pci_driver_group1 == $sub.ref(0, 10284);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 11312);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 12340);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 13368);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 14396);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 15424);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 16452);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 17480);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 18508);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 19536);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 20564);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 21592);

const ldv_irq_line_2_0: ref;

axiom ldv_irq_line_2_0 == $sub.ref(0, 22620);

const ldv_irq_data_2_0: ref;

axiom ldv_irq_data_2_0 == $sub.ref(0, 23652);

const ldv_irq_line_2_1: ref;

axiom ldv_irq_line_2_1 == $sub.ref(0, 24680);

const ldv_irq_data_2_1: ref;

axiom ldv_irq_data_2_1 == $sub.ref(0, 25712);

const ldv_irq_line_2_2: ref;

axiom ldv_irq_line_2_2 == $sub.ref(0, 26740);

const ldv_irq_data_2_2: ref;

axiom ldv_irq_data_2_2 == $sub.ref(0, 27772);

const ldv_irq_line_2_3: ref;

axiom ldv_irq_line_2_3 == $sub.ref(0, 28800);

const ldv_irq_data_2_3: ref;

axiom ldv_irq_data_2_3 == $sub.ref(0, 29832);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 30860);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 31888);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 32916);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 33944);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 34976);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 36008);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 37040);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 38072);

const unassigned_perms_group0: ref;

axiom unassigned_perms_group0 == $sub.ref(0, 39104);

const unassigned_perms_group1: ref;

axiom unassigned_perms_group1 == $sub.ref(0, 40136);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 41164);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 42192);

const unassigned_perms: ref;

axiom unassigned_perms == $sub.ref(0, 43248);

const {:count 28} pci_ext_cap_length: ref;

axiom pci_ext_cap_length == $sub.ref(0, 44328);

const {:count 20} pci_cap_length: ref;

axiom pci_cap_length == $sub.ref(0, 45372);

const {:count 28} ecap_perms: ref;

axiom ecap_perms == $sub.ref(0, 47292);

const {:count 20} cap_perms: ref;

axiom cap_perms == $sub.ref(0, 48956);

const {:count 1024} ids: ref;

axiom ids == $sub.ref(0, 51004);

const vfio_pci_ops: ref;

axiom vfio_pci_ops == $sub.ref(0, 52092);

const disable_vga: ref;

axiom disable_vga == $sub.ref(0, 53117);

const nointxmask: ref;

axiom nointxmask == $sub.ref(0, 54142);

const disable_idle_d3: ref;

axiom disable_idle_d3 == $sub.ref(0, 55167);

const vfio_err_handlers: ref;

axiom vfio_err_handlers == $sub.ref(0, 56239);

const vfio_pci_driver: ref;

axiom vfio_pci_driver == $sub.ref(0, 57575);

const driver_lock: ref;

axiom driver_lock == $sub.ref(0, 58759);

const {:count 22} .str.2: ref;

axiom .str.2 == $sub.ref(0, 59805);

const {:count 12} .str.3: ref;

axiom .str.3 == $sub.ref(0, 60841);

const {:count 9} .str.1: ref;

axiom .str.1 == $sub.ref(0, 61874);

const {:count 13} .str.16: ref;

axiom .str.16 == $sub.ref(0, 62911);

const {:count 25} .str.17: ref;

axiom .str.17 == $sub.ref(0, 63960);

const {:count 9} .str.8: ref;

axiom .str.8 == $sub.ref(0, 64993);

const {:count 17} .str.9: ref;

axiom .str.9 == $sub.ref(0, 66034);

const {:count 39} .str.10: ref;

axiom .str.10 == $sub.ref(0, 67097);

const {:count 70} .str.11: ref;

axiom .str.11 == $sub.ref(0, 68191);

const boot_cpu_data: ref;

axiom boot_cpu_data == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const __cachemode2pte_tbl: ref;

axiom __cachemode2pte_tbl == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 206} .str.6: ref;

axiom .str.6 == $sub.ref(0, 69421);

const {:count 10} .str.24: ref;

axiom .str.24 == $sub.ref(0, 70455);

const {:count 9} .str.25: ref;

axiom .str.25 == $sub.ref(0, 71488);

const {:count 11} .str.26: ref;

axiom .str.26 == $sub.ref(0, 72523);

const {:count 14} .str.23: ref;

axiom .str.23 == $sub.ref(0, 73561);

const {:count 33} .str.7: ref;

axiom .str.7 == $sub.ref(0, 74618);

const .str: ref;

axiom .str == $sub.ref(0, 75647);

const {:count 213} .str.39: ref;

axiom .str.39 == $sub.ref(0, 76884);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 47} .str.4: ref;

axiom .str.4 == $sub.ref(0, 77955);

const {:count 17} .str.5: ref;

axiom .str.5 == $sub.ref(0, 78996);

const {:count 9} .str.12: ref;

axiom .str.12 == $sub.ref(0, 80029);

const {:count 16} .str.13: ref;

axiom .str.13 == $sub.ref(0, 81069);

const {:count 35} .str.14: ref;

axiom .str.14 == $sub.ref(0, 82128);

const {:count 45} .str.15: ref;

axiom .str.15 == $sub.ref(0, 83197);

const {:count 31} .str.34: ref;

axiom .str.34 == $sub.ref(0, 84252);

const {:count 15} .str.35: ref;

axiom .str.35 == $sub.ref(0, 85291);

const {:count 64} .str.36: ref;

axiom .str.36 == $sub.ref(0, 86379);

const {:count 47} .str.37: ref;

axiom .str.37 == $sub.ref(0, 87450);

const {:count 17} .str.38: ref;

axiom .str.38 == $sub.ref(0, 88491);

const {:count 25} .str.29: ref;

axiom .str.29 == $sub.ref(0, 89540);

const {:count 14} .str.30: ref;

axiom .str.30 == $sub.ref(0, 90578);

const {:count 62} .str.31: ref;

axiom .str.31 == $sub.ref(0, 91664);

const {:count 46} .str.32: ref;

axiom .str.32 == $sub.ref(0, 92734);

const {:count 13} .str.33: ref;

axiom .str.33 == $sub.ref(0, 93771);

const {:count 18} .str.18: ref;

axiom .str.18 == $sub.ref(0, 94813);

const {:count 35} .str.19: ref;

axiom .str.19 == $sub.ref(0, 95872);

const {:count 86} .str.20: ref;

axiom .str.20 == $sub.ref(0, 96982);

const {:count 60} .str.21: ref;

axiom .str.21 == $sub.ref(0, 98066);

const {:count 2} .str.22: ref;

axiom .str.22 == $sub.ref(0, 99092);

const {:count 41} .str.27: ref;

axiom .str.27 == $sub.ref(0, 100157);

const {:count 17} .str.28: ref;

axiom .str.28 == $sub.ref(0, 101198);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 102230);

const {:count 3} .str.1.94: ref;

axiom .str.1.94 == $sub.ref(0, 103257);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 104295);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 105323);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 106355);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 107387);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const vfio_pci_probe: ref;

axiom vfio_pci_probe == $sub.ref(0, 108419);

procedure vfio_pci_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation vfio_pci_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i8;
  var $i38: i1;
  var $i8: i32;
  var vslice_dummy_var_60: ref;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(73, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p10 := iommu_group_get($p9);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p13 := kzalloc(416, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 5);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p14, $mul.ref(0, 416)), $mul.ref(152, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} __mutex_init($p19, .str.16, $p2);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} vslice_dummy_var_60 := spinlock_check($p20);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 416)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} __raw_spin_lock_init($p24, .str.17, $p3);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p14);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i27 := vfio_add_group_dev($p25, vfio_pci_ops, $p26);
    call {:si_unique_call 10} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i30 := vfio_pci_is_vga($p0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 14} {:cexpr "tmp___1"} boogie_si_record_i8($i31);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i37 := $M.1;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} vslice_dummy_var_62 := pci_set_power_state($p0, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} vslice_dummy_var_63 := pci_set_power_state($p0, 3);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb17:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p14);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_61 := vga_client_register($p0, $p33, $0.ref, vfio_pci_set_vga_decode);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p14);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i36 := vfio_pci_set_vga_decode($p35, 0);
    call {:si_unique_call 17} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vga_set_legacy_decoding($p0, $i36);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} iommu_group_put($p10);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p14);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} kfree($p29);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb3;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} iommu_group_put($p10);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vfio_pci_remove: ref;

axiom vfio_pci_remove == $sub.ref(0, 109451);

procedure vfio_pci_remove($p0: ref);
  free requires assertsPassed;



implementation vfio_pci_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i14: i8;
  var $i15: i1;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p2 := vfio_del_group_dev($p1);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1)), $mul.ref(1408, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} iommu_group_put($p8);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} kfree($p9);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i10 := vfio_pci_is_vga($p0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 25} {:cexpr "tmp___0"} boogie_si_record_i8($i11);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} vslice_dummy_var_65 := pci_set_power_state($p0, 0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} vslice_dummy_var_64 := vga_client_register($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vga_set_legacy_decoding($p0, 15);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_del_group_dev: ref;

axiom vfio_del_group_dev == $sub.ref(0, 110483);

procedure vfio_del_group_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vfio_del_group_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p1 := external_alloc();
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const iommu_group_put: ref;

axiom iommu_group_put == $sub.ref(0, 111515);

procedure iommu_group_put($p0: ref);
  free requires assertsPassed;



implementation iommu_group_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 112547);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} free_($p0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_is_vga: ref;

axiom vfio_pci_is_vga == $sub.ref(0, 113579);

procedure vfio_pci_is_vga($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation vfio_pci_is_vga($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(68, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i2, 8);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 768);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vga_client_register: ref;

axiom vga_client_register == $sub.ref(0, 114611);

procedure vga_client_register($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vga_client_register($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 31} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 32} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vga_set_legacy_decoding: ref;

axiom vga_set_legacy_decoding == $sub.ref(0, 115643);

procedure vga_set_legacy_decoding($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation vga_set_legacy_decoding($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} {:cexpr "vga_set_legacy_decoding:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 116675);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 34} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 1} true;
    call {:si_unique_call 35} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 36} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 117707);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 37} $free($p0);
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 118739);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 1} true;
    call {:si_unique_call 38} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 39} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const iommu_group_get: ref;

axiom iommu_group_get == $sub.ref(0, 119771);

procedure iommu_group_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation iommu_group_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p1 := external_alloc();
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 120803);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 42} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} ldv_check_alloc_flags($i1);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p2 := ldv_undef_ptr();
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 121835);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 122867);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 123899);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    return;
}



const vfio_add_group_dev: ref;

axiom vfio_add_group_dev == $sub.ref(0, 124931);

procedure vfio_add_group_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_add_group_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 45} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 46} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vfio_pci_set_vga_decode: ref;

axiom vfio_pci_set_vga_decode == $sub.ref(0, 125963);

procedure vfio_pci_set_vga_decode($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_pci_set_vga_decode($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i1;
  var $i41: i8;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $p24: ref;
  var $i63: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 47} {:cexpr "vfio_pci_set_vga_decode:arg:single_vga"} boogie_si_record_i1($i1);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i2);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i8 := vfio_vga_disabled();
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 49} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i15 := pci_is_root_bus($p14);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 51} {:cexpr "tmp___2"} boogie_si_record_i8($i16);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i20 := pci_bus_max_busnr($p19);
    call {:si_unique_call 53} {:cexpr "max_busnr"} boogie_si_record_i8($i20);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p21 := pci_get_class(196608, $0.ref);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i63 := 12;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i7 := $i63;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p24 := $p21;
    goto $bb17;

  $bb17:
    call $i25, $i26, $i27, $p28, $i29, $i30, $p31, $p32, $i33, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p24 := vfio_pci_set_vga_decode_loop_$bb17($p5, $i20, $i25, $i26, $i27, $p28, $i29, $i30, $p31, $p32, $i33, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p24);
    goto $bb17_last;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p5);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i25, $i26);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i33 := pci_domain_nr($p32);
    call {:si_unique_call 56} {:cexpr "tmp___3"} boogie_si_record_i32($i33);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i36 := pci_domain_nr($p35);
    call {:si_unique_call 58} {:cexpr "tmp___4"} boogie_si_record_i32($i36);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i33, $i36);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i37 == 1);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p24, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i40 := pci_is_root_bus($p39);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 61} {:cexpr "tmp___5"} boogie_si_record_i8($i41);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p24, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1728)), $mul.ref(216, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 1728)), $mul.ref(216, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i53 := $sge.i32($i47, $i52);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p28 := pci_get_class(196608, $p24);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i30 == 1);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb22:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p24 := $p28;
    goto $bb22_dummy;

  $bb31:
    assume $i53 == 1;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p24, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 1728)), $mul.ref(216, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i20);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i60 := $sle.i32($i58, $i59);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p61 := $p24;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb33;

  $bb34:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} pci_dev_put($p61);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i62 := $or.i32(12, 3);
    call {:si_unique_call 63} {:cexpr "decodes"} boogie_si_record_i32($i62);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb36;

  $bb26:
    assume $i42 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb24:
    assume $i37 == 1;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume $i27 == 1;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i7 := 15;
    goto $bb3;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i7 := 15;
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i7 := 15;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_177;
}



const vfio_vga_disabled: ref;

axiom vfio_vga_disabled == $sub.ref(0, 126995);

procedure vfio_vga_disabled() returns ($r: i1);
  free requires assertsPassed;



implementation vfio_vga_disabled() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_is_root_bus: ref;

axiom pci_is_root_bus == $sub.ref(0, 128027);

procedure pci_is_root_bus($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation pci_is_root_bus($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1728)), $mul.ref(16, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_max_busnr: ref;

axiom pci_bus_max_busnr == $sub.ref(0, 129059);

procedure pci_bus_max_busnr($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation pci_bus_max_busnr($p0: ref) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 1} true;
    call {:si_unique_call 64} $i1 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 65} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i1);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_domain_nr: ref;

axiom pci_domain_nr == $sub.ref(0, 130091);

procedure pci_domain_nr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_domain_nr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1728)), $mul.ref(200, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const pci_dev_put: ref;

axiom pci_dev_put == $sub.ref(0, 131123);

procedure pci_dev_put($p0: ref);
  free requires assertsPassed;



implementation pci_dev_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    return;
}



const pci_get_class: ref;

axiom pci_get_class == $sub.ref(0, 132155);

procedure pci_get_class($i0: i32, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_class($i0: i32, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} {:cexpr "pci_get_class:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $p2 := external_alloc();
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 133187);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 134219);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 70} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 71} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 135251);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 72} __VERIFIER_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const vfio_pci_aer_err_detected: ref;

axiom vfio_pci_aer_err_detected == $sub.ref(0, 136283);

procedure vfio_pci_aer_err_detected($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_pci_aer_err_detected($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i6: i32;
  var vslice_dummy_var_66: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} {:cexpr "vfio_pci_aer_err_detected:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p3 := vfio_device_get_from_dev($p2);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p7 := vfio_device_data($p3);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(152, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} mutex_lock_nested($p11, 0);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(400, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(152, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} mutex_unlock($p19);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} vfio_device_put($p3);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i6 := 2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(400, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} vslice_dummy_var_66 := eventfd_signal($p17, 1);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} vfio_device_put($p3);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i6 := 4;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i6 := 4;
    goto $bb3;
}



const vfio_device_get_from_dev: ref;

axiom vfio_device_get_from_dev == $sub.ref(0, 137315);

procedure vfio_device_get_from_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vfio_device_get_from_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $p1 := external_alloc();
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vfio_device_data: ref;

axiom vfio_device_data == $sub.ref(0, 138347);

procedure vfio_device_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vfio_device_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p1 := external_alloc();
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const vfio_device_put: ref;

axiom vfio_device_put == $sub.ref(0, 139379);

procedure vfio_device_put($p0: ref);
  free requires assertsPassed;



implementation vfio_device_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 140411);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    return;
}



const eventfd_signal: ref;

axiom eventfd_signal == $sub.ref(0, 141443);

procedure eventfd_signal($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation eventfd_signal($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 84} {:cexpr "eventfd_signal:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 85} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 86} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 142475);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_open: ref;

axiom vfio_pci_open == $sub.ref(0, 143507);

procedure vfio_pci_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.9, $CurrAddr, $M.45, $M.51, $M.50, assertsPassed;



implementation vfio_pci_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i13: i32;
  var $i21: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i2 := try_module_get(__this_module);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 88} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} mutex_lock_nested(driver_lock, 0);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} mutex_unlock(driver_lock);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i13, 0);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i7 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb15:
    assume $i21 == 1;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} module_put(__this_module);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i11 := vfio_pci_enable($p1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 91} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} vfio_spapr_pci_eeh_open($p15);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i16 := $i11;
    goto $bb14;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb12;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const vfio_pci_release: ref;

axiom vfio_pci_release == $sub.ref(0, 144539);

procedure vfio_pci_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.3, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31, $CurrAddr, assertsPassed;



implementation vfio_pci_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} mutex_lock_nested(driver_lock, 0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} mutex_unlock(driver_lock);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} module_put(__this_module);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} vfio_spapr_pci_eeh_open($p10);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} vfio_pci_disable($p1);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const vfio_pci_read: ref;

axiom vfio_pci_read == $sub.ref(0, 145571);

procedure vfio_pci_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.35, $M.0, $M.4, $CurrAddr, $M.52, $M.3, $M.56, $M.53;



implementation vfio_pci_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i1;
  var $i6: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} {:cexpr "vfio_pci_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i6 := vfio_pci_rw($p0, $p1, $i2, $p3, 0);
    call {:si_unique_call 102} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const vfio_pci_write: ref;

axiom vfio_pci_write == $sub.ref(0, 146603);

procedure vfio_pci_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.35, $M.0, $M.4, $CurrAddr, $M.52, $M.3, $M.56, $M.53;



implementation vfio_pci_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i1;
  var $i6: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} {:cexpr "vfio_pci_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, 0);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i6 := vfio_pci_rw($p0, $p1, $i2, $p3, 1);
    call {:si_unique_call 105} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const vfio_pci_ioctl: ref;

axiom vfio_pci_ioctl == $sub.ref(0, 147635);

procedure vfio_pci_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.18, $M.3, assertsPassed, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31;



implementation vfio_pci_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $i104: i32;
  var $i105: i64;
  var $p108: ref;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i64;
  var $p124: ref;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i64;
  var $i138: i64;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i64;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $i151: i64;
  var $p154: ref;
  var $i155: i64;
  var $p156: ref;
  var $i157: i32;
  var $i158: i64;
  var $p161: ref;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $i165: i32;
  var $i166: i64;
  var $p169: ref;
  var $i170: i64;
  var $p171: ref;
  var $i172: i32;
  var $i173: i64;
  var $p176: ref;
  var $i177: i64;
  var $i178: i64;
  var $i179: i64;
  var $i180: i64;
  var $p181: ref;
  var $p182: ref;
  var $i183: i64;
  var $i184: i1;
  var $p185: ref;
  var $i186: i64;
  var $i187: i1;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i8;
  var $i194: i1;
  var $p195: ref;
  var $i196: i32;
  var $i197: i64;
  var $i198: i64;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i64;
  var $i205: i1;
  var $p206: ref;
  var $p207: ref;
  var $i208: i64;
  var $i209: i1;
  var $p210: ref;
  var $i211: i32;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $i220: i1;
  var $i221: i1;
  var $i222: i1;
  var $p223: ref;
  var $p224: ref;
  var $i225: i1;
  var $i226: i8;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $i230: i32;
  var $i231: i32;
  var $p232: ref;
  var $p233: ref;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i237: i32;
  var $i238: i32;
  var $p239: ref;
  var $p240: ref;
  var $i241: i32;
  var $i242: i32;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i64;
  var $i247: i1;
  var $p248: ref;
  var $p249: ref;
  var $i250: i64;
  var $i251: i1;
  var $p252: ref;
  var $i253: i32;
  var $i254: i64;
  var $i255: i1;
  var $p256: ref;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $i260: i32;
  var $i261: i32;
  var $i262: i1;
  var $p263: ref;
  var $i264: i32;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i268: i32;
  var $i269: i32;
  var $p270: ref;
  var $i271: i32;
  var $i272: i32;
  var $i273: i1;
  var $p275: ref;
  var $i276: i32;
  var $i277: i32;
  var $i278: i1;
  var $i274: i64;
  var $p279: ref;
  var $i280: i32;
  var $i281: i64;
  var $i282: i64;
  var $p283: ref;
  var $i284: i32;
  var $i285: i64;
  var $i286: i64;
  var $i287: i1;
  var $p288: ref;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i292: i32;
  var $p293: ref;
  var $i294: i32;
  var $i295: i32;
  var $i296: i1;
  var $i297: i64;
  var $p298: ref;
  var $p299: ref;
  var $i300: i32;
  var $i301: i64;
  var $i302: i64;
  var $p303: ref;
  var $i304: i1;
  var $i305: i8;
  var $i306: i1;
  var $i307: i64;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $i311: i32;
  var $p312: ref;
  var $i313: i32;
  var $p314: ref;
  var $i315: i32;
  var $p316: ref;
  var $i317: i32;
  var $i318: i32;
  var $p319: ref;
  var $i320: i64;
  var $i321: i1;
  var $p322: ref;
  var $i323: i8;
  var $i324: i1;
  var $p325: ref;
  var $p326: ref;
  var $i327: i32;
  var $i328: i64;
  var $i329: i64;
  var $i330: i1;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i64;
  var $i337: i1;
  var $p338: ref;
  var $i339: i32;
  var $i340: i64;
  var $i341: i1;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $i347: i32;
  var $i348: i1;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $i354: i32;
  var $i355: i1;
  var $i349: i8;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $i360: i1;
  var $i361: i32;
  var $i362: i1;
  var $i363: i64;
  var $p364: ref;
  var $i365: i32;
  var $i366: i1;
  var $i367: i32;
  var $i368: i1;
  var $i369: i32;
  var $i370: i64;
  var $i371: i64;
  var $i372: i1;
  var $i373: i1;
  var $i374: i32;
  var $i375: i64;
  var $p377: ref;
  var $i378: i32;
  var $i379: i64;
  var $p380: ref;
  var $i381: i32;
  var $i382: i64;
  var $i383: i64;
  var $i384: i64;
  var $i385: i1;
  var $p386: ref;
  var $i387: i32;
  var $p388: ref;
  var $p391: ref;
  var $i392: i32;
  var $i393: i64;
  var $p394: ref;
  var $p395: ref;
  var $i396: i64;
  var $i397: i1;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $p405: ref;
  var $i406: i32;
  var $p407: ref;
  var $p389: ref;
  var $i390: i32;
  var $p408: ref;
  var $p409: ref;
  var $i410: i64;
  var $i411: i1;
  var $i412: i32;
  var $i413: i1;
  var $i414: i64;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $i418: i32;
  var $i419: i64;
  var $i420: i64;
  var $i421: i64;
  var $i422: i1;
  var $i423: i32;
  var $i424: i32;
  var $p425: ref;
  var $i426: i64;
  var $i427: i1;
  var $p428: ref;
  var $p429: ref;
  var $i430: i64;
  var $i431: i1;
  var $p432: ref;
  var $i433: i32;
  var $i434: i64;
  var $i435: i1;
  var $p436: ref;
  var $i437: i32;
  var $i438: i1;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $i443: i32;
  var $i444: i1;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $i450: i32;
  var $i451: i1;
  var $i445: i8;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $i455: i1;
  var $i456: i32;
  var $i457: i1;
  var $i458: i64;
  var $p459: ref;
  var $i460: i32;
  var $i461: i1;
  var $p462: ref;
  var $i463: i32;
  var $i464: i32;
  var $i465: i1;
  var $p466: ref;
  var $i467: i32;
  var $i468: i64;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $i472: i32;
  var $i473: i64;
  var $p474: ref;
  var $p475: ref;
  var $i476: i64;
  var $i477: i1;
  var $i478: i64;
  var $i479: i1;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $i483: i64;
  var $p484: ref;
  var $p485: ref;
  var $i486: i32;
  var $i487: i64;
  var $i488: i64;
  var $i489: i64;
  var $i490: i1;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $i494: i32;
  var $i495: i1;
  var $i498: i64;
  var $p499: ref;
  var $i500: i32;
  var $p501: ref;
  var $p502: ref;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $i506: i32;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $p512: ref;
  var $i513: i64;
  var $i514: i1;
  var $i515: i32;
  var $p518: ref;
  var $p519: ref;
  var $p520: ref;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $i525: i32;
  var $p526: ref;
  var $i527: i1;
  var $i528: i8;
  var $i529: i1;
  var $i530: i32;
  var $p531: ref;
  var $p532: ref;
  var $i533: i64;
  var $i534: i32;
  var $i535: i64;
  var $p537: ref;
  var $i538: i32;
  var $i539: i64;
  var $p541: ref;
  var $i542: i32;
  var $i543: i32;
  var $i544: i1;
  var $i497: i32;
  var $i545: i32;
  var $i496: i32;
  var $i516: i32;
  var $i517: i32;
  var $p546: ref;
  var $i547: i1;
  var $p549: ref;
  var $i550: i32;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $i556: i1;
  var $i557: i32;
  var $i558: i1;
  var $i559: i1;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $i564: i32;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $p569: ref;
  var $i570: i32;
  var $i565: i32;
  var $i571: i32;
  var $i548: i32;
  var $i572: i32;
  var $i573: i1;
  var $i575: i64;
  var $p577: ref;
  var $p578: ref;
  var $i579: i32;
  var $i580: i1;
  var $i574: i32;
  var $p581: ref;
  var $i582: i64;
  var $i22: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_67: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p7 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $p8 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $p9 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p10 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p11 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p13 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p14 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p15 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 119} {:cexpr "vfio_pci_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 120} {:cexpr "vfio_pci_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 15211);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i1, 15212);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i1, 15213);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i205 == 1);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i1, 15214);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i247 == 1);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i1, 15215);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i321 == 1);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i1, 15216);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i330 == 1);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i427 := $eq.i32($i1, 15217);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i427} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 25);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb175:
    assume $i427 == 1;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p428 := $bitcast.ref.ref($p10);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p429 := $i2p.i64.ref($i2);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i430 := copy_from_user($p428, $p429, 12);
    call {:si_unique_call 178} {:cexpr "tmp___21"} boogie_si_record_i64($i430);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i431 := $ne.i64($i430, 0);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i431} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i431 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p10, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i433 := $load.i32($M.0, $p432);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i434 := $zext.i32.i64($i433);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i435 := $ult.i64($i434, 12);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb180, $bb182;

  $bb182:
    assume !($i435 == 1);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p10, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i437 := $load.i32($M.0, $p436);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i438 := $ne.i32($i437, 0);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i438} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p440 := $load.ref($M.0, $p439);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p440, $mul.ref(0, 2984)), $mul.ref(48, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.0, $p441);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i443 := pci_probe_reset_slot($p442);
    call {:si_unique_call 180} {:cexpr "tmp___23"} boogie_si_record_i32($i443);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i444 := $eq.i32($i443, 0);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i444} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i444 == 1);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p447 := $load.ref($M.0, $p446);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p447, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p449 := $load.ref($M.0, $p448);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i450 := pci_probe_reset_bus($p449);
    call {:si_unique_call 182} {:cexpr "tmp___22"} boogie_si_record_i32($i450);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i451 := $ne.i32($i450, 0);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i451} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i451 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i445 := 0;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p453 := $load.ref($M.0, $p452);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p454 := $bitcast.ref.ref($p12);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i455 := $trunc.i8.i1($i445);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i456 := vfio_pci_for_each_slot_or_bus($p453, vfio_pci_count_devs, $p454, $i455);
    call {:si_unique_call 184} {:cexpr "ret___1"} boogie_si_record_i32($i456);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i457 := $ne.i32($i456, 0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i457} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p10, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i460 := $load.i32($M.0, $p459);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i460, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb195, $bb197;

  $bb197:
    assume !($i461 == 1);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p10, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i463 := $load.i32($M.0, $p462);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i464 := $load.i32($M.0, $p12);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i465 := $ugt.i32($i463, $i464);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i465} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p10, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i467 := $load.i32($M.0, $p466);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i468 := $zext.i32.i64($i467);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p469 := kcalloc($i468, 4, 208);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p470 := $bitcast.ref.ref($p469);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p10, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i472 := $load.i32($M.0, $p471);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i473 := $zext.i32.i64($i472);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p474 := kcalloc($i473, 16, 208);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p475 := $bitcast.ref.ref($p474);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i476 := $p2i.ref.i64($p470);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i477 := $eq.i64($i476, 0);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i477} true;
    goto $bb201, $bb203;

  $bb203:
    assume !($i477 == 1);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i478 := $p2i.ref.i64($p475);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i479 := $eq.i64($i478, 0);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p482 := $bitcast.ref.ref($p470);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i483 := $add.i64($i2, 12);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p484 := $i2p.i64.ref($i483);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p10, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i486 := $load.i32($M.0, $p485);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i487 := $zext.i32.i64($i486);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i488 := $mul.i64($i487, 4);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i489 := copy_from_user($p482, $p484, $i488);
    call {:si_unique_call 190} {:cexpr "tmp___26"} boogie_si_record_i64($i489);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i490 := $ne.i64($i489, 0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i490} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p10, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i494 := $load.i32($M.0, $p493);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i495 := $ult.i32(0, $i494);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i496 := 0;
    assume {:branchcond $i495} true;
    goto $bb210, $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    assume !($i495 == 1);
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $i516, $i517 := $i496, $i456;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p546 := $bitcast.ref.ref($p470);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} kfree($p546);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i547 := $ne.i32($i517, 0);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i547} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p10, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i550 := $load.i32($M.0, $p549);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p551, $i550);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p552, $p474);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p554 := $load.ref($M.0, $p553);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p555 := $bitcast.ref.ref($p11);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i556 := $trunc.i8.i1($i445);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i557 := vfio_pci_for_each_slot_or_bus($p554, vfio_pci_validate_devs, $p555, $i556);
    call {:si_unique_call 208} {:cexpr "ret___1"} boogie_si_record_i32($i557);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i558 := $eq.i32($i557, 0);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i558} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i558 == 1);
    assume {:verifier.code 0} true;
    $i571 := $i557;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i548 := $i571;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i572 := $sub.i32($i516, 1);
    call {:si_unique_call 206} {:cexpr "i"} boogie_si_record_i32($i572);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i573 := $sge.i32($i572, 0);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i573} true;
    goto $bb235, $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    assume !($i573 == 1);
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p581 := $bitcast.ref.ref($p475);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} kfree($p581);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i582 := $sext.i32.i64($i548);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i22 := $i582;
    goto $bb5;

  $bb235:
    assume $i573 == 1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i574 := $i572;
    goto $bb238;

  $bb238:
    call $i575, $p577, $p578, $i579, $i580, $i574 := vfio_pci_ioctl_loop_$bb238($p475, $i575, $p577, $p578, $i579, $i580, $i574);
    goto $bb238_last;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i575 := $sext.i32.i64($i574);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p475, $mul.ref($i575, 16)), $mul.ref(0, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p578 := $load.ref($M.0, $p577);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vfio_group_put_external_user($p578);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i579 := $sub.i32($i574, 1);
    call {:si_unique_call 214} {:cexpr "i"} boogie_si_record_i32($i579);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i580 := $sge.i32($i579, 0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i580 == 1);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb240:
    assume $i580 == 1;
    assume {:verifier.code 0} true;
    $i574 := $i579;
    goto $bb240_dummy;

  $bb229:
    assume $i558 == 1;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i559 := $trunc.i8.i1($i445);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i559} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i559 == 1);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p567 := $load.ref($M.0, $p566);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p567, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p569 := $load.ref($M.0, $p568);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i570 := pci_try_reset_bus($p569);
    call {:si_unique_call 212} {:cexpr "tmp___31"} boogie_si_record_i32($i570);
    assume {:verifier.code 0} true;
    $i565 := $i570;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i571 := $i565;
    goto $bb234;

  $bb231:
    assume $i559 == 1;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p561 := $load.ref($M.0, $p560);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p561, $mul.ref(0, 2984)), $mul.ref(48, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.0, $p562);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i564 := pci_try_reset_slot($p563);
    call {:si_unique_call 210} {:cexpr "tmp___30"} boogie_si_record_i32($i564);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i565 := $i564;
    goto $bb233;

  $bb225:
    assume $i547 == 1;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i548 := $i517;
    goto $bb227;

  $bb210:
    assume $i495 == 1;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i497 := 0;
    goto $bb213;

  $bb213:
    call $i498, $p499, $i500, $p501, $p502, $p503, $p504, $p505, $i506, $p507, $p508, $p509, $p510, $p511, $p512, $i513, $i514, $i515, $p518, $p519, $p520, $p521, $p522, $p523, $p524, $i525, $p526, $i527, $i528, $i529, $i530, $p531, $i535, $p537, $i538, $i539, $p541, $i542, $i543, $i544, $i497, $i545, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5 := vfio_pci_ioctl_loop_$bb213($p13, $p14, $p15, $p470, $p475, $p493, $i498, $p499, $i500, $p501, $p502, $p503, $p504, $p505, $i506, $p507, $p508, $p509, $p510, $p511, $p512, $i513, $i514, $i515, $p518, $p519, $p520, $p521, $p522, $p523, $p524, $i525, $p526, $i527, $i528, $i529, $i530, $p531, $i535, $p537, $i538, $i539, $p541, $i542, $i543, $i544, $i497, $i545, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5);
    goto $bb213_last;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $i498 := $sext.i32.i64($i497);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($p470, $mul.ref($i498, 4));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i500 := $load.i32($M.0, $p499);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p501 := fdget($i500);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p502 := $bitcast.ref.ref($p15);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p502, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p504 := $extractvalue($p501, 0);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p503, $p504);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p502, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i506 := $extractvalue($p501, 1);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p505, $i506);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p507 := $bitcast.ref.ref($p14);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p508 := $bitcast.ref.ref($p15);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.5;
    cmdloc_dummy_var_1 := $M.5;
    call {:si_unique_call 194} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p507, $p508, 16, $zext.i32.i64(8), 0 == 1);
    $M.5 := cmdloc_dummy_var_2;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p13);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p510 := $bitcast.ref.ref($p14);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.5;
    cmdloc_dummy_var_4 := $M.5;
    call {:si_unique_call 195} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p509, $p510, 16, $zext.i32.i64(8), 0 == 1);
    $M.5 := cmdloc_dummy_var_5;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p512 := $load.ref($M.5, $p511);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i513 := $p2i.ref.i64($p512);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i514 := $eq.i64($i513, 0);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i515 := $i497;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p519 := $load.ref($M.5, $p518);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p520 := vfio_group_get_external_user($p519);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p521 := $bitcast.ref.ref($p13);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p521, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p523 := $load.ref($M.5, $p522);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p521, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i525 := $load.i32($M.5, $p524);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} fdput($p523, $i525);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p526 := $bitcast.ref.ref($p520);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i527 := IS_ERR($p526);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i528 := $zext.i1.i8($i527);
    call {:si_unique_call 200} {:cexpr "tmp___29"} boogie_si_record_i8($i528);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i529 := $trunc.i8.i1($i528);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i530, $p531 := $i497, $p520;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i529 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i535 := $sext.i32.i64($i497);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p475, $mul.ref($i535, 16)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p537, $p520);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i538 := vfio_external_user_iommu_id($p520);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i539 := $sext.i32.i64($i497);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p475, $mul.ref($i539, 16)), $mul.ref(8, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p541, $i538);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i542 := $add.i32($i497, 1);
    call {:si_unique_call 205} {:cexpr "i"} boogie_si_record_i32($i542);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i543 := $load.i32($M.0, $p493);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i544 := $ult.i32($i542, $i543);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i545 := $i542;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i496 := $i545;
    goto $bb212;

  $bb222:
    assume $i544 == 1;
    assume {:verifier.code 0} true;
    $i497 := $i542;
    goto $bb222_dummy;

  $bb219:
    assume $i529 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p532 := $bitcast.ref.ref($p531);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i533 := PTR_ERR($p532);
    call {:si_unique_call 202} {:cexpr "tmp___28"} boogie_si_record_i64($i533);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i534 := $trunc.i64.i32($i533);
    call {:si_unique_call 203} {:cexpr "ret___1"} boogie_si_record_i32($i534);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i516, $i517 := $i530, $i534;
    goto $bb217;

  $bb215:
    assume $i514 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i516, $i517 := $i515, $sub.i32(0, 9);
    goto $bb217;

  $bb207:
    assume $i490 == 1;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p491 := $bitcast.ref.ref($p470);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} kfree($p491);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p492 := $bitcast.ref.ref($p475);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} kfree($p492);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb5;

  $bb204:
    assume {:verifier.code 0} true;
    assume $i479 == 1;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p480 := $bitcast.ref.ref($p470);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} kfree($p480);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p481 := $bitcast.ref.ref($p475);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} kfree($p481);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 12);
    goto $bb5;

  $bb201:
    assume {:verifier.code 0} true;
    assume $i477 == 1;
    goto $bb202;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb198:
    assume {:verifier.code 0} true;
    assume $i465 == 1;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i461 == 1;
    goto $bb196;

  $bb192:
    assume $i457 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i458 := $sext.i32.i64($i456);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i22 := $i458;
    goto $bb5;

  $bb189:
    assume $i451 == 1;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 19);
    goto $bb5;

  $bb186:
    assume $i444 == 1;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i445 := 1;
    goto $bb188;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i438 == 1;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb180:
    assume {:verifier.code 0} true;
    assume $i435 == 1;
    goto $bb181;

  $bb177:
    assume $i431 == 1;
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb5;

  $bb136:
    assume $i330 == 1;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p331, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p332, 0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p333, $0.ref);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p8);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p335 := $i2p.i64.ref($i2);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i336 := copy_from_user($p334, $p335, 12);
    call {:si_unique_call 157} {:cexpr "tmp___14"} boogie_si_record_i64($i336);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i337 := $ne.i64($i336, 0);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i337} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i339 := $load.i32($M.0, $p338);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i340 := $zext.i32.i64($i339);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i341 := $ult.i64($i340, 12);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p342, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p344 := $load.ref($M.0, $p343);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p344, $mul.ref(0, 2984)), $mul.ref(48, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.0, $p345);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i347 := pci_probe_reset_slot($p346);
    call {:si_unique_call 159} {:cexpr "tmp___16"} boogie_si_record_i32($i347);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 0);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i348 == 1);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.0, $p350);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p351, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.0, $p352);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i354 := pci_probe_reset_bus($p353);
    call {:si_unique_call 161} {:cexpr "tmp___15"} boogie_si_record_i32($i354);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i355 := $ne.i32($i354, 0);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i349 := 0;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p357 := $load.ref($M.0, $p356);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p359 := $bitcast.ref.ref($p358);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i360 := $trunc.i8.i1($i349);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i361 := vfio_pci_for_each_slot_or_bus($p357, vfio_pci_count_devs, $p359, $i360);
    call {:si_unique_call 163} {:cexpr "ret___0"} boogie_si_record_i32($i361);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i362 := $ne.i32($i361, 0);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i362} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i365 := $load.i32($M.0, $p364);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i365, 0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i367 := $zext.i1.i32($i366);
    call {:si_unique_call 164} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i367);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i368 := $ne.i32($i367, 0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i369 := $zext.i1.i32($i368);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i370 := $sext.i32.i64($i369);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i371 := ldv__builtin_expect($i370, 0);
    call {:si_unique_call 166} {:cexpr "tmp___17"} boogie_si_record_i64($i371);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i372 := $ne.i64($i371, 0);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i372} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i373 := $ne.i32($i367, 0);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i374 := $zext.i1.i32($i373);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i375 := $sext.i32.i64($i374);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_67 := ldv__builtin_expect($i375, 0);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i378 := $load.i32($M.0, $p377);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i379 := $zext.i32.i64($i378);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i381 := $load.i32($M.0, $p380);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i382 := $sext.i32.i64($i381);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i383 := $mul.i64($i382, 8);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i384 := $add.i64($i383, 12);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i385 := $ult.i64($i379, $i384);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i392 := $load.i32($M.0, $p391);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i393 := $sext.i32.i64($i392);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p394 := kcalloc($i393, 8, 208);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p395 := $bitcast.ref.ref($p394);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i396 := $p2i.ref.i64($p395);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i397 := $eq.i64($i396, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i397} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p398, $p394);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p400 := $load.ref($M.0, $p399);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p401 := $bitcast.ref.ref($p9);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i402 := $trunc.i8.i1($i349);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i403 := vfio_pci_for_each_slot_or_bus($p400, vfio_pci_fill_devs, $p401, $i402);
    call {:si_unique_call 173} {:cexpr "ret___0"} boogie_si_record_i32($i403);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p389, $i390 := $p394, $i403;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p408 := $i2p.i64.ref($i2);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p409 := $bitcast.ref.ref($p8);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i410 := copy_to_user($p408, $p409, 12);
    call {:si_unique_call 170} {:cexpr "tmp___19"} boogie_si_record_i64($i410);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i411 := $ne.i64($i410, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i411} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    $i412 := $i390;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i412, 0);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    $i424 := $i412;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p425 := $bitcast.ref.ref($p389);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} kfree($p425);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i426 := $sext.i32.i64($i424);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i22 := $i426;
    goto $bb5;

  $bb169:
    assume $i413 == 1;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i414 := $add.i64($i2, 12);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p415 := $i2p.i64.ref($i414);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p416 := $bitcast.ref.ref($p389);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i418 := $load.i32($M.0, $p417);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i419 := $zext.i32.i64($i418);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i420 := $mul.i64($i419, 8);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i421 := copy_to_user($p415, $p416, $i420);
    call {:si_unique_call 175} {:cexpr "tmp___20"} boogie_si_record_i64($i421);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i422 := $ne.i64($i421, 0);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i422} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    $i423 := $i412;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i424 := $i423;
    goto $bb174;

  $bb171:
    assume $i422 == 1;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i423 := $sub.i32(0, 14);
    goto $bb173;

  $bb166:
    assume $i411 == 1;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i412 := $sub.i32(0, 14);
    goto $bb168;

  $bb163:
    assume $i404 == 1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i406 := $load.i32($M.0, $p405);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p407, $i406);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb160:
    assume $i397 == 1;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 12);
    goto $bb5;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb156:
    assume $i385 == 1;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i387 := $load.i32($M.0, $p386);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p388, $i387);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p389, $i390 := $0.ref, $sub.i32(0, 28);
    goto $bb158;

  $bb153:
    assume $i372 == 1;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} warn_slowpath_null(.str.6, 640);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb150:
    assume $i362 == 1;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i363 := $sext.i32.i64($i361);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i22 := $i363;
    goto $bb5;

  $bb147:
    assume $i355 == 1;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 19);
    goto $bb5;

  $bb144:
    assume $i348 == 1;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i349 := 1;
    goto $bb146;

  $bb141:
    assume $i341 == 1;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb138:
    assume $i337 == 1;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb5;

  $bb131:
    assume $i321 == 1;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(374, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i323 := $load.i8($M.0, $p322);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i324 := $trunc.i8.i1($i323);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i329 := $sub.i64(0, 22);
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i22 := $i329;
    goto $bb5;

  $bb133:
    assume $i324 == 1;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.0, $p325);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i327 := pci_try_reset_function($p326);
    call {:si_unique_call 154} {:cexpr "tmp___12"} boogie_si_record_i32($i327);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i328 := $sext.i32.i64($i327);
    call {:si_unique_call 155} {:cexpr "tmp___13"} boogie_si_record_i64($i328);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i329 := $i328;
    goto $bb135;

  $bb98:
    assume $i247 == 1;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p7);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p249 := $i2p.i64.ref($i2);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i250 := copy_from_user($p248, $p249, 20);
    call {:si_unique_call 140} {:cexpr "tmp___7"} boogie_si_record_i64($i250);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i251 := $ne.i64($i250, 0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.0, $p252);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i254 := $zext.i32.i64($i253);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i255 := $ult.i64($i254, 20);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb103, $bb105;

  $bb105:
    assume !($i255 == 1);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.0, $p256);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i258 := $ugt.i32($i257, 4);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i258 == 1);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i260 := $load.i32($M.0, $p259);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i261 := $and.i32($i260, $sub.i32(0, 64));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i262 := $ne.i32($i261, 0);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.0, $p263);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i265 := $and.i32($i264, 1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    $p308 := $0.ref;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(152, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} mutex_lock_nested($p309, 0);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.0, $p310);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i313 := $load.i32($M.0, $p312);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.0, $p314);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.0, $p316);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i318 := vfio_pci_set_irqs_ioctl($p16, $i311, $i313, $i315, $i317, $p308);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 150} {:cexpr "ret"} boogie_si_record_i32($i318);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(152, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} mutex_unlock($p319);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} kfree($p308);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i320 := $sext.i32.i64($i318);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i22 := $i320;
    goto $bb5;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb111:
    assume $i266 == 1;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.0, $p267);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i269 := vfio_pci_get_irq_count($p16, $i268);
    call {:si_unique_call 142} {:cexpr "tmp___8"} boogie_si_record_i32($i269);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.0, $p270);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i272 := $and.i32($i271, 2);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i273 == 1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i276 := $load.i32($M.0, $p275);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i277 := $and.i32($i276, 4);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 0);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i278 == 1);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb116:
    assume $i278 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i274 := 4;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p279);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i281 := $zext.i32.i64($i280);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i282 := $sub.i64($i281, 20);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p283);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i285 := $zext.i32.i64($i284);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i286 := $mul.i64($i285, $i274);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i287 := $ult.i64($i282, $i286);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb119, $bb121;

  $bb121:
    assume !($i287 == 1);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.0, $p288);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i290 := $uge.i32($i289, $i269);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i290 == 1);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.0, $p291);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.0, $p293);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i295 := $add.i32($i292, $i294);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i296 := $ugt.i32($i295, $i269);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i297 := $add.i64($i2, 20);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p298 := $i2p.i64.ref($i297);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.0, $p299);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i301 := $zext.i32.i64($i300);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i302 := $mul.i64($i301, $i274);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p303 := memdup_user($p298, $i302);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i304 := IS_ERR($p303);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i305 := $zext.i1.i8($i304);
    call {:si_unique_call 145} {:cexpr "tmp___11"} boogie_si_record_i8($i305);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i306 := $trunc.i8.i1($i305);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i306} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p308 := $p303;
    goto $bb130;

  $bb127:
    assume $i306 == 1;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i307 := PTR_ERR($p303);
    call {:si_unique_call 147} {:cexpr "tmp___10"} boogie_si_record_i64($i307);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i22 := $i307;
    goto $bb5;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i296 == 1;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i290 == 1;
    goto $bb120;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i287 == 1;
    goto $bb120;

  $bb113:
    assume $i273 == 1;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i274 := 1;
    goto $bb115;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i262 == 1;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i258 == 1;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i255 == 1;
    goto $bb104;

  $bb100:
    assume $i251 == 1;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb5;

  $bb68:
    assume $i205 == 1;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p6);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p207 := $i2p.i64.ref($i2);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i208 := copy_from_user($p206, $p207, 16);
    call {:si_unique_call 132} {:cexpr "tmp___3"} boogie_si_record_i64($i208);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i209 := $ne.i64($i208, 0);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i211 := $load.i32($M.0, $p210);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i212 := $zext.i32.i64($i211);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i213 := $ult.i64($i212, 16);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb73, $bb75;

  $bb75:
    assume !($i213 == 1);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i216 := $ugt.i32($i215, 4);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.0, $p217);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i219 := $slt.i32($i218, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    $i220 := $slt.i32($i218, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i218, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb84, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i221 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i221 == 1;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p228, 1);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.0, $p229);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i231 := vfio_pci_get_irq_count($p16, $i230);
    call {:si_unique_call 136} {:cexpr "tmp___5"} boogie_si_record_i32($i231);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p232, $i231);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p233);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i235 == 1);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i242 := $or.i32($i241, 8);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p243, $i242);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p244 := $i2p.i64.ref($i2);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p6);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i246 := copy_to_user($p244, $p245, 16);
    call {:si_unique_call 138} {:cexpr "tmp___6"} boogie_si_record_i64($i246);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i22 := $i246;
    goto $bb5;

  $bb95:
    assume $i235 == 1;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.0, $p236);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i238 := $or.i32($i237, 6);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p239, $i238);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb82:
    assume $i220 == 1;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i225 := pci_is_pcie($p224);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i226 := $zext.i1.i8($i225);
    call {:si_unique_call 134} {:cexpr "tmp___4"} boogie_si_record_i8($i226);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i227 := $trunc.i8.i1($i226);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb91:
    assume $i227 == 1;
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb80:
    assume $i219 == 1;
    assume {:verifier.code 0} true;
    $i222 := $ule.i32($i218, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i222 == 1);
    goto $bb87;

  $bb88:
    assume $i222 == 1;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i216 == 1;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb74;

  $bb70:
    assume $i209 == 1;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb5;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i2);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i45 := copy_from_user($p43, $p44, 32);
    call {:si_unique_call 126} {:cexpr "tmp___1"} boogie_si_record_i64($i45);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i50 := $ult.i64($i49, 32);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i52, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i52, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb26:
    assume $i55 == 1;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(377, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.0, $p192);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i8.i1($i193);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i194 == 1);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb64:
    assume $i194 == 1;
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i197 := $zext.i32.i64($i196);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i198 := $shl.i64($i197, 40);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p199, $i198);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p200, 786432);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, 3);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p202 := $i2p.i64.ref($i2);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p4);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i204 := copy_to_user($p202, $p203, 32);
    call {:si_unique_call 128} {:cexpr "tmp___2"} boogie_si_record_i64($i204);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i22 := $i204;
    goto $bb5;

  $bb24:
    assume $i54 == 1;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i61 := $shl.i64($i60, 40);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p62, $i61);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1576, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i65);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 3);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb22:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i52, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i56 == 1);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i137 := $zext.i32.i64($i136);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i138 := $shl.i64($i137, 40);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p139, $i138);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p140, 0);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i143 := $zext.i32.i64($i142);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i143, 56)), $mul.ref(0, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i147 := $load.i64($M.0, $p146);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb49, $bb51;

  $bb51:
    assume !($i148 == 1);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i151 := $zext.i32.i64($i150);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i151, 56)), $mul.ref(8, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i155 := $load.i64($M.0, $p154);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.0, $p156);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i158 := $zext.i32.i64($i157);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i158, 56)), $mul.ref(0, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.0, $p161);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i163 := $ne.i64($i155, $i162);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i163 == 1);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i180 := 0;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p181, $i180);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i183 := $load.i64($M.0, $p182);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i184 := $eq.i64($i183, 0);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p185 := pci_map_rom($p42, $p5);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p185);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i187 := $eq.i64($i186, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb58, $bb60;

  $bb60:
    assume !($i187 == 1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i188 := $load.i64($M.4, $p5);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i189 := $eq.i64($i188, 0);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} pci_unmap_rom($p42, $p185);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p191, 1);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i189 == 1;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p190, 0);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i187 == 1;
    goto $bb59;

  $bb55:
    assume $i184 == 1;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i166 := $zext.i32.i64($i165);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i166, 56)), $mul.ref(8, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i170 := $load.i64($M.0, $p169);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i173 := $zext.i32.i64($i172);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i173, 56)), $mul.ref(0, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.0, $p176);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i178 := $sub.i64($i170, $i177);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i179 := $add.i64($i178, 1);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i180 := $i179;
    goto $bb54;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb50;

  $bb29:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i57 := $ule.i32($i52, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb28;

  $bb31:
    assume $i57 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i71 := $shl.i64($i70, 40);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i71);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i75, 56)), $mul.ref(0, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i80 == 1);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i83 := $zext.i32.i64($i82);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i83, 56)), $mul.ref(8, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p86);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i90 := $zext.i32.i64($i89);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i90, 56)), $mul.ref(0, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.0, $p93);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i87, $i94);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i95 == 1);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p113, $i112);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i116 := $eq.i64($i115, 0);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, 3);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i121 := $zext.i32.i64($i120);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i121, 56)), $mul.ref(24, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.0, $p124);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i126 := $and.i64($i125, 512);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb43:
    assume $i127 == 1;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.0, $p128);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i130 := $ugt.i64($i129, 4095);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb45;

  $bb46:
    assume $i130 == 1;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i133 := $or.i32($i132, 4);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, $i133);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb40:
    assume $i116 == 1;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, 0);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i98 := $zext.i32.i64($i97);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i98, 56)), $mul.ref(8, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p101);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i105 := $zext.i32.i64($i104);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i105, 56)), $mul.ref(0, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.0, $p108);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i110 := $sub.i64($i102, $i109);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i111 := $add.i64($i110, 1);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i112 := $i111;
    goto $bb39;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb35;

  $bb18:
    assume $i50 == 1;
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb5;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i2);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i20 := copy_from_user($p18, $p19, 16);
    call {:si_unique_call 122} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i26 := $ult.i64($i25, 16);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 2);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p16, $mul.ref(0, 416)), $mul.ref(374, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 9);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 5);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i2);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i39 := copy_to_user($p37, $p38, 16);
    call {:si_unique_call 124} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i22 := $i39;
    goto $bb5;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 1);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb5;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb5;

  $bb240_dummy:
    assume false;
    return;

  $bb238_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1203;

  $bb222_dummy:
    assume false;
    return;

  $bb213_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1097;
}



const vfio_pci_mmap: ref;

axiom vfio_pci_mmap == $sub.ref(0, 148667);

procedure vfio_pci_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $CurrAddr;



implementation vfio_pci_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i64;
  var $i81: i1;
  var $i82: i64;
  var $p83: ref;
  var $i84: i32;
  var $i85: i64;
  var $i86: i1;
  var $i87: i64;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i64;
  var $p99: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i1;
  var $i105: i64;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p121: ref;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $p128: ref;
  var $i129: i64;
  var $p131: ref;
  var $i132: i64;
  var $i133: i32;
  var $i15: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i7, 28);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 217} {:cexpr "index"} boogie_si_record_i32($i9);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i14 := $ult.i64($i11, $i13);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 8);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i9, 5);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i9);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i21, 56)), $mul.ref(24, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 512);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i9);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i28, 56)), $mul.ref(0, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i33 == 1);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i9);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i34, 56)), $mul.ref(8, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i9);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i39, 56)), $mul.ref(0, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i38, $i43);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i62 := $sub.i64($i59, $i61);
    call {:si_unique_call 218} {:cexpr "req_len"} boogie_si_record_i64($i62);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i65 := $and.i64($i64, 268435455);
    call {:si_unique_call 219} {:cexpr "pgoff"} boogie_si_record_i64($i65);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i66 := $shl.i64($i65, 12);
    call {:si_unique_call 220} {:cexpr "req_start"} boogie_si_record_i64($i66);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i67 := $ule.i64($i57, 4095);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i67 == 1);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i66, $i62);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i64($i68, $i57);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(337, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, $i9);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i9);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref($i87, 8));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p101, $p0);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, boot_cpu_data);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i104 := $ugt.i32($i103, 3);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i104 == 1);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p114);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p115);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 227} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p116, $p117, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i118 := $zext.i32.i64($i9);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i118, 56)), $mul.ref(0, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.0, $p121);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i123 := $lshr.i64($i122, 12);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, $i65);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p125, $i124);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i127 := $load.i64($M.0, $p126);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.0, $p128);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.0, $p131);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i133 := remap_pfn_range($p1, $i127, $i129, $i62, $i132);
    call {:si_unique_call 229} {:cexpr "tmp___0"} boogie_si_record_i32($i133);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i15 := $i133;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb41:
    assume $i104 == 1;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i105 := cachemode2protval(2);
    call {:si_unique_call 225} {:cexpr "tmp"} boogie_si_record_i64($i105);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p107);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i109 := $or.i64($i108, $i105);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p110, $i109);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p2);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 226} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p112, $p113, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i92 == 1;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i93 := $shl.i32(1, $i9);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i94 := pci_request_selected_regions($p5, $i93, .str.1);
    call {:si_unique_call 222} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $p96 := pci_iomap($p5, $i9, 0);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i9);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref($i97, 8));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p99, $p96);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i95 == 1;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i15 := $i94;
    goto $bb3;

  $bb26:
    assume $i73 == 1;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(340, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(338, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i75, $i78);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i81 := $ugt.i64($i80, $i66);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i81 == 1;
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i66, $i62);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(340, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i85 := $zext.i32.i64($i84);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i86 := $ugt.i64($i82, $i85);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb30;

  $bb31:
    assume $i86 == 1;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i9);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i45, 56)), $mul.ref(8, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i9);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i50, 56)), $mul.ref(0, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i55 := $sub.i64($i49, $i54);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 1);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb15;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;
}



const vfio_pci_request: ref;

axiom vfio_pci_request == $sub.ref(0, 149699);

procedure vfio_pci_request($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation vfio_pci_request($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p23: ref;
  var $p27: ref;
  var $p31: ref;
  var $p34: ref;
  var $p37: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var vslice_dummy_var_68: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p2 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 231} {:cexpr "vfio_pci_request:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(152, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} mutex_lock_nested($p4, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i1, 0);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(152, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} mutex_unlock($p58);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i54 == 1;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} dev_warn.ref.ref($p57, .str.11);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i9 := $urem.i32($i1, 10);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vslice_dummy_var_68 := eventfd_signal($p52, 1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p14, 0);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p16, $sub.i32(0, 559067475));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p18, $sub.i32(0, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p23, $0.ref);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p27, $0.ref);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p31, $0.ref);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p34, .str.8);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, 0);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p40, 0);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p41, 1250);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p42, 10);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p43, 0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p44, 0);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p45, 0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i46 := ___ratelimit($p2, .str.9);
    call {:si_unique_call 234} {:cexpr "tmp"} boogie_si_record_i32($i46);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i47 == 1;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} dev_notice.ref.ref.i32($p50, .str.10, $i1);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const ___ratelimit: ref;

axiom ___ratelimit == $sub.ref(0, 150731);

procedure ___ratelimit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ___ratelimit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 240} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_notice: ref;

axiom dev_notice == $sub.ref(0, 151763);

procedure dev_notice.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_notice.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 152795);

procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    return;
}



const pci_request_selected_regions: ref;

axiom pci_request_selected_regions == $sub.ref(0, 153827);

procedure pci_request_selected_regions($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_selected_regions($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} {:cexpr "pci_request_selected_regions:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 242} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 243} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_iomap: ref;

axiom pci_iomap == $sub.ref(0, 154859);

procedure pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "pci_iomap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 245} {:cexpr "pci_iomap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $p3 := external_alloc();
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const cachemode2protval: ref;

axiom cachemode2protval == $sub.ref(0, 155891);

procedure cachemode2protval($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation cachemode2protval($i0: i32) returns ($r: i64)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i16;
  var $i10: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} {:cexpr "cachemode2protval:arg:pcm"} boogie_si_record_i32($i0);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i4 := ldv__builtin_expect($i3, 1);
    call {:si_unique_call 249} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i0);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(__cachemode2pte_tbl, $mul.ref(0, 16)), $mul.ref($i7, 2));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i64($i9);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 156923);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const remap_pfn_range: ref;

axiom remap_pfn_range == $sub.ref(0, 157955);

procedure remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p6, $i4);
    call {:si_unique_call 251} {:cexpr "remap_pfn_range:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 252} {:cexpr "remap_pfn_range:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 253} {:cexpr "remap_pfn_range:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 158987);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 257} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 160019);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 260} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 261} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} __might_fault(.str.7, 697);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 264} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 266} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 161051);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 270} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 271} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} __might_fault(.str.7, 732);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 274} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 276} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const pci_map_rom: ref;

axiom pci_map_rom == $sub.ref(0, 162083);

procedure pci_map_rom($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_map_rom($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p2 := external_alloc();
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_unmap_rom: ref;

axiom pci_unmap_rom == $sub.ref(0, 163115);

procedure pci_unmap_rom($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_unmap_rom($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    return;
}



const pci_is_pcie: ref;

axiom pci_is_pcie == $sub.ref(0, 164147);

procedure pci_is_pcie($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation pci_is_pcie($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i1 := pci_pcie_cap($p0);
    call {:si_unique_call 280} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vfio_pci_get_irq_count: ref;

axiom vfio_pci_get_irq_count == $sub.ref(0, 165179);

procedure vfio_pci_get_irq_count($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation vfio_pci_get_irq_count($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i1;
  var $i50: i8;
  var $i51: i1;
  var $i52: i1;
  var $i12: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 284} {:cexpr "vfio_pci_get_irq_count:arg:irq_type"} boogie_si_record_i32($i1);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 0);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 1);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i1, 2);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i1, 3);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i1, 4);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb5;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i49 := pci_is_pcie($p48);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i8($i49);
    call {:si_unique_call 291} {:cexpr "tmp"} boogie_si_record_i8($i50);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i51 == 1;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb5;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2984)), $mul.ref(76, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    call {:si_unique_call 288} {:cexpr "pos___0"} boogie_si_record_i8($i34);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i34);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 2);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_71 := pci_read_config_word($p38, $i40, $p4);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.9, $p4);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 2047);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i12 := $i45;
    goto $bb5;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2984)), $mul.ref(75, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    call {:si_unique_call 286} {:cexpr "pos"} boogie_si_record_i8($i17);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i17);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 2);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_70 := pci_read_config_word($p21, $i23, $p3);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.9, $p3);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 14);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i28 := $ashr.i32($i27, 1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i29 := $shl.i32(1, $i28);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i12 := $i29;
    goto $bb5;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_69 := pci_read_config_byte($p7, 61, $p2);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.8, $p2);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb5;
}



const memdup_user: ref;

axiom memdup_user == $sub.ref(0, 166211);

procedure memdup_user($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation memdup_user($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} {:cexpr "memdup_user:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p2 := external_alloc();
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 167243);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i1 := ldv_is_err($p0);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 295} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 168275);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 297} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vfio_pci_set_irqs_ioctl: ref;

axiom vfio_pci_set_irqs_ioctl == $sub.ref(0, 169307);

procedure vfio_pci_set_irqs_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31, assertsPassed, $CurrAddr;



implementation vfio_pci_set_irqs_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p19: ref;
  var $i39: i64;
  var $i40: i1;
  var $i42: i32;
  var $i41: i32;

  $bb0:
    call {:si_unique_call 298} {:cexpr "vfio_pci_set_irqs_ioctl:arg:flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 299} {:cexpr "vfio_pci_set_irqs_ioctl:arg:index"} boogie_si_record_i32($i2);
    call {:si_unique_call 300} {:cexpr "vfio_pci_set_irqs_ioctl:arg:start"} boogie_si_record_i32($i3);
    call {:si_unique_call 301} {:cexpr "vfio_pci_set_irqs_ioctl:arg:count"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p19);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    call {:si_unique_call 304} $i42 := devirtbounce($p19, $p0, $i2, $i3, $i4, $i1, $p5);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 305} {:cexpr "tmp___0"} boogie_si_record_i32($i42);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i41 := $i42;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i40 == 1;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 25);
    goto $bb62;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i1, 56);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p38 := $0.ref;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p19 := $p38;
    goto $bb30;

  $bb55:
    assume $i37 == 1;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p38 := vfio_pci_set_req_trigger;
    goto $bb57;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i1, 56);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p35 := $0.ref;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p19 := $p35;
    goto $bb30;

  $bb47:
    assume $i28 == 1;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i31 := pci_is_pcie($p30);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    call {:si_unique_call 303} {:cexpr "tmp"} boogie_si_record_i8($i32);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $p34 := $0.ref;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p35 := $p34;
    goto $bb52;

  $bb49:
    assume $i33 == 1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p34 := vfio_pci_set_err_trigger;
    goto $bb51;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i1, 56);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p26 := $0.ref;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p19 := $p26;
    goto $bb30;

  $bb36:
    assume $i23 == 1;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p26 := vfio_pci_set_msi_trigger;
    goto $bb44;

  $bb34:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i20, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb38;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p26 := $0.ref;
    goto $bb44;

  $bb32:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb38;

  $bb42:
    assume $i25 == 1;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i1, 56);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p19 := $p18;
    goto $bb30;

  $bb21:
    assume $i15 == 1;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p18 := vfio_pci_set_intx_trigger;
    goto $bb28;

  $bb19:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb23;

  $bb24:
    assume $i16 == 1;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p18 := vfio_pci_set_intx_unmask;
    goto $bb28;

  $bb17:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb23;

  $bb26:
    assume $i17 == 1;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p18 := vfio_pci_set_intx_mask;
    goto $bb28;
}



const pci_try_reset_function: ref;

axiom pci_try_reset_function == $sub.ref(0, 170339);

procedure pci_try_reset_function($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_try_reset_function($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 306} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 307} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_probe_reset_slot: ref;

axiom pci_probe_reset_slot == $sub.ref(0, 171371);

procedure pci_probe_reset_slot($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_probe_reset_slot($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 1} true;
    call {:si_unique_call 308} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 309} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_probe_reset_bus: ref;

axiom pci_probe_reset_bus == $sub.ref(0, 172403);

procedure pci_probe_reset_bus($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_probe_reset_bus($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 310} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 311} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vfio_pci_count_devs: ref;

axiom vfio_pci_count_devs == $sub.ref(0, 173435);

procedure vfio_pci_count_devs($p0: ref, $p1: ref) returns ($r: i32);



const vfio_pci_for_each_slot_or_bus: ref;

axiom vfio_pci_for_each_slot_or_bus == $sub.ref(0, 174467);

procedure vfio_pci_for_each_slot_or_bus($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $CurrAddr;



implementation vfio_pci_for_each_slot_or_bus($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 313} {:cexpr "vfio_pci_for_each_slot_or_bus:arg:slot"} boogie_si_record_i1($i3);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p6, $p1);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p7, $p2);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p8, $p0);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i5);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i9);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p10, $i11);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p12, 0);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} pci_walk_bus($p14, vfio_pci_walk_wrapper, $p15);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.14, $p16);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 175499);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 176531);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 317} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 318} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} ldv_check_alloc_flags($i2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p3 := ldv_undef_ptr();
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const vfio_pci_fill_devs: ref;

axiom vfio_pci_fill_devs == $sub.ref(0, 177563);

procedure vfio_pci_fill_devs($p0: ref, $p1: ref) returns ($r: i32);



const fdget: ref;

axiom fdget == $sub.ref(0, 178595);

procedure fdget($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.15, $M.18, $CurrAddr;



implementation fdget($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 324} {:cexpr "fdget:arg:fd"} boogie_si_record_i32($i0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i4 := __fdget($i0);
    call {:si_unique_call 326} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p5 := __to_fd($i4);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p8 := $extractvalue($p5, 0);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p7, $p8);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i10 := $extractvalue($p5, 1);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p9, $i10);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.15;
    cmdloc_dummy_var_13 := $M.15;
    call {:si_unique_call 328} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p11, $p12, 16, $zext.i32.i64(8), 0 == 1);
    $M.15 := cmdloc_dummy_var_14;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.15;
    cmdloc_dummy_var_16 := $M.15;
    call {:si_unique_call 329} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p13, $p14, 16, $zext.i32.i64(8), 0 == 1);
    $M.15 := cmdloc_dummy_var_17;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    $p17 := $load.ref($M.15, $p16);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume $extractvalue($p18, 1) == $extractvalue($u0, 1);
    assume $extractvalue($p18, 0) == $p17;
    goto corral_source_split_1732;

  corral_source_split_1732:
    $p19 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    $i20 := $load.i32($M.15, $p19);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume $extractvalue($p21, 0) == $extractvalue($p18, 0);
    assume $extractvalue($p21, 1) == $i20;
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $r := $p21;
    return;
}



const vfio_group_get_external_user: ref;

axiom vfio_group_get_external_user == $sub.ref(0, 179627);

procedure vfio_group_get_external_user($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vfio_group_get_external_user($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p1 := external_alloc();
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fdput: ref;

axiom fdput == $sub.ref(0, 180659);

procedure fdput($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.16, $M.17, $CurrAddr;



implementation fdput($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p4, $p0);
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p5, $i1);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.17, $p6);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.16, $p10);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} fput($p11);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_external_user_iommu_id: ref;

axiom vfio_external_user_iommu_id == $sub.ref(0, 181691);

procedure vfio_external_user_iommu_id($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_external_user_iommu_id($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 1} true;
    call {:si_unique_call 333} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vfio_pci_validate_devs: ref;

axiom vfio_pci_validate_devs == $sub.ref(0, 182723);

procedure vfio_pci_validate_devs($p0: ref, $p1: ref) returns ($r: i32);



const pci_try_reset_slot: ref;

axiom pci_try_reset_slot == $sub.ref(0, 183755);

procedure pci_try_reset_slot($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_try_reset_slot($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 335} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 336} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_try_reset_bus: ref;

axiom pci_try_reset_bus == $sub.ref(0, 184787);

procedure pci_try_reset_bus($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_try_reset_bus($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 1} true;
    call {:si_unique_call 337} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 338} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vfio_group_put_external_user: ref;

axiom vfio_group_put_external_user == $sub.ref(0, 185819);

procedure vfio_group_put_external_user($p0: ref);
  free requires assertsPassed;



implementation vfio_group_put_external_user($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    return;
}



const iommu_group_id: ref;

axiom iommu_group_id == $sub.ref(0, 186851);

procedure iommu_group_id($p0: ref) returns ($r: i32);



const fput: ref;

axiom fput == $sub.ref(0, 187883);

procedure fput($p0: ref);
  free requires assertsPassed;



implementation fput($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    return;
}



const __fdget: ref;

axiom __fdget == $sub.ref(0, 188915);

procedure __fdget($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __fdget($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 339} {:cexpr "__fdget:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 340} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 341} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __to_fd: ref;

axiom __to_fd == $sub.ref(0, 189947);

procedure __to_fd($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.18, $CurrAddr;



implementation __to_fd($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 344} {:cexpr "__to_fd:arg:v"} boogie_si_record_i64($i0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i0, $sub.i64(0, 4));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p5, $p4);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i0);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 3);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p8, $i7);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.18;
    cmdloc_dummy_var_19 := $M.18;
    call {:si_unique_call 345} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p9, $p10, 16, $zext.i32.i64(8), 0 == 1);
    $M.18 := cmdloc_dummy_var_20;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    $p13 := $load.ref($M.18, $p12);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume $extractvalue($p14, 1) == $extractvalue($u0, 1);
    assume $extractvalue($p14, 0) == $p13;
    goto corral_source_split_1783;

  corral_source_split_1783:
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    $i16 := $load.i32($M.18, $p15);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume $extractvalue($p17, 0) == $extractvalue($p14, 0);
    assume $extractvalue($p17, 1) == $i16;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;
}



const vfio_pci_walk_wrapper: ref;

axiom vfio_pci_walk_wrapper == $sub.ref(0, 190979);

procedure vfio_pci_walk_wrapper($p0: ref, $p1: ref) returns ($r: i32);



const pci_walk_bus: ref;

axiom pci_walk_bus == $sub.ref(0, 192011);

procedure pci_walk_bus($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation pci_walk_bus($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_dev_below_slot: ref;

axiom vfio_pci_dev_below_slot == $sub.ref(0, 193043);

procedure vfio_pci_dev_below_slot($p0: ref, $p1: ref) returns ($r: i1);



const vfio_pci_set_intx_mask: ref;

axiom vfio_pci_set_intx_mask == $sub.ref(0, 194075);

procedure vfio_pci_set_intx_mask($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation vfio_pci_set_intx_mask($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} {:cexpr "vfio_pci_set_intx_mask:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 347} {:cexpr "vfio_pci_set_intx_mask:arg:start"} boogie_si_record_i32($i2);
    call {:si_unique_call 348} {:cexpr "vfio_pci_set_intx_mask:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 349} {:cexpr "vfio_pci_set_intx_mask:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i3, 1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i4, 1);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i4, 2);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i4, 4);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i20 == 1;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 25);
    goto $bb8;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p5);
    call {:si_unique_call 351} {:cexpr "mask"} boogie_si_record_i8($i16);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} vfio_pci_intx_mask($p0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vfio_pci_intx_mask($p0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const vfio_pci_set_intx_unmask: ref;

axiom vfio_pci_set_intx_unmask == $sub.ref(0, 195107);

procedure vfio_pci_set_intx_unmask($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation vfio_pci_set_intx_unmask($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "vfio_pci_set_intx_unmask:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 354} {:cexpr "vfio_pci_set_intx_unmask:arg:start"} boogie_si_record_i32($i2);
    call {:si_unique_call 355} {:cexpr "vfio_pci_set_intx_unmask:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 356} {:cexpr "vfio_pci_set_intx_unmask:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i3, 1);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i4, 1);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i4, 2);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i4, 4);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i20 == 1;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p5);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 360} {:cexpr "fd"} boogie_si_record_i32($i22);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i23 := $sge.i32($i22, 0);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vfio_virqfd_disable($p31);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i23 == 1;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p0);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i28 := vfio_virqfd_enable($p24, vfio_pci_intx_unmask_handler, vfio_send_intx_eventfd, $0.ref, $p27, $i22);
    call {:si_unique_call 362} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i11 := $i28;
    goto $bb8;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p5);
    call {:si_unique_call 358} {:cexpr "unmask"} boogie_si_record_i8($i16);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} vfio_pci_intx_unmask($p0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vfio_pci_intx_unmask($p0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const vfio_pci_set_intx_trigger: ref;

axiom vfio_pci_set_intx_trigger == $sub.ref(0, 196139);

procedure vfio_pci_set_intx_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31, assertsPassed;



implementation vfio_pci_set_intx_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} {:cexpr "vfio_pci_set_intx_trigger:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 365} {:cexpr "vfio_pci_set_intx_trigger:arg:start"} boogie_si_record_i32($i2);
    call {:si_unique_call 366} {:cexpr "vfio_pci_set_intx_trigger:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 367} {:cexpr "vfio_pci_set_intx_trigger:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i2, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i3, 1);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i4, 4);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i4, 1);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i43 == 1);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i4, 2);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb43:
    assume $i46 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p5);
    call {:si_unique_call 378} {:cexpr "trigger"} boogie_si_record_i8($i47);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i49 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p0);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vfio_send_intx_eventfd($p50, $0.ref);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb40:
    assume $i43 == 1;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} vfio_send_intx_eventfd($p44, $0.ref);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i41 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb8;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p5);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 369} {:cexpr "fd"} boogie_si_record_i32($i30);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i35 := vfio_intx_enable($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 373} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i37 := vfio_intx_set_signal($p0, $i30);
    call {:si_unique_call 375} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i12 := $i37;
    goto $bb8;

  $bb33:
    assume $i38 == 1;
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} vfio_intx_disable($p0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i36 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i12 := $i35;
    goto $bb8;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i33 == 1;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i34 := vfio_intx_set_signal($p0, $i30);
    call {:si_unique_call 371} {:cexpr "tmp"} boogie_si_record_i32($i34);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i12 := $i34;
    goto $bb8;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb8;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb14;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i18 == 1);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i21 == 1);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 0);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i4, 1);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} vfio_intx_disable($p0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;
}



const vfio_pci_set_msi_trigger: ref;

axiom vfio_pci_set_msi_trigger == $sub.ref(0, 197171);

procedure vfio_pci_set_msi_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31, assertsPassed;



implementation vfio_pci_set_msi_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p83: ref;
  var $p84: ref;
  var $i86: i32;
  var $i87: i1;
  var $i53: i32;
  var $i15: i32;
  var vslice_dummy_var_72: i64;
  var vslice_dummy_var_73: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} {:cexpr "vfio_pci_set_msi_trigger:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 381} {:cexpr "vfio_pci_set_msi_trigger:arg:start"} boogie_si_record_i32($i2);
    call {:si_unique_call 382} {:cexpr "vfio_pci_set_msi_trigger:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 383} {:cexpr "vfio_pci_set_msi_trigger:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 2);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 384} {:cexpr "msix"} boogie_si_record_i8($i7);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $i1);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, $i1);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i4, 4);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, $i1);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb35;

  $bb35:
    assume !($i46 == 1);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i2, $i3);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i47, $i49);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    call {:si_unique_call 393} {:cexpr "vfio_pci_set_msi_trigger:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i2, $i3);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i52 := $ult.i32($i2, $i51);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb39:
    assume $i52 == 1;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i53 := $i2;
    goto $bb42;

  $bb42:
    call $p54, $p55, $i56, $p58, $p59, $i60, $i61, $i62, $i63, $p64, $p65, $i66, $p68, $p69, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $i78, $p79, $p80, $i81, $p83, $p84, $i86, $i87, $i53, vslice_dummy_var_72, vslice_dummy_var_73 := vfio_pci_set_msi_trigger_loop_$bb42($p0, $i2, $i4, $p5, $i51, $p54, $p55, $i56, $p58, $p59, $i60, $i61, $i62, $i63, $p64, $p65, $i66, $p68, $p69, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $i78, $p79, $p80, $i81, $p83, $p84, $i86, $i87, $i53, vslice_dummy_var_72, vslice_dummy_var_73);
    goto $bb42_last;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i53);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p55, $mul.ref($i56, 40)), $mul.ref(0, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i4, 1);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i63 == 1);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i4, 2);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i53, 1);
    call {:si_unique_call 394} {:cexpr "i"} boogie_si_record_i32($i86);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i87 := $ult.i32($i86, $i51);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i87 == 1);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb57:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i53 := $i86;
    goto $bb57_dummy;

  $bb51:
    assume $i72 == 1;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i53, $i2);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p5, $mul.ref($i74, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i78 == 1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i53);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p80, $mul.ref($i81, 40)), $mul.ref(0, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} vslice_dummy_var_73 := eventfd_signal($p84, 1);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb48:
    assume $i63 == 1;
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i53);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref($i66, 40)), $mul.ref(0, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} vslice_dummy_var_72 := eventfd_signal($p69, 1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i61 == 1;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb34;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p5);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, $i1);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i2, $i3);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i7);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i38 := vfio_msi_enable($p0, $i36, $i37);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 389} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i7);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i41 := vfio_msi_set_block($p0, $i2, $i3, $p30, $i40);
    call {:si_unique_call 391} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i15 := $i41;
    goto $bb8;

  $bb29:
    assume $i42 == 1;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i7);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vfio_msi_disable($p0, $i43);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i15 := $i38;
    goto $bb8;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i7);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i35 := vfio_msi_set_block($p0, $i2, $i3, $p30, $i34);
    call {:si_unique_call 387} {:cexpr "tmp"} boogie_si_record_i32($i35);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i15 := $i35;
    goto $bb8;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb14;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i4, 1);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i7);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vfio_msi_disable($p0, $i14);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb57_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2053;
}



const vfio_pci_set_err_trigger: ref;

axiom vfio_pci_set_err_trigger == $sub.ref(0, 198203);

procedure vfio_pci_set_err_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vfio_pci_set_err_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} {:cexpr "vfio_pci_set_err_trigger:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 398} {:cexpr "vfio_pci_set_err_trigger:arg:start"} boogie_si_record_i32($i2);
    call {:si_unique_call 399} {:cexpr "vfio_pci_set_err_trigger:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 400} {:cexpr "vfio_pci_set_err_trigger:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 3);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(400, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i9 := vfio_pci_set_ctx_trigger_single($p8, $i4, $p5);
    call {:si_unique_call 402} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const vfio_pci_set_req_trigger: ref;

axiom vfio_pci_set_req_trigger == $sub.ref(0, 199235);

procedure vfio_pci_set_req_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vfio_pci_set_req_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} {:cexpr "vfio_pci_set_req_trigger:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 404} {:cexpr "vfio_pci_set_req_trigger:arg:start"} boogie_si_record_i32($i2);
    call {:si_unique_call 405} {:cexpr "vfio_pci_set_req_trigger:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 406} {:cexpr "vfio_pci_set_req_trigger:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 4);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i2, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i3, 1);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i11 := vfio_pci_set_ctx_trigger_single($p10, $i4, $p5);
    call {:si_unique_call 408} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const vfio_pci_set_ctx_trigger_single: ref;

axiom vfio_pci_set_ctx_trigger_single == $sub.ref(0, 200267);

procedure vfio_pci_set_ctx_trigger_single($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vfio_pci_set_ctx_trigger_single($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i7: i32;
  var vslice_dummy_var_74: i64;
  var vslice_dummy_var_75: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} {:cexpr "vfio_pci_set_ctx_trigger_single:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 410} {:cexpr "fd"} boogie_si_record_i32($i4);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 7);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i1, 1);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i1, 2);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i4, $sub.i32(0, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i30 := $sge.i32($i4, 0);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i30 == 1);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb25:
    assume $i30 == 1;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $p31 := eventfd_ctx_fdget($i4);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i33 := IS_ERR($p32);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 417} {:cexpr "tmp___0"} boogie_si_record_i8($i34);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p0);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $p31);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb30:
    assume $i41 == 1;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p0);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} eventfd_ctx_put($p42);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i35 == 1;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p31);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i37 := PTR_ERR($p36);
    call {:si_unique_call 419} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i7 := $i38;
    goto $bb3;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p0);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb22:
    assume $i28 == 1;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} eventfd_ctx_put($p29);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p2);
    call {:si_unique_call 412} {:cexpr "trigger"} boogie_si_record_i8($i17);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p0);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_75 := eventfd_signal($p23, 1);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p0);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p0);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} vslice_dummy_var_74 := eventfd_signal($p13, 1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const eventfd_ctx_put: ref;

axiom eventfd_ctx_put == $sub.ref(0, 201299);

procedure eventfd_ctx_put($p0: ref);
  free requires assertsPassed;



implementation eventfd_ctx_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    return;
}



const eventfd_ctx_fdget: ref;

axiom eventfd_ctx_fdget == $sub.ref(0, 202331);

procedure eventfd_ctx_fdget($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation eventfd_ctx_fdget($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} {:cexpr "eventfd_ctx_fdget:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p1 := external_alloc();
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vfio_msi_disable: ref;

axiom vfio_msi_disable == $sub.ref(0, 203363);

procedure vfio_msi_disable($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31;



implementation vfio_msi_disable($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i12: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 423} {:cexpr "vfio_msi_disable:arg:msix"} boogie_si_record_i1($i1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} vslice_dummy_var_76 := vfio_msi_set_block($p0, 0, $i6, $0.ref, $i7);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i2);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} pci_disable_msi($p4);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 5);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} kfree($p36);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} pci_disable_msix($p28);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(312, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} kfree($p31);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i15, $p17, $p18, $p19, $i20, $p22, $i23, $i24, $i25, $i12 := vfio_msi_disable_loop_$bb4($p0, $p9, $p13, $p14, $i15, $p17, $p18, $p19, $i20, $p22, $i23, $i24, $i25, $i12);
    goto $bb4_last;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i12);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(8, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vfio_virqfd_disable($p17);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i12);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref($i20, 40)), $mul.ref(16, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vfio_virqfd_disable($p22);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i12, 1);
    call {:si_unique_call 427} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p9);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, $i23);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i23;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2227;
}



const vfio_msi_set_block: ref;

axiom vfio_msi_set_block == $sub.ref(0, 204395);

procedure vfio_msi_set_block($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31;



implementation vfio_msi_set_block($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i1) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i14: i32;
  var $i15: i32;
  var $i29: i32;
  var $i30: i32;
  var $i12: i32;
  var $i13: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i37: i32;
  var $i38: i1;
  var $i34: i32;
  var $i10: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} {:cexpr "vfio_msi_set_block:arg:start"} boogie_si_record_i32($i1);
    call {:si_unique_call 433} {:cexpr "vfio_msi_set_block:arg:count"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 434} {:cexpr "vfio_msi_set_block:arg:msix"} boogie_si_record_i1($i4);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i1, $i2);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i6, $i8);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 435} {:cexpr "vfio_msi_set_block:arg:j"} boogie_si_record_i32($i1);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i2);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i1, 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i13, 0);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i12, 1);
    call {:si_unique_call 440} {:cexpr "j"} boogie_si_record_i32($i32);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i33 := $uge.i32($i32, $i1);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb21;

  $bb21:
    call $i35, $i37, $i38, $i34, vslice_dummy_var_77 := vfio_msi_set_block_loop_$bb21($p0, $i1, $i5, $i35, $i37, $i38, $i34, vslice_dummy_var_77);
    goto $bb21_last;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i5);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} vslice_dummy_var_77 := vfio_msi_set_vector_signal($p0, $i34, $sub.i32(0, 1), $i35);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i34, 1);
    call {:si_unique_call 442} {:cexpr "j"} boogie_si_record_i32($i37);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i38 := $uge.i32($i37, $i1);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i34 := $i37;
    goto $bb23_dummy;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i1, 0;
    goto $bb8;

  $bb8:
    call $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i14, $i15, $i29, $i30 := vfio_msi_set_block_loop_$bb8($p0, $i2, $p3, $i5, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i14, $i15, $i29, $i30);
    goto $bb8_last;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p3);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i5);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i23 := vfio_msi_set_vector_signal($p0, $i14, $i21, $i22);
    call {:si_unique_call 437} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i15, 1);
    call {:si_unique_call 438} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i14, 1);
    call {:si_unique_call 439} {:cexpr "j"} boogie_si_record_i32($i25);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i24, $i2);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i23, 0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i28 := $and.i1($i26, $i27);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i29, $i30 := $i25, $i23;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i29, $i30;
    goto $bb7;

  $bb13:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i14, $i15 := $i25, $i24;
    goto $bb13_dummy;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i15);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p3, $mul.ref($i18, 4));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2315;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2284;
}



const vfio_msi_enable: ref;

axiom vfio_msi_enable == $sub.ref(0, 205427);

procedure vfio_msi_enable($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation vfio_msi_enable($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i40: i16;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i39: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i1;
  var $i67: i32;
  var $p68: ref;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $p77: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} {:cexpr "vfio_msi_enable:arg:nvec"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 444} {:cexpr "vfio_msi_enable:arg:msix"} boogie_si_record_i1($i2);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 2);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i1);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 40);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p18 := kzalloc($i17, 208);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p18);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i3);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i59 := pci_enable_msi_range($p5, 1, $i1);
    call {:si_unique_call 448} {:cexpr "ret"} boogie_si_record_i32($i59);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, $i1);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i1);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i3);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i67 := (if $i66 == 1 then 2 else 1);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i3);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i69 == 1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i70 := $mul.i32($i1, 2);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, $sub.i32(0, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i72 := fls($i71);
    call {:si_unique_call 459} {:cexpr "tmp___1"} boogie_si_record_i32($i72);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 255);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $i76);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb39:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i60 == 1;
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i32($i59, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} kfree($p64);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i15 := $i59;
    goto $bb8;

  $bb35:
    assume $i61 == 1;
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} pci_disable_msi($p5);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i1);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i27 := $mul.i64($i26, 8);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p28 := kzalloc($i27, 208);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(312, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p28);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(312, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32(0, $i1);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(312, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i50 := pci_enable_msix_range($p5, $p49, 1, $i1);
    call {:si_unique_call 452} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, $i1);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb26:
    assume $i51 == 1;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i52 := $sgt.i32($i50, 0);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(312, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} kfree($p55);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} kfree($p58);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i15 := $i50;
    goto $bb8;

  $bb28:
    assume $i52 == 1;
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} pci_disable_msix($p5);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb21;

  $bb21:
    call $i40, $p41, $p42, $i43, $p45, $i46, $i47, $i39 := vfio_msi_enable_loop_$bb21($p0, $i1, $i40, $p41, $p42, $i43, $p45, $i46, $i47, $i39);
    goto $bb21_last;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(312, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i39);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p42, $mul.ref($i43, 8)), $mul.ref(4, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, $i40);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i39, 1);
    call {:si_unique_call 450} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, $i1);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i39 := $i46;
    goto $bb23_dummy;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} kfree($p37);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb8;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb8;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2384;
}



const pci_enable_msix_range: ref;

axiom pci_enable_msix_range == $sub.ref(0, 206459);

procedure pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 460} {:cexpr "pci_enable_msix_range:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 461} {:cexpr "pci_enable_msix_range:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 462} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 463} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_disable_msix: ref;

axiom pci_disable_msix == $sub.ref(0, 207491);

procedure pci_disable_msix($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msix($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_msi_range: ref;

axiom pci_enable_msi_range == $sub.ref(0, 208523);

procedure pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 464} {:cexpr "pci_enable_msi_range:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 465} {:cexpr "pci_enable_msi_range:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 466} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 467} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_disable_msi: ref;

axiom pci_disable_msi == $sub.ref(0, 209555);

procedure pci_disable_msi($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msi($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    return;
}



const fls: ref;

axiom fls == $sub.ref(0, 210587);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 469} $i1 := devirtbounce.2(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 470} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vfio_msi_set_vector_signal: ref;

axiom vfio_msi_set_vector_signal == $sub.ref(0, 211619);

procedure vfio_msi_set_vector_signal($p0: ref, $i1: i32, $i2: i32, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31;



implementation vfio_msi_set_vector_signal($p0: ref, $i1: i32, $i2: i32, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i15: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i1;
  var $i76: i8;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p107: ref;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p4 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 472} {:cexpr "vfio_msi_set_vector_signal:arg:vector"} boogie_si_record_i32($i1);
    call {:si_unique_call 473} {:cexpr "vfio_msi_set_vector_signal:arg:fd"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 474} {:cexpr "vfio_msi_set_vector_signal:arg:msix"} boogie_si_record_i1($i3);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i5);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, $i1);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i5);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p20 := (if $i19 == 1 then .str.24 else .str.25);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i23 := $sle.i32($i22, $i1);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i1);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref($i27, 40)), $mul.ref(0, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i2, 0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $p58 := pci_name($p7);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p59 := kasprintf.i32.ref.ref.i32.ref(208, .str.26, $p20, $i1, $p58);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p61, $mul.ref($i62, 40)), $mul.ref(24, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $p59);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i1);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p66, $mul.ref($i67, 40)), $mul.ref(24, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i72 := $eq.i64($i71, 0);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p73 := eventfd_ctx_fdget($i2);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i75 := IS_ERR($p74);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i8($i75);
    call {:si_unique_call 482} {:cexpr "tmp___1"} boogie_si_record_i8($i76);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1($i76);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i8.i1($i5);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i1);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p89, $mul.ref($i90, 40)), $mul.ref(24, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p73);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i95 := ldv_request_irq_54($i15, vfio_msihandler, 0, $p93, $p94);
    call {:si_unique_call 489} {:cexpr "ret"} boogie_si_record_i32($i95);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i1);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p104, $mul.ref($i105, 40)), $mul.ref(0, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, $p73);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb23:
    assume $i96 == 1;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i1);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p98, $mul.ref($i99, 40)), $mul.ref(24, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} kfree($p102);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} eventfd_ctx_put($p73);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i24 := $i95;
    goto $bb6;

  $bb20:
    assume $i87 == 1;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} get_cached_msi_msg($i15, $p4);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} pci_write_msi_msg($i15, $p4);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i77 == 1;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i1);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p79, $mul.ref($i80, 40)), $mul.ref(24, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} kfree($p83);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p73);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i85 := PTR_ERR($p84);
    call {:si_unique_call 485} {:cexpr "tmp___0"} boogie_si_record_i64($i85);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i64.i32($i85);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i24 := $i86;
    goto $bb6;

  $bb14:
    assume $i72 == 1;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb6;

  $bb11:
    assume $i57 == 1;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb6;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i1);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p34, $mul.ref($i35, 40)), $mul.ref(0, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} ldv_free_irq_53($i15, $p39);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i1);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p41, $mul.ref($i42, 40)), $mul.ref(24, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} kfree($p45);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i1);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), $mul.ref(0, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} eventfd_ctx_put($p51);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i1);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p53, $mul.ref($i54, 40)), $mul.ref(0, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $0.ref);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(312, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i1);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 8)), $mul.ref(0, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const ldv_free_irq_53: ref;

axiom ldv_free_irq_53 == $sub.ref(0, 212651);

procedure ldv_free_irq_53($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.21, $M.24, $M.27, $M.30;



implementation ldv_free_irq_53($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} {:cexpr "ldv_free_irq_53:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} free_irq($i0, $p1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 213683);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p2 := dev_name($p1);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kasprintf: ref;

axiom kasprintf == $sub.ref(0, 214715);

procedure kasprintf.i32.ref.ref($i0: i32, $p1: ref, p.2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kasprintf.i32.ref.ref($i0: i32, $p1: ref, p.2: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} {:cexpr "kasprintf:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $p2 := external_alloc();
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



procedure kasprintf.i32.ref.ref.i32.ref($i0: i32, $p1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kasprintf.i32.ref.ref.i32.ref($i0: i32, $p1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} {:cexpr "kasprintf:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $p2 := external_alloc();
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const get_cached_msi_msg: ref;

axiom get_cached_msi_msg == $sub.ref(0, 215747);

procedure get_cached_msi_msg($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation get_cached_msi_msg($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} {:cexpr "get_cached_msi_msg:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    return;
}



const pci_write_msi_msg: ref;

axiom pci_write_msi_msg == $sub.ref(0, 216779);

procedure pci_write_msi_msg($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation pci_write_msi_msg($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} {:cexpr "pci_write_msi_msg:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    return;
}



const vfio_msihandler: ref;

axiom vfio_msihandler == $sub.ref(0, 217811);

procedure vfio_msihandler($i0: i32, $p1: ref) returns ($r: i32);



const ldv_request_irq_54: ref;

axiom ldv_request_irq_54 == $sub.ref(0, 218843);

procedure ldv_request_irq_54($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.21, $M.25, $M.24, $M.28, $M.27, $M.31, $M.30;



implementation ldv_request_irq_54($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} {:cexpr "ldv_request_irq_54:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 503} {:cexpr "ldv_request_irq_54:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 505} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i6 := reg_check_1($p1);
    call {:si_unique_call 507} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 219875);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 510} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 512} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 220907);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(vfio_intx_handler));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 221939);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.22, $M.21, $M.25, $M.24, $M.28, $M.27, $M.31, $M.30;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i2 := $M.21;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.24;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.27;
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.30;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.31 := $i0;
    call {:si_unique_call 520} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 521} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.28 := $i0;
    call {:si_unique_call 518} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 519} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.25 := $i0;
    call {:si_unique_call 516} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 517} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.22 := $i0;
    call {:si_unique_call 514} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 515} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_intx_handler: ref;

axiom vfio_intx_handler == $sub.ref(0, 222971);

procedure vfio_intx_handler($i0: i32, $p1: ref) returns ($r: i32);



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 224003);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 522} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    return;
}



const disable_irq_nosync: ref;

axiom disable_irq_nosync == $sub.ref(0, 225035);

procedure disable_irq_nosync($i0: i32);
  free requires assertsPassed;



implementation disable_irq_nosync($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} {:cexpr "disable_irq_nosync:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    return;
}



const pci_check_and_mask_intx: ref;

axiom pci_check_and_mask_intx == $sub.ref(0, 226067);

procedure pci_check_and_mask_intx($p0: ref) returns ($r: i1);



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 227099);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.3;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} ldv_spin_unlock();
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} ldv_spin_unlock_irqrestore_39($p0, $i1);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    return;
}



const vfio_send_intx_eventfd: ref;

axiom vfio_send_intx_eventfd == $sub.ref(0, 228131);

procedure vfio_send_intx_eventfd($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation vfio_send_intx_eventfd($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $i10: i1;
  var $i6: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_78: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i6);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i13 := ldv__builtin_expect($i12, 1);
    call {:si_unique_call 528} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} vslice_dummy_var_78 := eventfd_signal($p18, 1);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(373, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb3;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 229163);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 530} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_39: ref;

axiom ldv_spin_unlock_irqrestore_39 == $sub.ref(0, 230195);

procedure ldv_spin_unlock_irqrestore_39($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_39($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} {:cexpr "ldv_spin_unlock_irqrestore_39:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 231227);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 232259);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 534} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 535} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 536} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 537} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 233291);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p9 := kobject_name($p8);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 234323);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 235355);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 236387);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.21, $M.24, $M.27, $M.30;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i2 := $M.21;
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.24;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.27;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.30;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i16 := $M.31;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 544} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i12 := $M.28;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 543} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i8 := $M.25;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 542} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i4 := $M.22;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 541} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vfio_virqfd_disable: ref;

axiom vfio_virqfd_disable == $sub.ref(0, 237419);

procedure vfio_virqfd_disable($p0: ref);
  free requires assertsPassed;



implementation vfio_virqfd_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    return;
}



const vfio_intx_disable: ref;

axiom vfio_intx_disable == $sub.ref(0, 238451);

procedure vfio_intx_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31;



implementation vfio_intx_disable($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} vslice_dummy_var_79 := vfio_intx_set_signal($p0, $sub.i32(0, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vfio_virqfd_disable($p4);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vfio_virqfd_disable($p7);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 5);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} kfree($p12);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    return;
}



const vfio_intx_set_signal: ref;

axiom vfio_intx_set_signal == $sub.ref(0, 239483);

procedure vfio_intx_set_signal($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31;



implementation vfio_intx_set_signal($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i1;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} {:cexpr "vfio_intx_set_signal:arg:fd"} boogie_si_record_i32($i1);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $p26 := pci_name($p3);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $p27 := kasprintf.i32.ref.ref(208, .str.23, $p26);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p27);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p37 := eventfd_ctx_fdget($i1);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i39 := IS_ERR($p38);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 557} {:cexpr "tmp___1"} boogie_si_record_i8($i40);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p37);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(372, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i53);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p0);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i63 := ldv_request_irq_52($i57, vfio_intx_handler, $i55, $p61, $p62);
    call {:si_unique_call 562} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} ldv_spin_lock();
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(372, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i8.i1($i73);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i74 == 1);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} spin_unlock_irqrestore($p82, $u1);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb23:
    assume $i79 == 1;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} disable_irq_nosync($i81);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb21;

  $bb17:
    assume $i64 == 1;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $0.ref);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} kfree($p71);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} eventfd_ctx_put($p37);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i25 := $i63;
    goto $bb6;

  $bb14:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i55 := 128;
    goto $bb16;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} kfree($p45);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p37);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i47 := PTR_ERR($p46);
    call {:si_unique_call 560} {:cexpr "tmp___0"} boogie_si_record_i64($i47);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i25 := $i48;
    goto $bb6;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb6;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} ldv_free_irq_51($i11, $p12);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} kfree($p16);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} eventfd_ctx_put($p20);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $0.ref);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_intx_enable: ref;

axiom vfio_intx_enable == $sub.ref(0, 240515);

procedure vfio_intx_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation vfio_intx_enable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $p43: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 2);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $p16 := kzalloc(40, 208);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p16);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(373, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i26);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i30);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(372, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i41 := $xor.i1($i40, 1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} pci_intx($p35, $i42);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb8;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const pci_intx: ref;

axiom pci_intx == $sub.ref(0, 241547);

procedure pci_intx($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pci_intx($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} {:cexpr "pci_intx:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_51: ref;

axiom ldv_free_irq_51 == $sub.ref(0, 242579);

procedure ldv_free_irq_51($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.21, $M.24, $M.27, $M.30;



implementation ldv_free_irq_51($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} {:cexpr "ldv_free_irq_51:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} free_irq($i0, $p1);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    return;
}



const ldv_request_irq_52: ref;

axiom ldv_request_irq_52 == $sub.ref(0, 243611);

procedure ldv_request_irq_52($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.21, $M.25, $M.24, $M.28, $M.27, $M.31, $M.30;



implementation ldv_request_irq_52($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} {:cexpr "ldv_request_irq_52:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 575} {:cexpr "ldv_request_irq_52:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 577} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i6 := reg_check_1($p1);
    call {:si_unique_call 579} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vfio_pci_intx_unmask: ref;

axiom vfio_pci_intx_unmask == $sub.ref(0, 244643);

procedure vfio_pci_intx_unmask($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation vfio_pci_intx_unmask($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i2 := vfio_pci_intx_unmask_handler($p1, $0.ref);
    call {:si_unique_call 582} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vfio_send_intx_eventfd($p4, $0.ref);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_pci_intx_unmask_handler: ref;

axiom vfio_pci_intx_unmask_handler == $sub.ref(0, 245675);

procedure vfio_pci_intx_unmask_handler($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation vfio_pci_intx_unmask_handler($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i1;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $p34: ref;
  var $i35: i32;
  var $i33: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i15: i32;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} ldv_spin_lock();
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 586} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i15 := $i41;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} spin_unlock_irqrestore($p42, $u1);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(373, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(372, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} enable_irq($i35);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i33, 0);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i36);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i40);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i41 := $i33;
    goto $bb21;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i27 := pci_check_and_unmask_intx($p4);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i8($i28);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb20;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb19;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb16;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 416)), $mul.ref(372, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} pci_intx($p4, 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const vfio_virqfd_enable: ref;

axiom vfio_virqfd_enable == $sub.ref(0, 246707);

procedure vfio_virqfd_enable($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_virqfd_enable($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 592} {:cexpr "vfio_virqfd_enable:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 1} true;
    call {:si_unique_call 593} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 594} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pci_check_and_unmask_intx: ref;

axiom pci_check_and_unmask_intx == $sub.ref(0, 247739);

procedure pci_check_and_unmask_intx($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation pci_check_and_unmask_intx($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 1} true;
    call {:si_unique_call 595} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 596} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const enable_irq: ref;

axiom enable_irq == $sub.ref(0, 248771);

procedure enable_irq($i0: i32);
  free requires assertsPassed;



implementation enable_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} {:cexpr "enable_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_intx_mask: ref;

axiom vfio_pci_intx_mask == $sub.ref(0, 249803);

procedure vfio_pci_intx_mask($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation vfio_pci_intx_mask($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} ldv_spin_lock();
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 600} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(372, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} disable_irq_nosync($i22);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 1);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(80, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} spin_unlock_irqrestore($p26, $u1);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} pci_intx($p2, 0);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb7:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(372, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} pci_intx($p2, 0);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 250835);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 251867);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_read_config_byte: ref;

axiom pci_read_config_byte == $sub.ref(0, 252899);

procedure pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} {:cexpr "pci_read_config_byte:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i7 := pci_bus_read_config_byte($p4, $i6, $i1, $p2);
    call {:si_unique_call 607} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_read_config_word: ref;

axiom pci_read_config_word == $sub.ref(0, 253931);

procedure pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} {:cexpr "pci_read_config_word:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i7 := pci_bus_read_config_word($p4, $i6, $i1, $p2);
    call {:si_unique_call 610} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_bus_read_config_word: ref;

axiom pci_bus_read_config_word == $sub.ref(0, 254963);

procedure pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 611} {:cexpr "pci_bus_read_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 612} {:cexpr "pci_bus_read_config_word:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 1} true;
    call {:si_unique_call 613} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 614} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_read_config_byte: ref;

axiom pci_bus_read_config_byte == $sub.ref(0, 255995);

procedure pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 615} {:cexpr "pci_bus_read_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 616} {:cexpr "pci_bus_read_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 1} true;
    call {:si_unique_call 617} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 618} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_pcie_cap: ref;

axiom pci_pcie_cap == $sub.ref(0, 257027);

procedure pci_pcie_cap($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_pcie_cap($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(74, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 258059);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 259091);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 260123);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 620} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 1} true;
    call {:si_unique_call 621} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 622} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 261155);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 262187);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 623} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 624} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 625} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 263219);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_rw: ref;

axiom vfio_pci_rw == $sub.ref(0, 264251);

procedure vfio_pci_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.35, $M.0, $M.4, $CurrAddr, $M.52, $M.3, $M.56, $M.53;



implementation vfio_pci_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64)
{
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;
  var $i10: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i1;
  var $i24: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} {:cexpr "vfio_pci_rw:arg:count"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 627} {:cexpr "vfio_pci_rw:arg:iswrite"} boogie_si_record_i1($i4);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p3);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i7 := $ashr.i64($i6, 40);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    call {:si_unique_call 628} {:cexpr "index"} boogie_si_record_i32($i8);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i8, 8);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i5);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i24 := vfio_pci_vga_rw($p9, $p1, $i2, $p3, $i23);
    call {:si_unique_call 632} {:cexpr "tmp___2"} boogie_si_record_i64($i24);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i11 := $i24;
    goto $bb3;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i5);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i18 := vfio_pci_config_rw($p9, $p1, $i2, $p3, $i17);
    call {:si_unique_call 630} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i8, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i5);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i20 := vfio_pci_bar_rw($p9, $p1, $i2, $p3, 0);
    call {:si_unique_call 636} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i11 := $i20;
    goto $bb3;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb13:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $ule.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb15:
    assume $i16 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i5);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i22 := vfio_pci_bar_rw($p9, $p1, $i2, $p3, $i21);
    call {:si_unique_call 634} {:cexpr "tmp___1"} boogie_si_record_i64($i22);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;
}



const vfio_pci_config_rw: ref;

axiom vfio_pci_config_rw == $sub.ref(0, 265283);

procedure vfio_pci_config_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.35, $M.0, $CurrAddr, $M.52, $M.3, $M.56, $M.53;



implementation vfio_pci_config_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i15: i1;
  var $i16: i64;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i32: i64;
  var $i11: i64;
  var $i33: i64;
  var $i34: i64;
  var $i21: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 638} {:cexpr "vfio_pci_config_rw:arg:count"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 639} {:cexpr "vfio_pci_config_rw:arg:iswrite"} boogie_si_record_i1($i4);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p3);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p5, $i7);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.35, $p5);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 1099511627775);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p5, $i9);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i2, 0);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p3);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, $i11);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i34);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i21 := $i11;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p12, $i13, $i14 := $p1, $i2, 0;
    goto $bb4;

  $bb4:
    call $i15, $i16, $i17, $i18, $i19, $i22, $i23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $p12, $i13, $i14, $i32 := vfio_pci_config_rw_loop_$bb4($p0, $p5, $i6, $i15, $i16, $i17, $i18, $i19, $i22, $i23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $p12, $i13, $i14, $i32);
    goto $bb4_last;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i6);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i16 := vfio_config_do_rw($p0, $p12, $i13, $p5, $i15);
    call {:si_unique_call 641} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    call {:si_unique_call 642} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i17);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($i13, $i22);
    call {:si_unique_call 643} {:cexpr "count"} boogie_si_record_i64($i23);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i17);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, $i14);
    call {:si_unique_call 644} {:cexpr "done"} boogie_si_record_i64($i25);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i17);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p12, $mul.ref($i26, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i17);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.35, $p5);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i28, $i29);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p5, $i30);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i23, 0);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i32 := $i25;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i11 := $i32;
    goto $bb3;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p12, $i13, $i14 := $p27, $i23, $i25;
    goto $bb10_dummy;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3224;
}



const vfio_pci_bar_rw: ref;

axiom vfio_pci_bar_rw == $sub.ref(0, 266315);

procedure vfio_pci_bar_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.4, $M.0, $CurrAddr;



implementation vfio_pci_bar_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i21: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i32;
  var $i75: i64;
  var $p77: ref;
  var $i79: i64;
  var $p81: ref;
  var $p82: ref;
  var $p78: ref;
  var $i59: i64;
  var $p60: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i64;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $i95: i32;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $i100: i64;
  var $i101: i1;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 646} {:cexpr "vfio_pci_bar_rw:arg:count"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 647} {:cexpr "vfio_pci_bar_rw:arg:iswrite"} boogie_si_record_i1($i4);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p3);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, 1099511627775);
    call {:si_unique_call 648} {:cexpr "pos"} boogie_si_record_i64($i10);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p3);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i64($i11, 40);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 649} {:cexpr "bar"} boogie_si_record_i32($i13);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p5, 0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i14, 56)), $mul.ref(0, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i13);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i21, 56)), $mul.ref(0, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i13);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i27, 56)), $mul.ref(8, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i13);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i32, 56)), $mul.ref(0, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i31, $i36);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i51 := $uge.i64($i10, $i50);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call {:si_unique_call 650} {:cexpr "vfio_pci_bar_rw:arg:_min1"} boogie_si_record_i64($i2);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i52 := $sub.i64($i50, $i10);
    call {:si_unique_call 651} {:cexpr "_min2"} boogie_si_record_i64($i52);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i53 := $ult.i64($i2, $i52);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i13, 6);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i13);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref($i61, 8));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i66 == 1);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i13);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref($i79, 8));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    assume {:verifier.code 0} true;
    $p78 := $p82;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i59, $p60 := 0, $p78;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(337, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, $i13);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i97 := $i59;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.4, $p5);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i6);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i100 := do_io_rw($p60, $p1, $i10, $i54, $i98, $i97, $i99);
    call {:si_unique_call 659} {:cexpr "done"} boogie_si_record_i64($i100);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i101 := $sge.i64($i100, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i13, 6);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i20 := $i100;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb38:
    assume $i104 == 1;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} pci_unmap_rom($p8, $p60);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i101 == 1;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p3);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, $i100);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i103);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i86 == 1;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(340, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i89 := $zext.i32.i64($i88);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p5, $i89);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(340, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(338, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p92);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i91, $i94);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i95);
    call {:si_unique_call 657} {:cexpr "x_end"} boogie_si_record_i64($i96);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i97 := $i96;
    goto $bb34;

  $bb23:
    assume $i66 == 1;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32(1, $i13);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i68 := pci_request_selected_regions($p8, $i67, .str);
    call {:si_unique_call 654} {:cexpr "ret"} boogie_si_record_i32($i68);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p71 := pci_iomap($p8, $i13, 0);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i13);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref($i75, 8));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $p71);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p78 := $p71;
    goto $bb31;

  $bb28:
    assume $i73 == 1;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i74 := $shl.i32(1, $i13);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} pci_release_selected_regions($p8, $i74);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i20 := $sub.i64(0, 12);
    goto $bb3;

  $bb25:
    assume $i69 == 1;
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i68);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i20 := $i70;
    goto $bb3;

  $bb17:
    assume $i55 == 1;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p56 := pci_map_rom($p8, $p5);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i59, $p60 := $i50, $p56;
    goto $bb22;

  $bb19:
    assume $i58 == 1;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i20 := $sub.i64(0, 12);
    goto $bb3;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i54 := $i2;
    goto $bb16;

  $bb11:
    assume $i51 == 1;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i20 := $sub.i64(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i13);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i38, 56)), $mul.ref(8, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i13);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i43, 56)), $mul.ref(0, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i48 := $sub.i64($i42, $i47);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 1);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i20 := $sub.i64(0, 22);
    goto $bb3;
}



const vfio_pci_vga_rw: ref;

axiom vfio_pci_vga_rw == $sub.ref(0, 267347);

procedure vfio_pci_vga_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vfio_pci_vga_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64)
{
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i29: i8;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i64;
  var $i48: i1;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i1;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} {:cexpr "vfio_pci_vga_rw:arg:count"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 662} {:cexpr "vfio_pci_vga_rw:arg:iswrite"} boogie_si_record_i1($i4);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p3);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 1099511627775);
    call {:si_unique_call 663} {:cexpr "pos"} boogie_si_record_i64($i7);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(377, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $slt.i64($i7, 960);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i64($i7, 655360);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i7, $sub.i64(0, 655360));
    assume {:verifier.code 0} true;
    $i15 := $ule.i64($i14, 131071);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb10:
    assume $i15 == 1;
    call {:si_unique_call 664} {:cexpr "vfio_pci_vga_rw:arg:_min1"} boogie_si_record_i64($i2);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i20 := $sub.i64(786432, $i7);
    call {:si_unique_call 665} {:cexpr "_min2"} boogie_si_record_i64($i20);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i21 := $ult.i64($i2, $i20);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p23 := ioremap_nocache(655360, 131072);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i7, $sub.i64(0, 655360));
    call {:si_unique_call 671} {:cexpr "off"} boogie_si_record_i64($i24);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i25, $p26, $i27, $i28, $i29 := $i24, $p23, $i22, 2, 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p26);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i44 := vga_get_interruptible($p43, $i28);
    call {:si_unique_call 677} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i5);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i49 := do_io_rw($p26, $p1, $i25, $i27, 0, 0, $i48);
    call {:si_unique_call 681} {:cexpr "done"} boogie_si_record_i64($i49);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} vga_put($p51, $i28);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i29);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i52 == 1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} iounmap($p26);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i53 := $sge.i64($i49, 0);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i11 := $i49;
    goto $bb3;

  $bb40:
    assume $i53 == 1;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p3);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, $i49);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i55);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i52 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} ioport_unmap($p26);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume $i45 == 1;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i29);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i46 == 1);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} iounmap($p26);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i44);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i11 := $i47;
    goto $bb3;

  $bb33:
    assume $i46 == 1;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ioport_unmap($p26);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i41 == 1;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 12);
    goto $bb3;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb19;

  $bb8:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i7, $sub.i64(0, 960));
    assume {:verifier.code 0} true;
    $i17 := $ule.i64($i16, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb12;

  $bb13:
    assume $i17 == 1;
    call {:si_unique_call 666} {:cexpr "vfio_pci_vga_rw:arg:_min1___1"} boogie_si_record_i64($i2);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i35 := $sub.i64(992, $i7);
    call {:si_unique_call 667} {:cexpr "_min2___1"} boogie_si_record_i64($i35);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i36 := $ult.i64($i2, $i35);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i36 == 1);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p38 := ioport_map(960, 32);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i7, $sub.i64(0, 960));
    call {:si_unique_call 675} {:cexpr "off"} boogie_si_record_i64($i39);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i25, $p26, $i27, $i28, $i29 := $i39, $p38, $i37, 1, 1;
    goto $bb20;

  $bb24:
    assume $i36 == 1;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i37 := $i2;
    goto $bb26;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i7, $sub.i64(0, 944));
    assume {:verifier.code 0} true;
    $i19 := $ule.i64($i18, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb15:
    assume $i19 == 1;
    call {:si_unique_call 668} {:cexpr "vfio_pci_vga_rw:arg:_min1___0"} boogie_si_record_i64($i2);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64(956, $i7);
    call {:si_unique_call 669} {:cexpr "_min2___0"} boogie_si_record_i64($i30);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i31 := $ult.i64($i2, $i30);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p33 := ioport_map(944, 12);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i7, $sub.i64(0, 944));
    call {:si_unique_call 673} {:cexpr "off"} boogie_si_record_i64($i34);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i25, $p26, $i27, $i28, $i29 := $i34, $p33, $i32, 1, 1;
    goto $bb20;

  $bb21:
    assume $i31 == 1;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i32 := $i2;
    goto $bb23;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 268379);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 686} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p2 := external_alloc();
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ioport_map: ref;

axiom ioport_map == $sub.ref(0, 269411);

procedure ioport_map($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ioport_map($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} {:cexpr "ioport_map:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 689} {:cexpr "ioport_map:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p2 := external_alloc();
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vga_get_interruptible: ref;

axiom vga_get_interruptible == $sub.ref(0, 270443);

procedure vga_get_interruptible($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vga_get_interruptible($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} {:cexpr "vga_get_interruptible:arg:rsrc"} boogie_si_record_i32($i1);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i2 := vga_get($p0, $i1, 1);
    call {:si_unique_call 693} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ioport_unmap: ref;

axiom ioport_unmap == $sub.ref(0, 271475);

procedure ioport_unmap($p0: ref);
  free requires assertsPassed;



implementation ioport_unmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 272507);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    return;
}



const do_io_rw: ref;

axiom do_io_rw == $sub.ref(0, 273539);

procedure do_io_rw($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64, $i5: i64, $i6: i1) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation do_io_rw($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64, $i5: i64, $i6: i1) returns ($r: i64)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $i18: i1;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i23: i1;
  var $i24: i64;
  var $i22: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i44: i1;
  var $i45: i64;
  var $i46: i1;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i16;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i64;
  var $i68: i1;
  var $i69: i8;
  var $i70: i32;
  var $i71: i8;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i8;
  var $i76: i64;
  var $i77: i1;
  var $i80: i64;
  var $i81: i1;
  var $i82: i64;
  var $i83: i1;
  var $i84: i1;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $i90: i64;
  var $i91: i1;
  var $i86: i64;
  var $p85: ref;
  var $p92: ref;
  var $p78: ref;
  var $i79: i64;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $i97: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i98: i64;
  var $i13: i64;
  var $i32: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p8 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p9 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p10 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 698} {:cexpr "do_io_rw:arg:off"} boogie_si_record_i64($i2);
    call {:si_unique_call 699} {:cexpr "do_io_rw:arg:count"} boogie_si_record_i64($i3);
    call {:si_unique_call 700} {:cexpr "do_io_rw:arg:x_start"} boogie_si_record_i64($i4);
    call {:si_unique_call 701} {:cexpr "do_io_rw:arg:x_end"} boogie_si_record_i64($i5);
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i6);
    call {:si_unique_call 702} {:cexpr "do_io_rw:arg:iswrite"} boogie_si_record_i1($i6);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i3, 0);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i32 := $i13;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p14, $i15, $i16, $i17 := $p1, $i2, $i3, 0;
    goto $bb4;

  $bb4:
    call $i18, $i19, $i20, $i21, $i23, $i24, $i22, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i33, $p34, $p35, $i36, $p37, $i38, $i39, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $p58, $i59, $i60, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $p73, $i74, $i75, $i76, $i77, $i80, $i81, $i82, $i83, $i84, $p87, $i88, $i89, $i90, $i91, $i86, $p85, $p92, $p78, $i79, $p61, $i62, $i63, $i64, $p40, $i41, $i42, $i43, $i93, $i94, $i95, $p96, $i97, $p14, $i15, $i16, $i17, $i98 := do_io_rw_loop_$bb4($p0, $i4, $i5, $p7, $p8, $p9, $p10, $i11, $i18, $i19, $i20, $i21, $i23, $i24, $i22, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i33, $p34, $p35, $i36, $p37, $i38, $i39, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $p58, $i59, $i60, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $p73, $i74, $i75, $i76, $i77, $i80, $i81, $i82, $i83, $i84, $p87, $i88, $i89, $i90, $i91, $i86, $p85, $p92, $p78, $i79, $p61, $i62, $i63, $i64, $p40, $i41, $i42, $i43, $i93, $i94, $i95, $p96, $i97, $p14, $i15, $i16, $i17, $i98);
    goto $bb4_last;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ult.i64($i15, $i4);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i23 := $uge.i64($i15, $i5);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i22 := $i24;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i64($i22, 3);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64($i22, 1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i22, 0);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i65 == 1);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i80 := $sub.i64($i5, $i15);
    call {:si_unique_call 720} {:cexpr "_min2___0"} boogie_si_record_i64($i80);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i81 := $ult.i64($i16, $i80);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i81 == 1);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i82 := $i80;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i11);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i83 == 1);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $sub.i8(0, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i84 := $ult.i64(0, $i82);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p85 := $p14;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p92 := $p85;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p78, $i79 := $p92, $i82;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p61, $i62, $i63, $i64 := $p78, $i15, $i16, $i79;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p40, $i41, $i42, $i43 := $p61, $i62, $i63, $i64;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i93 := $sub.i64($i42, $i43);
    call {:si_unique_call 710} {:cexpr "count"} boogie_si_record_i64($i93);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i17, $i43);
    call {:si_unique_call 711} {:cexpr "done"} boogie_si_record_i64($i94);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i41, $i43);
    call {:si_unique_call 712} {:cexpr "off"} boogie_si_record_i64($i95);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p40, $mul.ref($i43, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i93, 0);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i98 := $i94;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i13 := $i98;
    goto $bb3;

  $bb75:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $p14, $i15, $i16, $i17 := $p96, $i95, $i93, $i94;
    goto $bb75_dummy;

  $bb63:
    assume $i84 == 1;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i86 := 0;
    goto $bb66;

  $bb66:
    call $p87, $i88, $i89, $i90, $i91, $i86 := do_io_rw_loop_$bb66($p10, $i82, $p87, $i88, $i89, $i90, $i91, $i86, $p14);
    goto $bb66_last;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p14, $mul.ref($i86, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i88 := copy_to_user($p87, $p10, 1);
    call {:si_unique_call 729} {:cexpr "tmp___7"} boogie_si_record_i64($i88);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i86, 1);
    call {:si_unique_call 730} {:cexpr "i"} boogie_si_record_i64($i90);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i91 := $ult.i64($i90, $i82);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i91 == 1);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p85 := $p14;
    goto $bb65;

  $bb71:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i86 := $i90;
    goto $bb71_dummy;

  $bb68:
    assume $i89 == 1;
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64(0, 14);
    goto $bb24;

  $bb61:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $p92 := $p14;
    goto $bb74;

  $bb58:
    assume $i81 == 1;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i82 := $i16;
    goto $bb60;

  $bb46:
    assume $i65 == 1;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i11);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i66 == 1);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p0, $mul.ref($i15, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i74 := ioread8($p73);
    call {:si_unique_call 724} {:cexpr "tmp___5"} boogie_si_record_i32($i74);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i75);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i76 := copy_to_user($p14, $p9, 1);
    call {:si_unique_call 726} {:cexpr "tmp___6"} boogie_si_record_i64($i76);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p78, $i79 := $p14, 1;
    goto $bb57;

  $bb54:
    assume $i77 == 1;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64(0, 14);
    goto $bb24;

  $bb48:
    assume $i66 == 1;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i67 := copy_from_user($p9, $p14, 1);
    call {:si_unique_call 722} {:cexpr "tmp___4"} boogie_si_record_i64($i67);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p9);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p0, $mul.ref($i15, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} iowrite8($i71, $p72);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i68 == 1;
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64(0, 14);
    goto $bb24;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i15, 1);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb33;

  $bb34:
    assume $i46 == 1;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i11);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i47 == 1);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p0, $mul.ref($i15, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i56 := ioread16($p55);
    call {:si_unique_call 716} {:cexpr "tmp___2"} boogie_si_record_i32($i56);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $i57);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p8);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i59 := copy_to_user($p14, $p58, 2);
    call {:si_unique_call 718} {:cexpr "tmp___3"} boogie_si_record_i64($i59);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p61, $i62, $i63, $i64 := $p14, $i15, $i16, 2;
    goto $bb45;

  $bb42:
    assume $i60 == 1;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64(0, 14);
    goto $bb24;

  $bb36:
    assume $i47 == 1;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p8);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i49 := copy_from_user($p48, $p14, 2);
    call {:si_unique_call 714} {:cexpr "tmp___1"} boogie_si_record_i64($i49);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p8);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p0, $mul.ref($i15, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} iowrite16($i53, $p54);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i50 == 1;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64(0, 14);
    goto $bb24;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i15, 3);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb17;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i11);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p0, $mul.ref($i15, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i36 := ioread32($p35);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i36);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p7);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i38 := copy_to_user($p14, $p37, 4);
    call {:si_unique_call 708} {:cexpr "tmp___0"} boogie_si_record_i64($i38);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p40, $i41, $i42, $i43 := $p14, $i15, $i16, 4;
    goto $bb30;

  $bb27:
    assume $i39 == 1;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64(0, 14);
    goto $bb24;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p7);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i30 := copy_from_user($p29, $p14, 4);
    call {:si_unique_call 705} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p7);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p0, $mul.ref($i15, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} iowrite32($i33, $p34);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb22:
    assume $i31 == 1;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64(0, 14);
    goto $bb24;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i24 := $i16;
    goto $bb14;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64($i4, $i15);
    call {:si_unique_call 703} {:cexpr "_min2"} boogie_si_record_i64($i19);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i20 := $ult.i64($i16, $i19);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb11;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i21 := $i16;
    goto $bb10;

  $bb71_dummy:
    assume false;
    return;

  $bb66_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3627;

  $bb75_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3491;
}



const vga_put: ref;

axiom vga_put == $sub.ref(0, 274571);

procedure vga_put($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation vga_put($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} {:cexpr "vga_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    return;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 275603);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    return;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 276635);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 733} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 734} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iowrite16: ref;

axiom iowrite16 == $sub.ref(0, 277667);

procedure iowrite16($i0: i16, $p1: ref);
  free requires assertsPassed;



implementation iowrite16($i0: i16, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} {:cexpr "iowrite16:arg:arg0"} boogie_si_record_i16($i0);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    return;
}



const ioread16: ref;

axiom ioread16 == $sub.ref(0, 278699);

procedure ioread16($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread16($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 736} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 737} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iowrite8: ref;

axiom iowrite8 == $sub.ref(0, 279731);

procedure iowrite8($i0: i8, $p1: ref);
  free requires assertsPassed;



implementation iowrite8($i0: i8, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} {:cexpr "iowrite8:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    return;
}



const ioread8: ref;

axiom ioread8 == $sub.ref(0, 280763);

procedure ioread8($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread8($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 1} true;
    call {:si_unique_call 739} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 740} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vga_get: ref;

axiom vga_get == $sub.ref(0, 281795);

procedure vga_get($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vga_get($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 741} {:cexpr "vga_get:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 742} {:cexpr "vga_get:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 743} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 744} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_release_selected_regions: ref;

axiom pci_release_selected_regions == $sub.ref(0, 282827);

procedure pci_release_selected_regions($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pci_release_selected_regions($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} {:cexpr "pci_release_selected_regions:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    return;
}



const vfio_config_do_rw: ref;

axiom vfio_config_do_rw == $sub.ref(0, 283859);

procedure vfio_config_do_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.52, $M.3, $M.56, $M.53, $CurrAddr;



implementation vfio_config_do_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i1;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i1;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i32: i1;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i36: i64;
  var $i31: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $i45: i32;
  var $i48: i64;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $i77: i1;
  var $i78: i32;
  var $i79: i64;
  var $i81: i64;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $i90: i64;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $p67: ref;
  var $i68: i32;
  var $p46: ref;
  var $i47: i32;
  var $i94: i1;
  var $i96: i32;
  var $i97: i1;
  var $i95: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $i104: i1;
  var $i105: i32;
  var $i106: i64;
  var $i108: i64;
  var $i109: i64;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $i117: i1;
  var $i118: i32;
  var $i119: i64;
  var $i121: i64;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i64;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $i151: i64;
  var $i152: i1;
  var $i153: i64;
  var $p154: ref;
  var $i155: i64;
  var $i156: i1;
  var $i140: i64;
  var $i22: i64;
  var vslice_dummy_var_80: i64;
  var vslice_dummy_var_81: i64;
  var vslice_dummy_var_82: i64;
  var vslice_dummy_var_83: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 747} {:cexpr "vfio_config_do_rw:arg:count"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 748} {:cexpr "vfio_config_do_rw:arg:iswrite"} boogie_si_record_i1($i4);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.35, $p3);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i10 := $slt.i64($i9, 0);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.35, $p3);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(1576, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i15 := $sge.i64($i11, $i14);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.35, $p3);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, $i2);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(1576, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i64($i17, $i20);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call {:si_unique_call 749} {:cexpr "vfio_config_do_rw:arg:_min1"} boogie_si_record_i64($i2);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.35, $p3);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i24 := vfio_pci_cap_remaining_dword($p0, $i23);
    call {:si_unique_call 751} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i25 := $ult.i64($i2, $i24);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i64($i26, 3);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i64($i26, 1);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i31 := $i36;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(56, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.35, $p3);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p38, $mul.ref($i39, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    call {:si_unique_call 752} {:cexpr "cap_id"} boogie_si_record_i8($i41);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 255);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.35, $p3);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i64($i48, 255);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i49 == 1);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i41);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i70 := $ugt.i32($i69, 19);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    call {:si_unique_call 757} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i71);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 759} {:cexpr "tmp___1"} boogie_si_record_i64($i75);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i71, 0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i78);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} vslice_dummy_var_81 := ldv__builtin_expect($i79, 0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i64($i41);
    $p82 := $add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref($i81, 32));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i41);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 5);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $p87 := $p82;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i41);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i93 := 0;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p67, $i68 := $p87, $i93;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p46, $i47 := $p67, $i68;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i47, 0);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i95 := 0;
    assume {:branchcond $i94} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i32($i95);
    call {:si_unique_call 768} {:cexpr "__ret_warn_on___1"} boogie_si_record_i32($i98);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i100 := $zext.i1.i32($i99);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i100);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i102 := ldv__builtin_expect($i101, 0);
    call {:si_unique_call 770} {:cexpr "tmp___2"} boogie_si_record_i64($i102);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i98, 0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i32($i104);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i105);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} vslice_dummy_var_82 := ldv__builtin_expect($i106, 0);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i47);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.35, $p3);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i110 := $sgt.i64($i108, $i109);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i111 := $zext.i1.i32($i110);
    call {:si_unique_call 773} {:cexpr "__ret_warn_on___2"} boogie_si_record_i32($i111);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i113 := $zext.i1.i32($i112);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i115 := ldv__builtin_expect($i114, 0);
    call {:si_unique_call 775} {:cexpr "tmp___3"} boogie_si_record_i64($i115);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i111, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i118 := $zext.i1.i32($i117);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i118);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_83 := ldv__builtin_expect($i119, 0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i121 := $load.i64($M.35, $p3);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i64.i32($i121);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i123 := $sub.i32($i122, $i47);
    call {:si_unique_call 778} {:cexpr "offset"} boogie_si_record_i32($i123);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i8.i1($i6);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i124 == 1);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p142);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i153 := $i31;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p5);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i155 := copy_to_user($p1, $p154, $i31);
    call {:si_unique_call 788} {:cexpr "tmp___7"} boogie_si_record_i64($i155);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i156 := $ne.i64($i155, 0);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i140 := $i153;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i22 := $i140;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb67:
    assume $i156 == 1;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb8;

  $bb61:
    assume $i144 == 1;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i147 := $load.i64($M.35, $p3);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i64.i32($i147);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i64.i32($i31);
    call {:si_unique_call 784} $i150 := devirtbounce.4($p146, $p0, $i148, $i149, $p46, $i123, $p5);
    call {:si_unique_call 785} {:cexpr "tmp___6"} boogie_si_record_i32($i150);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64($i150);
    call {:si_unique_call 786} {:cexpr "ret"} boogie_si_record_i64($i151);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i152 := $slt.i64($i151, 0);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i153 := $i151;
    goto $bb66;

  $bb63:
    assume $i152 == 1;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i22 := $i151;
    goto $bb8;

  $bb52:
    assume $i124 == 1;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i128 := $eq.i64($i127, 0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p5);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i130 := copy_from_user($p129, $p1, $i31);
    call {:si_unique_call 780} {:cexpr "tmp___4"} boogie_si_record_i64($i130);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i134 := $load.i64($M.35, $p3);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i64.i32($i134);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i64.i32($i31);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p5);
    call {:si_unique_call 781} $i138 := devirtbounce.3($p133, $p0, $i135, $i136, $p46, $i123, $i137);
    call {:si_unique_call 782} {:cexpr "tmp___5"} boogie_si_record_i32($i138);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i138);
    call {:si_unique_call 783} {:cexpr "ret"} boogie_si_record_i64($i139);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i140 := $i139;
    goto $bb60;

  $bb57:
    assume $i131 == 1;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb8;

  $bb54:
    assume $i128 == 1;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i22 := $i31;
    goto $bb8;

  $bb49:
    assume $i116 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} warn_slowpath_null(.str.39, 1552);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i103 == 1;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} warn_slowpath_null(.str.39, 1551);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i94 == 1;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i41);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    assume {:verifier.code 0} true;
    $i95 := $i97;
    goto $bb45;

  $bb40:
    assume $i89 == 1;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.35, $p3);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i32($i90);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i92 := vfio_find_cap_start($p0, $i91);
    call {:si_unique_call 767} {:cexpr "cap_start"} boogie_si_record_i32($i92);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i93 := $i92;
    goto $bb42;

  $bb37:
    assume $i84 == 1;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p87 := $p86;
    goto $bb39;

  $bb34:
    assume $i76 == 1;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} warn_slowpath_null(.str.39, 1539);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume $i49 == 1;
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i41);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i51 := $ugt.i32($i50, 27);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 754} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i52);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 756} {:cexpr "tmp___0"} boogie_si_record_i64($i56);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i52, 0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vslice_dummy_var_80 := ldv__builtin_expect($i60, 0);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i41);
    $p63 := $add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref($i62, 32));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.35, $p3);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i66 := vfio_find_cap_start($p0, $i65);
    call {:si_unique_call 763} {:cexpr "cap_start"} boogie_si_record_i32($i66);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p67, $i68 := $p63, $i66;
    goto $bb33;

  $bb30:
    assume $i57 == 1;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} warn_slowpath_null(.str.39, 1534);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.35, $p3);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    call {:si_unique_call 753} {:cexpr "cap_start"} boogie_si_record_i32($i45);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p46, $i47 := unassigned_perms, $i45;
    goto $bb27;

  $bb19:
    assume $i32 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.35, $p3);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb21;

  $bb22:
    assume $i35 == 1;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i36 := 2;
    goto $bb24;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.35, $p3);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 3);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb15;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i31 := 4;
    goto $bb18;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i26 := $i2;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;
}



const vfio_pci_cap_remaining_dword: ref;

axiom vfio_pci_cap_remaining_dword == $sub.ref(0, 284891);

procedure vfio_pci_cap_remaining_dword($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation vfio_pci_cap_remaining_dword($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i11: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $i16: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} {:cexpr "vfio_pci_cap_remaining_dword:arg:pos"} boogie_si_record_i64($i1);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(56, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($i1, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    call {:si_unique_call 790} {:cexpr "cap"} boogie_si_record_i8($i5);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(56, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i1, 1);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i7, 3);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i10 := 1;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb4;

  $bb4:
    call $i12, $i13, $i14, $i15, $i11, $p17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i16 := vfio_pci_cap_remaining_dword_loop_$bb4($i1, $i5, $p6, $i12, $i13, $i14, $i15, $i11, $p17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i16);
    goto $bb4_last;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p6);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i1, $i11);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i5);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i21, $i22);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i24 := $i11;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb3;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 1);
    call {:si_unique_call 791} {:cexpr "i"} boogie_si_record_i64($i12);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i1, $i12);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 3);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i16 := $i12;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3892;
}



const vfio_find_cap_start: ref;

axiom vfio_find_cap_start == $sub.ref(0, 285923);

procedure vfio_find_cap_start($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_find_cap_start($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i16: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i20: i32;
  var $i15: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} {:cexpr "vfio_find_cap_start:arg:pos"} boogie_si_record_i32($i1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 255);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i3 := (if $i2 == 1 then 256 else 64);
    call {:si_unique_call 793} {:cexpr "base"} boogie_si_record_i32($i3);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(56, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    call {:si_unique_call 794} {:cexpr "cap"} boogie_si_record_i8($i8);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(56, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i13, $i3);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i15 := $i1;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i16 := $i1;
    goto $bb8;

  $bb8:
    call $i17, $i18, $i19, $i16, $p21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i20 := vfio_find_cap_start_loop_$bb8($i3, $i8, $p12, $i17, $i18, $i19, $i16, $p21, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $i29, $i20);
    goto $bb8_last;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p12);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i16);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $sub.i64(0, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p21, $mul.ref($i23, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i8);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i26, $i27);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i29 := $i16;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i15 := $i29;
    goto $bb7;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i16, 1);
    call {:si_unique_call 795} {:cexpr "pos"} boogie_si_record_i32($i17);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, $sub.i32(0, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i19 := $sge.i32($i18, $i3);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i15 := $i20;
    goto $bb7;

  $bb10:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i17;
    goto $bb10_dummy;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3933;
}



const vfio_spapr_pci_eeh_open: ref;

axiom vfio_spapr_pci_eeh_open == $sub.ref(0, 286955);

procedure vfio_spapr_pci_eeh_open($p0: ref);
  free requires assertsPassed;



implementation vfio_spapr_pci_eeh_open($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_disable: ref;

axiom vfio_pci_disable == $sub.ref(0, 287987);

procedure vfio_pci_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.3, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31, $CurrAddr, assertsPassed;



implementation vfio_pci_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i7: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i1;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} pci_clear_master($p2);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} vslice_dummy_var_84 := vfio_pci_set_irqs_ioctl($p0, 33, $i4, 0, 0, $0.ref);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(373, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vfio_config_free($p0);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb1;

  $bb1:
    call $i8, $p10, $p11, $i12, $i13, $i14, $p16, $p17, $i18, $i19, $p21, $i22, $i23, $i7 := vfio_pci_disable_loop_$bb1($p0, $p2, $i8, $p10, $p11, $i12, $i13, $i14, $p16, $p17, $i18, $i19, $p21, $i22, $i23, $i7);
    goto $bb1_last;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref($i8, 8));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i7);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref($i14, 8));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} pci_iounmap($p2, $p17);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32(1, $i7);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} pci_release_selected_regions($p2, $i18);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i7);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref($i19, 8));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $0.ref);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i7, 1);
    call {:si_unique_call 799} {:cexpr "bar"} boogie_si_record_i32($i22);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i23 := $sle.i32($i22, 5);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(378, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 1);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(384, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i26 := pci_load_and_free_saved_state($p2, $p25);
    call {:si_unique_call 803} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} vslice_dummy_var_87 := pci_write_config_word($p2, 4, 1024);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(374, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} pci_restore_state($p2);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} pci_disable_device($p2);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} vfio_pci_try_bus_reset($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i42 := $M.1;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i42);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} vslice_dummy_var_88 := pci_set_power_state($p2, 3);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i39 := pci_try_reset_function($p2);
    call {:si_unique_call 811} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(378, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p29 := dev_name($p28);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} vslice_dummy_var_85 := printk.ref.ref.ref(.str.4, .str.5, $p29);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(374, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_86 := pci_save_state($p2);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i22;
    goto $bb7_dummy;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3966;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 289019);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    return;
}



const pci_clear_master: ref;

axiom pci_clear_master == $sub.ref(0, 290051);

procedure pci_clear_master($p0: ref);
  free requires assertsPassed;



implementation pci_clear_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    return;
}



const vfio_config_free: ref;

axiom vfio_config_free == $sub.ref(0, 291083);

procedure vfio_config_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vfio_config_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} kfree($p2);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(56, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} kfree($p5);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(56, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} kfree($p9);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    return;
}



const pci_iounmap: ref;

axiom pci_iounmap == $sub.ref(0, 292115);

procedure pci_iounmap($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_iounmap($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    return;
}



const pci_load_and_free_saved_state: ref;

axiom pci_load_and_free_saved_state == $sub.ref(0, 293147);

procedure pci_load_and_free_saved_state($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_load_and_free_saved_state($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 1} true;
    call {:si_unique_call 817} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 818} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 294179);

procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 1} true;
    call {:si_unique_call 819} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 820} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 1} true;
    call {:si_unique_call 821} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 822} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 1} true;
    call {:si_unique_call 823} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 824} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 1} true;
    call {:si_unique_call 825} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 826} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 1} true;
    call {:si_unique_call 827} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 828} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 1} true;
    call {:si_unique_call 829} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 830} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 1} true;
    call {:si_unique_call 831} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 832} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 295211);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 1} true;
    call {:si_unique_call 833} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 834} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_write_config_word: ref;

axiom pci_write_config_word == $sub.ref(0, 296243);

procedure pci_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation pci_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} {:cexpr "pci_write_config_word:arg:where"} boogie_si_record_i32($i1);
    call {:si_unique_call 836} {:cexpr "pci_write_config_word:arg:val"} boogie_si_record_i16($i2);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i2);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i9 := pci_bus_write_config_word($p4, $i6, $i1, $i8);
    call {:si_unique_call 838} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 297275);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 298307);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_try_bus_reset: ref;

axiom vfio_pci_try_bus_reset == $sub.ref(0, 299339);

procedure vfio_pci_try_bus_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $CurrAddr, assertsPassed;



implementation vfio_pci_try_bus_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i12: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i1;
  var $i62: i8;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i50: i8;
  var $i71: i8;
  var $i49: i8;
  var $i72: i1;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i79: i32;
  var $i85: i32;
  var $i44: i32;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $i103: i8;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(48, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i10 := pci_probe_reset_slot($p9);
    call {:si_unique_call 842} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i17 := pci_probe_reset_bus($p16);
    call {:si_unique_call 844} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p2);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i12);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i23 := vfio_pci_for_each_slot_or_bus($p20, vfio_pci_count_devs, $p21, $i22);
    call {:si_unique_call 846} {:cexpr "tmp___2"} boogie_si_record_i32($i23);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p2);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p2);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p2);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p31 := kcalloc($i30, 8, 208);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p31);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p1);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i12);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i42 := vfio_pci_for_each_slot_or_bus($p39, vfio_pci_get_devs, $p40, $i41);
    call {:si_unique_call 849} {:cexpr "tmp___4"} boogie_si_record_i32($i42);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p2);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i46, $i47);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i49 := 0;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i8.i1($i49);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i85 := $sub.i32(0, 22);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i44 := $i85;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p2);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i89 := $sgt.i32($i87, $i88);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} kfree($p121);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb41:
    assume $i89 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    call $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p97, $i98, $p99, $p100, $i101, $i102, $i103, $i104, $p105, $p106, $p108, $p109, $i110, $i111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, vslice_dummy_var_89 := vfio_pci_try_bus_reset_loop_$bb44($p1, $p2, $i44, $p86, $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p97, $i98, $p99, $p100, $i101, $i102, $i103, $i104, $p105, $p106, $p108, $p109, $i110, $i111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, vslice_dummy_var_89);
    goto $bb44_last;

  $bb45:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p2);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p91, $mul.ref($i93, 8));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p96 := vfio_device_data($p95);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i44, 0);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p97, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p2);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i111 := $sext.i32.i64($i110);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p109, $mul.ref($i111, 8));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} vfio_device_put($p113);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p2);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i114, 1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i115);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p86);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p2);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i118 := $sgt.i32($i116, $i117);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i118 == 1);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb55_dummy;

  $bb49:
    assume $i102 == 1;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i103 := $M.1;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i8.i1($i103);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i104 == 1);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p97, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} vslice_dummy_var_89 := pci_set_power_state($p106, 3);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb51;

  $bb46:
    assume $i98 == 1;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p97, $mul.ref(0, 416)), $mul.ref(378, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, 0);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb35:
    assume $i72 == 1;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i12);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i73 == 1);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i84 := pci_try_reset_bus($p83);
    call {:si_unique_call 854} {:cexpr "tmp___7"} boogie_si_record_i32($i84);
    assume {:verifier.code 0} true;
    $i79 := $i84;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i85 := $i79;
    goto $bb40;

  $bb37:
    assume $i73 == 1;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 2984)), $mul.ref(48, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i78 := pci_try_reset_slot($p77);
    call {:si_unique_call 852} {:cexpr "tmp___6"} boogie_si_record_i32($i78);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb39;

  $bb21:
    assume $i48 == 1;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb24;

  $bb24:
    call $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i50, $i71 := vfio_pci_try_bus_reset_loop_$bb24($p1, $p2, $p45, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i50, $i71);
    goto $bb24_last;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p2);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p52, $mul.ref($i54, 8));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p57 := vfio_device_data($p56);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 416)), $mul.ref(378, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i8.i1($i60);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $i50;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p58, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p2);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 1);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i67);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p45);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p2);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i70 := $sgt.i32($i68, $i69);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i71 := $i62;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i49 := $i71;
    goto $bb23;

  $bb32:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i50 := $i62;
    goto $bb32_dummy;

  $bb29:
    assume $i65 == 1;
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 22);
    goto $bb19;

  $bb26:
    assume $i61 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i62 := 1;
    goto $bb28;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 22);
    goto $bb19;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;

  $bb55_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb32_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4173;
}



const vfio_pci_get_devs: ref;

axiom vfio_pci_get_devs == $sub.ref(0, 300371);

procedure vfio_pci_get_devs($p0: ref, $p1: ref) returns ($r: i32);



const pci_dev_driver: ref;

axiom pci_dev_driver == $sub.ref(0, 301403);

procedure pci_dev_driver($p0: ref) returns ($r: ref);



const pci_bus_write_config_word: ref;

axiom pci_bus_write_config_word == $sub.ref(0, 302435);

procedure pci_bus_write_config_word($p0: ref, $i1: i32, $i2: i32, $i3: i16) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_write_config_word($p0: ref, $i1: i32, $i2: i32, $i3: i16) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 859} {:cexpr "pci_bus_write_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 860} {:cexpr "pci_bus_write_config_word:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 861} {:cexpr "pci_bus_write_config_word:arg:arg3"} boogie_si_record_i16($i3);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 1} true;
    call {:si_unique_call 862} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 863} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 303467);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 1} true;
    call {:si_unique_call 864} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 865} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vfio_pci_enable: ref;

axiom vfio_pci_enable == $sub.ref(0, 304499);

procedure vfio_pci_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.9, $CurrAddr, $M.45, $M.51, $M.50, assertsPassed;



implementation vfio_pci_enable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i24;
  var $i29: i24;
  var $i30: i24;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i1;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $p57: ref;
  var $i58: i8;
  var $i59: i1;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $i67: i16;
  var $i68: i16;
  var $i69: i32;
  var $i70: i16;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i79: i32;
  var $i80: i32;
  var $i82: i32;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $i91: i16;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i98: i16;
  var $p99: ref;
  var $p100: ref;
  var $i101: i1;
  var $i102: i8;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i1;
  var $i107: i8;
  var $i108: i1;
  var $p109: ref;
  var $i10: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} vslice_dummy_var_90 := pci_set_power_state($p6, 0);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} pci_clear_master($p6);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i8 := pci_enable_device($p6);
    call {:si_unique_call 873} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $i11 := pci_reset_function($p6);
    call {:si_unique_call 875} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(374, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i12);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i14);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} vslice_dummy_var_91 := pci_save_state($p6);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p16 := pci_store_saved_state($p6);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(384, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(384, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i40 := vfio_config_init($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 883} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i46 := $M.43;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i48 := $xor.i1($i47, 1);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i51 := ldv__builtin_expect($i50, 1);
    call {:si_unique_call 887} {:cexpr "tmp___2"} boogie_si_record_i64($i51);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_92 := pci_read_config_word($p6, 4, $p1);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(372, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1($i58);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 2984)), $mul.ref(76, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    call {:si_unique_call 891} {:cexpr "msix_pos"} boogie_si_record_i8($i73);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i75 == 1);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(337, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, $sub.i8(0, 1));
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i101 := vfio_vga_disabled();
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i8($i101);
    call {:si_unique_call 895} {:cexpr "tmp___3"} boogie_si_record_i8($i102);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i8.i1($i102);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb29:
    assume $i105 == 1;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i106 := vfio_pci_is_vga($p6);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i107 := $zext.i1.i8($i106);
    call {:si_unique_call 897} {:cexpr "tmp___5"} boogie_si_record_i8($i107);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i8.i1($i107);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i108 == 1;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(377, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 1);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume $i103 == 1;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i104 := 0;
    goto $bb28;

  $bb23:
    assume $i75 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i73);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, 2);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_94 := pci_read_config_word($p6, $i77, $p3);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i73);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i79, 4);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} vslice_dummy_var_95 := pci_read_config_dword($p6, $i80, $p4);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.44, $p4);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 7);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(337, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, $i86);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.44, $p4);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, $sub.i32(0, 8));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(340, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i89);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i91 := $load.i16($M.9, $p3);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32($i91);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 2047);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, 1);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i94);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i97 := $mul.i32($i96, 16);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(338, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p99, $i98);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i59 == 1;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.9, $p1);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 1024);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb19;

  $bb20:
    assume $i63 == 1;
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.9, $p1);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 64511);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.9 := $store.i16($M.9, $p1, $i67);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.9, $p1);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vslice_dummy_var_93 := pci_write_config_word($p6, 4, $i70);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $i53 := pci_intx_mask_supported($p6);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(372, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i53);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, $i55);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(384, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} kfree($p44);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(384, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} pci_disable_device($p6);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i10 := $i40;
    goto $bb3;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p22, .str.12);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p23, .str.13);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.39 := $store.ref($M.39, $p24, .str.6);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $M.40 := $store.ref($M.40, $p25, .str.14);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i28 := $load.i24($M.41, $p27);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i29 := $and.i24($i28, $sub.i24(0, 262144));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i30 := $or.i24($i29, 136);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $M.41 := $store.i24($M.41, $p27, $i30);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p31, 0);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.42, $p32);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i64($i33);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 1);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 879} {:cexpr "tmp___1"} boogie_si_record_i64($i36);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p39 := dev_name($p38);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} __dynamic_pr_debug.ref.ref.ref.ref($p2, .str.15, .str.13, $p39);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 305531);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 1} true;
    call {:si_unique_call 898} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 899} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_reset_function: ref;

axiom pci_reset_function == $sub.ref(0, 306563);

procedure pci_reset_function($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_reset_function($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 1} true;
    call {:si_unique_call 900} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 901} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_store_saved_state: ref;

axiom pci_store_saved_state == $sub.ref(0, 307595);

procedure pci_store_saved_state($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_store_saved_state($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p1 := external_alloc();
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 308627);

procedure __dynamic_pr_debug.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    return;
}



const vfio_config_init: ref;

axiom vfio_config_init == $sub.ref(0, 309659);

procedure vfio_config_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.51, $M.50, assertsPassed, $CurrAddr;



implementation vfio_config_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i16;
  var $p69: ref;
  var $p70: ref;
  var $i71: i16;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i25: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i9: i32;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1576, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p6 := kzalloc($i5, 208);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1576, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p13 := kzalloc($i12, 208);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(56, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p6);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p13);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 906} cmdloc_dummy_var_22 := $memset.i8(cmdloc_dummy_var_21, $p6, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p6, $mul.ref(64, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1576, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, $sub.i32(0, 64));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 907} cmdloc_dummy_var_24 := $memset.i8(cmdloc_dummy_var_23, $p18, $sub.i8(0, 1), $i22, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i23 := vfio_fill_vconfig_bytes($p0, 0, 64);
    call {:si_unique_call 909} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(376, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 1);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p13);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(16, 4));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(344, 1)), $mul.ref(0, 4));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i29);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p13);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(20, 4));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(344, 1)), $mul.ref(1, 4));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i34);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p13);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(24, 4));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(344, 1)), $mul.ref(2, 4));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i39);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p13);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(28, 4));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(344, 1)), $mul.ref(3, 4));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i44);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p13);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(32, 4));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(344, 1)), $mul.ref(4, 4));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i49);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p13);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(36, 4));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(344, 1)), $mul.ref(5, 4));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i54);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p13);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(48, 4));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(344, 1)), $mul.ref(6, 4));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i59);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p2);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(2531, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i74 := vfio_cap_init($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 915} {:cexpr "ret"} boogie_si_record_i32($i74);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $i76 := vfio_ecap_init($p0);
    call {:si_unique_call 917} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb18:
    assume $i77 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i25 := $i76;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} kfree($p6);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(56, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $0.ref);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} kfree($p13);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $0.ref);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i80 := pcibios_err_to_errno($i25);
    call {:si_unique_call 913} {:cexpr "tmp___1"} boogie_si_record_i32($i80);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i9 := $i80;
    goto $bb3;

  $bb15:
    assume $i75 == 1;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i25 := $i74;
    goto $bb10;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i66 == 1;
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(60, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p13);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i68);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(62, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p13);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(2, 2));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, $i71);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} kfree($p6);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const pci_intx_mask_supported: ref;

axiom pci_intx_mask_supported == $sub.ref(0, 310691);

procedure pci_intx_mask_supported($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation pci_intx_mask_supported($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 918} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 919} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_read_config_dword: ref;

axiom pci_read_config_dword == $sub.ref(0, 311723);

procedure pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} {:cexpr "pci_read_config_dword:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i7 := pci_bus_read_config_dword($p4, $i6, $i1, $p2);
    call {:si_unique_call 922} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_bus_read_config_dword: ref;

axiom pci_bus_read_config_dword == $sub.ref(0, 312755);

procedure pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 923} {:cexpr "pci_bus_read_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 924} {:cexpr "pci_bus_read_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 925} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 313787);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const vfio_fill_vconfig_bytes: ref;

axiom vfio_fill_vconfig_bytes == $sub.ref(0, 314819);

procedure vfio_fill_vconfig_bytes($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vfio_fill_vconfig_bytes($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i23: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i16;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i9: i32;
  var $i10: i32;
  var $i53: i32;
  var $i8: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 929} {:cexpr "vfio_fill_vconfig_bytes:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 930} {:cexpr "vfio_fill_vconfig_bytes:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i2, 0);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i22 := $i8;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i1, $i2;
    goto $bb4;

  $bb4:
    call $i11, $i12, $i13, $p14, $p15, $p16, $i17, $p18, $i19, $i20, $i21, $i23, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $p35, $i36, $i37, $i38, $i39, $p43, $p44, $i45, $p46, $i47, $i48, $i49, $i40, $i41, $i42, $i24, $i25, $i26, $i27, $i50, $i51, $i52, $i9, $i10, $i53 := vfio_fill_vconfig_bytes_loop_$bb4($p0, $p3, $p4, $p6, $i11, $i12, $i13, $p14, $p15, $p16, $i17, $p18, $i19, $i20, $i21, $i23, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $p35, $i36, $i37, $i38, $i39, $p43, $p44, $i45, $p46, $i47, $i48, $i49, $i40, $i41, $i42, $i24, $i25, $i26, $i27, $i50, $i51, $i52, $i9, $i10, $i53);
    goto $bb4_last;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 3);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i10, 1);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i9);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p44, $mul.ref($i45, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i47 := pci_read_config_byte($p6, $i9, $p46);
    call {:si_unique_call 936} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i9, $i47, 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i24, $i25, $i26, $i27 := $i40, $i10, $i41, $i42;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i24, $i27);
    call {:si_unique_call 933} {:cexpr "offset"} boogie_si_record_i32($i50);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i25, $i27);
    call {:si_unique_call 934} {:cexpr "size"} boogie_si_record_i32($i51);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i53 := $i26;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i8 := $i53;
    goto $bb3;

  $bb28:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i9, $i10 := $i50, $i51;
    goto $bb28_dummy;

  $bb25:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i22 := $i49;
    goto $bb13;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i9, 1);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb18;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i9);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p33, $mul.ref($i34, 2));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i36 := pci_read_config_word($p6, $i9, $p4);
    call {:si_unique_call 938} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.9, $p4);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $i39);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i9, $i36, 2;
    goto $bb24;

  $bb21:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i22 := $i38;
    goto $bb13;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i9, 3);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i9);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 4));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i19 := pci_read_config_dword($p6, $i9, $p3);
    call {:si_unique_call 932} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.44, $p3);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i23);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i24, $i25, $i26, $i27 := $i9, $i10, $i19, 4;
    goto $bb15;

  $bb11:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb13;

  $bb28_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4586;
}



const vfio_cap_init: ref;

axiom vfio_cap_init == $sub.ref(0, 315851);

procedure vfio_cap_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.51, $CurrAddr, assertsPassed;



implementation vfio_cap_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i42: i8;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $i52: i8;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i69: i8;
  var $i70: i8;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $i61: i32;
  var $i63: i32;
  var $i75: i1;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i32;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i64;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i8;
  var $i102: i32;
  var $i104: i32;
  var $i105: i1;
  var $i76: i32;
  var $i106: i8;
  var $i107: i64;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i8;
  var $i112: i64;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $i120: i8;
  var $i121: i64;
  var $i122: i64;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $i126: i8;
  var $i127: i32;
  var $i128: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i130: i32;
  var $i62: i32;
  var $i131: i1;
  var $i132: i32;
  var $i129: i32;
  var $i24: i32;
  var $i74: i32;
  var $i134: i32;
  var $i133: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i16;
  var $i141: i32;
  var $i142: i32;
  var $i143: i16;
  var $i11: i32;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(56, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i9 := pci_read_config_word($p6, 6, $p1);
    call {:si_unique_call 944} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.9, $p1);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i16 := pci_read_config_byte($p6, 52, $p2);
    call {:si_unique_call 946} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(52, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.45, $p2);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i24 := 0;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i134 := $i24;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i133 := $i134;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i133, 0);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb59:
    assume $i135 == 1;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(6, 2));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i140 := $load.i16($M.0, $p139);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i141, 65519);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i16($i142);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p139, $i143);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i25, $p26, $i27 := 0, $p20, 48;
    goto $bb14;

  $bb14:
    call $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p64, $p65, $i66, $i67, $i69, $i70, $i71, $i72, $i73, $i61, $i63, $i75, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i104, $i105, $i76, $i106, $i107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $i126, $i127, $i128, $i25, $p26, $i27, $i130, $i62, $i131, $i132, $i129, $i74, cmdloc_dummy_var_25, cmdloc_dummy_var_26, vslice_dummy_var_96, vslice_dummy_var_97 := vfio_cap_init_loop_$bb14($p0, $p2, $p3, $p4, $p6, $p8, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p64, $p65, $i66, $i67, $i69, $i70, $i71, $i72, $i73, $i61, $i63, $i75, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i104, $i105, $i76, $i106, $i107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $i126, $i127, $i128, $i25, $p26, $i27, $i130, $i62, $i131, $i132, $i129, $i74, cmdloc_dummy_var_25, cmdloc_dummy_var_26, vslice_dummy_var_96, vslice_dummy_var_97);
    goto $bb14_last;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i130 := $i27;
    goto $bb53;

  $bb53:
    call $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p64, $p65, $i66, $i67, $i69, $i70, $i71, $i72, $i73, $i61, $i63, $i130, $i62, $i131, $i132, $i74, vslice_dummy_var_96 := vfio_cap_init_loop_$bb53($p0, $p2, $p3, $p4, $p6, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p64, $p65, $i66, $i67, $i69, $i70, $i71, $i72, $i73, $i61, $i63, $i25, $p26, $i130, $i62, $i131, $i132, $i74, vslice_dummy_var_96);
    goto $bb53_last;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i130, 1);
    call {:si_unique_call 965} {:cexpr "loops"} boogie_si_record_i32($i62);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i132 := $i25;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i133 := $i132;
    goto $bb56;

  $bb54:
    assume $i131 == 1;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.45, $p2);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i30 := pci_read_config_byte($p6, $i29, $p3);
    call {:si_unique_call 948} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.45, $p2);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i36 := pci_read_config_byte($p6, $i35, $p4);
    call {:si_unique_call 950} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.46, $p3);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i41 := $ule.i32($i40, 19);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i61, $i63 := $i62, $i59;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32(0, $i63);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.45, $p2);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i64($i106);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p8, $mul.ref($i107, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.46, $p3);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i63);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 961} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p108, $i111, $i112, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.45, $p2);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i115 := vfio_fill_vconfig_bytes($p0, $i114, $i63);
    call {:si_unique_call 963} {:cexpr "ret"} boogie_si_record_i32($i115);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i117 := $i115;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.45, $p2);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i64($i120);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i122 := $add.i64($i121, 1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p119, $mul.ref($i122, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.48, $p4);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.45 := $store.i8($M.45, $p2, $i124);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i25, 1);
    call {:si_unique_call 964} {:cexpr "caps"} boogie_si_record_i32($i125);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.45, $p2);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i129 := $i125;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i24 := $i129;
    goto $bb13;

  $bb51:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i25, $p26, $i27 := $i125, $p123, $i61;
    goto $bb51_dummy;

  $bb48:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i11 := $i117;
    goto $bb3;

  $bb36:
    assume $i75 == 1;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb39;

  $bb39:
    call $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i104, $i105, $i76, vslice_dummy_var_97 := vfio_cap_init_loop_$bb39($p2, $p3, $p6, $p8, $i63, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i104, $i105, $i76, vslice_dummy_var_97);
    goto $bb39_last;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.45, $p2);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, $i76);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p8, $mul.ref($i80, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 255);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i32($i84);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $i87 := ldv__builtin_expect($i86, 1);
    call {:si_unique_call 957} {:cexpr "tmp___0"} boogie_si_record_i64($i87);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $p90 := dev_name($p89);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.45, $p2);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i92, $i76);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.45, $p2);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, $i76);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i96);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p8, $mul.ref($i97, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.46, $p3);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_97 := printk.ref.ref.ref.i32.i32.i32(.str.31, .str.30, $p90, $i93, $i100, $i102);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i76, 1);
    call {:si_unique_call 958} {:cexpr "i"} boogie_si_record_i32($i104);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i104, $i63);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i105 == 1);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb45:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i76 := $i104;
    goto $bb45_dummy;

  $bb41:
    assume $i88 == 1;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb31:
    assume $i60 == 1;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $p65 := dev_name($p64);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.46, $p3);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} vslice_dummy_var_96 := printk.ref.ref.ref.i32(.str.29, .str.30, $p65, $i67);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.48, $p4);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i69);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.48, $p4);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.45 := $store.i8($M.45, $p2, $i70);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.45, $p2);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i74 := $i25;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i134 := $i74;
    goto $bb57;

  $bb33:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i130 := $i62;
    goto $bb33_dummy;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.46, $p3);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref($i44, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.47, $p45);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    call {:si_unique_call 951} {:cexpr "len"} boogie_si_record_i32($i47);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 255);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i58 := $i47;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb30;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.46, $p3);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.45, $p2);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i55 := vfio_cap_len($p0, $i51, $i54);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 953} {:cexpr "len"} boogie_si_record_i32($i55);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i57 := $i55;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i58 := $i55;
    goto $bb29;

  $bb26:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i11 := $i57;
    goto $bb3;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i11 := $i38;
    goto $bb3;

  $bb16:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i11 := $i32;
    goto $bb3;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;

  $bb45_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4748;

  $bb33_dummy:
    assume false;
    return;

  $bb53_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4816;

  $bb51_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4681;
}



const vfio_ecap_init: ref;

axiom vfio_ecap_init == $sub.ref(0, 316883);

procedure vfio_ecap_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $CurrAddr;



implementation vfio_ecap_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i56: i64;
  var $i57: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i58: i16;
  var $i59: i32;
  var $i60: i16;
  var $i46: i16;
  var $i47: i32;
  var $i49: i16;
  var $i50: i32;
  var $i76: i16;
  var $i77: i32;
  var $i78: i16;
  var $i79: i32;
  var $i80: i8;
  var $i81: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i64;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i64;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i106: i32;
  var $i107: i1;
  var $i82: i32;
  var $i108: i64;
  var $p109: ref;
  var $i110: i32;
  var $i111: i8;
  var $i112: i64;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $p129: ref;
  var $i131: i32;
  var $i130: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i16;
  var $i140: i32;
  var $i141: i32;
  var $i142: i16;
  var $i143: i32;
  var $i144: i1;
  var $i17: i32;
  var $i18: i16;
  var $p19: ref;
  var $i20: i32;
  var $i48: i32;
  var $i22: i16;
  var $i146: i32;
  var $i147: i1;
  var $i145: i32;
  var $i16: i32;
  var $i148: i32;
  var $i75: i32;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i9: i32;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(56, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(375, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2984)), $mul.ref(1576, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 256));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i13 := $sdiv.i32($i12, 4);
    call {:si_unique_call 967} {:cexpr "loops"} boogie_si_record_i32($i13);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i13, 1);
    call {:si_unique_call 968} {:cexpr "loops"} boogie_si_record_i32($i14);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i13, 0);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i16 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i149 := $i16;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 0);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb55:
    assume $i150 == 1;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p153, $mul.ref(256, 4));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p154, 0);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i17, $i18, $p19, $i20 := $i14, 256, $0.ref, 0;
    goto $bb8;

  $bb8:
    call $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p51, $p52, $i53, $i54, $i56, $i57, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i58, $i59, $i60, $i46, $i47, $i49, $i50, $i76, $i77, $i78, $i79, $i80, $i81, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i106, $i107, $i82, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $p118, $p119, $p120, $i121, $p122, $i123, $i124, $p125, $p126, $p127, $i128, $p129, $i131, $i130, $p132, $p133, $p134, $i135, $p136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i17, $i18, $p19, $i20, $i48, $i22, $i146, $i147, $i145, $i148, $i75, cmdloc_dummy_var_27, cmdloc_dummy_var_28, vslice_dummy_var_98, vslice_dummy_var_99 := vfio_ecap_init_loop_$bb8($p0, $p1, $p3, $p5, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p51, $p52, $i53, $i54, $i56, $i57, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i58, $i59, $i60, $i46, $i47, $i49, $i50, $i76, $i77, $i78, $i79, $i80, $i81, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i106, $i107, $i82, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $p118, $p119, $p120, $i121, $p122, $i123, $i124, $p125, $p126, $p127, $i128, $p129, $i131, $i130, $p132, $p133, $p134, $i135, $p136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i17, $i18, $p19, $i20, $i48, $i22, $i146, $i147, $i145, $i148, $i75, cmdloc_dummy_var_27, cmdloc_dummy_var_28, vslice_dummy_var_98, vslice_dummy_var_99);
    goto $bb8_last;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i48, $i22 := $i17, $i18;
    goto $bb50;

  $bb50:
    call $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p51, $p52, $i53, $i54, $i56, $i57, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i58, $i59, $i60, $i46, $i47, $i49, $i50, $i48, $i22, $i146, $i147, $i148, $i75, vslice_dummy_var_98 := vfio_ecap_init_loop_$bb50($p0, $p1, $p3, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p51, $p52, $i53, $i54, $i56, $i57, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i58, $i59, $i60, $i46, $i47, $i49, $i50, $p19, $i20, $i48, $i22, $i146, $i147, $i148, $i75, vslice_dummy_var_98);
    goto $bb50_last;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i146 := $zext.i16.i32($i22);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i147 := $ugt.i32($i146, 255);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i148 := $i20;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i149 := $i148;
    goto $bb53;

  $bb51:
    assume $i147 == 1;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i22);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i23 := pci_read_config_dword($p3, $i21, $p1);
    call {:si_unique_call 970} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.44, $p1);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    call {:si_unique_call 971} {:cexpr "ecap"} boogie_si_record_i16($i27);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i29 := $ule.i32($i28, 27);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i46, $i47, $i49, $i50 := $i22, $i48, $i27, $i44;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i76, $i77, $i78, $i79, $i80 := $i46, $i47, $i49, $i50, 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32(0, $i79);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i64($i76);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p5, $mul.ref($i108, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i78);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i79);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 985} cmdloc_dummy_var_28 := $memset.i8(cmdloc_dummy_var_27, $p109, $i111, $i112, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i76);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i114 := vfio_fill_vconfig_bytes($p0, $i113, $i79);
    call {:si_unique_call 987} {:cexpr "ret"} boogie_si_record_i32($i114);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i116 := $i114;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i8.i1($i80);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i117 == 1);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i20, 1);
    call {:si_unique_call 988} {:cexpr "ecaps"} boogie_si_record_i32($i131);
    assume {:verifier.code 0} true;
    $i130 := $i131;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i64($i76);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p134, $mul.ref($i135, 4));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.44, $p1);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i138 := $lshr.i32($i137, 20);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i32($i139);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 4092);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i16($i141);
    call {:si_unique_call 989} {:cexpr "epos"} boogie_si_record_i16($i142);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i143 := $sub.i32($i77, 1);
    call {:si_unique_call 990} {:cexpr "loops"} boogie_si_record_i32($i143);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i77, 0);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i145 := $i130;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i16 := $i145;
    goto $bb7;

  $bb48:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $i17, $i18, $p19, $i20 := $i143, $i142, $p136, $i130;
    goto $bb48_dummy;

  $bb45:
    assume $i117 == 1;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i64($i76);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p120, $mul.ref($i121, 4));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, $sub.i32(0, 4194304));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i64($i76);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p127, $mul.ref($i128, 4));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, $i124);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i130 := $i20;
    goto $bb47;

  $bb42:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i9 := $i116;
    goto $bb3;

  $bb30:
    assume $i81 == 1;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb33;

  $bb33:
    call $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i106, $i107, $i82, vslice_dummy_var_99 := vfio_ecap_init_loop_$bb33($p3, $p5, $i76, $i78, $i79, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i106, $i107, $i82, vslice_dummy_var_99);
    goto $bb33_last;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i76);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, $i82);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p5, $mul.ref($i85, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 255);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i90 := $zext.i1.i32($i89);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i90);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i92 := ldv__builtin_expect($i91, 1);
    call {:si_unique_call 981} {:cexpr "tmp___0"} boogie_si_record_i64($i92);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p95 := dev_name($p94);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i76);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, $i82);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i76);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, $i82);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i99);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p5, $mul.ref($i100, 1));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i78);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_99 := printk.ref.ref.ref.i32.i32.i32(.str.36, .str.35, $p95, $i97, $i103, $i104);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i82, 1);
    call {:si_unique_call 982} {:cexpr "i"} boogie_si_record_i32($i106);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i106, $i79);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i107 == 1);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb39:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i82 := $i106;
    goto $bb39_dummy;

  $bb35:
    assume $i93 == 1;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $p52 := dev_name($p51);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i27);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i22);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} vslice_dummy_var_98 := printk.ref.ref.ref.i32.i32(.str.34, .str.35, $p52, $i53, $i54);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p19);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i58, $i59, $i60 := $i22, $i48, $i27;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i76, $i77, $i78, $i79, $i80 := $i58, $i59, $i60, 4, 1;
    goto $bb29;

  $bb24:
    assume $i57 == 1;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.44, $p1);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i62 := $lshr.i32($i61, 20);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 4092);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    call {:si_unique_call 977} {:cexpr "epos"} boogie_si_record_i16($i66);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    call {:si_unique_call 978} {:cexpr "val"} boogie_si_record_i32($i67);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p19);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 4194303);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i69);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p19);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i71 := $shl.i32($i67, 20);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i70, $i71);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i72);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i48, 1);
    call {:si_unique_call 979} {:cexpr "loops"} boogie_si_record_i32($i73);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i48, 0);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i75 := $i20;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i149 := $i75;
    goto $bb53;

  $bb26:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i48, $i22 := $i73, $i66;
    goto $bb26_dummy;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i27);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref($i31, 2));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.49, $p32);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    call {:si_unique_call 972} {:cexpr "len"} boogie_si_record_i32($i34);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 255);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i34;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb21;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i27);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i22);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i40 := vfio_ext_cap_len($p0, $i37, $i39);
    call {:si_unique_call 974} {:cexpr "len"} boogie_si_record_i32($i40);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i42 := $i23;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    goto $bb20;

  $bb17:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i9 := $i42;
    goto $bb3;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i9 := $i25;
    goto $bb3;

  $bb39_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4932;

  $bb26_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5014;

  $bb48_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4862;
}



const pcibios_err_to_errno: ref;

axiom pcibios_err_to_errno == $sub.ref(0, 317915);

procedure pcibios_err_to_errno($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pcibios_err_to_errno($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} {:cexpr "pcibios_err_to_errno:arg:err"} boogie_si_record_i32($i0);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 135);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 136);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 137);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 137);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 34);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 28);
    goto $bb3;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 5);
    goto $bb3;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 14);
    goto $bb3;

  $bb6:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 131);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 134);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 19);
    goto $bb3;

  $bb17:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 131);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb14;

  $bb19:
    assume $i9 == 1;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 25);
    goto $bb3;

  $bb15:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i0, 129);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb14;

  $bb21:
    assume $i10 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const vfio_ext_cap_len: ref;

axiom vfio_ext_cap_len == $sub.ref(0, 318947);

procedure vfio_ext_cap_len($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.50, $CurrAddr;



implementation vfio_ext_cap_len($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i25: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 994} {:cexpr "vfio_ext_cap_len:arg:ecap"} boogie_si_record_i16($i1);
    call {:si_unique_call 995} {:cexpr "vfio_ext_cap_len:arg:epos"} boogie_si_record_i16($i2);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 22);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i7, 23);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $p99 := dev_name($p98);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i1);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i2);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_100 := printk.ref.ref.ref.i32.i32(.str.37, $p99, .str.38, $i100, $i101);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i2);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, 4);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i87 := pci_read_config_dword($p6, $i86, $p4);
    call {:si_unique_call 999} {:cexpr "ret"} boogie_si_record_i32($i87);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.44, $p4);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 1536);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 512);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i25 := 12;
    goto $bb31;

  $bb54:
    assume $i92 == 1;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.44, $p4);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 134152192);
    call {:si_unique_call 1022} {:cexpr "sts"} boogie_si_record_i32($i94);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i95 := $ashr.i32($i94, 16);
    call {:si_unique_call 1023} {:cexpr "sts"} boogie_si_record_i32($i95);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, 7);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i97 := $mul.i32($i96, 2);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i25 := $i97;
    goto $bb31;

  $bb51:
    assume $i88 == 1;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i89 := pcibios_err_to_errno($i87);
    call {:si_unique_call 1021} {:cexpr "tmp___5"} boogie_si_record_i32($i89);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i25 := $i89;
    goto $bb31;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i2);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, 4);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $i75 := pci_read_config_byte($p6, $i74, $p3);
    call {:si_unique_call 997} {:cexpr "ret"} boogie_si_record_i32($i75);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.50, $p3);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 31);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p3, $i81);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.50, $p3);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 17);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i25 := $i84;
    goto $bb31;

  $bb48:
    assume $i76 == 1;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i77 := pcibios_err_to_errno($i75);
    call {:si_unique_call 1019} {:cexpr "tmp___4"} boogie_si_record_i32($i77);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i25 := $i77;
    goto $bb31;

  $bb4:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i7, 21);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i2);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 8);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i58 := pci_read_config_byte($p6, $i57, $p3);
    call {:si_unique_call 1001} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.50, $p3);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 224);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p3, $i64);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.50, $p3);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i67 := $ashr.i32($i66, 5);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p3, $i68);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.50, $p3);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i71 := $mul.i32($i70, 8);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, 4);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i25 := $i72;
    goto $bb31;

  $bb45:
    assume $i59 == 1;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i60 := pcibios_err_to_errno($i58);
    call {:si_unique_call 1017} {:cexpr "tmp___3"} boogie_si_record_i32($i60);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i25 := $i60;
    goto $bb31;

  $bb11:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i2);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 4);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $i33 := pci_read_config_byte($p6, $i32, $p3);
    call {:si_unique_call 1003} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.50, $p3);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 32);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i25 := 8;
    goto $bb31;

  $bb36:
    assume $i39 == 1;
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i2);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 5);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $i42 := pci_read_config_byte($p6, $i41, $p3);
    call {:si_unique_call 1013} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.50, $p3);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i47 == 1);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i53 := 256;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i54 := $sdiv.i32($i53, 8);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i54, 8);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i25 := $i55;
    goto $bb31;

  $bb41:
    assume $i47 == 1;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.50, $p3);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, $sub.i32(0, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i50, 31);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 1);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb43;

  $bb38:
    assume $i43 == 1;
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i44 := pcibios_err_to_errno($i42);
    call {:si_unique_call 1015} {:cexpr "tmp___2"} boogie_si_record_i32($i44);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i25 := $i44;
    goto $bb31;

  $bb33:
    assume $i34 == 1;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i35 := pcibios_err_to_errno($i33);
    call {:si_unique_call 1011} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i25 := $i35;
    goto $bb31;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i7, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i7, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i7, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb19:
    assume $i16 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i2);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 4);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i22 := pci_read_config_dword($p6, $i21, $p4);
    call {:si_unique_call 1005} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.44, $p4);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i32($i26, 20);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i25 := $i27;
    goto $bb31;

  $bb29:
    assume $i23 == 1;
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $i24 := pcibios_err_to_errno($i22);
    call {:si_unique_call 1009} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb31;

  $bb17:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i7, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i2);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i30 := vfio_vc_cap_len($p0, $i29);
    call {:si_unique_call 1007} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i25 := $i30;
    goto $bb31;

  $bb15:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i7, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb26;

  $bb24:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb27:
    assume $i19 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    goto $bb22;
}



const vfio_vc_cap_len: ref;

axiom vfio_vc_cap_len == $sub.ref(0, 319979);

procedure vfio_vc_cap_len($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation vfio_vc_cap_len($p0: ref, $i1: i16) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i25: i32;
  var $i21: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1027} {:cexpr "vfio_vc_cap_len:arg:pos"} boogie_si_record_i16($i1);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 4);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i7 := pci_read_config_dword($p4, $i6, $p2);
    call {:si_unique_call 1029} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.44, $p2);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 7);
    call {:si_unique_call 1032} {:cexpr "evcc"} boogie_si_record_i32($i12);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i1);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 8);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i15 := pci_read_config_dword($p4, $i14, $p2);
    call {:si_unique_call 1034} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.44, $p2);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 8);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.44, $p2);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 4);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.44, $p2);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 2);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i25 := $i29;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i21 := $i25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i21, 4);
    call {:si_unique_call 1037} {:cexpr "vc_arb"} boogie_si_record_i32($i30);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i12, 1);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i31, 12);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, 16);
    call {:si_unique_call 1038} {:cexpr "len"} boogie_si_record_i32($i33);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i30, 0);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i33;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i10 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i33, $sub.i32(0, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 15);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    call {:si_unique_call 1039} {:cexpr "len"} boogie_si_record_i32($i37);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i38 := $sdiv.i32($i30, 8);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, $i37);
    call {:si_unique_call 1040} {:cexpr "len"} boogie_si_record_i32($i39);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb19;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i29 := 32;
    goto $bb16;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i25 := 64;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i21 := 128;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i17 := pcibios_err_to_errno($i15);
    call {:si_unique_call 1036} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i9 := pcibios_err_to_errno($i7);
    call {:si_unique_call 1031} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const vfio_cap_len: ref;

axiom vfio_cap_len == $sub.ref(0, 321011);

procedure vfio_cap_len($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.51, $CurrAddr, assertsPassed;



implementation vfio_cap_len($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i8;
  var $i43: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $i72: i8;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i21: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 1044} {:cexpr "vfio_cap_len:arg:cap"} boogie_si_record_i8($i1);
    call {:si_unique_call 1045} {:cexpr "vfio_cap_len:arg:pos"} boogie_si_record_i8($i2);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $p76 := dev_name($p75);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i1);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i2);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_103 := printk.ref.ref.ref.i32.i32(.str.32, $p76, .str.33, $i77, $i78);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i2);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 4);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i65 := pci_read_config_byte($p7, $i64, $p5);
    call {:si_unique_call 1047} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.51, $p5);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 15);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $M.51 := $store.i8($M.51, $p5, $i71);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.51, $p5);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 15);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i74 == 1);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i21 := 8;
    goto $bb21;

  $bb38:
    assume $i74 == 1;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i21 := 16;
    goto $bb21;

  $bb35:
    assume $i66 == 1;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i67 := pcibios_err_to_errno($i65);
    call {:si_unique_call 1067} {:cexpr "tmp___4"} boogie_si_record_i32($i67);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i21 := $i67;
    goto $bb21;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} vslice_dummy_var_101 := pci_read_config_dword($p7, 256, $p3);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.44, $p3);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(375, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i8($i46);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i48);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i49 := pcie_caps_reg($p7);
    call {:si_unique_call 1050} {:cexpr "tmp___2"} boogie_si_record_i16($i49);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 15);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i52 == 1);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i21 := 44;
    goto $bb21;

  $bb30:
    assume $i52 == 1;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i21 := 20;
    goto $bb21;

  $bb4:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i8, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i2);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 2);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i39 := pci_read_config_byte($p7, $i38, $p5);
    call {:si_unique_call 1052} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.51, $p5);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i21 := $i43;
    goto $bb21;

  $bb27:
    assume $i40 == 1;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i41 := pcibios_err_to_errno($i39);
    call {:si_unique_call 1063} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i21 := $i41;
    goto $bb21;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i8, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i16 == 1);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i2);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 3);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i55 := pci_read_config_byte($p7, $i54, $p5);
    call {:si_unique_call 1056} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.51, $p5);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 224);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i62 := (if $i61 == 1 then 24 else 28);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i21 := $i62;
    goto $bb21;

  $bb32:
    assume $i56 == 1;
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i57 := pcibios_err_to_errno($i55);
    call {:si_unique_call 1065} {:cexpr "tmp___3"} boogie_si_record_i32($i57);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i21 := $i57;
    goto $bb21;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i2);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 2);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i24 := pci_read_config_word($p7, $i23, $p4);
    call {:si_unique_call 1054} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.9, $p4);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i29 := $ashr.i32($i28, 12);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 3);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i31 == 1);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i21 := 8;
    goto $bb21;

  $bb25:
    assume $i31 == 1;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} vslice_dummy_var_102 := pci_read_config_dword($p7, 256, $p3);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.44, $p3);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(375, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i34);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i36);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i21 := 24;
    goto $bb21;

  $bb22:
    assume $i25 == 1;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $i26 := pcibios_err_to_errno($i24);
    call {:si_unique_call 1060} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i21 := $i26;
    goto $bb21;

  $bb15:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb19:
    assume $i17 == 1;
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i2);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i20 := vfio_msi_cap_len($p0, $i19);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 1058} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb21;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const vfio_msi_cap_len: ref;

axiom vfio_msi_cap_len == $sub.ref(0, 322043);

procedure vfio_msi_cap_len($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation vfio_msi_cap_len($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1071} {:cexpr "vfio_msi_cap_len:arg:pos"} boogie_si_record_i8($i1);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 2);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i7 := pci_read_config_word($p4, $i6, $p2);
    call {:si_unique_call 1073} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.9, $p2);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 128);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := 10;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.9, $p2);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 256);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i16;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $p27 := kzalloc(32, 208);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p27);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(72, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.9, $p2);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $i39 := init_pci_cap_msi_perm($p35, $i22, $i38);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 1080} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i10 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i10 := $i39;
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i10 := $i22;
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i16, 10);
    call {:si_unique_call 1077} {:cexpr "len"} boogie_si_record_i32($i21);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i15 := $add.i32(10, 4);
    call {:si_unique_call 1076} {:cexpr "len"} boogie_si_record_i32($i15);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i9 := pcibios_err_to_errno($i7);
    call {:si_unique_call 1075} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const pcie_caps_reg: ref;

axiom pcie_caps_reg == $sub.ref(0, 323075);

procedure pcie_caps_reg($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation pcie_caps_reg($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(80, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const init_pci_cap_msi_perm: ref;

axiom init_pci_cap_msi_perm == $sub.ref(0, 324107);

procedure init_pci_cap_msi_perm($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation init_pci_cap_msi_perm($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} {:cexpr "init_pci_cap_msi_perm:arg:len"} boogie_si_record_i32($i1);
    call {:si_unique_call 1082} {:cexpr "init_pci_cap_msi_perm:arg:flags"} boogie_si_record_i16($i2);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i3 := alloc_perm_bits($p0, $i1);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 1084} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, vfio_msi_config_read);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, vfio_msi_config_write);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} p_setb($p0, 1, $sub.i8(0, 1), 0);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} p_setb($p0, 2, $sub.i8(0, 1), $sub.i8(0, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} p_setd($p0, 4, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i2);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 128);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} p_setw($p0, 8, $sub.i16(0, 1), $sub.i16(0, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i2);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 256);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} p_setd($p0, 12, 0, $sub.i32(0, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} p_setd($p0, 16, 0, $sub.i32(0, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} p_setd($p0, 8, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} p_setw($p0, 12, $sub.i16(0, 1), $sub.i16(0, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i2);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 256);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} p_setd($p0, 16, 0, $sub.i32(0, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} p_setd($p0, 20, 0, $sub.i32(0, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const alloc_perm_bits: ref;

axiom alloc_perm_bits == $sub.ref(0, 325139);

procedure alloc_perm_bits($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation alloc_perm_bits($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} {:cexpr "alloc_perm_bits:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 3);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    call {:si_unique_call 1096} {:cexpr "size"} boogie_si_record_i32($i4);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $p6 := kzalloc($i5, 208);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i4);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $p9 := kzalloc($i8, 208);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, vfio_default_config_read);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, vfio_default_config_write);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} free_perm_bits($p0);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const vfio_msi_config_read: ref;

axiom vfio_msi_config_read == $sub.ref(0, 326171);

procedure vfio_msi_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.56, $M.53, $CurrAddr;



implementation vfio_msi_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i16;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} {:cexpr "vfio_msi_config_read:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1101} {:cexpr "vfio_msi_config_read:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1102} {:cexpr "vfio_msi_config_read:arg:offset"} boogie_si_record_i32($i4);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i4, 2);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i28 := vfio_default_config_read($p0, $i1, $i2, $p3, $i4, $p5);
    call {:si_unique_call 1106} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i4, $i2);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 1);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $i9 := vfio_find_cap_start($p0, $i1);
    call {:si_unique_call 1104} {:cexpr "start"} boogie_si_record_i32($i9);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i9);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 2));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 65521);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i18);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p14);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i16($i22);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 1);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i20, $i25);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i27);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vfio_msi_config_write: ref;

axiom vfio_msi_config_write == $sub.ref(0, 327203);

procedure vfio_msi_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.52, $M.53, $CurrAddr;



implementation vfio_msi_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $i46: i16;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} {:cexpr "vfio_msi_config_write:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1108} {:cexpr "vfio_msi_config_write:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1109} {:cexpr "vfio_msi_config_write:arg:offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 1110} {:cexpr "vfio_msi_config_write:arg:val"} boogie_si_record_i32($i5);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i6 := vfio_default_config_write($p0, $i1, $i2, $p3, $i4, $i5);
    call {:si_unique_call 1112} {:cexpr "count"} boogie_si_record_i32($i6);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i4, 2);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i4, $i6);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 1);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i12 := vfio_find_cap_start($p0, $i1);
    call {:si_unique_call 1114} {:cexpr "start"} boogie_si_record_i32($i12);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i12);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 2);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p14, $mul.ref($i16, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    call {:si_unique_call 1115} {:cexpr "flags"} boogie_si_record_i16($i19);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i19;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 112);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i29 := $ashr.i32($i28, 4);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i29, $i32);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i26;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $i46);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i12, 2);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i46);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i52 := pci_user_write_config_word($p48, $i49, $i51);
    call {:si_unique_call 1120} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i53 == 1;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i54 := pcibios_err_to_errno($i52);
    call {:si_unique_call 1122} {:cexpr "tmp"} boogie_si_record_i32($i54);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i8 := $i54;
    goto $bb3;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i26);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 65423);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    call {:si_unique_call 1117} {:cexpr "flags"} boogie_si_record_i16($i36);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i39, 4);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i42 := $sext.i16.i32($i41);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i43 := $sext.i16.i32($i36);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i42, $i43);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    call {:si_unique_call 1118} {:cexpr "flags"} boogie_si_record_i16($i45);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb15;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i19);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 65534);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    call {:si_unique_call 1116} {:cexpr "flags"} boogie_si_record_i16($i25);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const p_setb: ref;

axiom p_setb == $sub.ref(0, 328235);

procedure p_setb($p0: ref, $i1: i32, $i2: i8, $i3: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation p_setb($p0: ref, $i1: i32, $i2: i8, $i3: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} {:cexpr "p_setb:arg:off"} boogie_si_record_i32($i1);
    call {:si_unique_call 1124} {:cexpr "p_setb:arg:virt"} boogie_si_record_i8($i2);
    call {:si_unique_call 1125} {:cexpr "p_setb:arg:write"} boogie_si_record_i8($i3);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i2);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i1);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i3);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    return;
}



const p_setd: ref;

axiom p_setd == $sub.ref(0, 329267);

procedure p_setd($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation p_setd($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} {:cexpr "p_setd:arg:off"} boogie_si_record_i32($i1);
    call {:si_unique_call 1127} {:cexpr "p_setd:arg:virt"} boogie_si_record_i32($i2);
    call {:si_unique_call 1128} {:cexpr "p_setd:arg:write"} boogie_si_record_i32($i3);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i1);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 4));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 4));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i3);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    return;
}



const p_setw: ref;

axiom p_setw == $sub.ref(0, 330299);

procedure p_setw($p0: ref, $i1: i32, $i2: i16, $i3: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation p_setw($p0: ref, $i1: i32, $i2: i16, $i3: i16)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} {:cexpr "p_setw:arg:off"} boogie_si_record_i32($i1);
    call {:si_unique_call 1130} {:cexpr "p_setw:arg:virt"} boogie_si_record_i16($i2);
    call {:si_unique_call 1131} {:cexpr "p_setw:arg:write"} boogie_si_record_i16($i3);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i1);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 2));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $i2);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 2));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i3);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    return;
}



const vfio_default_config_write: ref;

axiom vfio_default_config_write == $sub.ref(0, 331331);

procedure vfio_default_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.52, $M.53, $CurrAddr;



implementation vfio_default_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i18: i32;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1136} {:cexpr "vfio_default_config_write:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1137} {:cexpr "vfio_default_config_write:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1138} {:cexpr "vfio_default_config_write:arg:offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 1139} {:cexpr "vfio_default_config_write:arg:val"} boogie_si_record_i32($i5);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p7);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i4);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 1));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i2);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 1140} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p10, $p14, $i15, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p7);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p6);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i4);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p21, $mul.ref($i22, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i2);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 1141} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p19, $p23, $i24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p7);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p6);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i25, $i26);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p6);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i54 := $xor.i32($i53, $sub.i32(0, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p7);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i54, $i55);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb8:
    assume $i57 == 1;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $M.52 := $store.i32($M.52, $p9, 0);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i60 := vfio_user_config_read($p59, $i1, $p9, $i2);
    call {:si_unique_call 1145} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p6);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i63 := $xor.i32($i62, $sub.i32(0, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p7);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i63, $i64);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i66 := $xor.i32($i65, $sub.i32(0, 1));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.52, $p9);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i66, $i67);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $M.52 := $store.i32($M.52, $p9, $i68);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p6);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i70 := $xor.i32($i69, $sub.i32(0, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p7);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i70, $i71);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, $i5);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.52, $p9);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i73, $i74);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $M.52 := $store.i32($M.52, $p9, $i75);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.52, $p9);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i77 := vfio_user_config_write($p59, $i1, $i76, $i2);
    call {:si_unique_call 1147} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i78 == 1;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i18 := $i77;
    goto $bb3;

  $bb10:
    assume $i61 == 1;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i18 := $i60;
    goto $bb3;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p8);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i1);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p31, $mul.ref($i32, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i2);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 1142} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p29, $p33, $i34, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p7);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p6);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i35, $i36);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i38 := $xor.i32($i37, $sub.i32(0, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p8);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i38, $i39);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i40);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p7);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p6);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i41, $i42);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, $i5);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p8);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i44, $i45);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i46);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i1);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p8);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i2);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 1143} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p50, $p51, $i52, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb3;
}



const pci_user_write_config_word: ref;

axiom pci_user_write_config_word == $sub.ref(0, 332363);

procedure pci_user_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1148} {:cexpr "pci_user_write_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1149} {:cexpr "pci_user_write_config_word:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1150} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1151} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vfio_user_config_read: ref;

axiom vfio_user_config_read == $sub.ref(0, 333395);

procedure vfio_user_config_read($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.0, $CurrAddr;



implementation vfio_user_config_read($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i15: i32;
  var $i20: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $p6 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1155} {:cexpr "vfio_user_config_read:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 1156} {:cexpr "vfio_user_config_read:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $M.53 := $store.i32($M.53, $p4, 0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.53, $p4);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i20);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $i21 := pcibios_err_to_errno($i15);
    call {:si_unique_call 1164} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i19 := pci_user_read_config_dword($p0, $i1, $p4);
    call {:si_unique_call 1158} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i15 := $i19;
    goto $bb13;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i16 := pci_user_read_config_word($p0, $i1, $p6);
    call {:si_unique_call 1160} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.55, $p6);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $M.53 := $store.i32($M.53, $p4, $i18);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb13;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i12 := pci_user_read_config_byte($p0, $i1, $p5);
    call {:si_unique_call 1162} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.54, $p5);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $M.53 := $store.i32($M.53, $p4, $i14);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    goto $bb13;
}



const vfio_user_config_write: ref;

axiom vfio_user_config_write == $sub.ref(0, 334427);

procedure vfio_user_config_write($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_user_config_write($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i13: i32;
  var $i19: i32;

  $bb0:
    call {:si_unique_call 1165} {:cexpr "vfio_user_config_write:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 1166} {:cexpr "vfio_user_config_write:arg:val"} boogie_si_record_i32($i2);
    call {:si_unique_call 1167} {:cexpr "vfio_user_config_write:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 1168} {:cexpr "vfio_user_config_write:arg:tmp_val"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i19 := pcibios_err_to_errno($i13);
    call {:si_unique_call 1176} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $i18 := pci_user_write_config_dword($p0, $i1, $i2);
    call {:si_unique_call 1170} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i2);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i17 := pci_user_write_config_word($p0, $i1, $i16);
    call {:si_unique_call 1172} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb13;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i2);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $i12 := pci_user_write_config_byte($p0, $i1, $i11);
    call {:si_unique_call 1174} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb13;
}



const pci_user_write_config_byte: ref;

axiom pci_user_write_config_byte == $sub.ref(0, 335459);

procedure pci_user_write_config_byte($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_write_config_byte($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} {:cexpr "pci_user_write_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1178} {:cexpr "pci_user_write_config_byte:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1179} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_user_write_config_dword: ref;

axiom pci_user_write_config_dword == $sub.ref(0, 336491);

procedure pci_user_write_config_dword($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_write_config_dword($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1181} {:cexpr "pci_user_write_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1182} {:cexpr "pci_user_write_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1183} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1184} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_user_read_config_byte: ref;

axiom pci_user_read_config_byte == $sub.ref(0, 337523);

procedure pci_user_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1185} {:cexpr "pci_user_read_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1186} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1187} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_user_read_config_word: ref;

axiom pci_user_read_config_word == $sub.ref(0, 338555);

procedure pci_user_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1188} {:cexpr "pci_user_read_config_word:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1189} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1190} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_user_read_config_dword: ref;

axiom pci_user_read_config_dword == $sub.ref(0, 339587);

procedure pci_user_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1191} {:cexpr "pci_user_read_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1192} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1193} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vfio_default_config_read: ref;

axiom vfio_default_config_read == $sub.ref(0, 340619);

procedure vfio_default_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.56, $M.53, $CurrAddr;



implementation vfio_default_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i29: i32;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1196} {:cexpr "vfio_default_config_read:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1197} {:cexpr "vfio_default_config_read:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1198} {:cexpr "vfio_default_config_read:arg:offset"} boogie_si_record_i32($i4);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p5);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i1);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i2);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 1199} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, $p8, $p12, $i13, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p6);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i4);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 1));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i2);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.0;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 1200} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p14, $p18, $i19, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(4, $i2);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i20, 8);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i32($sub.i32(0, 1), $i21);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p6);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i22, $i23);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i29 := $i2;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $M.56 := $store.i32($M.56, $p7, 0);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $i27 := vfio_user_config_read($p26, $i1, $p7, $i2);
    call {:si_unique_call 1202} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p6);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i31 := $xor.i32($i30, $sub.i32(0, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.56, $p7);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i31, $i32);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p5);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p6);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i34, $i35);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i33, $i36);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i37);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb5;
}



const free_perm_bits: ref;

axiom free_perm_bits == $sub.ref(0, 341651);

procedure free_perm_bits($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_perm_bits($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} kfree($p2);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} kfree($p4);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    return;
}



const vfio_direct_config_read: ref;

axiom vfio_direct_config_read == $sub.ref(0, 342683);

procedure vfio_direct_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.0, $CurrAddr;



implementation vfio_direct_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i11: i32;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} {:cexpr "vfio_direct_config_read:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1206} {:cexpr "vfio_direct_config_read:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1207} {:cexpr "vfio_direct_config_read:arg:offset"} boogie_si_record_i32($i4);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i8 := vfio_user_config_read($p7, $i1, $p5, $i2);
    call {:si_unique_call 1209} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i1, 255);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i1, 63);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i4, 0);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i4, 1);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i31 == 1;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p5);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i1);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p34, $mul.ref($i35, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 1215} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p32, $p36, 1, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i2, 1);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb15;

  $bb16:
    assume $i22 == 1;
    call {:si_unique_call 1213} {:cexpr "vfio_direct_config_read:arg:_min2"} boogie_si_record_i32($i2);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p5);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i1);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p25, $mul.ref($i26, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32(2, $i2);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i28 == 1);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i29 := $i2;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 1214} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p23, $p27, $i30, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i28 == 1;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i29 := 2;
    goto $bb20;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i13 := $sle.i32($i4, 3);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p5);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i1);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 1));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i2);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 1212} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p14, $p18, $i19, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $i10 := pcibios_err_to_errno($i8);
    call {:si_unique_call 1211} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const vfio_raw_config_read: ref;

axiom vfio_raw_config_read == $sub.ref(0, 343715);

procedure vfio_raw_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.0, $CurrAddr;



implementation vfio_raw_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} {:cexpr "vfio_raw_config_read:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1217} {:cexpr "vfio_raw_config_read:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1218} {:cexpr "vfio_raw_config_read:arg:offset"} boogie_si_record_i32($i4);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i8 := vfio_user_config_read($p7, $i1, $p5, $i2);
    call {:si_unique_call 1220} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $i10 := pcibios_err_to_errno($i8);
    call {:si_unique_call 1222} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const vfio_raw_config_write: ref;

axiom vfio_raw_config_write == $sub.ref(0, 344747);

procedure vfio_raw_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_raw_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} {:cexpr "vfio_raw_config_write:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1224} {:cexpr "vfio_raw_config_write:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1225} {:cexpr "vfio_raw_config_write:arg:offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 1226} {:cexpr "vfio_raw_config_write:arg:val"} boogie_si_record_i32($i5);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i8 := vfio_user_config_write($p7, $i1, $i5, $i2);
    call {:si_unique_call 1228} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 345779);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $p1 := calloc(1, $i0);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1231} __VERIFIER_assume($i4);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 346811);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.57;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1233} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.57;
    call {:si_unique_call 1234} cmdloc_dummy_var_57 := $memset.i8(cmdloc_dummy_var_56, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.57 := cmdloc_dummy_var_57;
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_pci_driver_4: ref;

axiom ldv_pci_driver_4 == $sub.ref(0, 347843);

procedure ldv_pci_driver_4();
  free requires assertsPassed;
  modifies $M.58, $M.0, $CurrAddr;



implementation ldv_pci_driver_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $M.58 := $p0;
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 348875);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.57, $M.59, $M.60, $M.62, $M.63, $M.64, $M.66, $M.0, $M.5, $M.6, $M.67, $M.68, $M.69, $M.30, $M.21, $M.27, $M.24, $M.58, $M.22, $M.25, $M.28, $M.31, $M.70, $M.71, $M.3, $M.49, $M.47, $M.72, $M.2, $M.43, $M.1, $M.97, $M.98, $M.99, $CurrAddr, $M.7, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.9, $M.53, $M.35, $M.4, $M.18, $M.73, $M.74, assertsPassed, $M.45, $M.52, $M.56, $M.51, $M.50;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i60: i32;
  var $i61: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i64;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i64;
  var $i81: i32;
  var $i82: i1;
  var $i83: i64;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var vslice_dummy_var_104: ref;
  var vslice_dummy_var_105: ref;
  var vslice_dummy_var_106: ref;
  var vslice_dummy_var_107: ref;
  var vslice_dummy_var_108: ref;
  var vslice_dummy_var_109: ref;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i64;
  var vslice_dummy_var_113: i64;
  var vslice_dummy_var_114: i64;
  var vslice_dummy_var_115: i64;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;

  $bb0:
    call {:si_unique_call 1236} $initialize();
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p6 := ldv_init_zalloc(8);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p8 := ldv_init_zalloc(1);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $p9 := ldv_init_zalloc(8);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $p11 := ldv_init_zalloc(1);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $p12 := ldv_init_zalloc(1);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $p13 := ldv_init_zalloc(1);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $p14 := ldv_init_zalloc(1);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $p15 := ldv_init_zalloc(184);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $p17 := ldv_init_zalloc(1);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $p18 := ldv_init_zalloc(1);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p19 := ldv_init_zalloc(1);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $p20 := ldv_init_zalloc(1);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $p21 := ldv_init_zalloc(32);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1257} $p23 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1258} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p23);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} ldv_initialize();
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} vslice_dummy_var_104 := ldv_memset($p25, 0, 8);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} vslice_dummy_var_105 := ldv_memset($p27, 0, 8);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} vslice_dummy_var_106 := ldv_memset($p29, 0, 4);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} vslice_dummy_var_107 := ldv_memset($p31, 0, 8);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p4);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} vslice_dummy_var_108 := ldv_memset($p33, 0, 4);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p5);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} vslice_dummy_var_109 := ldv_memset($p35, 0, 4);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $M.59 := 0;
    call {:si_unique_call 1266} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $M.60 := 0;
    call {:si_unique_call 1267} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $M.62 := 0;
    call {:si_unique_call 1269} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1270} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $M.64 := 0;
    call {:si_unique_call 1271} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $M.66 := 0;
    call {:si_unique_call 1273} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i60, $i61, $i63, $i64, $i65, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i76, $i77, $i78, $i79, $i81, $i82, $i83, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p7, $p8, $p10, $p11, $p12, $p13, $p14, $p16, $p17, $p18, $p19, $p20, $p22, $p24, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i60, $i61, $i63, $i64, $i65, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i76, $i77, $i78, $i79, $i81, $i82, $i83, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i37, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i37, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ldv_stop();
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb77_dummy;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i138 := $M.66;
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb139:
    assume $i139 == 1;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1332} $i140 := __VERIFIER_nondet_int();
    call {:si_unique_call 1333} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i140);
    call {:si_unique_call 1334} {:cexpr "tmp___17"} boogie_si_record_i32($i140);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} ldv_stop();
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb142:
    assume $i141 == 1;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i142 := $M.66;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 1);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb144:
    assume $i143 == 1;
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.57, $p5);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} vslice_dummy_var_117 := vfio_pci_aer_err_detected($p24, $i144);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1336} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb5:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i37, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i136 := $M.64;
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb136:
    assume $i137 == 1;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} ldv_main_exported_3();
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i119 := $M.63;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb106:
    assume $i120 == 1;
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1316} $i121 := __VERIFIER_nondet_int();
    call {:si_unique_call 1317} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i121);
    call {:si_unique_call 1318} {:cexpr "tmp___16"} boogie_si_record_i32($i121);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i121, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i121, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} ldv_stop();
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb111:
    assume $i123 == 1;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i129 := $M.63;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb124:
    assume $i130 == 1;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i131 := vfio_pci_init();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $M.69 := $i131;
    call {:si_unique_call 1323} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i131);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i132 := $M.69;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i134 := $M.69;
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb129:
    assume $i135 == 1;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1325} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1326} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} ldv_initialize_perm_bits_3();
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1329} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb126:
    assume $i133 == 1;
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1324} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} ldv_check_final_state();
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb109:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i121, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb113;

  $bb114:
    assume $i124 == 1;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i125 := $M.63;
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 2);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb116:
    assume $i126 == 1;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i127 := $M.62;
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 0);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb118;

  $bb119:
    assume $i128 == 1;
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vfio_pci_cleanup();
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1320} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb3:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i98 := $M.60;
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb78:
    assume $i99 == 1;
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1304} $i100 := __VERIFIER_nondet_int();
    call {:si_unique_call 1305} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i100);
    call {:si_unique_call 1306} {:cexpr "tmp___15"} boogie_si_record_i32($i100);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i100, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i100, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i100, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} ldv_stop();
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb85:
    assume $i103 == 1;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i116 := $M.60;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 2);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb100:
    assume $i117 == 1;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} vslice_dummy_var_116 := ldv_shutdown_4();
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1314} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb83:
    assume $i102 == 1;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i113 := $M.60;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 2);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb97:
    assume $i114 == 1;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p115 := $M.58;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} vfio_pci_remove($p115);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1312} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb81:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i100, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb87;

  $bb88:
    assume $i104 == 1;
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i105 := $M.60;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 1);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb90:
    assume $i106 == 1;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p107 := $M.58;
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $i108 := vfio_pci_probe($p107, $p22);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.68 := $i108;
    call {:si_unique_call 1308} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i108);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i109 := $M.68;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 0);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb92:
    assume $i110 == 1;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1309} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i111 := $M.62;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i111, 1);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $M.62 := $i112;
    call {:si_unique_call 1310} {:cexpr "ref_cnt"} boogie_si_record_i32($i112);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb11;

  $bb18:
    assume $i45 == 1;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i46 := $M.59;
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb20:
    assume $i47 == 1;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1277} $i48 := __VERIFIER_nondet_int();
    call {:si_unique_call 1278} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i48);
    call {:si_unique_call 1279} {:cexpr "tmp___14"} boogie_si_record_i32($i48);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i48, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i48, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i48, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} ldv_stop();
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb29:
    assume $i52 == 1;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i91 := $M.59;
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 1);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb68:
    assume $i92 == 1;
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $i93 := vfio_pci_open($p14);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $M.67 := $i93;
    call {:si_unique_call 1300} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i93);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i94 := $M.67;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 0);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb70:
    assume $i95 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1301} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i96 := $M.62;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, 1);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $M.62 := $i97;
    call {:si_unique_call 1302} {:cexpr "ref_cnt"} boogie_si_record_i32($i97);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i51 == 1;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i85 := $M.59;
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 1);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i88 := $M.59;
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 2);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb65:
    assume $i89 == 1;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.57, $p4);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} vfio_pci_request($p12, $i90);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1298} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i86 == 1;
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.57, $p4);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vfio_pci_request($p12, $i87);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1296} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb25:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i48, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i53 == 1);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i81 := $M.59;
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 2);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb59:
    assume $i82 == 1;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.57, $p3);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} vslice_dummy_var_115 := vfio_pci_read($p19, $p17, $i83, $p10);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1294} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb32:
    assume $i53 == 1;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i71 := $M.59;
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i76 := $M.59;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb56:
    assume $i77 == 1;
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.57, $p2);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.57, $p0);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} vslice_dummy_var_114 := vfio_pci_ioctl($p8, $i78, $i79);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1292} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i72 == 1;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.57, $p2);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.57, $p0);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} vslice_dummy_var_113 := vfio_pci_ioctl($p8, $i73, $i74);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1290} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i48, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i48, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i55 == 1);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i67 := $M.59;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 2);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb50:
    assume $i68 == 1;
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} vfio_pci_release($p13);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1287} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i69 := $M.62;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32($i69, 1);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $M.62 := $i70;
    call {:si_unique_call 1288} {:cexpr "ref_cnt"} boogie_si_record_i32($i70);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i55 == 1;
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i63 := $M.59;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 2);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb47:
    assume $i64 == 1;
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.57, $p1);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} vslice_dummy_var_112 := vfio_pci_write($p11, $p20, $i65, $p7);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1285} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb34:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i48, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb31;

  $bb38:
    assume $i56 == 1;
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i57 := $M.59;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i60 := $M.59;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 2);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i61 == 1;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} vslice_dummy_var_111 := vfio_pci_mmap($p18, $p16);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1283} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i58 == 1;
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} vslice_dummy_var_110 := vfio_pci_mmap($p18, $p16);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1281} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb77_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1274} $i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 1275} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i37);
    call {:si_unique_call 1276} {:cexpr "tmp___13"} boogie_si_record_i32($i37);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 349907);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 350939);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_shutdown_4: ref;

axiom ldv_shutdown_4 == $sub.ref(0, 351971);

procedure ldv_shutdown_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1339} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1340} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const vfio_pci_cleanup: ref;

axiom vfio_pci_cleanup == $sub.ref(0, 353003);

procedure vfio_pci_cleanup();
  free requires assertsPassed;
  modifies $M.60, $M.0;



implementation vfio_pci_cleanup()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} ldv_pci_unregister_driver_24(vfio_pci_driver);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} vfio_pci_uninit_perm_bits();
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_init: ref;

axiom vfio_pci_init == $sub.ref(0, 354035);

procedure vfio_pci_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.60, $M.58, $M.73, $M.74, $CurrAddr, assertsPassed;



implementation vfio_pci_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i0 := vfio_pci_init_perm_bits();
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 1344} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i3 := ldv___pci_register_driver_25(vfio_pci_driver, __this_module, .str.12);
    call {:si_unique_call 1346} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} vfio_pci_fill_ids();
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vfio_pci_uninit_perm_bits();
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const ldv_initialize_perm_bits_3: ref;

axiom ldv_initialize_perm_bits_3 == $sub.ref(0, 355067);

procedure ldv_initialize_perm_bits_3();
  free requires assertsPassed;
  modifies $M.70, $M.71, $M.0, $CurrAddr;



implementation ldv_initialize_perm_bits_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $p0 := ldv_init_zalloc(416);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $M.70 := $p0;
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $p2 := ldv_init_zalloc(32);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $M.71 := $p2;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 356099);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.57, $M.53, $M.0, $M.64, $M.62, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i46: i32;
  var $i47: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i54: i32;
  var $i55: i32;
  var vslice_dummy_var_118: ref;
  var vslice_dummy_var_119: ref;
  var vslice_dummy_var_120: ref;
  var vslice_dummy_var_121: ref;
  var vslice_dummy_var_122: ref;
  var vslice_dummy_var_123: ref;
  var vslice_dummy_var_124: ref;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $p7 := ldv_init_zalloc(4);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vslice_dummy_var_118 := ldv_memset($p9, 0, 4);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} vslice_dummy_var_119 := ldv_memset($p11, 0, 4);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} vslice_dummy_var_120 := ldv_memset($p13, 0, 4);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} vslice_dummy_var_121 := ldv_memset($p15, 0, 4);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_122 := ldv_memset($p17, 0, 4);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p5);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} vslice_dummy_var_123 := ldv_memset($p19, 0, 4);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p6);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} vslice_dummy_var_124 := ldv_memset($p21, 0, 4);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1366} $i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 1367} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i23);
    call {:si_unique_call 1368} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i23, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i23, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} ldv_stop();
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i51 := $M.64;
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i52 == 1;
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} vslice_dummy_var_128 := ldv_probe_3();
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1377} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i54 := $M.62;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i54, 1);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $M.62 := $i55;
    call {:si_unique_call 1378} {:cexpr "ref_cnt"} boogie_si_record_i32($i55);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i46 := $M.64;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i47 == 1;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} vslice_dummy_var_127 := ldv_release_3();
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1374} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i49 := $M.62;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32($i49, 1);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.62 := $i50;
    call {:si_unique_call 1375} {:cexpr "ref_cnt"} boogie_si_record_i32($i50);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i37 := $M.64;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 2);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p39 := $M.70;
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.57, $p4);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.57, $p0);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p42 := $M.71;
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.57, $p2);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.57, $p5);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_126 := vfio_raw_config_write($p39, $i40, $i41, $p42, $i43, $i44);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1372} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i23, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb8;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i29 := $M.64;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p31 := $M.70;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.57, $p6);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.57, $p3);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p34 := $M.71;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.57, $p1);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} vslice_dummy_var_125 := vfio_raw_config_read($p31, $i32, $i33, $p34, $i35, $p8);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1370} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 357131);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    return;
}



const ldv_release_3: ref;

axiom ldv_release_3 == $sub.ref(0, 358163);

procedure ldv_release_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1380} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1381} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_3: ref;

axiom ldv_probe_3 == $sub.ref(0, 359195);

procedure ldv_probe_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1382} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const vfio_pci_init_perm_bits: ref;

axiom vfio_pci_init_perm_bits == $sub.ref(0, 360227);

procedure vfio_pci_init_perm_bits() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation vfio_pci_init_perm_bits() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $i0 := init_pci_cap_basic_perm(cap_perms);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 1385} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $i1 := init_pci_cap_pm_perm($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)));
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 1387} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, $i0);
    call {:si_unique_call 1388} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(3, 32)), $mul.ref(24, 1)), vfio_raw_config_write);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i3 := init_pci_cap_pcix_perm($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)));
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 1390} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, $i2);
    call {:si_unique_call 1391} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(9, 32)), $mul.ref(24, 1)), vfio_raw_config_write);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i5 := init_pci_cap_exp_perm($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)));
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 1393} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $i4);
    call {:si_unique_call 1394} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i7 := init_pci_cap_af_perm($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)));
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 1396} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, $i6);
    call {:si_unique_call 1397} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $i9 := init_pci_ext_cap_err_perm($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)));
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 1399} {:cexpr "tmp___3"} boogie_si_record_i32($i9);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, $i8);
    call {:si_unique_call 1400} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i11 := init_pci_ext_cap_pwr_perm($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)));
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 1402} {:cexpr "tmp___4"} boogie_si_record_i32($i11);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, $i10);
    call {:si_unique_call 1403} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(11, 32)), $mul.ref(24, 1)), vfio_raw_config_write);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} vfio_pci_uninit_perm_bits();
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const ldv___pci_register_driver_25: ref;

axiom ldv___pci_register_driver_25 == $sub.ref(0, 361259);

procedure ldv___pci_register_driver_25($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.60, $M.58, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_25($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1406} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1407} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ldv_pci_driver_4();
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vfio_pci_fill_ids: ref;

axiom vfio_pci_fill_ids == $sub.ref(0, 362291);

procedure vfio_pci_fill_ids();
  free requires assertsPassed;
  modifies $M.73, $M.74, $CurrAddr;



implementation vfio_pci_fill_ids()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $p13: ref;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.72, ids);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i8 := $sext.i8.i32($i7);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.73 := $store.ref($M.73, $p0, ids);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $p10 := strsep($p0, .str.22);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p13 := $p10;
    goto $bb8;

  $bb8:
    call $i14, $i15, $p16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i37, $i38, $i39, $i40, $i41, $i42, $p13, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131 := vfio_pci_fill_ids_loop_$bb8($p0, $p1, $p2, $p3, $p4, $p5, $p6, $i14, $i15, $p16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i37, $i38, $i39, $i40, $i41, $i42, $p13, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131);
    goto $bb8_last;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.74 := $store.i32($M.74, $p3, $sub.i32(0, 1));
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $M.74 := $store.i32($M.74, $p4, $sub.i32(0, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.74 := $store.i32($M.74, $p5, 0);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $M.74 := $store.i32($M.74, $p6, 0);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $i14 := strlen($p13);
    call {:si_unique_call 1418} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $i19 := sscanf.ref.ref.ref.ref.ref.ref.ref.ref($p13, .str.18, $p1, $p2, $p3, $p4, $p5, $p6);
    call {:si_unique_call 1421} {:cexpr "fields"} boogie_si_record_i32($i19);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i20 := $sle.i32($i19, 1);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.74, $p1);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.74, $p2);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.74, $p3);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.74, $p4);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.74, $p5);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.74, $p6);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i28 := pci_add_dynid(vfio_pci_driver, $i22, $i23, $i24, $i25, $i26, $i27, 0);
    call {:si_unique_call 1424} {:cexpr "rc"} boogie_si_record_i32($i28);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.74, $p1);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.74, $p2);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.74, $p3);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.74, $p4);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.74, $p5);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.74, $p6);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} vslice_dummy_var_131 := printk.ref.i32.i32.i32.i32.i32.i32(.str.21, $i37, $i38, $i39, $i40, $i41, $i42);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p16 := strsep($p0, .str.22);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb13_dummy;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.74, $p1);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.74, $p2);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.74, $p3);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.74, $p4);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.74, $p5);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.74, $p6);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_130 := printk.ref.i32.i32.i32.i32.i32.i32.i32(.str.20, $i30, $i31, $i32, $i33, $i34, $i35, $i28);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} vslice_dummy_var_129 := printk.ref.ref(.str.19, $p13);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6348;
}



const vfio_pci_uninit_perm_bits: ref;

axiom vfio_pci_uninit_perm_bits == $sub.ref(0, 363323);

procedure vfio_pci_uninit_perm_bits();
  free requires assertsPassed;
  modifies $M.0;



implementation vfio_pci_uninit_perm_bits()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} free_perm_bits(cap_perms);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} free_perm_bits($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} free_perm_bits($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} free_perm_bits($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)));
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} free_perm_bits($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} free_perm_bits($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} free_perm_bits($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 364355);

procedure strlen($p0: ref) returns ($r: i64);



const sscanf: ref;

axiom sscanf == $sub.ref(0, 365387);

procedure sscanf.ref.ref.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref, p.7: ref) returns ($r: i32);



const pci_add_dynid: ref;

axiom pci_add_dynid == $sub.ref(0, 366419);

procedure pci_add_dynid($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_add_dynid($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i64) returns ($r: i32)
{
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1434} {:cexpr "pci_add_dynid:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1435} {:cexpr "pci_add_dynid:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1436} {:cexpr "pci_add_dynid:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1437} {:cexpr "pci_add_dynid:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1438} {:cexpr "pci_add_dynid:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 1439} {:cexpr "pci_add_dynid:arg:arg6"} boogie_si_record_i32($i6);
    call {:si_unique_call 1440} {:cexpr "pci_add_dynid:arg:arg7"} boogie_si_record_i64($i7);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1441} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1442} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const strsep: ref;

axiom strsep == $sub.ref(0, 367451);

procedure strsep($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation strsep($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $p2 := external_alloc();
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 368483);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1444} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1445} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const init_pci_cap_basic_perm: ref;

axiom init_pci_cap_basic_perm == $sub.ref(0, 369515);

procedure init_pci_cap_basic_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation init_pci_cap_basic_perm($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $i1 := alloc_perm_bits($p0, 64);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 1447} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, vfio_basic_config_read);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, vfio_basic_config_write);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} p_setw($p0, 0, $sub.i16(0, 1), 0);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} p_setw($p0, 2, $sub.i16(0, 1), 0);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} p_setw($p0, 4, 1024, $sub.i16(0, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} p_setw($p0, 6, 16, 0);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} p_setb($p0, 12, 0, $sub.i8(0, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} p_setb($p0, 13, 0, $sub.i8(0, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} p_setb($p0, 15, 0, $sub.i8(0, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} p_setd($p0, 16, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} p_setd($p0, 20, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} p_setd($p0, 24, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} p_setd($p0, 28, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} p_setd($p0, 32, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} p_setd($p0, 36, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} p_setd($p0, 48, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} p_setb($p0, 52, $sub.i8(0, 1), 0);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} p_setb($p0, 60, $sub.i8(0, 1), $sub.i8(0, 1));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} p_setb($p0, 61, $sub.i8(0, 1), 0);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const init_pci_cap_pm_perm: ref;

axiom init_pci_cap_pm_perm == $sub.ref(0, 370547);

procedure init_pci_cap_pm_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation init_pci_cap_pm_perm($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(1, 1)));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $i3 := alloc_perm_bits($p0, $i2);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 1466} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, vfio_pm_config_write);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} p_setb($p0, 1, $sub.i8(0, 1), 0);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} p_setd($p0, 4, 0, $sub.i32(0, 4));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const init_pci_cap_pcix_perm: ref;

axiom init_pci_cap_pcix_perm == $sub.ref(0, 371579);

procedure init_pci_cap_pcix_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation init_pci_cap_pcix_perm($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $i1 := alloc_perm_bits($p0, 24);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 1470} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} p_setb($p0, 1, $sub.i8(0, 1), 0);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} p_setw($p0, 2, 0, $sub.i16(0, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} p_setd($p0, 8, 0, $sub.i32(0, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const init_pci_cap_exp_perm: ref;

axiom init_pci_cap_exp_perm == $sub.ref(0, 372611);

procedure init_pci_cap_exp_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation init_pci_cap_exp_perm($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $i1 := alloc_perm_bits($p0, 44);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 1475} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} p_setb($p0, 1, $sub.i8(0, 1), 0);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} p_setw($p0, 8, 0, $sub.i16(0, 513));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} p_setw($p0, 40, 0, $sub.i16(0, 33));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const init_pci_cap_af_perm: ref;

axiom init_pci_cap_af_perm == $sub.ref(0, 373643);

procedure init_pci_cap_af_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation init_pci_cap_af_perm($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(19, 1)));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $i3 := alloc_perm_bits($p0, $i2);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 1480} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} p_setb($p0, 1, $sub.i8(0, 1), 0);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} p_setb($p0, 4, 0, 1);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const init_pci_ext_cap_err_perm: ref;

axiom init_pci_ext_cap_err_perm == $sub.ref(0, 374675);

procedure init_pci_ext_cap_err_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation init_pci_ext_cap_err_perm($p0: ref) returns ($r: i32)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(1, 2)));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $i3 := alloc_perm_bits($p0, $i2);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 1484} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} p_setd($p0, 0, $sub.i32(0, 1), 0);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} p_setd($p0, 4, 0, 67104817);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} p_setd($p0, 8, 0, 67104817);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} p_setd($p0, 12, 0, 67104817);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} p_setd($p0, 16, 0, 61889);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} p_setd($p0, 20, 0, 61889);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} p_setd($p0, 24, 0, 320);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const init_pci_ext_cap_pwr_perm: ref;

axiom init_pci_ext_cap_pwr_perm == $sub.ref(0, 375707);

procedure init_pci_ext_cap_pwr_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation init_pci_ext_cap_pwr_perm($p0: ref) returns ($r: i32)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(4, 2)));
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $i3 := alloc_perm_bits($p0, $i2);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 1493} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} p_setd($p0, 0, $sub.i32(0, 1), 0);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} p_setb($p0, 8, 0, $sub.i8(0, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const vfio_pm_config_write: ref;

axiom vfio_pm_config_write == $sub.ref(0, 376739);

procedure vfio_pm_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.52, $M.53, $CurrAddr;



implementation vfio_pm_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} {:cexpr "vfio_pm_config_write:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1497} {:cexpr "vfio_pm_config_write:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1498} {:cexpr "vfio_pm_config_write:arg:offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 1499} {:cexpr "vfio_pm_config_write:arg:val"} boogie_si_record_i32($i5);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i6 := vfio_default_config_write($p0, $i1, $i2, $p3, $i4, $i5);
    call {:si_unique_call 1501} {:cexpr "count"} boogie_si_record_i32($i6);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 4);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i5, 3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i9, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i15 := $u2;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} vslice_dummy_var_132 := pci_set_power_state($p17, $i15);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume $i12 == 1;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i15 := 3;
    goto $bb19;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i15 := 2;
    goto $bb19;

  $bb8:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb19;

  $bb15:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i9, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb14;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb19;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_basic_config_read: ref;

axiom vfio_basic_config_read == $sub.ref(0, 377771);

procedure vfio_basic_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.56, $M.53, $CurrAddr;



implementation vfio_basic_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} {:cexpr "vfio_basic_config_read:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1504} {:cexpr "vfio_basic_config_read:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1505} {:cexpr "vfio_basic_config_read:arg:offset"} boogie_si_record_i32($i4);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i4, 15);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i4, 47);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $i10 := vfio_default_config_read($p0, $i1, $i2, $p3, $i4, $p5);
    call {:si_unique_call 1508} {:cexpr "count"} boogie_si_record_i32($i10);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i4, 4);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(2531, 1));
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb15;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(4, 2));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    call {:si_unique_call 1509} {:cexpr "cmd"} boogie_si_record_i16($i23);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p5);
    call {:si_unique_call 1510} {:cexpr "tmp_val"} boogie_si_record_i32($i24);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i23);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 2);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, $i24);
    call {:si_unique_call 1511} {:cexpr "tmp_val"} boogie_si_record_i32($i27);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i27);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i4, 51);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} vfio_bar_fixup($p0);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i7 := $sle.i32($i4, 39);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;
}



const vfio_basic_config_write: ref;

axiom vfio_basic_config_write == $sub.ref(0, 378803);

procedure vfio_basic_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.52, $M.3, $M.53, $CurrAddr;



implementation vfio_basic_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i17: i16;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i8;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i8;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i8;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i16;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i16;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i16;
  var $i69: i1;
  var $i70: i1;
  var $i71: i16;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i8;
  var $i76: i1;
  var $p77: ref;
  var $i78: i8;
  var $i79: i1;
  var $p80: ref;
  var $i81: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i1;
  var $p85: ref;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $p90: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p6 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1513} {:cexpr "vfio_basic_config_write:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1514} {:cexpr "vfio_basic_config_write:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1515} {:cexpr "vfio_basic_config_write:arg:offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 1516} {:cexpr "vfio_basic_config_write:arg:val"} boogie_si_record_i32($i5);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(4, 2));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i4, 4);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $i53 := vfio_default_config_write($p0, $i1, $i2, $p3, $i4, $i5);
    call {:si_unique_call 1528} {:cexpr "count"} boogie_si_record_i32($i53);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i4, 4);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i4, 3);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i86 := $sgt.i32($i4, 15);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i88 := $sgt.i32($i4, 47);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i16 := $i53;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb54:
    assume $i88 == 1;
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i89 := $sle.i32($i4, 51);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb56;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(376, 1));
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, 1);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb48:
    assume $i86 == 1;
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i87 := $sle.i32($i4, 39);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb50;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb52;

  $bb30:
    assume $i69 == 1;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i70 := $sle.i32($i4, 5);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb32;

  $bb33:
    assume $i70 == 1;
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p12);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 1024);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i8($i74);
    call {:si_unique_call 1529} {:cexpr "virt_intx_disable"} boogie_si_record_i8($i75);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i8.i1($i75);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i81 == 1);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(373, 1));
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i83);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i84 == 1;
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(373, 1));
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 0);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vfio_pci_intx_unmask($p0);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb42;

  $bb35:
    assume $i76 == 1;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(373, 1));
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i79 == 1);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(373, 1));
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, 1);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} vfio_pci_intx_mask($p0);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb37;

  $bb27:
    assume $i55 == 1;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p12);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32(3);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i59 := $xor.i32($i58, $sub.i32(0, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i57, $i59);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $i61);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p12);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i52);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32(3);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i64, $i65);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i63, $i66);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $i68);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i54 == 1;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i16 := $i53;
    goto $bb5;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $i14 := pci_user_read_config_word($p8, 4, $p6);
    call {:si_unique_call 1518} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i5);
    call {:si_unique_call 1519} {:cexpr "new_cmd"} boogie_si_record_i16($i17);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.55, $p6);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 2);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 1520} {:cexpr "phys_mem"} boogie_si_record_i8($i22);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p12);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 2);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1521} {:cexpr "virt_mem"} boogie_si_record_i8($i27);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i17);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 2);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 1522} {:cexpr "new_mem"} boogie_si_record_i8($i31);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.55, $p6);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 1);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i35);
    call {:si_unique_call 1523} {:cexpr "phys_io"} boogie_si_record_i8($i36);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p12);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 1);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 1524} {:cexpr "virt_io"} boogie_si_record_i8($i41);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i17);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 1);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 1525} {:cexpr "new_io"} boogie_si_record_i8($i45);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i31);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i45);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i52 := $i17;
    goto $bb23;

  $bb15:
    assume $i49 == 1;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i41);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb17;

  $bb18:
    assume $i50 == 1;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i36);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} vfio_bar_restore($p0);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb17;

  $bb7:
    assume $i46 == 1;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i27);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb9;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i22);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb9;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb5;
}



const vfio_bar_restore: ref;

axiom vfio_bar_restore == $sub.ref(0, 379835);

procedure vfio_bar_restore($p0: ref);
  free requires assertsPassed;



implementation vfio_bar_restore($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i19: i32;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i37: i64;
  var $p17: ref;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(344, 1));
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(2531, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $p11 := dev_name($p10);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_133 := printk.ref.ref.ref(.str.27, .str.28, $p11);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p4);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} vslice_dummy_var_134 := pci_user_write_config_dword($p2, 16, $i13);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p4, $mul.ref(1, 4));
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p15);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} vslice_dummy_var_135 := pci_user_write_config_dword($p2, 20, $i19);
    $i21 := $add.i64(1, 1);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p4, $mul.ref($i21, 4));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} vslice_dummy_var_137 := pci_user_write_config_dword($p2, 24, $i23);
    $i25 := $add.i64($i21, 1);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p4, $mul.ref($i25, 4));
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} vslice_dummy_var_138 := pci_user_write_config_dword($p2, 28, $i27);
    $i29 := $add.i64($i25, 1);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p4, $mul.ref($i29, 4));
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_139 := pci_user_write_config_dword($p2, 32, $i31);
    $i33 := $add.i64($i29, 1);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p4, $mul.ref($i33, 4));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} vslice_dummy_var_140 := pci_user_write_config_dword($p2, 36, $i35);
    $i37 := $add.i64($i33, 1);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p4, $mul.ref($i37, 4));
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p17);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} vslice_dummy_var_136 := pci_user_write_config_dword($p2, 48, $i16);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_bar_fixup: ref;

axiom vfio_bar_fixup == $sub.ref(0, 380867);

procedure vfio_bar_fixup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vfio_bar_fixup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i9: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i17: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i15: i32;
  var $p16: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i1;
  var $p7: ref;
  var $i8: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p83: ref;
  var $i84: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p92: ref;
  var $i93: i64;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(16, 4));
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p7, $i8 := $p6, 0;
    goto $bb1;

  $bb1:
    call $i9, $p12, $i13, $i14, $i17, $p20, $i21, $i22, $i23, $p26, $i27, $i28, $p31, $i32, $i33, $i34, $p37, $i38, $i39, $p42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i15, $p16, $i64, $p65, $i66, $p7, $i8 := vfio_bar_fixup_loop_$bb1($p2, $i9, $p12, $i13, $i14, $i17, $p20, $i21, $i22, $i23, $p26, $i27, $i28, $p31, $i32, $i33, $i34, $p37, $i38, $i39, $p42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i15, $p16, $i64, $p65, $i66, $p7, $i8);
    goto $bb1_last;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i9, 56)), $mul.ref(0, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i8);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i17, 56)), $mul.ref(0, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i8);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i23, 56)), $mul.ref(8, 1));
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i8);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i28, 56)), $mul.ref(0, 1));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i27, $i32);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p7);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i46);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i47, $i48);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i49);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $i50 := vfio_generate_bar_flags($p2, $i8);
    call {:si_unique_call 1543} {:cexpr "tmp"} boogie_si_record_i32($i50);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p7);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, $i50);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i52);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p7);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 4);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i62, $p63 := $i8, $p7;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i15, $p16 := $i62, $p63;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i15, 1);
    call {:si_unique_call 1541} {:cexpr "i"} boogie_si_record_i32($i64);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p16, $mul.ref(1, 4));
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i66 := $sle.i32($i64, 5);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref(48, 4));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(6, 56)), $mul.ref(0, 1));
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i75 == 1);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 0);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(376, 1));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 0);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i75 == 1;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(6, 56)), $mul.ref(0, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i80 == 1);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(6, 56)), $mul.ref(8, 1));
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(6, 56)), $mul.ref(0, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i84, $i88);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i89 == 1);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i100 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i101 := $or.i64($i100, 1);
    call {:si_unique_call 1545} {:cexpr "mask"} boogie_si_record_i64($i101);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p70);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i101);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i102, $i103);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i104);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(6, 56)), $mul.ref(8, 1));
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(6, 56)), $mul.ref(0, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i98 := $sub.i64($i93, $i97);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i99 := $xor.i64($i98, $sub.i64(0, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i100 := $i99;
    goto $bb26;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb22;

  $bb16:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $p7, $i8 := $p65, $i64;
    goto $bb16_dummy;

  $bb13:
    assume $i55 == 1;
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p7, $mul.ref(1, 4));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i58 := $lshr.i64($i46, 32);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i57, $i59);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i60);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i8, 1);
    call {:si_unique_call 1544} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i62, $p63 := $i61, $p56;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i8);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i34, 56)), $mul.ref(8, 1));
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i8);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i39, 56)), $mul.ref(0, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i44 := $sub.i64($i38, $i43);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i45 := $xor.i64($i44, $sub.i64(0, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb8;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i15, $p16 := $i8, $p7;
    goto $bb5;

  $bb16_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6776;
}



const vfio_generate_bar_flags: ref;

axiom vfio_generate_bar_flags == $sub.ref(0, 381899);

procedure vfio_generate_bar_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_generate_bar_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} {:cexpr "vfio_generate_bar_flags:arg:bar"} boogie_si_record_i32($i1);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i2, 56)), $mul.ref(24, 1));
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    call {:si_unique_call 1547} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 256);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i6, 8192);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i6, 1048576);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i13;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i13, 4);
    call {:si_unique_call 1549} {:cexpr "val"} boogie_si_record_i32($i16);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i12 := $or.i32(0, 8);
    call {:si_unique_call 1548} {:cexpr "val"} boogie_si_record_i32($i12);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;
}



const ldv_pci_unregister_driver_24: ref;

axiom ldv_pci_unregister_driver_24 == $sub.ref(0, 382931);

procedure ldv_pci_unregister_driver_24($p0: ref);
  free requires assertsPassed;
  modifies $M.60;



implementation ldv_pci_unregister_driver_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} pci_unregister_driver($p0);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $M.60 := 0;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 383963);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 384995);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1552} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 1} true;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 386027);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 387059);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 388091);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 389123);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 390155);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 391187);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __VERIFIER_nondet_unsigned_char: ref;

axiom __VERIFIER_nondet_unsigned_char == $sub.ref(0, 392219);

procedure __VERIFIER_nondet_unsigned_char() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_char() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1553} $i0 := __SMACK_nondet_unsigned_char();
    call {:si_unique_call 1554} {:cexpr "smack:ext:__SMACK_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1555} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1556} __VERIFIER_assume($i6);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 1} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 255);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 393251);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 394283);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 395315);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 396347);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 397379);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 398411);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 399443);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1557} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1558} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1559} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1560} __VERIFIER_assume($i4);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 400475);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 401507);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 402539);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 403571);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1561} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1562} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1563} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1564} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1565} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1566} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1567} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1568} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1569} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1570} __VERIFIER_assume($i7);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1571} __VERIFIER_assume($i11);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 404603);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 405635);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 406667);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 407699);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 408731);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 409763);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1572} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1573} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1574} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1575} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1576} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1577} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1578} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1579} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1580} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1581} __VERIFIER_assume($i7);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1582} __VERIFIER_assume($i11);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 410795);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 411827);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 412859);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 413891);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 414923);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 415955);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 416987);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 418019);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 419051);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1583} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1584} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1585} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1586} __VERIFIER_assume($i10);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uchar: ref;

axiom __VERIFIER_nondet_uchar == $sub.ref(0, 420083);

procedure __VERIFIER_nondet_uchar() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uchar() returns ($r: i8)
{
  var $i0: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1587} $i0 := __VERIFIER_nondet_unsigned_char();
    call {:si_unique_call 1588} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1589} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 421115);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1590} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1591} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1592} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 422147);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1593} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1594} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1595} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 423179);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1596} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1597} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 424211);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 425243);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1598} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1599} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 426275);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 427307);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 428339);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1600} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1601} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1602} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1603} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $p6 := malloc($i5);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.0;
    call {:si_unique_call 1605} cmdloc_dummy_var_59 := $memset.i8(cmdloc_dummy_var_58, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_59;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 429371);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 430403);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.30, $M.21, $M.27, $M.24, $M.58, $M.59, $M.60, $M.62, $M.63, $M.64, $M.66, $M.67, $M.68, $M.69, $M.22, $M.25, $M.28, $M.31, $M.70, $M.71, $M.3, $M.0, $M.49, $M.47, $M.72, $M.2, $M.43, $M.1, $M.97, $M.98, $M.99;



implementation __SMACK_static_init()
{

  $bb0:
    $M.30 := 0;
    call {:si_unique_call 1606} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 1607} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    call {:si_unique_call 1608} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 1609} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1610} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.24 := 0;
    call {:si_unique_call 1611} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    call {:si_unique_call 1612} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    call {:si_unique_call 1613} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1614} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    $M.58 := $0.ref;
    $M.59 := 0;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1616} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1618} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 1620} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1622} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 1623} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1624} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1625} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1626} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
    call {:si_unique_call 1627} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
    call {:si_unique_call 1628} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1629} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 1630} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 1631} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1632} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1633} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.70 := $0.ref;
    $M.71 := $0.ref;
    $M.3 := 0;
    call {:si_unique_call 1634} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    call {:si_unique_call 1635} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, unassigned_perms, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unassigned_perms, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unassigned_perms, $mul.ref(0, 32)), $mul.ref(16, 1)), vfio_raw_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unassigned_perms, $mul.ref(0, 32)), $mul.ref(24, 1)), vfio_raw_config_write);
    $M.49 := $store.i16($M.49, pci_ext_cap_length, 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(1, 2)), 44);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(2, 2)), 255);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(3, 2)), 12);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(4, 2)), 16);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(5, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(6, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(7, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(8, 2)), 255);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(9, 2)), 255);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(10, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(11, 2)), 255);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(12, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(13, 2)), 255);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(14, 2)), 8);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(15, 2)), 8);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(16, 2)), 64);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(17, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(18, 2)), 40);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(19, 2)), 16);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(20, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(21, 2)), 255);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(22, 2)), 255);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(23, 2)), 255);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(24, 2)), 8);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(25, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(26, 2)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(27, 2)), 0);
    $M.47 := $store.i8($M.47, pci_cap_length, 64);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(1, 1)), 8);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(2, 1)), 12);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(3, 1)), 8);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(4, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(5, 1)), $sub.i8(0, 1));
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(6, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(7, 1)), $sub.i8(0, 1));
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(8, 1)), $sub.i8(0, 1));
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(9, 1)), $sub.i8(0, 1));
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(10, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(11, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(13, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(14, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(15, 1)), 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(16, 1)), $sub.i8(0, 1));
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(17, 1)), 12);
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(18, 1)), $sub.i8(0, 1));
    $M.47 := $store.i8($M.47, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(19, 1)), 6);
    $M.0 := $store.ref($M.0, ecap_perms, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(0, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(2, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(2, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(2, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(2, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(3, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(3, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(3, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(3, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(5, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(5, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(5, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(5, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(6, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(6, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(6, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(6, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(7, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(7, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(7, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(7, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(8, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(8, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(8, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(8, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(9, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(9, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(9, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(9, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(10, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(10, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(10, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(10, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(11, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(11, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(11, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(11, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(12, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(12, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(12, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(12, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(13, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(13, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(13, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(13, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(14, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(14, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(14, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(14, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(15, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(15, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(15, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(15, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(16, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(16, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(16, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(16, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(17, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(17, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(17, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(17, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(18, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(18, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(18, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(18, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(19, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(19, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(19, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(19, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(20, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(20, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(20, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(20, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(21, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(21, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(21, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(21, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(22, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(22, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(22, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(22, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(23, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(23, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(23, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(23, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(24, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(24, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(24, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(24, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(25, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(25, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(25, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(25, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(26, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(26, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(26, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(26, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(27, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(27, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(27, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(27, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, cap_perms, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(0, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(2, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(2, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(2, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(2, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(3, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(3, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(3, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(3, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(4, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(4, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(4, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(4, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(5, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(5, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(5, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(5, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(6, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(6, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(6, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(6, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(8, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(8, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(8, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(8, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(9, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(9, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(9, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(9, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(10, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(10, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(10, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(10, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(11, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(11, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(11, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(11, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(12, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(12, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(12, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(12, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(13, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(13, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(13, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(13, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(14, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(14, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(14, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(14, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(15, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(15, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(15, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(15, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(17, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(17, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(17, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(17, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(18, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(18, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(18, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(18, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)), $mul.ref(24, 1)), $0.ref);
    $M.72 := $store.i8($M.72, ids, 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(2, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(3, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(4, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(5, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(6, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(7, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(8, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(9, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(10, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(11, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(12, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(13, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(14, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(16, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(17, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(18, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(19, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(20, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(21, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(22, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(23, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(24, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(25, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(26, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(27, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(28, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(29, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(30, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(31, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(32, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(33, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(34, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(35, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(36, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(37, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(38, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(39, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(40, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(41, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(42, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(43, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(44, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(45, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(46, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(47, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(48, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(49, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(50, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(51, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(52, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(53, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(54, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(55, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(56, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(57, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(58, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(59, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(60, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(61, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(62, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(63, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(64, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(65, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(66, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(67, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(68, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(69, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(70, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(71, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(72, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(73, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(74, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(75, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(76, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(77, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(78, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(79, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(80, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(81, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(82, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(83, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(84, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(85, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(86, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(87, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(88, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(89, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(90, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(91, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(92, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(93, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(94, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(95, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(96, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(97, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(98, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(99, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(100, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(101, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(102, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(103, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(104, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(105, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(106, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(107, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(108, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(109, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(110, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(111, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(112, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(113, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(114, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(115, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(116, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(117, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(118, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(119, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(120, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(121, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(122, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(123, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(124, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(125, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(126, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(127, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(128, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(129, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(130, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(131, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(132, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(133, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(134, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(135, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(136, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(137, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(138, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(139, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(140, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(141, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(142, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(143, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(144, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(145, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(146, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(147, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(148, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(149, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(150, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(151, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(152, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(153, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(154, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(155, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(156, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(157, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(158, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(159, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(160, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(161, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(162, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(163, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(164, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(165, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(166, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(167, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(168, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(169, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(170, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(171, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(172, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(173, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(174, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(175, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(176, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(177, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(178, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(179, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(180, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(181, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(182, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(183, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(184, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(185, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(186, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(187, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(188, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(189, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(190, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(191, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(192, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(193, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(194, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(195, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(196, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(197, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(198, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(199, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(200, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(201, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(202, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(203, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(204, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(205, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(206, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(207, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(208, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(209, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(210, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(211, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(212, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(213, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(214, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(215, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(216, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(217, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(218, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(219, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(220, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(221, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(222, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(223, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(224, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(225, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(226, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(227, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(228, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(229, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(230, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(231, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(232, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(233, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(234, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(235, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(236, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(237, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(238, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(239, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(240, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(241, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(242, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(243, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(244, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(245, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(246, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(247, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(248, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(249, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(250, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(251, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(252, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(253, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(254, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(255, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(256, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(257, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(258, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(259, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(260, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(261, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(262, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(263, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(264, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(265, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(266, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(267, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(268, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(269, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(270, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(271, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(272, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(273, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(274, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(275, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(276, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(277, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(278, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(279, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(280, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(281, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(282, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(283, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(284, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(285, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(286, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(287, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(288, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(289, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(290, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(291, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(292, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(293, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(294, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(295, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(296, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(297, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(298, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(299, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(300, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(301, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(302, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(303, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(304, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(305, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(306, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(307, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(308, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(309, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(310, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(311, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(312, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(313, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(314, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(315, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(316, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(317, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(318, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(319, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(320, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(321, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(322, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(323, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(324, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(325, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(326, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(327, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(328, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(329, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(330, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(331, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(332, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(333, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(334, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(335, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(336, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(337, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(338, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(339, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(340, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(341, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(342, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(343, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(344, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(345, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(346, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(347, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(348, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(349, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(350, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(351, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(352, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(353, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(354, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(355, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(356, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(357, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(358, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(359, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(360, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(361, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(362, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(363, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(364, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(365, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(366, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(367, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(368, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(369, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(370, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(371, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(372, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(373, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(374, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(375, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(376, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(377, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(378, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(379, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(380, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(381, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(382, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(383, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(384, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(385, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(386, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(387, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(388, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(389, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(390, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(391, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(392, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(393, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(394, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(395, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(396, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(397, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(398, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(399, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(400, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(401, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(402, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(403, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(404, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(405, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(406, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(407, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(408, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(409, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(410, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(411, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(412, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(413, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(414, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(415, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(416, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(417, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(418, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(419, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(420, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(421, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(422, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(423, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(424, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(425, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(426, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(427, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(428, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(429, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(430, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(431, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(432, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(433, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(434, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(435, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(436, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(437, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(438, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(439, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(440, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(441, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(442, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(443, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(444, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(445, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(446, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(447, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(448, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(449, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(450, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(451, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(452, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(453, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(454, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(455, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(456, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(457, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(458, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(459, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(460, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(461, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(462, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(463, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(464, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(465, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(466, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(467, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(468, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(469, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(470, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(471, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(472, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(473, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(474, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(475, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(476, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(477, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(478, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(479, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(480, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(481, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(482, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(483, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(484, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(485, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(486, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(487, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(488, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(489, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(490, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(491, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(492, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(493, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(494, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(495, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(496, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(497, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(498, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(499, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(500, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(501, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(502, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(503, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(504, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(505, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(506, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(507, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(508, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(509, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(510, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(511, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(512, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(513, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(514, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(515, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(516, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(517, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(518, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(519, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(520, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(521, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(522, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(523, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(524, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(525, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(526, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(527, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(528, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(529, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(530, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(531, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(532, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(533, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(534, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(535, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(536, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(537, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(538, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(539, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(540, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(541, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(542, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(543, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(544, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(545, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(546, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(547, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(548, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(549, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(550, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(551, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(552, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(553, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(554, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(555, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(556, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(557, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(558, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(559, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(560, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(561, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(562, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(563, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(564, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(565, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(566, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(567, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(568, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(569, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(570, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(571, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(572, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(573, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(574, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(575, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(576, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(577, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(578, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(579, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(580, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(581, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(582, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(583, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(584, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(585, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(586, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(587, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(588, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(589, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(590, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(591, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(592, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(593, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(594, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(595, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(596, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(597, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(598, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(599, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(600, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(601, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(602, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(603, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(604, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(605, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(606, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(607, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(608, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(609, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(610, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(611, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(612, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(613, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(614, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(615, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(616, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(617, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(618, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(619, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(620, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(621, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(622, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(623, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(624, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(625, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(626, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(627, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(628, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(629, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(630, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(631, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(632, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(633, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(634, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(635, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(636, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(637, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(638, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(639, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(640, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(641, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(642, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(643, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(644, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(645, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(646, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(647, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(648, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(649, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(650, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(651, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(652, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(653, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(654, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(655, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(656, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(657, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(658, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(659, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(660, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(661, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(662, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(663, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(664, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(665, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(666, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(667, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(668, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(669, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(670, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(671, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(672, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(673, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(674, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(675, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(676, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(677, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(678, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(679, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(680, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(681, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(682, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(683, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(684, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(685, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(686, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(687, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(688, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(689, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(690, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(691, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(692, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(693, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(694, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(695, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(696, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(697, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(698, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(699, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(700, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(701, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(702, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(703, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(704, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(705, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(706, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(707, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(708, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(709, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(710, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(711, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(712, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(713, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(714, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(715, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(716, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(717, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(718, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(719, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(720, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(721, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(722, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(723, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(724, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(725, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(726, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(727, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(728, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(729, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(730, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(731, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(732, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(733, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(734, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(735, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(736, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(737, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(738, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(739, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(740, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(741, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(742, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(743, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(744, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(745, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(746, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(747, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(748, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(749, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(750, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(751, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(752, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(753, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(754, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(755, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(756, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(757, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(758, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(759, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(760, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(761, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(762, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(763, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(764, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(765, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(766, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(767, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(768, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(769, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(770, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(771, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(772, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(773, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(774, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(775, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(776, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(777, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(778, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(779, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(780, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(781, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(782, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(783, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(784, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(785, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(786, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(787, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(788, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(789, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(790, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(791, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(792, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(793, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(794, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(795, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(796, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(797, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(798, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(799, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(800, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(801, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(802, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(803, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(804, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(805, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(806, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(807, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(808, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(809, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(810, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(811, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(812, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(813, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(814, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(815, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(816, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(817, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(818, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(819, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(820, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(821, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(822, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(823, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(824, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(825, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(826, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(827, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(828, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(829, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(830, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(831, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(832, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(833, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(834, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(835, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(836, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(837, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(838, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(839, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(840, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(841, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(842, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(843, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(844, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(845, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(846, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(847, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(848, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(849, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(850, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(851, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(852, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(853, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(854, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(855, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(856, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(857, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(858, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(859, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(860, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(861, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(862, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(863, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(864, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(865, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(866, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(867, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(868, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(869, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(870, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(871, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(872, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(873, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(874, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(875, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(876, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(877, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(878, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(879, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(880, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(881, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(882, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(883, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(884, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(885, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(886, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(887, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(888, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(889, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(890, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(891, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(892, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(893, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(894, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(895, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(896, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(897, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(898, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(899, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(900, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(901, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(902, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(903, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(904, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(905, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(906, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(907, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(908, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(909, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(910, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(911, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(912, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(913, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(914, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(915, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(916, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(917, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(918, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(919, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(920, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(921, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(922, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(923, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(924, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(925, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(926, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(927, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(928, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(929, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(930, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(931, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(932, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(933, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(934, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(935, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(936, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(937, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(938, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(939, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(940, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(941, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(942, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(943, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(944, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(945, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(946, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(947, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(948, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(949, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(950, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(951, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(952, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(953, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(954, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(955, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(956, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(957, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(958, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(959, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(960, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(961, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(962, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(963, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(964, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(965, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(966, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(967, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(968, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(969, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(970, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(971, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(972, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(973, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(974, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(975, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(976, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(977, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(978, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(979, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(980, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(981, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(982, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(983, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(984, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(985, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(986, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(987, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(988, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(989, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(990, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(991, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(992, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(993, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(994, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(995, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(996, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(997, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(998, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(999, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1000, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1001, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1002, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1003, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1004, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1005, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1006, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1007, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1008, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1009, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1010, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1011, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1012, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1013, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1014, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1015, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1016, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1017, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1018, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1019, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1020, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1021, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1022, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(ids, $mul.ref(0, 1024)), $mul.ref(1023, 1)), 0);
    $M.2 := 0;
    call {:si_unique_call 1636} {:cexpr "disable_vga"} boogie_si_record_i8(0);
    $M.43 := 0;
    call {:si_unique_call 1637} {:cexpr "nointxmask"} boogie_si_record_i8(0);
    $M.1 := 0;
    call {:si_unique_call 1638} {:cexpr "disable_idle_d3"} boogie_si_record_i8(0);
    $M.97 := $store.ref($M.97, vfio_err_handlers, vfio_pci_aer_err_detected);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(vfio_err_handlers, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(vfio_err_handlers, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(vfio_err_handlers, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(vfio_err_handlers, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(vfio_err_handlers, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.98 := $store.ref($M.98, vfio_pci_driver, $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.1);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), vfio_pci_probe);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), vfio_pci_remove);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), vfio_err_handlers);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.98 := $store.i32($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.98 := $store.i32($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.98 := $store.i32($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.98 := $store.i32($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.98 := $store.i32($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.98 := $store.i64($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, driver_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(driver_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(driver_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), driver_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(driver_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.99 := $store.i8($M.99, .str.18, 37);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(1, 1)), 120);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(2, 1)), 58);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(3, 1)), 37);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(4, 1)), 120);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(5, 1)), 58);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(6, 1)), 37);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(7, 1)), 120);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(8, 1)), 58);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(9, 1)), 37);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(10, 1)), 120);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(11, 1)), 58);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(12, 1)), 37);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(13, 1)), 120);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(14, 1)), 58);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(15, 1)), 37);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(16, 1)), 120);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.18, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    call {:si_unique_call 1639} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 431435);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31, assertsPassed, $CurrAddr;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(vfio_pci_set_req_trigger, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(vfio_pci_set_err_trigger, $p0);
    assume {:branchcond $i12} true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(vfio_pci_set_msi_trigger, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(vfio_pci_set_intx_trigger, $p0);
    assume {:branchcond $i10} true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(vfio_pci_set_intx_unmask, $p0);
    assume {:branchcond $i9} true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(vfio_pci_set_intx_mask, $p0);
    assume {:branchcond $i8} true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    call {:si_unique_call 1640} $i1 := vfio_pci_set_intx_mask(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i1;
    return;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 1641} $i2 := vfio_pci_set_intx_unmask(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i2;
    return;

  $bb4:
    assume $i10 == 1;
    call {:si_unique_call 1642} $i3 := vfio_pci_set_intx_trigger(arg, arg1, arg2, arg3, arg4, arg5);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    $r := $i3;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    call {:si_unique_call 1643} $i4 := vfio_pci_set_msi_trigger(arg, arg1, arg2, arg3, arg4, arg5);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    $r := $i4;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    call {:si_unique_call 1644} $i5 := vfio_pci_set_err_trigger(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i5;
    return;

  $bb7:
    assume $i13 == 1;
    call {:si_unique_call 1645} $i6 := vfio_pci_set_req_trigger(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i6;
    return;

  $bb8:
    assume $i14 == 1;
    call {:si_unique_call 1646} $i7 := __builtinx_object_size();
    $r := $i7;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 432467);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 433499);

procedure devirtbounce.2(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1647} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 434531);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref, arg4: i32, arg5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.52, $M.3, $M.53, $CurrAddr;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref, arg4: i32, arg5: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(vfio_basic_config_write, $p0);
    assume {:branchcond $i12} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(vfio_pm_config_write, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(vfio_raw_config_write, $p0);
    assume {:branchcond $i10} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(vfio_default_config_write, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(vfio_msi_config_write, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    call {:si_unique_call 1648} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i8 == 1;
    call {:si_unique_call 1649} $i2 := vfio_msi_config_write(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i2;
    return;

  $bb4:
    assume $i9 == 1;
    call {:si_unique_call 1650} $i3 := vfio_default_config_write(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i3;
    return;

  $bb5:
    assume $i10 == 1;
    call {:si_unique_call 1651} $i4 := vfio_raw_config_write(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i4;
    return;

  $bb6:
    assume $i11 == 1;
    call {:si_unique_call 1652} $i5 := vfio_pm_config_write(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i5;
    return;

  $bb7:
    assume $i12 == 1;
    call {:si_unique_call 1653} $i6 := vfio_basic_config_write(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i6;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 435563);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref, arg4: i32, arg5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.56, $M.53, $CurrAddr;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref, arg4: i32, arg5: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(vfio_basic_config_read, $p0);
    assume {:branchcond $i12} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(vfio_raw_config_read, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(vfio_direct_config_read, $p0);
    assume {:branchcond $i10} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(vfio_default_config_read, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(vfio_msi_config_read, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    call {:si_unique_call 1654} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i8 == 1;
    call {:si_unique_call 1655} $i2 := vfio_msi_config_read(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i2;
    return;

  $bb4:
    assume $i9 == 1;
    call {:si_unique_call 1656} $i3 := vfio_default_config_read(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i3;
    return;

  $bb5:
    assume $i10 == 1;
    call {:si_unique_call 1657} $i4 := vfio_direct_config_read(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i4;
    return;

  $bb6:
    assume $i11 == 1;
    call {:si_unique_call 1658} $i5 := vfio_raw_config_read(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i5;
    return;

  $bb7:
    assume $i12 == 1;
    call {:si_unique_call 1659} $i6 := vfio_basic_config_read(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i6;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: i64;

const $u2: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.30, $M.21, $M.27, $M.24, $M.58, $M.59, $M.60, $M.62, $M.63, $M.64, $M.66, $M.67, $M.68, $M.69, $M.22, $M.25, $M.28, $M.31, $M.70, $M.71, $M.3, $M.0, $M.49, $M.47, $M.72, $M.2, $M.43, $M.1, $M.97, $M.98, $M.99, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1660} __SMACK_static_init();
    call {:si_unique_call 1661} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.57, $M.59, $M.60, $M.62, $M.63, $M.64, $M.66, $M.0, $M.5, $M.6, $M.67, $M.68, $M.69, $M.30, $M.21, $M.27, $M.24, $M.58, $M.22, $M.25, $M.28, $M.31, $M.70, $M.71, $M.3, $M.49, $M.47, $M.72, $M.2, $M.43, $M.1, $M.97, $M.98, $M.99, $CurrAddr, $M.7, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.9, $M.53, $M.35, $M.4, $M.18, $M.73, $M.74, $M.45, $M.52, $M.56, $M.51, $M.50;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation vfio_pci_set_vga_decode_loop_$bb17(in_$p5: ref, in_$i20: i8, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i1, in_$i41: i8, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p24: ref) returns (out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i1, out_$i41: i8, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p24: ref)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p24 := in_$i25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p31, in_$p32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p24;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_177;

  $bb22:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p24 := out_$p28;
    goto $bb22_dummy;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_195;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} out_$p28 := pci_get_class(196608, out_$p24);
    goto corral_source_split_194;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i27 == 1;
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i64(out_$i25, out_$i26);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_180;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb24:
    assume out_$i37 == 1;
    goto corral_source_split_200;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i33, out_$i36);
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} out_$i36 := pci_domain_nr(out_$p35);
    call {:si_unique_call 58} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_191;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_190;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p5, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_189;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} out_$i33 := pci_domain_nr(out_$p32);
    call {:si_unique_call 56} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_188;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_187;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p24, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_186;

  $bb20:
    assume !(out_$i27 == 1);
    goto corral_source_split_185;

  $bb26:
    assume out_$i42 == 1;
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i8.i1(out_$i41);
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i1.i8(out_$i40);
    call {:si_unique_call 61} {:cexpr "tmp___5"} boogie_si_record_i8(out_$i41);
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} out_$i40 := pci_is_root_bus(out_$p39);
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p24, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_203;

  $bb25:
    assume !(out_$i37 == 1);
    goto corral_source_split_202;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb33;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$p61 := out_$p24;
    assume true;
    goto $bb35;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    out_$i60 := $sle.i32(out_$i58, out_$i59);
    goto corral_source_split_230;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i8.i32(in_$i20);
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.0, out_$p56);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 1728)), $mul.ref(216, 1));
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p24, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_224;

  $bb31:
    assume out_$i53 == 1;
    goto corral_source_split_223;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$i53 := $sge.i32(out_$i47, out_$i52);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i8.i32(out_$i51);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i8($M.0, out_$p50);
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 1728)), $mul.ref(216, 1));
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p5, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i46);
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.0, out_$p45);
    goto corral_source_split_214;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 1728)), $mul.ref(216, 1));
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_212;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p24, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_211;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p24 := vfio_pci_set_vga_decode_loop_$bb17(in_$p5, in_$i20, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p24);
    return;

  exit:
    return;
}



procedure vfio_pci_set_vga_decode_loop_$bb17(in_$p5: ref, in_$i20: i8, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i1, in_$i41: i8, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p24: ref) returns (out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i1, out_$i41: i8, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p24: ref);



implementation vfio_pci_ioctl_loop_$bb238(in_$p475: ref, in_$i575: i64, in_$p577: ref, in_$p578: ref, in_$i579: i32, in_$i580: i1, in_$i574: i32) returns (out_$i575: i64, out_$p577: ref, out_$p578: ref, out_$i579: i32, out_$i580: i1, out_$i574: i32)
{

  entry:
    out_$i575, out_$p577, out_$p578, out_$i579, out_$i580, out_$i574 := in_$i575, in_$p577, in_$p578, in_$i579, in_$i580, in_$i574;
    goto $bb238, exit;

  $bb238:
    assume {:verifier.code 0} true;
    goto corral_source_split_1203;

  $bb240:
    assume out_$i580 == 1;
    assume {:verifier.code 0} true;
    out_$i574 := out_$i579;
    goto $bb240_dummy;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$i580 := $sge.i32(out_$i579, 0);
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    out_$i579 := $sub.i32(out_$i574, 1);
    call {:si_unique_call 214} {:cexpr "i"} boogie_si_record_i32(out_$i579);
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vfio_group_put_external_user(out_$p578);
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    out_$p578 := $load.ref($M.0, out_$p577);
    goto corral_source_split_1208;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$p577 := $add.ref($add.ref(in_$p475, $mul.ref(out_$i575, 16)), $mul.ref(0, 1));
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    goto corral_source_split_1206;

  $bb239:
    assume {:verifier.code 0} true;
    out_$i575 := $sext.i32.i64(out_$i574);
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb240_dummy:
    call {:si_unique_call 1} out_$i575, out_$p577, out_$p578, out_$i579, out_$i580, out_$i574 := vfio_pci_ioctl_loop_$bb238(in_$p475, out_$i575, out_$p577, out_$p578, out_$i579, out_$i580, out_$i574);
    return;

  exit:
    return;
}



procedure vfio_pci_ioctl_loop_$bb238(in_$p475: ref, in_$i575: i64, in_$p577: ref, in_$p578: ref, in_$i579: i32, in_$i580: i1, in_$i574: i32) returns (out_$i575: i64, out_$p577: ref, out_$p578: ref, out_$i579: i32, out_$i580: i1, out_$i574: i32);



implementation vfio_pci_ioctl_loop_$bb213(in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p470: ref, in_$p475: ref, in_$p493: ref, in_$i498: i64, in_$p499: ref, in_$i500: i32, in_$p501: ref, in_$p502: ref, in_$p503: ref, in_$p504: ref, in_$p505: ref, in_$i506: i32, in_$p507: ref, in_$p508: ref, in_$p509: ref, in_$p510: ref, in_$p511: ref, in_$p512: ref, in_$i513: i64, in_$i514: i1, in_$i515: i32, in_$p518: ref, in_$p519: ref, in_$p520: ref, in_$p521: ref, in_$p522: ref, in_$p523: ref, in_$p524: ref, in_$i525: i32, in_$p526: ref, in_$i527: i1, in_$i528: i8, in_$i529: i1, in_$i530: i32, in_$p531: ref, in_$i535: i64, in_$p537: ref, in_$i538: i32, in_$i539: i64, in_$p541: ref, in_$i542: i32, in_$i543: i32, in_$i544: i1, in_$i497: i32, in_$i545: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$i498: i64, out_$p499: ref, out_$i500: i32, out_$p501: ref, out_$p502: ref, out_$p503: ref, out_$p504: ref, out_$p505: ref, out_$i506: i32, out_$p507: ref, out_$p508: ref, out_$p509: ref, out_$p510: ref, out_$p511: ref, out_$p512: ref, out_$i513: i64, out_$i514: i1, out_$i515: i32, out_$p518: ref, out_$p519: ref, out_$p520: ref, out_$p521: ref, out_$p522: ref, out_$p523: ref, out_$p524: ref, out_$i525: i32, out_$p526: ref, out_$i527: i1, out_$i528: i8, out_$i529: i1, out_$i530: i32, out_$p531: ref, out_$i535: i64, out_$p537: ref, out_$i538: i32, out_$i539: i64, out_$p541: ref, out_$i542: i32, out_$i543: i32, out_$i544: i1, out_$i497: i32, out_$i545: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8)
{

  entry:
    out_$i498, out_$p499, out_$i500, out_$p501, out_$p502, out_$p503, out_$p504, out_$p505, out_$i506, out_$p507, out_$p508, out_$p509, out_$p510, out_$p511, out_$p512, out_$i513, out_$i514, out_$i515, out_$p518, out_$p519, out_$p520, out_$p521, out_$p522, out_$p523, out_$p524, out_$i525, out_$p526, out_$i527, out_$i528, out_$i529, out_$i530, out_$p531, out_$i535, out_$p537, out_$i538, out_$i539, out_$p541, out_$i542, out_$i543, out_$i544, out_$i497, out_$i545, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := in_$i498, in_$p499, in_$i500, in_$p501, in_$p502, in_$p503, in_$p504, in_$p505, in_$i506, in_$p507, in_$p508, in_$p509, in_$p510, in_$p511, in_$p512, in_$i513, in_$i514, in_$i515, in_$p518, in_$p519, in_$p520, in_$p521, in_$p522, in_$p523, in_$p524, in_$i525, in_$p526, in_$i527, in_$i528, in_$i529, in_$i530, in_$p531, in_$i535, in_$p537, in_$i538, in_$i539, in_$p541, in_$i542, in_$i543, in_$i544, in_$i497, in_$i545, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5;
    goto $bb213, exit;

  $bb213:
    assume {:verifier.code 0} true;
    goto corral_source_split_1097;

  $bb222:
    assume out_$i544 == 1;
    assume {:verifier.code 0} true;
    out_$i497 := out_$i542;
    goto $bb222_dummy;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    out_$i545 := out_$i542;
    assume true;
    goto $bb222;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    out_$i544 := $ult.i32(out_$i542, out_$i543);
    goto corral_source_split_1158;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$i543 := $load.i32($M.0, in_$p493);
    goto corral_source_split_1157;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$i542 := $add.i32(out_$i497, 1);
    call {:si_unique_call 205} {:cexpr "i"} boogie_si_record_i32(out_$i542);
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p541, out_$i538);
    goto corral_source_split_1155;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    out_$p541 := $add.ref($add.ref(in_$p475, $mul.ref(out_$i539, 16)), $mul.ref(8, 1));
    goto corral_source_split_1154;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto corral_source_split_1153;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$i539 := $sext.i32.i64(out_$i497);
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} out_$i538 := vfio_external_user_iommu_id(out_$p520);
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p537, out_$p520);
    goto corral_source_split_1150;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$p537 := $add.ref($add.ref(in_$p475, $mul.ref(out_$i535, 16)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto corral_source_split_1148;

  $bb221:
    assume {:verifier.code 0} true;
    out_$i535 := $sext.i32.i64(out_$i497);
    goto corral_source_split_1147;

  $bb220:
    assume !(out_$i529 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    out_$i530, out_$p531 := out_$i497, out_$p520;
    assume true;
    goto $bb220;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    out_$i529 := $trunc.i8.i1(out_$i528);
    goto corral_source_split_1140;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    out_$i528 := $zext.i1.i8(out_$i527);
    call {:si_unique_call 200} {:cexpr "tmp___29"} boogie_si_record_i8(out_$i528);
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} out_$i527 := IS_ERR(out_$p526);
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    out_$p526 := $bitcast.ref.ref(out_$p520);
    goto corral_source_split_1137;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} fdput(out_$p523, out_$i525);
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    out_$i525 := $load.i32($M.5, out_$p524);
    goto corral_source_split_1135;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    out_$p524 := $add.ref($add.ref(out_$p521, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    out_$p523 := $load.ref($M.5, out_$p522);
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    out_$p522 := $add.ref($add.ref(out_$p521, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$p521 := $bitcast.ref.ref(in_$p13);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} out_$p520 := vfio_group_get_external_user(out_$p519);
    goto corral_source_split_1130;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    out_$p519 := $load.ref($M.5, out_$p518);
    goto corral_source_split_1129;

  $bb218:
    assume {:verifier.code 0} true;
    out_$p518 := $add.ref($add.ref(in_$p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1128;

  $bb216:
    assume !(out_$i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    out_$i515 := out_$i497;
    assume true;
    goto $bb216;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    out_$i514 := $eq.i64(out_$i513, 0);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$i513 := $p2i.ref.i64(out_$p512);
    goto corral_source_split_1118;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    out_$p512 := $load.ref($M.5, out_$p511);
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    out_$p511 := $add.ref($add.ref(in_$p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1116;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.5;
    out_cmdloc_dummy_var_4 := $M.5;
    call {:si_unique_call 195} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p509, out_$p510, 16, $zext.i32.i64(8), 0 == 1);
    $M.5 := out_cmdloc_dummy_var_5;
    goto corral_source_split_1115;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    out_$p510 := $bitcast.ref.ref(in_$p14);
    goto corral_source_split_1114;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    out_$p509 := $bitcast.ref.ref(in_$p13);
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.5;
    out_cmdloc_dummy_var_1 := $M.5;
    call {:si_unique_call 194} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p507, out_$p508, 16, $zext.i32.i64(8), 0 == 1);
    $M.5 := out_cmdloc_dummy_var_2;
    goto corral_source_split_1112;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$p508 := $bitcast.ref.ref(in_$p15);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$p507 := $bitcast.ref.ref(in_$p14);
    goto corral_source_split_1110;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, out_$p505, out_$i506);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$i506 := $extractvalue(out_$p501, 1);
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    out_$p505 := $add.ref($add.ref(out_$p502, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p503, out_$p504);
    goto corral_source_split_1106;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$p504 := $extractvalue(out_$p501, 0);
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$p503 := $add.ref($add.ref(out_$p502, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$p502 := $bitcast.ref.ref(in_$p15);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} out_$p501 := fdget(out_$i500);
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$i500 := $load.i32($M.0, out_$p499);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$p499 := $add.ref(in_$p470, $mul.ref(out_$i498, 4));
    goto corral_source_split_1100;

  $bb214:
    assume {:verifier.code 0} true;
    out_$i498 := $sext.i32.i64(out_$i497);
    goto corral_source_split_1099;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb222_dummy:
    call {:si_unique_call 1} out_$i498, out_$p499, out_$i500, out_$p501, out_$p502, out_$p503, out_$p504, out_$p505, out_$i506, out_$p507, out_$p508, out_$p509, out_$p510, out_$p511, out_$p512, out_$i513, out_$i514, out_$i515, out_$p518, out_$p519, out_$p520, out_$p521, out_$p522, out_$p523, out_$p524, out_$i525, out_$p526, out_$i527, out_$i528, out_$i529, out_$i530, out_$p531, out_$i535, out_$p537, out_$i538, out_$i539, out_$p541, out_$i542, out_$i543, out_$i544, out_$i497, out_$i545, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := vfio_pci_ioctl_loop_$bb213(in_$p13, in_$p14, in_$p15, in_$p470, in_$p475, in_$p493, out_$i498, out_$p499, out_$i500, out_$p501, out_$p502, out_$p503, out_$p504, out_$p505, out_$i506, out_$p507, out_$p508, out_$p509, out_$p510, out_$p511, out_$p512, out_$i513, out_$i514, out_$i515, out_$p518, out_$p519, out_$p520, out_$p521, out_$p522, out_$p523, out_$p524, out_$i525, out_$p526, out_$i527, out_$i528, out_$i529, out_$i530, out_$p531, out_$i535, out_$p537, out_$i538, out_$i539, out_$p541, out_$i542, out_$i543, out_$i544, out_$i497, out_$i545, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5);
    return;

  exit:
    return;
}



procedure vfio_pci_ioctl_loop_$bb213(in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p470: ref, in_$p475: ref, in_$p493: ref, in_$i498: i64, in_$p499: ref, in_$i500: i32, in_$p501: ref, in_$p502: ref, in_$p503: ref, in_$p504: ref, in_$p505: ref, in_$i506: i32, in_$p507: ref, in_$p508: ref, in_$p509: ref, in_$p510: ref, in_$p511: ref, in_$p512: ref, in_$i513: i64, in_$i514: i1, in_$i515: i32, in_$p518: ref, in_$p519: ref, in_$p520: ref, in_$p521: ref, in_$p522: ref, in_$p523: ref, in_$p524: ref, in_$i525: i32, in_$p526: ref, in_$i527: i1, in_$i528: i8, in_$i529: i1, in_$i530: i32, in_$p531: ref, in_$i535: i64, in_$p537: ref, in_$i538: i32, in_$i539: i64, in_$p541: ref, in_$i542: i32, in_$i543: i32, in_$i544: i1, in_$i497: i32, in_$i545: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$i498: i64, out_$p499: ref, out_$i500: i32, out_$p501: ref, out_$p502: ref, out_$p503: ref, out_$p504: ref, out_$p505: ref, out_$i506: i32, out_$p507: ref, out_$p508: ref, out_$p509: ref, out_$p510: ref, out_$p511: ref, out_$p512: ref, out_$i513: i64, out_$i514: i1, out_$i515: i32, out_$p518: ref, out_$p519: ref, out_$p520: ref, out_$p521: ref, out_$p522: ref, out_$p523: ref, out_$p524: ref, out_$i525: i32, out_$p526: ref, out_$i527: i1, out_$i528: i8, out_$i529: i1, out_$i530: i32, out_$p531: ref, out_$i535: i64, out_$p537: ref, out_$i538: i32, out_$i539: i64, out_$p541: ref, out_$i542: i32, out_$i543: i32, out_$i544: i1, out_$i497: i32, out_$i545: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8);
  modifies $M.0, $M.16, $M.17, $CurrAddr, $M.5, $M.15, $M.18;



implementation vfio_pci_set_msi_trigger_loop_$bb42(in_$p0: ref, in_$i2: i32, in_$i4: i32, in_$p5: ref, in_$i51: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$p75: ref, in_$i76: i8, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$i86: i32, in_$i87: i1, in_$i53: i32, in_vslice_dummy_var_72: i64, in_vslice_dummy_var_73: i64) returns (out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$p75: ref, out_$i76: i8, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$i86: i32, out_$i87: i1, out_$i53: i32, out_vslice_dummy_var_72: i64, out_vslice_dummy_var_73: i64)
{

  entry:
    out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$p83, out_$p84, out_$i86, out_$i87, out_$i53, out_vslice_dummy_var_72, out_vslice_dummy_var_73 := in_$p54, in_$p55, in_$i56, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$p68, in_$p69, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$p79, in_$p80, in_$i81, in_$p83, in_$p84, in_$i86, in_$i87, in_$i53, in_vslice_dummy_var_72, in_vslice_dummy_var_73;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2053;

  $bb57:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i53 := out_$i86;
    goto $bb57_dummy;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$i87 := $ult.i32(out_$i86, in_$i51);
    goto corral_source_split_2067;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i53, 1);
    call {:si_unique_call 394} {:cexpr "i"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_2066;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i61 == 1;
    goto corral_source_split_2064;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i64(out_$i60, 0);
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p55, $mul.ref(out_$i56, 40)), $mul.ref(0, 1));
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i53);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_2056;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} out_vslice_dummy_var_72 := eventfd_signal(out_$p69, 1);
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p65, $mul.ref(out_$i66, 40)), $mul.ref(0, 1));
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    goto corral_source_split_2076;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i53);
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_2074;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2073;

  $bb48:
    assume out_$i63 == 1;
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_2070;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i62 := $and.i32(in_$i4, 1);
    goto corral_source_split_2069;

  $bb45:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb52:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_vslice_dummy_var_73 := eventfd_signal(out_$p84, 1);
    goto corral_source_split_2100;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_2099;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i81, 40)), $mul.ref(0, 1));
    goto corral_source_split_2098;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i53);
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2094;

  $bb53:
    assume out_$i78 == 1;
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 0);
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i76);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i8($M.0, out_$p75);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(in_$p5, $mul.ref(out_$i74, 1));
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i32.i64(out_$i73);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i53, in_$i2);
    goto corral_source_split_2086;

  $bb51:
    assume out_$i72 == 1;
    goto corral_source_split_2085;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_2083;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    out_$i71 := $and.i32(in_$i4, 2);
    goto corral_source_split_2082;

  $bb49:
    assume !(out_$i63 == 1);
    goto corral_source_split_2081;

  $bb57_dummy:
    call {:si_unique_call 1} out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$p83, out_$p84, out_$i86, out_$i87, out_$i53, out_vslice_dummy_var_72, out_vslice_dummy_var_73 := vfio_pci_set_msi_trigger_loop_$bb42(in_$p0, in_$i2, in_$i4, in_$p5, in_$i51, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$p83, out_$p84, out_$i86, out_$i87, out_$i53, out_vslice_dummy_var_72, out_vslice_dummy_var_73);
    return;

  exit:
    return;
}



procedure vfio_pci_set_msi_trigger_loop_$bb42(in_$p0: ref, in_$i2: i32, in_$i4: i32, in_$p5: ref, in_$i51: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$p75: ref, in_$i76: i8, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$i86: i32, in_$i87: i1, in_$i53: i32, in_vslice_dummy_var_72: i64, in_vslice_dummy_var_73: i64) returns (out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$p75: ref, out_$i76: i8, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$i86: i32, out_$i87: i1, out_$i53: i32, out_vslice_dummy_var_72: i64, out_vslice_dummy_var_73: i64);



implementation vfio_msi_disable_loop_$bb4(in_$p0: ref, in_$p9: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i12: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i12 := in_$p13, in_$p14, in_$i15, in_$p17, in_$p18, in_$p19, in_$i20, in_$p22, in_$i23, in_$i24, in_$i25, in_$i12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2227;

  $bb6:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i23;
    goto $bb6_dummy;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, out_$i23);
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, in_$p9);
    goto corral_source_split_2242;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i12, 1);
    call {:si_unique_call 427} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vfio_virqfd_disable(out_$p22);
    goto corral_source_split_2240;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 40)), $mul.ref(16, 1));
    goto corral_source_split_2239;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    goto corral_source_split_2238;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i12);
    goto corral_source_split_2237;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2236;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vfio_virqfd_disable(out_$p17);
    goto corral_source_split_2234;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(8, 1));
    goto corral_source_split_2233;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto corral_source_split_2232;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i12);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_2230;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i12 := vfio_msi_disable_loop_$bb4(in_$p0, in_$p9, out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i12);
    return;

  exit:
    return;
}



procedure vfio_msi_disable_loop_$bb4(in_$p0: ref, in_$p9: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i12: i32);



implementation vfio_msi_set_block_loop_$bb21(in_$p0: ref, in_$i1: i32, in_$i5: i8, in_$i35: i1, in_$i37: i32, in_$i38: i1, in_$i34: i32, in_vslice_dummy_var_77: i32) returns (out_$i35: i1, out_$i37: i32, out_$i38: i1, out_$i34: i32, out_vslice_dummy_var_77: i32)
{

  entry:
    out_$i35, out_$i37, out_$i38, out_$i34, out_vslice_dummy_var_77 := in_$i35, in_$i37, in_$i38, in_$i34, in_vslice_dummy_var_77;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2315;

  $bb23:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i37;
    goto $bb23_dummy;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$i38 := $uge.i32(out_$i37, in_$i1);
    goto corral_source_split_2320;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i34, 1);
    call {:si_unique_call 442} {:cexpr "j"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_2319;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} out_vslice_dummy_var_77 := vfio_msi_set_vector_signal(in_$p0, out_$i34, $sub.i32(0, 1), out_$i35);
    goto corral_source_split_2318;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i8.i1(in_$i5);
    goto corral_source_split_2317;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i35, out_$i37, out_$i38, out_$i34, out_vslice_dummy_var_77 := vfio_msi_set_block_loop_$bb21(in_$p0, in_$i1, in_$i5, out_$i35, out_$i37, out_$i38, out_$i34, out_vslice_dummy_var_77);
    return;

  exit:
    return;
}



procedure vfio_msi_set_block_loop_$bb21(in_$p0: ref, in_$i1: i32, in_$i5: i8, in_$i35: i1, in_$i37: i32, in_$i38: i1, in_$i34: i32, in_vslice_dummy_var_77: i32) returns (out_$i35: i1, out_$i37: i32, out_$i38: i1, out_$i34: i32, out_vslice_dummy_var_77: i32);
  modifies $M.0, $CurrAddr, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31;



implementation vfio_msi_set_block_loop_$bb8(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i5: i8, in_$i16: i64, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i14: i32, in_$i15: i32, in_$i29: i32, in_$i30: i32) returns (out_$i16: i64, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i14: i32, out_$i15: i32, out_$i29: i32, out_$i30: i32)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i14, out_$i15, out_$i29, out_$i30 := in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i14, in_$i15, in_$i29, in_$i30;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2284;

  $bb13:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i25, out_$i24;
    goto $bb13_dummy;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    out_$i29, out_$i30 := out_$i25, out_$i23;
    assume true;
    goto $bb13;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i1(out_$i26, out_$i27);
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i23, 0);
    goto corral_source_split_2302;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i32(out_$i24, in_$i2);
    goto corral_source_split_2301;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i14, 1);
    call {:si_unique_call 439} {:cexpr "j"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_2300;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i15, 1);
    call {:si_unique_call 438} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2299;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} out_$i23 := vfio_msi_set_vector_signal(in_$p0, out_$i14, out_$i21, out_$i22);
    call {:si_unique_call 437} {:cexpr "ret"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i8.i1(in_$i5);
    goto corral_source_split_2297;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2296;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(0, 1);
    goto $bb12;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i20;
    goto $bb12;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_2292;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p3, $mul.ref(out_$i18, 4));
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i15);
    goto corral_source_split_2290;

  $bb10:
    assume out_$i17 == 1;
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_2287;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_2286;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume !(out_$i17 == 1);
    goto corral_source_split_2294;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i14, out_$i15, out_$i29, out_$i30 := vfio_msi_set_block_loop_$bb8(in_$p0, in_$i2, in_$p3, in_$i5, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i14, out_$i15, out_$i29, out_$i30);
    return;

  exit:
    return;
}



procedure vfio_msi_set_block_loop_$bb8(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i5: i8, in_$i16: i64, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i14: i32, in_$i15: i32, in_$i29: i32, in_$i30: i32) returns (out_$i16: i64, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i14: i32, out_$i15: i32, out_$i29: i32, out_$i30: i32);
  modifies $M.0, $CurrAddr, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31;



implementation vfio_msi_enable_loop_$bb21(in_$p0: ref, in_$i1: i32, in_$i40: i16, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i39: i32) returns (out_$i40: i16, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i39: i32)
{

  entry:
    out_$i40, out_$p41, out_$p42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i39 := in_$i40, in_$p41, in_$p42, in_$i43, in_$p45, in_$i46, in_$i47, in_$i39;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2384;

  $bb23:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i46;
    goto $bb23_dummy;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i46, in_$i1);
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i39, 1);
    call {:si_unique_call 450} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p45, out_$i40);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p42, $mul.ref(out_$i43, 8)), $mul.ref(4, 1));
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i39);
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(312, 1));
    goto corral_source_split_2387;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i32.i16(out_$i39);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i40, out_$p41, out_$p42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i39 := vfio_msi_enable_loop_$bb21(in_$p0, in_$i1, out_$i40, out_$p41, out_$p42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i39);
    return;

  exit:
    return;
}



procedure vfio_msi_enable_loop_$bb21(in_$p0: ref, in_$i1: i32, in_$i40: i16, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i39: i32) returns (out_$i40: i16, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i39: i32);
  modifies $M.0;



implementation vfio_pci_config_rw_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i6: i8, in_$i15: i1, in_$i16: i64, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i32: i64) returns (out_$i15: i1, out_$i16: i64, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i32: i64)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p12, out_$i13, out_$i14, out_$i32 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p12, in_$i13, in_$i14, in_$i32;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3224;

  $bb10:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$i13, out_$i14 := out_$p27, out_$i23, out_$i25;
    goto $bb10_dummy;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i25;
    assume true;
    goto $bb10;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i23, 0);
    goto corral_source_split_3246;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, in_$p5, out_$i30);
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i28, out_$i29);
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.35, in_$p5);
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3242;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p12, $mul.ref(out_$i26, 1));
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3240;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i64(out_$i24, out_$i14);
    call {:si_unique_call 644} {:cexpr "done"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3238;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    out_$i23 := $sub.i64(out_$i13, out_$i22);
    call {:si_unique_call 643} {:cexpr "count"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_3237;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3236;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i17;
    assume true;
    goto $bb7;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i17, 0);
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i64.i32(out_$i16);
    call {:si_unique_call 642} {:cexpr "ret"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} out_$i16 := vfio_config_do_rw(in_$p0, out_$p12, out_$i13, in_$p5, out_$i15);
    call {:si_unique_call 641} {:cexpr "tmp"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_3227;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i8.i1(in_$i6);
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p12, out_$i13, out_$i14, out_$i32 := vfio_pci_config_rw_loop_$bb4(in_$p0, in_$p5, in_$i6, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p12, out_$i13, out_$i14, out_$i32);
    return;

  exit:
    return;
}



procedure vfio_pci_config_rw_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i6: i8, in_$i15: i1, in_$i16: i64, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i32: i64) returns (out_$i15: i1, out_$i16: i64, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i32: i64);
  modifies $M.35, $M.0, $M.52, $M.3, $M.56, $M.53, $CurrAddr;



implementation do_io_rw_loop_$bb66(in_$p10: ref, in_$i82: i64, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$i90: i64, in_$i91: i1, in_$i86: i64, in_$p14: ref) returns (out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$i90: i64, out_$i91: i1, out_$i86: i64)
{

  entry:
    out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i86 := in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i86;
    goto $bb66, exit;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_3627;

  $bb71:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := out_$i90;
    goto $bb71_dummy;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$i91 := $ult.i64(out_$i90, in_$i82);
    goto corral_source_split_3636;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i64(out_$i86, 1);
    call {:si_unique_call 730} {:cexpr "i"} boogie_si_record_i64(out_$i90);
    goto corral_source_split_3635;

  $bb69:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i64(out_$i88, 0);
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} out_$i88 := copy_to_user(out_$p87, in_$p10, 1);
    call {:si_unique_call 729} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i88);
    goto corral_source_split_3630;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(in_$p14, $mul.ref(out_$i86, 1));
    goto corral_source_split_3629;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb71_dummy:
    call {:si_unique_call 1} out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i86 := do_io_rw_loop_$bb66(in_$p10, in_$i82, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i86, in_$p14);
    return;

  exit:
    return;
}



procedure do_io_rw_loop_$bb66(in_$p10: ref, in_$i82: i64, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$i90: i64, in_$i91: i1, in_$i86: i64, in_$p14: ref) returns (out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$i90: i64, out_$i91: i1, out_$i86: i64);



implementation do_io_rw_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$i5: i64, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i8, in_$i18: i1, in_$i19: i64, in_$i20: i1, in_$i21: i64, in_$i23: i1, in_$i24: i64, in_$i22: i64, in_$i25: i1, in_$i26: i64, in_$i27: i1, in_$i28: i1, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i44: i1, in_$i45: i64, in_$i46: i1, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i16, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i65: i1, in_$i66: i1, in_$i67: i64, in_$i68: i1, in_$i69: i8, in_$i70: i32, in_$i71: i8, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i8, in_$i76: i64, in_$i77: i1, in_$i80: i64, in_$i81: i1, in_$i82: i64, in_$i83: i1, in_$i84: i1, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$i90: i64, in_$i91: i1, in_$i86: i64, in_$p85: ref, in_$p92: ref, in_$p78: ref, in_$i79: i64, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$i64: i64, in_$p40: ref, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i93: i64, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$i97: i1, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i64, in_$i98: i64) returns (out_$i18: i1, out_$i19: i64, out_$i20: i1, out_$i21: i64, out_$i23: i1, out_$i24: i64, out_$i22: i64, out_$i25: i1, out_$i26: i64, out_$i27: i1, out_$i28: i1, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i44: i1, out_$i45: i64, out_$i46: i1, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i16, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i65: i1, out_$i66: i1, out_$i67: i64, out_$i68: i1, out_$i69: i8, out_$i70: i32, out_$i71: i8, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i8, out_$i76: i64, out_$i77: i1, out_$i80: i64, out_$i81: i1, out_$i82: i64, out_$i83: i1, out_$i84: i1, out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$i90: i64, out_$i91: i1, out_$i86: i64, out_$p85: ref, out_$p92: ref, out_$p78: ref, out_$i79: i64, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$i64: i64, out_$p40: ref, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i93: i64, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$i97: i1, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i64, out_$i98: i64)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i22, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i33, out_$p34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i86, out_$p85, out_$p92, out_$p78, out_$i79, out_$p61, out_$i62, out_$i63, out_$i64, out_$p40, out_$i41, out_$i42, out_$i43, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$p14, out_$i15, out_$i16, out_$i17, out_$i98 := in_$i18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i22, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i33, in_$p34, in_$p35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i86, in_$p85, in_$p92, in_$p78, in_$i79, in_$p61, in_$i62, in_$i63, in_$i64, in_$p40, in_$i41, in_$i42, in_$i43, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$p14, in_$i15, in_$i16, in_$i17, in_$i98;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3491;

  $bb75:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$i15, out_$i16, out_$i17 := out_$p96, out_$i95, out_$i93, out_$i94;
    goto $bb75_dummy;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$i98 := out_$i94;
    assume true;
    goto $bb75;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i64(out_$i93, 0);
    goto corral_source_split_3550;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p40, $mul.ref(out_$i43, 1));
    goto corral_source_split_3549;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i64(out_$i41, out_$i43);
    call {:si_unique_call 712} {:cexpr "off"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_3548;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i64(out_$i17, out_$i43);
    call {:si_unique_call 711} {:cexpr "done"} boogie_si_record_i64(out_$i94);
    goto corral_source_split_3547;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    out_$i93 := $sub.i64(out_$i42, out_$i43);
    call {:si_unique_call 710} {:cexpr "count"} boogie_si_record_i64(out_$i93);
    goto corral_source_split_3546;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3545;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p40, out_$i41, out_$i42, out_$i43 := out_$p61, out_$i62, out_$i63, out_$i64;
    goto $bb30;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p40, out_$i41, out_$i42, out_$i43 := out_$p14, out_$i15, out_$i16, 4;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} iowrite32(out_$i33, out_$p34);
    goto corral_source_split_3541;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(in_$p0, $mul.ref(out_$i15, 1));
    goto corral_source_split_3540;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, in_$p7);
    goto corral_source_split_3539;

  $bb23:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_3525;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} out_$i30 := copy_from_user(out_$p29, out_$p14, 4);
    call {:si_unique_call 705} {:cexpr "tmp"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_3524;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_3523;

  $bb20:
    assume out_$i28 == 1;
    goto corral_source_split_3522;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i8.i1(in_$i11);
    goto corral_source_split_3520;

  $bb18:
    assume out_$i27 == 1;
    goto corral_source_split_3519;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i64(out_$i26, 0);
    goto corral_source_split_3515;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i64(out_$i15, 3);
    goto corral_source_split_3514;

  $bb15:
    assume out_$i25 == 1;
    goto corral_source_split_3513;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    out_$i25 := $ugt.i64(out_$i22, 3);
    goto corral_source_split_3509;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3508;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i24;
    goto $bb11;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i21;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3506;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    goto $bb10;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i16;
    goto $bb10;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_3502;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i64(out_$i16, out_$i19);
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    out_$i19 := $sub.i64(in_$i4, out_$i15);
    call {:si_unique_call 703} {:cexpr "_min2"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_3496;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_3495;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i18 := $ult.i64(out_$i15, in_$i4);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9:
    assume !(out_$i20 == 1);
    goto corral_source_split_3504;

  $bb13:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := 0;
    goto $bb14;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i16;
    goto $bb14;

  $bb12:
    assume out_$i23 == 1;
    goto corral_source_split_3511;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    out_$i23 := $uge.i64(out_$i15, in_$i5);
    goto corral_source_split_3500;

  $bb7:
    assume !(out_$i18 == 1);
    goto corral_source_split_3499;

  $bb28:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_3533;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} out_$i38 := copy_to_user(out_$p14, out_$p37, 4);
    call {:si_unique_call 708} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_3532;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_3531;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p7, out_$i36);
    goto corral_source_split_3530;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} out_$i36 := ioread32(out_$p35);
    goto corral_source_split_3529;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(in_$p0, $mul.ref(out_$i15, 1));
    goto corral_source_split_3528;

  $bb21:
    assume !(out_$i28 == 1);
    goto corral_source_split_3527;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p61, out_$i62, out_$i63, out_$i64 := out_$p78, out_$i15, out_$i16, out_$i79;
    goto $bb45;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p61, out_$i62, out_$i63, out_$i64 := out_$p14, out_$i15, out_$i16, 2;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} iowrite16(out_$i53, out_$p54);
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(in_$p0, $mul.ref(out_$i15, 1));
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i32.i16(out_$i52);
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i51);
    goto corral_source_split_3578;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i16($M.0, in_$p8);
    goto corral_source_split_3577;

  $bb39:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, 0);
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} out_$i49 := copy_from_user(out_$p48, out_$p14, 2);
    call {:si_unique_call 714} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_3563;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_3562;

  $bb36:
    assume out_$i47 == 1;
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i8.i1(in_$i11);
    goto corral_source_split_3559;

  $bb34:
    assume out_$i46 == 1;
    goto corral_source_split_3558;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i64(out_$i45, 0);
    goto corral_source_split_3554;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i64(out_$i15, 1);
    goto corral_source_split_3553;

  $bb31:
    assume out_$i44 == 1;
    goto corral_source_split_3552;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i44 := $ugt.i64(out_$i22, 1);
    goto corral_source_split_3517;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb17;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb17;

  $bb43:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_3573;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} out_$i59 := copy_to_user(out_$p14, out_$p58, 2);
    call {:si_unique_call 718} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_3571;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, in_$p8, out_$i57);
    goto corral_source_split_3570;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i32.i16(out_$i56);
    goto corral_source_split_3569;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} out_$i56 := ioread16(out_$p55);
    call {:si_unique_call 716} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(in_$p0, $mul.ref(out_$i15, 1));
    goto corral_source_split_3567;

  $bb37:
    assume !(out_$i47 == 1);
    goto corral_source_split_3566;

  $bb74:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p78, out_$i79 := out_$p92, out_$i82;
    goto $bb57;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p78, out_$i79 := out_$p14, 1;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} iowrite8(out_$i71, out_$p72);
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(in_$p0, $mul.ref(out_$i15, 1));
    goto corral_source_split_3609;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$i71 := $trunc.i32.i8(out_$i70);
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(out_$i69);
    goto corral_source_split_3607;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.0, in_$p9);
    goto corral_source_split_3606;

  $bb51:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i64(out_$i67, 0);
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} out_$i67 := copy_from_user(in_$p9, out_$p14, 1);
    call {:si_unique_call 722} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_3593;

  $bb48:
    assume out_$i66 == 1;
    goto corral_source_split_3592;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i8.i1(in_$i11);
    goto corral_source_split_3586;

  $bb46:
    assume out_$i65 == 1;
    goto corral_source_split_3585;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i22, 0);
    goto corral_source_split_3556;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb33;

  $bb55:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, 0);
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} out_$i76 := copy_to_user(out_$p14, in_$p9, 1);
    call {:si_unique_call 726} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, in_$p9, out_$i75);
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i75 := $trunc.i32.i8(out_$i74);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} out_$i74 := ioread8(out_$p73);
    call {:si_unique_call 724} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(in_$p0, $mul.ref(out_$i15, 1));
    goto corral_source_split_3597;

  $bb49:
    assume !(out_$i66 == 1);
    goto corral_source_split_3596;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p92 := out_$p85;
    goto $bb74;

  $bb61:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$p92 := out_$p14;
    goto $bb74;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i8.i1(in_$i11);
    goto corral_source_split_3619;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i80;
    goto $bb60;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i16;
    goto $bb60;

  $bb58:
    assume out_$i81 == 1;
    goto corral_source_split_3614;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$i81 := $ult.i64(out_$i16, out_$i80);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$i80 := $sub.i64(in_$i5, out_$i15);
    call {:si_unique_call 720} {:cexpr "_min2___0"} boogie_si_record_i64(out_$i80);
    goto corral_source_split_3589;

  $bb47:
    assume !(out_$i65 == 1);
    goto corral_source_split_3588;

  $bb59:
    assume !(out_$i81 == 1);
    goto corral_source_split_3616;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb65;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$p85 := out_$p14;
    goto $bb65;

  $bb72:
    assume !(out_$i91 == 1);
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$i91 := $ult.i64(out_$i90, out_$i82);
    goto corral_source_split_3636;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i64(out_$i86, 1);
    call {:si_unique_call 730} {:cexpr "i"} boogie_si_record_i64(out_$i90);
    goto corral_source_split_3635;

  $bb69:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i64(out_$i88, 0);
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} out_$i88 := copy_to_user(out_$p87, in_$p10, 1);
    call {:si_unique_call 729} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i88);
    goto corral_source_split_3630;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(out_$p14, $mul.ref(out_$i86, 1));
    goto corral_source_split_3629;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb66:
    call out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i86 := do_io_rw_loop_$bb66(in_$p10, out_$i82, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i86, out_$p14);
    goto $bb66_last;

  $bb66_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3627;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$i86 := 0;
    goto $bb66;

  $bb71:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := out_$i90;
    assume false;
    return;

  $bb63:
    assume out_$i84 == 1;
    goto corral_source_split_3625;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    out_$p85 := out_$p14;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    out_$i84 := $ult.i64(0, out_$i82);
    goto corral_source_split_3623;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, in_$p10, $sub.i8(0, 1));
    goto corral_source_split_3622;

  $bb62:
    assume !(out_$i83 == 1);
    goto corral_source_split_3621;

  $bb75_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i22, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i33, out_$p34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i86, out_$p85, out_$p92, out_$p78, out_$i79, out_$p61, out_$i62, out_$i63, out_$i64, out_$p40, out_$i41, out_$i42, out_$i43, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$p14, out_$i15, out_$i16, out_$i17, out_$i98 := do_io_rw_loop_$bb4(in_$p0, in_$i4, in_$i5, in_$p7, in_$p8, in_$p9, in_$p10, in_$i11, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i22, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i33, out_$p34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i86, out_$p85, out_$p92, out_$p78, out_$i79, out_$p61, out_$i62, out_$i63, out_$i64, out_$p40, out_$i41, out_$i42, out_$i43, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$p14, out_$i15, out_$i16, out_$i17, out_$i98);
    return;

  exit:
    return;
}



procedure do_io_rw_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$i5: i64, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i8, in_$i18: i1, in_$i19: i64, in_$i20: i1, in_$i21: i64, in_$i23: i1, in_$i24: i64, in_$i22: i64, in_$i25: i1, in_$i26: i64, in_$i27: i1, in_$i28: i1, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i44: i1, in_$i45: i64, in_$i46: i1, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i16, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i65: i1, in_$i66: i1, in_$i67: i64, in_$i68: i1, in_$i69: i8, in_$i70: i32, in_$i71: i8, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i8, in_$i76: i64, in_$i77: i1, in_$i80: i64, in_$i81: i1, in_$i82: i64, in_$i83: i1, in_$i84: i1, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$i90: i64, in_$i91: i1, in_$i86: i64, in_$p85: ref, in_$p92: ref, in_$p78: ref, in_$i79: i64, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$i64: i64, in_$p40: ref, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i93: i64, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$i97: i1, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i64, in_$i98: i64) returns (out_$i18: i1, out_$i19: i64, out_$i20: i1, out_$i21: i64, out_$i23: i1, out_$i24: i64, out_$i22: i64, out_$i25: i1, out_$i26: i64, out_$i27: i1, out_$i28: i1, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i44: i1, out_$i45: i64, out_$i46: i1, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i16, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i65: i1, out_$i66: i1, out_$i67: i64, out_$i68: i1, out_$i69: i8, out_$i70: i32, out_$i71: i8, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i8, out_$i76: i64, out_$i77: i1, out_$i80: i64, out_$i81: i1, out_$i82: i64, out_$i83: i1, out_$i84: i1, out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$i90: i64, out_$i91: i1, out_$i86: i64, out_$p85: ref, out_$p92: ref, out_$p78: ref, out_$i79: i64, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$i64: i64, out_$p40: ref, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i93: i64, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$i97: i1, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i64, out_$i98: i64);
  modifies $M.0;



implementation vfio_pci_cap_remaining_dword_loop_$bb4(in_$i1: i64, in_$i5: i8, in_$p6: ref, in_$i12: i64, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$i11: i64, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i64, in_$i16: i64) returns (out_$i12: i64, out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$i11: i64, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i64, out_$i16: i64)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$i15, out_$i11, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i16 := in_$i12, in_$i13, in_$i14, in_$i15, in_$i11, in_$p17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3892;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i12;
    goto $bb6_dummy;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i12;
    assume true;
    goto $bb6;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    out_$i14 := $and.i64(out_$i13, 3);
    goto corral_source_split_3903;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(in_$i1, out_$i12);
    goto corral_source_split_3902;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i64(out_$i11, 1);
    call {:si_unique_call 791} {:cexpr "i"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_3901;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i23 == 1;
    goto corral_source_split_3908;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i11;
    assume true;
    goto $bb8;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i21, out_$i22);
    goto corral_source_split_3899;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i32(in_$i5);
    goto corral_source_split_3898;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_3897;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.0, out_$p19);
    goto corral_source_split_3896;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 1));
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(in_$i1, out_$i11);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3893;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$i15, out_$i11, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i16 := vfio_pci_cap_remaining_dword_loop_$bb4(in_$i1, in_$i5, in_$p6, out_$i12, out_$i13, out_$i14, out_$i15, out_$i11, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i16);
    return;

  exit:
    return;
}



procedure vfio_pci_cap_remaining_dword_loop_$bb4(in_$i1: i64, in_$i5: i8, in_$p6: ref, in_$i12: i64, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$i11: i64, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i64, in_$i16: i64) returns (out_$i12: i64, out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$i11: i64, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i64, out_$i16: i64);



implementation vfio_find_cap_start_loop_$bb8(in_$i3: i32, in_$i8: i8, in_$p12: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i16: i32, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i20: i32) returns (out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i16: i32, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i20: i32)
{

  entry:
    out_$i17, out_$i18, out_$i19, out_$i16, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i20 := in_$i17, in_$i18, in_$i19, in_$i16, in_$p21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i20;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3933;

  $bb10:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i17;
    goto $bb10_dummy;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i17;
    assume true;
    goto $bb10;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i19 := $sge.i32(out_$i18, in_$i3);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i17, $sub.i32(0, 1));
    goto corral_source_split_3944;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i17 := $sub.i32(out_$i16, 1);
    call {:si_unique_call 795} {:cexpr "pos"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3943;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume out_$i28 == 1;
    goto corral_source_split_3949;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i16;
    assume true;
    goto $bb12;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i26, out_$i27);
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(in_$i8);
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i32(out_$i25);
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.0, out_$p24);
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p21, $mul.ref(out_$i23, 1));
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i64(out_$i22, $sub.i64(0, 1));
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, in_$p12);
    goto corral_source_split_3934;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$i19, out_$i16, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i20 := vfio_find_cap_start_loop_$bb8(in_$i3, in_$i8, in_$p12, out_$i17, out_$i18, out_$i19, out_$i16, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i20);
    return;

  exit:
    return;
}



procedure vfio_find_cap_start_loop_$bb8(in_$i3: i32, in_$i8: i8, in_$p12: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i16: i32, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i20: i32) returns (out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i16: i32, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i20: i32);



implementation {:SIextraRecBound 6} vfio_pci_disable_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$i7 := in_$i8, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p16, in_$p17, in_$i18, in_$i19, in_$p21, in_$i22, in_$i23, in_$i7;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3966;

  $bb7:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i22;
    goto $bb7_dummy;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    out_$i23 := $sle.i32(out_$i22, 5);
    goto corral_source_split_3977;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i7, 1);
    call {:si_unique_call 799} {:cexpr "bar"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_3976;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i13 == 1;
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i12, 0);
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_3969;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p21, $0.ref);
    goto corral_source_split_3987;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(out_$i19, 8));
    goto corral_source_split_3986;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3985;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} pci_release_selected_regions(in_$p2, out_$i18);
    goto corral_source_split_3984;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    out_$i18 := $shl.i32(1, out_$i7);
    goto corral_source_split_3983;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} pci_iounmap(in_$p2, out_$p17);
    goto corral_source_split_3982;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_3981;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(out_$i14, 8));
    goto corral_source_split_3980;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3979;

  $bb4:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$i7 := vfio_pci_disable_loop_$bb1(in_$p0, in_$p2, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$i7);
    return;

  exit:
    return;
}



procedure vfio_pci_disable_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i7: i32);
  modifies $M.0;



implementation vfio_pci_try_bus_reset_loop_$bb44(in_$p1: ref, in_$p2: ref, in_$i44: i32, in_$p86: ref, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$i103: i8, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$i111: i64, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_vslice_dummy_var_89: i32) returns (out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$i103: i8, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$i111: i64, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_vslice_dummy_var_89: i32)
{

  entry:
    out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_vslice_dummy_var_89 := in_$p90, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$p97, in_$i98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$p106, in_$p108, in_$p109, in_$i110, in_$i111, in_$p112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_vslice_dummy_var_89;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb55:
    assume {:verifier.code 0} true;
    assume out_$i118 == 1;
    goto $bb55_dummy;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$i118 := $sgt.i32(out_$i116, out_$i117);
    goto corral_source_split_4268;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4267;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.0, in_$p86);
    goto corral_source_split_4266;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p2, out_$i115);
    goto corral_source_split_4265;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i32(out_$i114, 1);
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} vfio_device_put(out_$p113);
    goto corral_source_split_4262;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, out_$p112);
    goto corral_source_split_4261;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref(out_$p109, $mul.ref(out_$i111, 8));
    goto corral_source_split_4260;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    out_$i111 := $sext.i32.i64(out_$i110);
    goto corral_source_split_4259;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_4257;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4256;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} out_vslice_dummy_var_89 := pci_set_power_state(out_$p106, 3);
    goto corral_source_split_4254;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p97, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_4252;

  $bb53:
    assume !(out_$i104 == 1);
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    out_$i104 := $trunc.i8.i1(out_$i103);
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$i103 := $M.1;
    goto corral_source_split_4248;

  $bb49:
    assume out_$i102 == 1;
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 0);
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, out_$p100);
    goto corral_source_split_4244;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p97, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_4243;

  $bb47:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p99, 0);
    goto corral_source_split_4241;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p97, $mul.ref(0, 416)), $mul.ref(378, 1));
    goto corral_source_split_4240;

  $bb46:
    assume out_$i98 == 1;
    goto corral_source_split_4239;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(in_$i44, 0);
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    out_$p97 := $bitcast.ref.ref(out_$p96);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} out_$p96 := vfio_device_data(out_$p95);
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref(out_$p91, $mul.ref(out_$i93, 8));
    goto corral_source_split_4233;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i92);
    goto corral_source_split_4232;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4231;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_4230;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4229;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i102 == 1);
    goto $bb51;

  $bb52:
    assume {:verifier.code 0} true;
    assume out_$i104 == 1;
    goto $bb51;

  $bb55_dummy:
    call {:si_unique_call 1} out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_vslice_dummy_var_89 := vfio_pci_try_bus_reset_loop_$bb44(in_$p1, in_$p2, in_$i44, in_$p86, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_vslice_dummy_var_89);
    return;

  exit:
    return;
}



procedure vfio_pci_try_bus_reset_loop_$bb44(in_$p1: ref, in_$p2: ref, in_$i44: i32, in_$p86: ref, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$i103: i8, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$i111: i64, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_vslice_dummy_var_89: i32) returns (out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$i103: i8, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$i111: i64, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_vslice_dummy_var_89: i32);
  modifies $M.0;



implementation vfio_pci_try_bus_reset_loop_$bb24(in_$p1: ref, in_$p2: ref, in_$p45: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i8, in_$i61: i1, in_$i62: i8, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i50: i8, in_$i71: i8) returns (out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i8, out_$i61: i1, out_$i62: i8, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i50: i8, out_$i71: i8)
{

  entry:
    out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i50, out_$i71 := in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i50, in_$i71;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4173;

  $bb32:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := out_$i62;
    goto $bb32_dummy;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$i71 := out_$i62;
    assume true;
    goto $bb32;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$i70 := $sgt.i32(out_$i68, out_$i69);
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, in_$p45);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p2, out_$i67);
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i66, 1);
    goto corral_source_split_4197;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4196;

  $bb30:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p58, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_4190;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4189;

  $bb27:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := out_$i50;
    goto $bb28;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$i62 := 1;
    goto $bb28;

  $bb26:
    assume out_$i61 == 1;
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$i61 := $trunc.i8.i1(out_$i60);
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i8($M.0, out_$p59);
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p58, $mul.ref(0, 416)), $mul.ref(378, 1));
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} out_$p57 := vfio_device_data(out_$p56);
    goto corral_source_split_4181;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p52, $mul.ref(out_$i54, 8));
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i53);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_4176;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i50, out_$i71 := vfio_pci_try_bus_reset_loop_$bb24(in_$p1, in_$p2, in_$p45, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i50, out_$i71);
    return;

  exit:
    return;
}



procedure vfio_pci_try_bus_reset_loop_$bb24(in_$p1: ref, in_$p2: ref, in_$p45: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i8, in_$i61: i1, in_$i62: i8, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i50: i8, in_$i71: i8) returns (out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i8, out_$i61: i1, out_$i62: i8, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i50: i8, out_$i71: i8);
  modifies $M.0;



implementation vfio_fill_vconfig_bytes_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i23: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i16, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i9: i32, in_$i10: i32, in_$i53: i32) returns (out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i23: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i16, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i9: i32, out_$i10: i32, out_$i53: i32)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i40, out_$i41, out_$i42, out_$i24, out_$i25, out_$i26, out_$i27, out_$i50, out_$i51, out_$i52, out_$i9, out_$i10, out_$i53 := in_$i11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p43, in_$p44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i40, in_$i41, in_$i42, in_$i24, in_$i25, in_$i26, in_$i27, in_$i50, in_$i51, in_$i52, in_$i9, in_$i10, in_$i53;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4586;

  $bb28:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i9, out_$i10 := out_$i50, out_$i51;
    goto $bb28_dummy;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i26;
    assume true;
    goto $bb28;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$i51 := $sub.i32(out_$i25, out_$i27);
    call {:si_unique_call 934} {:cexpr "size"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i24, out_$i27);
    call {:si_unique_call 933} {:cexpr "offset"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_4613;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4612;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i24, out_$i25, out_$i26, out_$i27 := out_$i40, out_$i10, out_$i41, out_$i42;
    goto $bb15;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25, out_$i26, out_$i27 := out_$i9, out_$i10, out_$i19, 4;
    goto $bb15;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p18, out_$i23);
    goto corral_source_split_4610;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.44, in_$p3);
    goto corral_source_split_4609;

  $bb12:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    assume true;
    goto $bb12;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_4603;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} out_$i19 := pci_read_config_dword(in_$p6, out_$i9, in_$p3);
    call {:si_unique_call 932} {:cexpr "ret"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_4602;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 4));
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i9);
    goto corral_source_split_4600;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_4598;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4597;

  $bb9:
    assume out_$i13 == 1;
    goto corral_source_split_4596;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    out_$i12 := $and.i32(out_$i9, 3);
    goto corral_source_split_4591;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $sgt.i32(out_$i10, 3);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i9, out_$i47, 1;
    goto $bb24;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i9, out_$i36, 2;
    goto $bb24;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p35, out_$i39);
    goto corral_source_split_4640;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i16($M.9, in_$p4);
    goto corral_source_split_4639;

  $bb22:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb22;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} out_$i36 := pci_read_config_word(in_$p6, out_$i9, in_$p4);
    call {:si_unique_call 938} {:cexpr "ret"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_4634;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p33, $mul.ref(out_$i34, 2));
    goto corral_source_split_4633;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i9);
    goto corral_source_split_4632;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_4631;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_4630;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4629;

  $bb19:
    assume out_$i30 == 1;
    goto corral_source_split_4628;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i9, 1);
    goto corral_source_split_4618;

  $bb16:
    assume out_$i28 == 1;
    goto corral_source_split_4617;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i28 := $sgt.i32(out_$i10, 1);
    goto corral_source_split_4594;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb8;

  $bb26:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i47;
    assume true;
    goto $bb26;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_4626;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} out_$i47 := pci_read_config_byte(in_$p6, out_$i9, out_$p46);
    call {:si_unique_call 936} {:cexpr "ret"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4625;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p44, $mul.ref(out_$i45, 1));
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i9);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_4622;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4621;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb18;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i40, out_$i41, out_$i42, out_$i24, out_$i25, out_$i26, out_$i27, out_$i50, out_$i51, out_$i52, out_$i9, out_$i10, out_$i53 := vfio_fill_vconfig_bytes_loop_$bb4(in_$p0, in_$p3, in_$p4, in_$p6, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i40, out_$i41, out_$i42, out_$i24, out_$i25, out_$i26, out_$i27, out_$i50, out_$i51, out_$i52, out_$i9, out_$i10, out_$i53);
    return;

  exit:
    return;
}



procedure vfio_fill_vconfig_bytes_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i23: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i16, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i9: i32, in_$i10: i32, in_$i53: i32) returns (out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i23: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i16, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i9: i32, out_$i10: i32, out_$i53: i32);
  modifies $M.0;



implementation vfio_cap_init_loop_$bb39(in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p8: ref, in_$i63: i32, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i64, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i8, in_$i102: i32, in_$i104: i32, in_$i105: i1, in_$i76: i32, in_vslice_dummy_var_97: i32) returns (out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i64, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i8, out_$i102: i32, out_$i104: i32, out_$i105: i1, out_$i76: i32, out_vslice_dummy_var_97: i32)
{

  entry:
    out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i76, out_vslice_dummy_var_97 := in_$i77, in_$i78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i104, in_$i105, in_$i76, in_vslice_dummy_var_97;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_4748;

  $bb45:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := out_$i104;
    goto $bb45_dummy;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i104, in_$i63);
    goto corral_source_split_4766;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i76, 1);
    call {:si_unique_call 958} {:cexpr "i"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_4765;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i88 == 1;
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i64(out_$i87, 0);
    goto corral_source_split_4761;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} out_$i87 := ldv__builtin_expect(out_$i86, 1);
    call {:si_unique_call 957} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i87);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i85);
    goto corral_source_split_4759;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i1.i32(out_$i84);
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 255);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.0, out_$p81);
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(in_$p8, $mul.ref(out_$i80, 1));
    goto corral_source_split_4754;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i79);
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, out_$i76);
    goto corral_source_split_4752;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_4751;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4750;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} out_vslice_dummy_var_97 := printk.ref.ref.ref.i32.i32.i32(.str.31, .str.30, out_$p90, out_$i93, out_$i100, out_$i102);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i8.i32(out_$i101);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i8($M.46, in_$p3);
    goto corral_source_split_4780;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i99);
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i8($M.0, out_$p98);
    goto corral_source_split_4778;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref(in_$p8, $mul.ref(out_$i97, 1));
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    out_$i97 := $sext.i32.i64(out_$i96);
    goto corral_source_split_4776;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i95, out_$i76);
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i92, out_$i76);
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i8.i32(out_$i91);
    goto corral_source_split_4771;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4770;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} out_$p90 := dev_name(out_$p89);
    goto corral_source_split_4769;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4768;

  $bb42:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i76, out_vslice_dummy_var_97 := vfio_cap_init_loop_$bb39(in_$p2, in_$p3, in_$p6, in_$p8, in_$i63, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i76, out_vslice_dummy_var_97);
    return;

  exit:
    return;
}



procedure vfio_cap_init_loop_$bb39(in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p8: ref, in_$i63: i32, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i64, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i8, in_$i102: i32, in_$i104: i32, in_$i105: i1, in_$i76: i32, in_vslice_dummy_var_97: i32) returns (out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i64, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i8, out_$i102: i32, out_$i104: i32, out_$i105: i1, out_$i76: i32, out_vslice_dummy_var_97: i32);



implementation vfio_cap_init_loop_$bb53(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i32, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p64: ref, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i69: i8, in_$i70: i8, in_$i71: i8, in_$i72: i32, in_$i73: i1, in_$i61: i32, in_$i63: i32, in_$i25: i32, in_$p26: ref, in_$i130: i32, in_$i62: i32, in_$i131: i1, in_$i132: i32, in_$i74: i32, in_vslice_dummy_var_96: i32) returns (out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i32, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p64: ref, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i69: i8, out_$i70: i8, out_$i71: i8, out_$i72: i32, out_$i73: i1, out_$i61: i32, out_$i63: i32, out_$i130: i32, out_$i62: i32, out_$i131: i1, out_$i132: i32, out_$i74: i32, out_vslice_dummy_var_96: i32)
{

  entry:
    out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i130, out_$i62, out_$i131, out_$i132, out_$i74, out_vslice_dummy_var_96 := in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p64, in_$p65, in_$i66, in_$i67, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i61, in_$i63, in_$i130, in_$i62, in_$i131, in_$i132, in_$i74, in_vslice_dummy_var_96;
    goto $bb53, exit;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_4816;

  $bb33:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := out_$i62;
    goto $bb33_dummy;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$i74 := in_$i25;
    assume true;
    goto $bb33;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.45 := $store.i8($M.45, in_$p2, out_$i70);
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i8($M.48, in_$p4);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, in_$p26, out_$i69);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.48, in_$p4);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} out_vslice_dummy_var_96 := printk.ref.ref.ref.i32(.str.29, .str.30, out_$p65, out_$i67);
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.46, in_$p3);
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_$p65 := dev_name(out_$p64);
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4729;

  $bb31:
    assume out_$i60 == 1;
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$i61, out_$i63 := out_$i62, out_$i59;
    assume true;
    goto $bb31;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 0);
    goto corral_source_split_4726;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4725;

  $bb23:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := 0;
    goto $bb30;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i58;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4723;

  $bb25:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := out_$i47;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i55;
    goto $bb29;

  $bb27:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i55;
    assume true;
    goto $bb27;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i55, 0);
    goto corral_source_split_4719;

  SeqInstr_75:
    call {:si_unique_call 953} {:cexpr "len"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_4718;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} out_$i55 := vfio_cap_len(in_$p0, out_$i51, out_$i54);
    goto SeqInstr_74;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i8(out_$i53);
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_4716;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4715;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i8(out_$i50);
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.46, in_$p3);
    goto corral_source_split_4712;

  $bb24:
    assume out_$i48 == 1;
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 255);
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i46);
    call {:si_unique_call 951} {:cexpr "len"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4708;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.47, out_$p45);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(out_$i44, 1));
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_4704;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.46, in_$p3);
    goto corral_source_split_4703;

  $bb22:
    assume out_$i41 == 1;
    goto corral_source_split_4702;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    out_$i41 := $ule.i32(out_$i40, 19);
    goto corral_source_split_4700;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_4699;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.46, in_$p3);
    goto corral_source_split_4698;

  $bb20:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb20;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_4694;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} out_$i36 := pci_read_config_byte(in_$p6, out_$i35, in_$p4);
    call {:si_unique_call 950} {:cexpr "ret"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_4693;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i34, 1);
    goto corral_source_split_4692;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_4691;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4690;

  $bb17:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    assume true;
    goto $bb17;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} out_$i30 := pci_read_config_byte(in_$p6, out_$i29, in_$p3);
    call {:si_unique_call 948} {:cexpr "ret"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_4684;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4683;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb54:
    assume out_$i131 == 1;
    goto corral_source_split_4820;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$i132 := in_$i25;
    assume true;
    goto $bb54;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_4818;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i32(out_$i130, 1);
    call {:si_unique_call 965} {:cexpr "loops"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_4817;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i130, out_$i62, out_$i131, out_$i132, out_$i74, out_vslice_dummy_var_96 := vfio_cap_init_loop_$bb53(in_$p0, in_$p2, in_$p3, in_$p4, in_$p6, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, in_$i25, in_$p26, out_$i130, out_$i62, out_$i131, out_$i132, out_$i74, out_vslice_dummy_var_96);
    return;

  exit:
    return;
}



procedure vfio_cap_init_loop_$bb53(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i32, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p64: ref, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i69: i8, in_$i70: i8, in_$i71: i8, in_$i72: i32, in_$i73: i1, in_$i61: i32, in_$i63: i32, in_$i25: i32, in_$p26: ref, in_$i130: i32, in_$i62: i32, in_$i131: i1, in_$i132: i32, in_$i74: i32, in_vslice_dummy_var_96: i32) returns (out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i32, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p64: ref, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i69: i8, out_$i70: i8, out_$i71: i8, out_$i72: i32, out_$i73: i1, out_$i61: i32, out_$i63: i32, out_$i130: i32, out_$i62: i32, out_$i131: i1, out_$i132: i32, out_$i74: i32, out_vslice_dummy_var_96: i32);
  modifies $M.45, $M.0, $M.51, $CurrAddr, assertsPassed;



implementation vfio_cap_init_loop_$bb14(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i32, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p64: ref, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i69: i8, in_$i70: i8, in_$i71: i8, in_$i72: i32, in_$i73: i1, in_$i61: i32, in_$i63: i32, in_$i75: i1, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i64, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i8, in_$i102: i32, in_$i104: i32, in_$i105: i1, in_$i76: i32, in_$i106: i8, in_$i107: i64, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i8, in_$i112: i64, in_$i113: i8, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$i120: i8, in_$i121: i64, in_$i122: i64, in_$p123: ref, in_$i124: i8, in_$i125: i32, in_$i126: i8, in_$i127: i32, in_$i128: i1, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i130: i32, in_$i62: i32, in_$i131: i1, in_$i132: i32, in_$i129: i32, in_$i74: i32, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32) returns (out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i32, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p64: ref, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i69: i8, out_$i70: i8, out_$i71: i8, out_$i72: i32, out_$i73: i1, out_$i61: i32, out_$i63: i32, out_$i75: i1, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i64, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i8, out_$i102: i32, out_$i104: i32, out_$i105: i1, out_$i76: i32, out_$i106: i8, out_$i107: i64, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i8, out_$i112: i64, out_$i113: i8, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$i120: i8, out_$i121: i64, out_$i122: i64, out_$p123: ref, out_$i124: i8, out_$i125: i32, out_$i126: i8, out_$i127: i32, out_$i128: i1, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i130: i32, out_$i62: i32, out_$i131: i1, out_$i132: i32, out_$i129: i32, out_$i74: i32, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32)
{

  entry:
    out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i75, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i76, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i25, out_$p26, out_$i27, out_$i130, out_$i62, out_$i131, out_$i132, out_$i129, out_$i74, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_vslice_dummy_var_96, out_vslice_dummy_var_97 := in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p64, in_$p65, in_$i66, in_$i67, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i61, in_$i63, in_$i75, in_$i77, in_$i78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i104, in_$i105, in_$i76, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$p118, in_$p119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i25, in_$p26, in_$i27, in_$i130, in_$i62, in_$i131, in_$i132, in_$i129, in_$i74, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26, in_vslice_dummy_var_96, in_vslice_dummy_var_97;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4681;

  $bb51:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i25, out_$p26, out_$i27 := out_$i125, out_$p123, out_$i61;
    goto $bb51_dummy;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    out_$i129 := out_$i125;
    assume true;
    goto $bb51;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i32(out_$i127, 0);
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i8.i32(out_$i126);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4810;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$i125 := $add.i32(out_$i25, 1);
    call {:si_unique_call 964} {:cexpr "caps"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.45 := $store.i8($M.45, in_$p2, out_$i124);
    goto corral_source_split_4808;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i8($M.48, in_$p4);
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref(out_$p119, $mul.ref(out_$i122, 1));
    goto corral_source_split_4806;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    out_$i122 := $add.i64(out_$i121, 1);
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i8.i64(out_$i120);
    goto corral_source_split_4804;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_4802;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4801;

  $bb49:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i117 := out_$i115;
    assume true;
    goto $bb49;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i32(out_$i115, 0);
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} out_$i115 := vfio_fill_vconfig_bytes(in_$p0, out_$i114, out_$i63);
    call {:si_unique_call 963} {:cexpr "ret"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_4796;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i8.i32(out_$i113);
    goto corral_source_split_4795;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4794;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 961} out_cmdloc_dummy_var_26 := $memset.i8(out_cmdloc_dummy_var_25, out_$p108, out_$i111, out_$i112, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_26;
    goto corral_source_split_4793;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i63);
    goto corral_source_split_4792;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i32.i8(out_$i110);
    goto corral_source_split_4791;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i109);
    goto corral_source_split_4790;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i8($M.46, in_$p3);
    goto corral_source_split_4789;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(in_$p8, $mul.ref(out_$i107, 1));
    goto corral_source_split_4788;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i64(out_$i106);
    goto corral_source_split_4787;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4786;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb38;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb46:
    assume !(out_$i105 == 1);
    goto corral_source_split_4784;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i104, out_$i63);
    goto corral_source_split_4766;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i76, 1);
    call {:si_unique_call 958} {:cexpr "i"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_4765;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i88 == 1;
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i64(out_$i87, 0);
    goto corral_source_split_4761;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} out_$i87 := ldv__builtin_expect(out_$i86, 1);
    call {:si_unique_call 957} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i87);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i85);
    goto corral_source_split_4759;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i1.i32(out_$i84);
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 255);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.0, out_$p81);
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(in_$p8, $mul.ref(out_$i80, 1));
    goto corral_source_split_4754;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i79);
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, out_$i76);
    goto corral_source_split_4752;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_4751;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4750;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    call out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i76, out_vslice_dummy_var_97 := vfio_cap_init_loop_$bb39(in_$p2, in_$p3, in_$p6, in_$p8, out_$i63, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i76, out_vslice_dummy_var_97);
    goto $bb39_last;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4748;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    out_$i76 := 0;
    goto $bb39;

  $bb45:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := out_$i104;
    assume false;
    return;

  $bb36:
    assume out_$i75 == 1;
    goto corral_source_split_4746;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(0, out_$i63);
    goto corral_source_split_4744;

  $bb32:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$i61, out_$i63 := out_$i62, out_$i59;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 0);
    goto corral_source_split_4726;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4725;

  $bb23:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := 0;
    goto $bb30;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i58;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4723;

  $bb25:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := out_$i47;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i55;
    goto $bb29;

  $bb27:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i55;
    assume true;
    goto $bb27;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i55, 0);
    goto corral_source_split_4719;

  SeqInstr_75:
    call {:si_unique_call 953} {:cexpr "len"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_4718;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} out_$i55 := vfio_cap_len(in_$p0, out_$i51, out_$i54);
    goto SeqInstr_74;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i8(out_$i53);
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_4716;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4715;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i8(out_$i50);
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.46, in_$p3);
    goto corral_source_split_4712;

  $bb24:
    assume out_$i48 == 1;
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 255);
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i46);
    call {:si_unique_call 951} {:cexpr "len"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4708;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.47, out_$p45);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(out_$i44, 1));
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_4704;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.46, in_$p3);
    goto corral_source_split_4703;

  $bb22:
    assume out_$i41 == 1;
    goto corral_source_split_4702;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    out_$i41 := $ule.i32(out_$i40, 19);
    goto corral_source_split_4700;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_4699;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.46, in_$p3);
    goto corral_source_split_4698;

  $bb20:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb20;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_4694;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} out_$i36 := pci_read_config_byte(in_$p6, out_$i35, in_$p4);
    call {:si_unique_call 950} {:cexpr "ret"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_4693;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i34, 1);
    goto corral_source_split_4692;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_4691;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4690;

  $bb17:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    assume true;
    goto $bb17;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} out_$i30 := pci_read_config_byte(in_$p6, out_$i29, in_$p3);
    call {:si_unique_call 948} {:cexpr "ret"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_4684;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4683;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb54:
    assume out_$i131 == 1;
    goto corral_source_split_4820;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$i132 := out_$i25;
    assume true;
    goto $bb54;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_4818;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i32(out_$i130, 1);
    call {:si_unique_call 965} {:cexpr "loops"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_4817;

  $bb53:
    call out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i130, out_$i62, out_$i131, out_$i132, out_$i74, out_vslice_dummy_var_96 := vfio_cap_init_loop_$bb53(in_$p0, in_$p2, in_$p3, in_$p4, in_$p6, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i25, out_$p26, out_$i130, out_$i62, out_$i131, out_$i132, out_$i74, out_vslice_dummy_var_96);
    goto $bb53_last;

  $bb53_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4816;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    out_$i130 := out_$i27;
    goto $bb53;

  $bb33:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := out_$i62;
    assume false;
    return;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i25;
    assume true;
    goto $bb33;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.45 := $store.i8($M.45, in_$p2, out_$i70);
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i8($M.48, in_$p4);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p26, out_$i69);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.48, in_$p4);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} out_vslice_dummy_var_96 := printk.ref.ref.ref.i32(.str.29, .str.30, out_$p65, out_$i67);
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.46, in_$p3);
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_$p65 := dev_name(out_$p64);
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4729;

  $bb31:
    assume out_$i60 == 1;
    goto corral_source_split_4728;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} out_vslice_dummy_var_97 := printk.ref.ref.ref.i32.i32.i32(.str.31, .str.30, out_$p90, out_$i93, out_$i100, out_$i102);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i8.i32(out_$i101);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i8($M.46, in_$p3);
    goto corral_source_split_4780;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i99);
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i8($M.0, out_$p98);
    goto corral_source_split_4778;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref(in_$p8, $mul.ref(out_$i97, 1));
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    out_$i97 := $sext.i32.i64(out_$i96);
    goto corral_source_split_4776;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i95, out_$i76);
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i92, out_$i76);
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i8.i32(out_$i91);
    goto corral_source_split_4771;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i8($M.45, in_$p2);
    goto corral_source_split_4770;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} out_$p90 := dev_name(out_$p89);
    goto corral_source_split_4769;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4768;

  $bb42:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i75, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i76, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i25, out_$p26, out_$i27, out_$i130, out_$i62, out_$i131, out_$i132, out_$i129, out_$i74, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_vslice_dummy_var_96, out_vslice_dummy_var_97 := vfio_cap_init_loop_$bb14(in_$p0, in_$p2, in_$p3, in_$p4, in_$p6, in_$p8, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i75, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i76, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i25, out_$p26, out_$i27, out_$i130, out_$i62, out_$i131, out_$i132, out_$i129, out_$i74, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_vslice_dummy_var_96, out_vslice_dummy_var_97);
    return;

  exit:
    return;
}



procedure vfio_cap_init_loop_$bb14(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i32, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p64: ref, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i69: i8, in_$i70: i8, in_$i71: i8, in_$i72: i32, in_$i73: i1, in_$i61: i32, in_$i63: i32, in_$i75: i1, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i64, in_$i87: i64, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i64, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i8, in_$i102: i32, in_$i104: i32, in_$i105: i1, in_$i76: i32, in_$i106: i8, in_$i107: i64, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i8, in_$i112: i64, in_$i113: i8, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$i120: i8, in_$i121: i64, in_$i122: i64, in_$p123: ref, in_$i124: i8, in_$i125: i32, in_$i126: i8, in_$i127: i32, in_$i128: i1, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i130: i32, in_$i62: i32, in_$i131: i1, in_$i132: i32, in_$i129: i32, in_$i74: i32, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32) returns (out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i32, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p64: ref, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i69: i8, out_$i70: i8, out_$i71: i8, out_$i72: i32, out_$i73: i1, out_$i61: i32, out_$i63: i32, out_$i75: i1, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i64, out_$i87: i64, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i64, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i8, out_$i102: i32, out_$i104: i32, out_$i105: i1, out_$i76: i32, out_$i106: i8, out_$i107: i64, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i8, out_$i112: i64, out_$i113: i8, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$i120: i8, out_$i121: i64, out_$i122: i64, out_$p123: ref, out_$i124: i8, out_$i125: i32, out_$i126: i8, out_$i127: i32, out_$i128: i1, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i130: i32, out_$i62: i32, out_$i131: i1, out_$i132: i32, out_$i129: i32, out_$i74: i32, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32);
  modifies $M.45, $M.0, $CurrAddr, $M.51, assertsPassed;



implementation vfio_ecap_init_loop_$bb33(in_$p3: ref, in_$p5: ref, in_$i76: i16, in_$i78: i16, in_$i79: i32, in_$i83: i32, in_$i84: i32, in_$i85: i64, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i64, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i64, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i106: i32, in_$i107: i1, in_$i82: i32, in_vslice_dummy_var_99: i32) returns (out_$i83: i32, out_$i84: i32, out_$i85: i64, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i64, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i64, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i106: i32, out_$i107: i1, out_$i82: i32, out_vslice_dummy_var_99: i32)
{

  entry:
    out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i106, out_$i107, out_$i82, out_vslice_dummy_var_99 := in_$i83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$p101, in_$i102, in_$i103, in_$i104, in_$i106, in_$i107, in_$i82, in_vslice_dummy_var_99;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_4932;

  $bb39:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := out_$i106;
    goto $bb39_dummy;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i106, in_$i79);
    goto corral_source_split_4949;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i32(out_$i82, 1);
    call {:si_unique_call 982} {:cexpr "i"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_4948;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i93 == 1;
    goto corral_source_split_4946;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i64(out_$i92, 0);
    goto corral_source_split_4944;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} out_$i92 := ldv__builtin_expect(out_$i91, 1);
    call {:si_unique_call 981} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i92);
    goto corral_source_split_4943;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i32.i64(out_$i90);
    goto corral_source_split_4942;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i1.i32(out_$i89);
    goto corral_source_split_4941;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 255);
    goto corral_source_split_4940;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i8.i32(out_$i87);
    goto corral_source_split_4939;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i8($M.0, out_$p86);
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(in_$p5, $mul.ref(out_$i85, 1));
    goto corral_source_split_4937;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i84);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i83, out_$i82);
    goto corral_source_split_4935;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i16.i32(in_$i76);
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} out_vslice_dummy_var_99 := printk.ref.ref.ref.i32.i32.i32(.str.36, .str.35, out_$p95, out_$i97, out_$i103, out_$i104);
    goto corral_source_split_4962;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i16.i32(in_$i78);
    goto corral_source_split_4961;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    goto corral_source_split_4960;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.0, out_$p101);
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref(in_$p5, $mul.ref(out_$i100, 1));
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i99);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i98, out_$i82);
    goto corral_source_split_4956;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i16.i32(in_$i76);
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i96, out_$i82);
    goto corral_source_split_4954;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i16.i32(in_$i76);
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} out_$p95 := dev_name(out_$p94);
    goto corral_source_split_4952;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4951;

  $bb36:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i106, out_$i107, out_$i82, out_vslice_dummy_var_99 := vfio_ecap_init_loop_$bb33(in_$p3, in_$p5, in_$i76, in_$i78, in_$i79, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i106, out_$i107, out_$i82, out_vslice_dummy_var_99);
    return;

  exit:
    return;
}



procedure vfio_ecap_init_loop_$bb33(in_$p3: ref, in_$p5: ref, in_$i76: i16, in_$i78: i16, in_$i79: i32, in_$i83: i32, in_$i84: i32, in_$i85: i64, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i64, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i64, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i106: i32, in_$i107: i1, in_$i82: i32, in_vslice_dummy_var_99: i32) returns (out_$i83: i32, out_$i84: i32, out_$i85: i64, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i64, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i64, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i106: i32, out_$i107: i1, out_$i82: i32, out_vslice_dummy_var_99: i32);



implementation vfio_ecap_init_loop_$bb50(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i56: i64, in_$i57: i1, in_$i61: i32, in_$i62: i32, in_$i63: i16, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i58: i16, in_$i59: i32, in_$i60: i16, in_$i46: i16, in_$i47: i32, in_$i49: i16, in_$i50: i32, in_$p19: ref, in_$i20: i32, in_$i48: i32, in_$i22: i16, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i75: i32, in_vslice_dummy_var_98: i32) returns (out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i56: i64, out_$i57: i1, out_$i61: i32, out_$i62: i32, out_$i63: i16, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i58: i16, out_$i59: i32, out_$i60: i16, out_$i46: i16, out_$i47: i32, out_$i49: i16, out_$i50: i32, out_$i48: i32, out_$i22: i16, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i75: i32, out_vslice_dummy_var_98: i32)
{

  entry:
    out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i48, out_$i22, out_$i146, out_$i147, out_$i148, out_$i75, out_vslice_dummy_var_98 := in_$i21, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p51, in_$p52, in_$i53, in_$i54, in_$i56, in_$i57, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i58, in_$i59, in_$i60, in_$i46, in_$i47, in_$i49, in_$i50, in_$i48, in_$i22, in_$i146, in_$i147, in_$i148, in_$i75, in_vslice_dummy_var_98;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5014;

  $bb26:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i48, out_$i22 := out_$i73, out_$i66;
    goto $bb26_dummy;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$i75 := in_$i20;
    assume true;
    goto $bb26;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i48, 0);
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i48, 1);
    call {:si_unique_call 979} {:cexpr "loops"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p19, out_$i72);
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$i72 := $or.i32(out_$i70, out_$i71);
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$i71 := $shl.i32(out_$i67, 20);
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, in_$p19);
    goto corral_source_split_4918;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p19, out_$i69);
    goto corral_source_split_4917;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 4194303);
    goto corral_source_split_4916;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, in_$p19);
    goto corral_source_split_4915;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    call {:si_unique_call 978} {:cexpr "val"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_4914;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i16(out_$i65);
    call {:si_unique_call 977} {:cexpr "epos"} boogie_si_record_i16(out_$i66);
    goto corral_source_split_4913;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i64, 4092);
    goto corral_source_split_4912;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i63);
    goto corral_source_split_4911;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$i63 := $trunc.i32.i16(out_$i62);
    goto corral_source_split_4910;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    out_$i62 := $lshr.i32(out_$i61, 20);
    goto corral_source_split_4909;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.44, in_$p1);
    goto corral_source_split_4908;

  $bb24:
    assume out_$i57 == 1;
    goto corral_source_split_4907;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$i58, out_$i59, out_$i60 := out_$i22, out_$i48, out_$i27;
    assume true;
    goto $bb24;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(in_$p19);
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} out_vslice_dummy_var_98 := printk.ref.ref.ref.i32.i32(.str.34, .str.35, out_$p52, out_$i53, out_$i54);
    goto corral_source_split_4903;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i22);
    goto corral_source_split_4902;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i27);
    goto corral_source_split_4901;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} out_$p52 := dev_name(out_$p51);
    goto corral_source_split_4900;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4899;

  $bb22:
    assume out_$i45 == 1;
    goto corral_source_split_4898;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    out_$i46, out_$i47, out_$i49, out_$i50 := out_$i22, out_$i48, out_$i27, out_$i44;
    assume true;
    goto $bb22;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_4896;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4895;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := 0;
    goto $bb21;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i43;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4893;

  $bb16:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := out_$i34;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i40;
    goto $bb20;

  $bb18:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i23;
    assume true;
    goto $bb18;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 0);
    goto corral_source_split_4889;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} out_$i40 := vfio_ext_cap_len(in_$p0, out_$i37, out_$i39);
    call {:si_unique_call 974} {:cexpr "len"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_4888;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i38);
    goto corral_source_split_4887;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i22);
    goto corral_source_split_4886;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i16(out_$i36);
    goto corral_source_split_4885;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i27);
    goto corral_source_split_4884;

  $bb15:
    assume out_$i35 == 1;
    goto corral_source_split_4883;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 255);
    goto corral_source_split_4881;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    call {:si_unique_call 972} {:cexpr "len"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_4880;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.49, out_$p32);
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(out_$i31, 2));
    goto corral_source_split_4878;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i27);
    goto corral_source_split_4876;

  $bb13:
    assume out_$i29 == 1;
    goto corral_source_split_4875;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    out_$i29 := $ule.i32(out_$i28, 27);
    goto corral_source_split_4873;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    goto corral_source_split_4872;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i16(out_$i26);
    call {:si_unique_call 971} {:cexpr "ecap"} boogie_si_record_i16(out_$i27);
    goto corral_source_split_4871;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.44, in_$p1);
    goto corral_source_split_4870;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i23;
    assume true;
    goto $bb11;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_4866;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} out_$i23 := pci_read_config_dword(in_$p3, out_$i21, in_$p1);
    call {:si_unique_call 970} {:cexpr "ret"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_4865;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i22);
    goto corral_source_split_4864;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb51:
    assume out_$i147 == 1;
    goto corral_source_split_5018;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$i148 := in_$i20;
    assume true;
    goto $bb51;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    out_$i147 := $ugt.i32(out_$i146, 255);
    goto corral_source_split_5016;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    out_$i146 := $zext.i16.i32(out_$i22);
    goto corral_source_split_5015;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i48, out_$i22, out_$i146, out_$i147, out_$i148, out_$i75, out_vslice_dummy_var_98 := vfio_ecap_init_loop_$bb50(in_$p0, in_$p1, in_$p3, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, in_$p19, in_$i20, out_$i48, out_$i22, out_$i146, out_$i147, out_$i148, out_$i75, out_vslice_dummy_var_98);
    return;

  exit:
    return;
}



procedure vfio_ecap_init_loop_$bb50(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i56: i64, in_$i57: i1, in_$i61: i32, in_$i62: i32, in_$i63: i16, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i58: i16, in_$i59: i32, in_$i60: i16, in_$i46: i16, in_$i47: i32, in_$i49: i16, in_$i50: i32, in_$p19: ref, in_$i20: i32, in_$i48: i32, in_$i22: i16, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i75: i32, in_vslice_dummy_var_98: i32) returns (out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i56: i64, out_$i57: i1, out_$i61: i32, out_$i62: i32, out_$i63: i16, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i58: i16, out_$i59: i32, out_$i60: i16, out_$i46: i16, out_$i47: i32, out_$i49: i16, out_$i50: i32, out_$i48: i32, out_$i22: i16, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i75: i32, out_vslice_dummy_var_98: i32);
  modifies $M.0, $M.50, $CurrAddr;



implementation vfio_ecap_init_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i56: i64, in_$i57: i1, in_$i61: i32, in_$i62: i32, in_$i63: i16, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i58: i16, in_$i59: i32, in_$i60: i16, in_$i46: i16, in_$i47: i32, in_$i49: i16, in_$i50: i32, in_$i76: i16, in_$i77: i32, in_$i78: i16, in_$i79: i32, in_$i80: i8, in_$i81: i1, in_$i83: i32, in_$i84: i32, in_$i85: i64, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i64, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i64, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i106: i32, in_$i107: i1, in_$i82: i32, in_$i108: i64, in_$p109: ref, in_$i110: i32, in_$i111: i8, in_$i112: i64, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: i64, in_$p129: ref, in_$i131: i32, in_$i130: i32, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i16, in_$i140: i32, in_$i141: i32, in_$i142: i16, in_$i143: i32, in_$i144: i1, in_$i17: i32, in_$i18: i16, in_$p19: ref, in_$i20: i32, in_$i48: i32, in_$i22: i16, in_$i146: i32, in_$i147: i1, in_$i145: i32, in_$i148: i32, in_$i75: i32, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32) returns (out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i56: i64, out_$i57: i1, out_$i61: i32, out_$i62: i32, out_$i63: i16, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i58: i16, out_$i59: i32, out_$i60: i16, out_$i46: i16, out_$i47: i32, out_$i49: i16, out_$i50: i32, out_$i76: i16, out_$i77: i32, out_$i78: i16, out_$i79: i32, out_$i80: i8, out_$i81: i1, out_$i83: i32, out_$i84: i32, out_$i85: i64, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i64, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i64, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i106: i32, out_$i107: i1, out_$i82: i32, out_$i108: i64, out_$p109: ref, out_$i110: i32, out_$i111: i8, out_$i112: i64, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: i64, out_$p129: ref, out_$i131: i32, out_$i130: i32, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i16, out_$i140: i32, out_$i141: i32, out_$i142: i16, out_$i143: i32, out_$i144: i1, out_$i17: i32, out_$i18: i16, out_$p19: ref, out_$i20: i32, out_$i48: i32, out_$i22: i16, out_$i146: i32, out_$i147: i1, out_$i145: i32, out_$i148: i32, out_$i75: i32, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32)
{

  entry:
    out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i106, out_$i107, out_$i82, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$i128, out_$p129, out_$i131, out_$i130, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i17, out_$i18, out_$p19, out_$i20, out_$i48, out_$i22, out_$i146, out_$i147, out_$i145, out_$i148, out_$i75, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_vslice_dummy_var_98, out_vslice_dummy_var_99 := in_$i21, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p51, in_$p52, in_$i53, in_$i54, in_$i56, in_$i57, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i58, in_$i59, in_$i60, in_$i46, in_$i47, in_$i49, in_$i50, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$p101, in_$i102, in_$i103, in_$i104, in_$i106, in_$i107, in_$i82, in_$i108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$p118, in_$p119, in_$p120, in_$i121, in_$p122, in_$i123, in_$i124, in_$p125, in_$p126, in_$p127, in_$i128, in_$p129, in_$i131, in_$i130, in_$p132, in_$p133, in_$p134, in_$i135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i17, in_$i18, in_$p19, in_$i20, in_$i48, in_$i22, in_$i146, in_$i147, in_$i145, in_$i148, in_$i75, in_cmdloc_dummy_var_27, in_cmdloc_dummy_var_28, in_vslice_dummy_var_98, in_vslice_dummy_var_99;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4862;

  $bb48:
    assume out_$i144 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18, out_$p19, out_$i20 := out_$i143, out_$i142, out_$p136, out_$i130;
    goto $bb48_dummy;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    out_$i145 := out_$i130;
    assume true;
    goto $bb48;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i32(out_$i77, 0);
    goto corral_source_split_5010;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    out_$i143 := $sub.i32(out_$i77, 1);
    call {:si_unique_call 990} {:cexpr "loops"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_5009;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    out_$i142 := $trunc.i32.i16(out_$i141);
    call {:si_unique_call 989} {:cexpr "epos"} boogie_si_record_i16(out_$i142);
    goto corral_source_split_5008;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    out_$i141 := $and.i32(out_$i140, 4092);
    goto corral_source_split_5007;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    out_$i140 := $zext.i16.i32(out_$i139);
    goto corral_source_split_5006;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$i139 := $trunc.i32.i16(out_$i138);
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    out_$i138 := $lshr.i32(out_$i137, 20);
    goto corral_source_split_5004;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.44, in_$p1);
    goto corral_source_split_5003;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref(out_$p134, $mul.ref(out_$i135, 4));
    goto corral_source_split_5002;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    out_$i135 := $zext.i16.i64(out_$i76);
    goto corral_source_split_5001;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    out_$p134 := $bitcast.ref.ref(out_$p133);
    goto corral_source_split_5000;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.0, out_$p132);
    goto corral_source_split_4999;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4998;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$i131 := $add.i32(out_$i20, 1);
    call {:si_unique_call 988} {:cexpr "ecaps"} boogie_si_record_i32(out_$i131);
    assume {:verifier.code 0} true;
    out_$i130 := out_$i131;
    goto $bb47;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$i130 := out_$i20;
    goto $bb47;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p129, out_$i124);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref(out_$p127, $mul.ref(out_$i128, 4));
    goto corral_source_split_4992;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i16.i64(out_$i76);
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    out_$p127 := $bitcast.ref.ref(out_$p126);
    goto corral_source_split_4990;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.0, out_$p125);
    goto corral_source_split_4989;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$i124 := $and.i32(out_$i123, $sub.i32(0, 4194304));
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i32($M.0, out_$p122);
    goto corral_source_split_4986;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref(out_$p120, $mul.ref(out_$i121, 4));
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i16.i64(out_$i76);
    goto corral_source_split_4984;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    out_$p120 := $bitcast.ref.ref(out_$p119);
    goto corral_source_split_4983;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_4982;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(64, 1));
    goto corral_source_split_4981;

  $bb45:
    assume out_$i117 == 1;
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i117 := $trunc.i8.i1(out_$i80);
    goto corral_source_split_4978;

  $bb43:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    out_$i116 := out_$i114;
    assume true;
    goto $bb43;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 0);
    goto corral_source_split_4974;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} out_$i114 := vfio_fill_vconfig_bytes(in_$p0, out_$i113, out_$i79);
    call {:si_unique_call 987} {:cexpr "ret"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_4973;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i16.i32(out_$i76);
    goto corral_source_split_4972;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 985} out_cmdloc_dummy_var_28 := $memset.i8(out_cmdloc_dummy_var_27, out_$p109, out_$i111, out_$i112, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_28;
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i79);
    goto corral_source_split_4970;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i32.i8(out_$i110);
    goto corral_source_split_4969;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i16.i32(out_$i78);
    goto corral_source_split_4968;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref(in_$p5, $mul.ref(out_$i108, 1));
    goto corral_source_split_4967;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i16.i64(out_$i76);
    goto corral_source_split_4966;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb32;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb40:
    assume !(out_$i107 == 1);
    goto corral_source_split_4964;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i106, out_$i79);
    goto corral_source_split_4949;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i32(out_$i82, 1);
    call {:si_unique_call 982} {:cexpr "i"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_4948;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i93 == 1;
    goto corral_source_split_4946;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i64(out_$i92, 0);
    goto corral_source_split_4944;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} out_$i92 := ldv__builtin_expect(out_$i91, 1);
    call {:si_unique_call 981} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i92);
    goto corral_source_split_4943;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i32.i64(out_$i90);
    goto corral_source_split_4942;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i1.i32(out_$i89);
    goto corral_source_split_4941;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 255);
    goto corral_source_split_4940;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i8.i32(out_$i87);
    goto corral_source_split_4939;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i8($M.0, out_$p86);
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(in_$p5, $mul.ref(out_$i85, 1));
    goto corral_source_split_4937;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i84);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i83, out_$i82);
    goto corral_source_split_4935;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i16.i32(out_$i76);
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    call out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i106, out_$i107, out_$i82, out_vslice_dummy_var_99 := vfio_ecap_init_loop_$bb33(in_$p3, in_$p5, out_$i76, out_$i78, out_$i79, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i106, out_$i107, out_$i82, out_vslice_dummy_var_99);
    goto $bb33_last;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$i82 := 0;
    goto $bb33;

  $bb39:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := out_$i106;
    assume false;
    return;

  $bb30:
    assume out_$i81 == 1;
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(0, out_$i79);
    goto corral_source_split_4928;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4927;

  $bb23:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i76, out_$i77, out_$i78, out_$i79, out_$i80 := out_$i46, out_$i47, out_$i49, out_$i50, 0;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i76, out_$i77, out_$i78, out_$i79, out_$i80 := out_$i58, out_$i59, out_$i60, 4, 1;
    goto $bb29;

  $bb25:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$i58, out_$i59, out_$i60 := out_$i22, out_$i48, out_$i27;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} out_vslice_dummy_var_98 := printk.ref.ref.ref.i32.i32(.str.34, .str.35, out_$p52, out_$i53, out_$i54);
    goto corral_source_split_4903;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i22);
    goto corral_source_split_4902;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i27);
    goto corral_source_split_4901;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} out_$p52 := dev_name(out_$p51);
    goto corral_source_split_4900;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4899;

  $bb22:
    assume out_$i45 == 1;
    goto corral_source_split_4898;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    out_$i46, out_$i47, out_$i49, out_$i50 := out_$i22, out_$i48, out_$i27, out_$i44;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_4896;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4895;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := 0;
    goto $bb21;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i43;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4893;

  $bb16:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := out_$i34;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i40;
    goto $bb20;

  $bb18:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i23;
    assume true;
    goto $bb18;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 0);
    goto corral_source_split_4889;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} out_$i40 := vfio_ext_cap_len(in_$p0, out_$i37, out_$i39);
    call {:si_unique_call 974} {:cexpr "len"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_4888;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i38);
    goto corral_source_split_4887;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i22);
    goto corral_source_split_4886;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i16(out_$i36);
    goto corral_source_split_4885;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i27);
    goto corral_source_split_4884;

  $bb15:
    assume out_$i35 == 1;
    goto corral_source_split_4883;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 255);
    goto corral_source_split_4881;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    call {:si_unique_call 972} {:cexpr "len"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_4880;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.49, out_$p32);
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(out_$i31, 2));
    goto corral_source_split_4878;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i27);
    goto corral_source_split_4876;

  $bb13:
    assume out_$i29 == 1;
    goto corral_source_split_4875;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    out_$i29 := $ule.i32(out_$i28, 27);
    goto corral_source_split_4873;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    goto corral_source_split_4872;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i16(out_$i26);
    call {:si_unique_call 971} {:cexpr "ecap"} boogie_si_record_i16(out_$i27);
    goto corral_source_split_4871;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.44, in_$p1);
    goto corral_source_split_4870;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i23;
    assume true;
    goto $bb11;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_4866;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} out_$i23 := pci_read_config_dword(in_$p3, out_$i21, in_$p1);
    call {:si_unique_call 970} {:cexpr "ret"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_4865;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i22);
    goto corral_source_split_4864;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb51:
    assume out_$i147 == 1;
    goto corral_source_split_5018;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$i148 := out_$i20;
    assume true;
    goto $bb51;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    out_$i147 := $ugt.i32(out_$i146, 255);
    goto corral_source_split_5016;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    out_$i146 := $zext.i16.i32(out_$i22);
    goto corral_source_split_5015;

  $bb50:
    call out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i48, out_$i22, out_$i146, out_$i147, out_$i148, out_$i75, out_vslice_dummy_var_98 := vfio_ecap_init_loop_$bb50(in_$p0, in_$p1, in_$p3, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$p19, out_$i20, out_$i48, out_$i22, out_$i146, out_$i147, out_$i148, out_$i75, out_vslice_dummy_var_98);
    goto $bb50_last;

  $bb50_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5014;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    out_$i48, out_$i22 := out_$i17, out_$i18;
    goto $bb50;

  $bb26:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i48, out_$i22 := out_$i73, out_$i66;
    assume false;
    return;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i20;
    assume true;
    goto $bb26;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i48, 0);
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i48, 1);
    call {:si_unique_call 979} {:cexpr "loops"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p19, out_$i72);
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$i72 := $or.i32(out_$i70, out_$i71);
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$i71 := $shl.i32(out_$i67, 20);
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p19);
    goto corral_source_split_4918;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p19, out_$i69);
    goto corral_source_split_4917;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 4194303);
    goto corral_source_split_4916;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, out_$p19);
    goto corral_source_split_4915;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    call {:si_unique_call 978} {:cexpr "val"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_4914;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i16(out_$i65);
    call {:si_unique_call 977} {:cexpr "epos"} boogie_si_record_i16(out_$i66);
    goto corral_source_split_4913;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i64, 4092);
    goto corral_source_split_4912;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i63);
    goto corral_source_split_4911;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$i63 := $trunc.i32.i16(out_$i62);
    goto corral_source_split_4910;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    out_$i62 := $lshr.i32(out_$i61, 20);
    goto corral_source_split_4909;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.44, in_$p1);
    goto corral_source_split_4908;

  $bb24:
    assume out_$i57 == 1;
    goto corral_source_split_4907;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} out_vslice_dummy_var_99 := printk.ref.ref.ref.i32.i32.i32(.str.36, .str.35, out_$p95, out_$i97, out_$i103, out_$i104);
    goto corral_source_split_4962;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i16.i32(out_$i78);
    goto corral_source_split_4961;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    goto corral_source_split_4960;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.0, out_$p101);
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref(in_$p5, $mul.ref(out_$i100, 1));
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i99);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i98, out_$i82);
    goto corral_source_split_4956;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i16.i32(out_$i76);
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i96, out_$i82);
    goto corral_source_split_4954;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i16.i32(out_$i76);
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} out_$p95 := dev_name(out_$p94);
    goto corral_source_split_4952;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4951;

  $bb36:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb46:
    assume !(out_$i117 == 1);
    goto corral_source_split_4995;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i106, out_$i107, out_$i82, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$i128, out_$p129, out_$i131, out_$i130, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i17, out_$i18, out_$p19, out_$i20, out_$i48, out_$i22, out_$i146, out_$i147, out_$i145, out_$i148, out_$i75, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_vslice_dummy_var_98, out_vslice_dummy_var_99 := vfio_ecap_init_loop_$bb8(in_$p0, in_$p1, in_$p3, in_$p5, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i106, out_$i107, out_$i82, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$i128, out_$p129, out_$i131, out_$i130, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i17, out_$i18, out_$p19, out_$i20, out_$i48, out_$i22, out_$i146, out_$i147, out_$i145, out_$i148, out_$i75, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_vslice_dummy_var_98, out_vslice_dummy_var_99);
    return;

  exit:
    return;
}



procedure vfio_ecap_init_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i56: i64, in_$i57: i1, in_$i61: i32, in_$i62: i32, in_$i63: i16, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i58: i16, in_$i59: i32, in_$i60: i16, in_$i46: i16, in_$i47: i32, in_$i49: i16, in_$i50: i32, in_$i76: i16, in_$i77: i32, in_$i78: i16, in_$i79: i32, in_$i80: i8, in_$i81: i1, in_$i83: i32, in_$i84: i32, in_$i85: i64, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i64, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i64, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i106: i32, in_$i107: i1, in_$i82: i32, in_$i108: i64, in_$p109: ref, in_$i110: i32, in_$i111: i8, in_$i112: i64, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: i64, in_$p129: ref, in_$i131: i32, in_$i130: i32, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i16, in_$i140: i32, in_$i141: i32, in_$i142: i16, in_$i143: i32, in_$i144: i1, in_$i17: i32, in_$i18: i16, in_$p19: ref, in_$i20: i32, in_$i48: i32, in_$i22: i16, in_$i146: i32, in_$i147: i1, in_$i145: i32, in_$i148: i32, in_$i75: i32, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32) returns (out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i56: i64, out_$i57: i1, out_$i61: i32, out_$i62: i32, out_$i63: i16, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i58: i16, out_$i59: i32, out_$i60: i16, out_$i46: i16, out_$i47: i32, out_$i49: i16, out_$i50: i32, out_$i76: i16, out_$i77: i32, out_$i78: i16, out_$i79: i32, out_$i80: i8, out_$i81: i1, out_$i83: i32, out_$i84: i32, out_$i85: i64, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i64, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i64, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i106: i32, out_$i107: i1, out_$i82: i32, out_$i108: i64, out_$p109: ref, out_$i110: i32, out_$i111: i8, out_$i112: i64, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: i64, out_$p129: ref, out_$i131: i32, out_$i130: i32, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i16, out_$i140: i32, out_$i141: i32, out_$i142: i16, out_$i143: i32, out_$i144: i1, out_$i17: i32, out_$i18: i16, out_$p19: ref, out_$i20: i32, out_$i48: i32, out_$i22: i16, out_$i146: i32, out_$i147: i1, out_$i145: i32, out_$i148: i32, out_$i75: i32, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32);
  modifies $M.0, $CurrAddr, $M.50;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i60: i32, in_$i61: i1, in_$i63: i32, in_$i64: i1, in_$i65: i64, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i64, in_$i81: i32, in_$i82: i1, in_$i83: i64, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i64, in_vslice_dummy_var_113: i64, in_vslice_dummy_var_114: i64, in_vslice_dummy_var_115: i64, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32) returns (out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i60: i32, out_$i61: i1, out_$i63: i32, out_$i64: i1, out_$i65: i64, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i64, out_$i81: i32, out_$i82: i1, out_$i83: i64, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i64, out_vslice_dummy_var_113: i64, out_vslice_dummy_var_114: i64, out_vslice_dummy_var_115: i64, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32)
{

  entry:
    out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i61, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i76, out_$i77, out_$i78, out_$i79, out_$i81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117 := in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i60, in_$i61, in_$i63, in_$i64, in_$i65, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i76, in_$i77, in_$i78, in_$i79, in_$i81, in_$i82, in_$i83, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1274} out_$i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 1275} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i37);
    call {:si_unique_call 1276} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i37);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb77_dummy;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb21:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1283} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} out_vslice_dummy_var_111 := vfio_pci_mmap(in_$p18, in_$p16);
    goto corral_source_split_6035;

  $bb43:
    assume out_$i61 == 1;
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 2);
    goto corral_source_split_6032;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i60 := $M.59;
    goto corral_source_split_6031;

  $bb41:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1281} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6029;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} out_vslice_dummy_var_110 := vfio_pci_mmap(in_$p18, in_$p16);
    goto corral_source_split_6028;

  $bb40:
    assume out_$i58 == 1;
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 1);
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i57 := $M.59;
    goto corral_source_split_6024;

  $bb38:
    assume out_$i56 == 1;
    goto corral_source_split_6023;

  $bb34:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i48, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb23:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i48, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i48, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_5997:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1277} out_$i48 := __VERIFIER_nondet_int();
    call {:si_unique_call 1278} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i48);
    call {:si_unique_call 1279} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i48);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i47 == 1;
    goto corral_source_split_5997;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$i46 := $M.59;
    goto corral_source_split_5994;

  $bb18:
    assume out_$i45 == 1;
    goto corral_source_split_5993;

  $bb14:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb48:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1285} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} out_vslice_dummy_var_112 := vfio_pci_write(in_$p11, in_$p20, out_$i65, in_$p7);
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i64($M.57, in_$p1);
    goto corral_source_split_6039;

  $bb47:
    assume out_$i64 == 1;
    goto corral_source_split_6038;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 2);
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$i63 := $M.59;
    goto corral_source_split_6016;

  $bb36:
    assume out_$i55 == 1;
    goto corral_source_split_6015;

  $bb35:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i48, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb51:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $M.62 := out_$i70;
    call {:si_unique_call 1288} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_6048;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    out_$i70 := $sub.i32(out_$i69, 1);
    goto corral_source_split_6047;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    out_$i69 := $M.62;
    goto corral_source_split_6046;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1287} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6045;

  SeqInstr_96:
    goto corral_source_split_6044;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} vfio_pci_release(in_$p13);
    goto SeqInstr_95;

  $bb50:
    assume out_$i68 == 1;
    goto corral_source_split_6043;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 2);
    goto corral_source_split_6021;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    out_$i67 := $M.59;
    goto corral_source_split_6020;

  $bb37:
    assume !(out_$i55 == 1);
    goto corral_source_split_6019;

  $bb57:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1292} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6063;

  SeqInstr_102:
    goto corral_source_split_6062;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} out_vslice_dummy_var_114 := vfio_pci_ioctl(in_$p8, out_$i78, out_$i79);
    goto SeqInstr_101;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i64($M.57, in_$p0);
    goto corral_source_split_6061;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.57, in_$p2);
    goto corral_source_split_6060;

  $bb56:
    assume out_$i77 == 1;
    goto corral_source_split_6059;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 2);
    goto corral_source_split_6057;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i76 := $M.59;
    goto corral_source_split_6056;

  $bb54:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1290} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6054;

  SeqInstr_99:
    goto corral_source_split_6053;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} out_vslice_dummy_var_113 := vfio_pci_ioctl(in_$p8, out_$i73, out_$i74);
    goto SeqInstr_98;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i64($M.57, in_$p0);
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.57, in_$p2);
    goto corral_source_split_6051;

  $bb53:
    assume out_$i72 == 1;
    goto corral_source_split_6050;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 1);
    goto corral_source_split_6009;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$i71 := $M.59;
    goto corral_source_split_6008;

  $bb32:
    assume out_$i53 == 1;
    goto corral_source_split_6007;

  $bb25:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i48, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb24:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i48, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb60:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1294} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} out_vslice_dummy_var_115 := vfio_pci_read(in_$p19, in_$p17, out_$i83, in_$p10);
    goto corral_source_split_6067;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.57, in_$p3);
    goto corral_source_split_6066;

  $bb59:
    assume out_$i82 == 1;
    goto corral_source_split_6065;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 2);
    goto corral_source_split_6013;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    out_$i81 := $M.59;
    goto corral_source_split_6012;

  $bb33:
    assume !(out_$i53 == 1);
    goto corral_source_split_6011;

  $bb66:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1298} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6081;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} vfio_pci_request(in_$p12, out_$i90);
    goto corral_source_split_6080;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.57, in_$p4);
    goto corral_source_split_6079;

  $bb65:
    assume out_$i89 == 1;
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 2);
    goto corral_source_split_6076;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i88 := $M.59;
    goto corral_source_split_6075;

  $bb63:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1296} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6073;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vfio_pci_request(in_$p12, out_$i87);
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.57, in_$p4);
    goto corral_source_split_6071;

  $bb62:
    assume out_$i86 == 1;
    goto corral_source_split_6070;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 1);
    goto corral_source_split_6001;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    out_$i85 := $M.59;
    goto corral_source_split_6000;

  $bb27:
    assume out_$i51 == 1;
    goto corral_source_split_5999;

  $bb26:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i48, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb69:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $M.62 := out_$i97;
    call {:si_unique_call 1302} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i96, 1);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    out_$i96 := $M.62;
    goto corral_source_split_6091;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1301} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6090;

  $bb70:
    assume out_$i95 == 1;
    goto corral_source_split_6089;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 0);
    goto corral_source_split_6087;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$i94 := $M.67;
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $M.67 := out_$i93;
    call {:si_unique_call 1300} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_6085;

  SeqInstr_105:
    goto corral_source_split_6084;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} out_$i93 := vfio_pci_open(in_$p14);
    goto SeqInstr_104;

  $bb68:
    assume out_$i92 == 1;
    goto corral_source_split_6083;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 1);
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$i91 := $M.59;
    goto corral_source_split_6004;

  $bb29:
    assume out_$i52 == 1;
    goto corral_source_split_6003;

  $bb28:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i48, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} ldv_stop();
    goto corral_source_split_6095;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb31;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb31;

  $bb79:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb93:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $M.62 := out_$i112;
    call {:si_unique_call 1310} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i111, 1);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$i111 := $M.62;
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1309} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6119;

  $bb92:
    assume out_$i110 == 1;
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 0);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$i109 := $M.68;
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.68 := out_$i108;
    call {:si_unique_call 1308} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_6114;

  SeqInstr_108:
    goto corral_source_split_6113;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} out_$i108 := vfio_pci_probe(out_$p107, in_$p22);
    goto SeqInstr_107;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$p107 := $M.58;
    goto corral_source_split_6112;

  $bb90:
    assume out_$i106 == 1;
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 1);
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$i105 := $M.60;
    goto corral_source_split_6108;

  $bb88:
    assume out_$i104 == 1;
    goto corral_source_split_6107;

  $bb81:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i100, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb80:
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i100, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_6097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1304} out_$i100 := __VERIFIER_nondet_int();
    call {:si_unique_call 1305} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i100);
    call {:si_unique_call 1306} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i100);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume out_$i99 == 1;
    goto corral_source_split_6097;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 0);
    goto corral_source_split_5989;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$i98 := $M.60;
    goto corral_source_split_5988;

  $bb16:
    assume out_$i44 == 1;
    goto corral_source_split_5987;

  $bb15:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb98:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1312} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} vfio_pci_remove(out_$p115);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    out_$p115 := $M.58;
    goto corral_source_split_6125;

  $bb97:
    assume out_$i114 == 1;
    goto corral_source_split_6124;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 2);
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$i113 := $M.60;
    goto corral_source_split_6100;

  $bb83:
    assume out_$i102 == 1;
    goto corral_source_split_6099;

  $bb82:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i100, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb101:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1314} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} out_vslice_dummy_var_116 := ldv_shutdown_4();
    goto corral_source_split_6130;

  $bb100:
    assume out_$i117 == 1;
    goto corral_source_split_6129;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 2);
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$i116 := $M.60;
    goto corral_source_split_6104;

  $bb85:
    assume out_$i103 == 1;
    goto corral_source_split_6103;

  $bb84:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i100, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} ldv_stop();
    goto corral_source_split_6133;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb86:
    assume {:verifier.code 0} true;
    assume !(out_$i103 == 1);
    goto $bb87;

  $bb89:
    assume {:verifier.code 0} true;
    assume !(out_$i104 == 1);
    goto $bb87;

  $bb17:
    assume !(out_$i44 == 1);
    goto corral_source_split_5991;

  $bb107:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb117:
    assume {:verifier.code 0} true;
    assume !(out_$i126 == 1);
    goto $bb118;

  $bb120:
    assume {:verifier.code 0} true;
    assume !(out_$i128 == 1);
    goto $bb118;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 0);
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$i127 := $M.62;
    goto corral_source_split_6146;

  $bb116:
    assume out_$i126 == 1;
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 2);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$i125 := $M.63;
    goto corral_source_split_6142;

  $bb114:
    assume out_$i124 == 1;
    goto corral_source_split_6141;

  $bb109:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i121, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i121, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_6135:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1316} out_$i121 := __VERIFIER_nondet_int();
    call {:si_unique_call 1317} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i121);
    call {:si_unique_call 1318} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i121);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb106:
    assume out_$i120 == 1;
    goto corral_source_split_6135;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_5981;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    out_$i119 := $M.63;
    goto corral_source_split_5980;

  $bb12:
    assume out_$i42 == 1;
    goto corral_source_split_5979;

  $bb5:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i37, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i37, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb125:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb130:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1329} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} ldv_initialize_perm_bits_3();
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1326} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6169;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1325} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6168;

  $bb129:
    assume out_$i135 == 1;
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 0);
    goto corral_source_split_6165;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i134 := $M.69;
    goto corral_source_split_6164;

  $bb127:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 0);
    goto corral_source_split_6159;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$i132 := $M.69;
    goto corral_source_split_6158;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $M.69 := out_$i131;
    call {:si_unique_call 1323} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i131);
    goto corral_source_split_6157;

  SeqInstr_111:
    goto corral_source_split_6156;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} out_$i131 := vfio_pci_init();
    goto SeqInstr_110;

  $bb124:
    assume out_$i130 == 1;
    goto corral_source_split_6155;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$i129 := $M.63;
    goto corral_source_split_6138;

  $bb111:
    assume out_$i123 == 1;
    goto corral_source_split_6137;

  $bb110:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i121, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} ldv_stop();
    goto corral_source_split_6174;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb112:
    assume {:verifier.code 0} true;
    assume !(out_$i123 == 1);
    goto $bb113;

  $bb115:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb113;

  $bb137:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} ldv_main_exported_3();
    goto corral_source_split_6177;

  $bb136:
    assume out_$i137 == 1;
    goto corral_source_split_6176;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    out_$i137 := $ne.i32(out_$i136, 0);
    goto corral_source_split_5985;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    out_$i136 := $M.64;
    goto corral_source_split_5984;

  $bb13:
    assume !(out_$i42 == 1);
    goto corral_source_split_5983;

  $bb7:
    assume out_$i40 == 1;
    goto corral_source_split_5973;

  $bb6:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i37, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb140:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb145:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1336} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6188;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} out_vslice_dummy_var_117 := vfio_pci_aer_err_detected(in_$p24, out_$i144);
    goto corral_source_split_6187;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i32($M.57, in_$p5);
    goto corral_source_split_6186;

  $bb144:
    assume out_$i143 == 1;
    goto corral_source_split_6185;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 1);
    goto corral_source_split_6183;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    out_$i142 := $M.66;
    goto corral_source_split_6182;

  $bb142:
    assume out_$i141 == 1;
    goto corral_source_split_6181;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_6179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1332} out_$i140 := __VERIFIER_nondet_int();
    call {:si_unique_call 1333} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i140);
    call {:si_unique_call 1334} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i140);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb139:
    assume out_$i139 == 1;
    goto corral_source_split_6179;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    out_$i139 := $ne.i32(out_$i138, 0);
    goto corral_source_split_5977;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    out_$i138 := $M.66;
    goto corral_source_split_5976;

  $bb9:
    assume out_$i41 == 1;
    goto corral_source_split_5975;

  $bb8:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i37, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} ldv_stop();
    goto corral_source_split_6190;

  $bb143:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ldv_stop();
    goto corral_source_split_6192;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb11;

  $bb77_dummy:
    call {:si_unique_call 1} out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i61, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i76, out_$i77, out_$i78, out_$i79, out_$i81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p7, in_$p8, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p22, in_$p24, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i61, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i76, out_$i77, out_$i78, out_$i79, out_$i81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i60: i32, in_$i61: i1, in_$i63: i32, in_$i64: i1, in_$i65: i64, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i64, in_$i81: i32, in_$i82: i1, in_$i83: i64, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i64, in_vslice_dummy_var_113: i64, in_vslice_dummy_var_114: i64, in_vslice_dummy_var_115: i64, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32) returns (out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i60: i32, out_$i61: i1, out_$i63: i32, out_$i64: i1, out_$i65: i64, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i64, out_$i81: i32, out_$i82: i1, out_$i83: i64, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i64, out_vslice_dummy_var_113: i64, out_vslice_dummy_var_114: i64, out_vslice_dummy_var_115: i64, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32);
  modifies $M.59, $M.0, $M.7, $CurrAddr, $M.35, $M.4, $M.52, $M.3, $M.56, $M.53, $M.62, $M.10, $M.11, $M.12, $M.13, $M.14, $M.21, $M.24, $M.27, $M.30, $M.22, $M.25, $M.28, $M.31, assertsPassed, $M.5, $M.15, $M.16, $M.17, $M.18, $M.6, $M.67, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.9, $M.45, $M.51, $M.50, $M.60, $M.68, $M.70, $M.71, $M.64, $M.66, $M.63, $M.69, $M.58, $M.73, $M.74, $M.57;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation vfio_pci_fill_ids_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$p13: ref, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32) returns (out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$p13: ref, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32)
{

  entry:
    out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p13, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131 := in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p13, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6348;

  $bb13:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p16;
    goto $bb13_dummy;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_6361;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_6360;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} out_$p16 := strsep(in_$p0, .str.22);
    goto corral_source_split_6359;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i15 == 1;
    goto corral_source_split_6357;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i64(out_$i14, 0);
    goto corral_source_split_6355;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} out_$i14 := strlen(out_$p13);
    call {:si_unique_call 1418} {:cexpr "tmp"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_6354;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $M.74 := $store.i32($M.74, in_$p6, 0);
    goto corral_source_split_6353;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.74 := $store.i32($M.74, in_$p5, 0);
    goto corral_source_split_6352;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $M.74 := $store.i32($M.74, in_$p4, $sub.i32(0, 1));
    goto corral_source_split_6351;

  $bb9:
    assume {:verifier.code 0} true;
    $M.74 := $store.i32($M.74, in_$p3, $sub.i32(0, 1));
    goto corral_source_split_6350;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} out_vslice_dummy_var_129 := printk.ref.ref(.str.19, out_$p13);
    goto corral_source_split_6369;

  $bb16:
    assume out_$i20 == 1;
    goto corral_source_split_6368;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    out_$i20 := $sle.i32(out_$i19, 1);
    goto corral_source_split_6366;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} out_$i19 := sscanf.ref.ref.ref.ref.ref.ref.ref.ref(out_$p13, .str.18, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6);
    call {:si_unique_call 1421} {:cexpr "fields"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_6365;

  $bb11:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} out_vslice_dummy_var_131 := printk.ref.i32.i32.i32.i32.i32.i32(.str.21, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} out_vslice_dummy_var_130 := printk.ref.i32.i32.i32.i32.i32.i32.i32(.str.20, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i28);
    goto corral_source_split_6387;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.74, in_$p6);
    goto corral_source_split_6386;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.74, in_$p5);
    goto corral_source_split_6385;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.74, in_$p4);
    goto corral_source_split_6384;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.74, in_$p3);
    goto corral_source_split_6383;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.74, in_$p2);
    goto corral_source_split_6382;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.74, in_$p1);
    goto corral_source_split_6381;

  $bb19:
    assume out_$i29 == 1;
    goto corral_source_split_6380;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_6378;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} out_$i28 := pci_add_dynid(vfio_pci_driver, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, 0);
    call {:si_unique_call 1424} {:cexpr "rc"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_6377;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.74, in_$p6);
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.74, in_$p5);
    goto corral_source_split_6375;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.74, in_$p4);
    goto corral_source_split_6374;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.74, in_$p3);
    goto corral_source_split_6373;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.74, in_$p2);
    goto corral_source_split_6372;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.74, in_$p1);
    goto corral_source_split_6371;

  $bb17:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.74, in_$p6);
    goto corral_source_split_6395;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.74, in_$p5);
    goto corral_source_split_6394;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.74, in_$p4);
    goto corral_source_split_6393;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.74, in_$p3);
    goto corral_source_split_6392;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.74, in_$p2);
    goto corral_source_split_6391;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.74, in_$p1);
    goto corral_source_split_6390;

  $bb20:
    assume !(out_$i29 == 1);
    goto corral_source_split_6389;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p13, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131 := vfio_pci_fill_ids_loop_$bb8(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p13, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131);
    return;

  exit:
    return;
}



procedure vfio_pci_fill_ids_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$p13: ref, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32) returns (out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$p13: ref, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32);
  modifies $M.74;



implementation {:SIextraRecBound 3} vfio_bar_fixup_loop_$bb1(in_$p2: ref, in_$i9: i64, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i17: i64, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$i15: i32, in_$p16: ref, in_$i64: i32, in_$p65: ref, in_$i66: i1, in_$p7: ref, in_$i8: i32) returns (out_$i9: i64, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i17: i64, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$i15: i32, out_$p16: ref, out_$i64: i32, out_$p65: ref, out_$i66: i1, out_$p7: ref, out_$i8: i32)
{

  entry:
    out_$i9, out_$p12, out_$i13, out_$i14, out_$i17, out_$p20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i15, out_$p16, out_$i64, out_$p65, out_$i66, out_$p7, out_$i8 := in_$i9, in_$p12, in_$i13, in_$i14, in_$i17, in_$p20, in_$i21, in_$i22, in_$i23, in_$p26, in_$i27, in_$i28, in_$p31, in_$i32, in_$i33, in_$i34, in_$p37, in_$i38, in_$i39, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i15, in_$p16, in_$i64, in_$p65, in_$i66, in_$p7, in_$i8;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6776;

  $bb16:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$p7, out_$i8 := out_$p65, out_$i64;
    goto $bb16_dummy;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$i66 := $sle.i32(out_$i64, 5);
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(out_$p16, $mul.ref(1, 4));
    goto corral_source_split_6788;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i15, 1);
    call {:si_unique_call 1541} {:cexpr "i"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_6787;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6786;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    out_$i15, out_$p16 := out_$i62, out_$p63;
    goto $bb5;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$i15, out_$p16 := out_$i8, out_$p7;
    goto $bb5;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p7, 0);
    goto corral_source_split_6784;

  $bb3:
    assume out_$i14 == 1;
    goto corral_source_split_6783;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i64(out_$i13, 0);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i64($M.0, out_$p12);
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(out_$i9, 56)), $mul.ref(0, 1));
    goto corral_source_split_6779;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    goto corral_source_split_6778;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6838;

  $bb14:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i62, out_$p63 := out_$i8, out_$p7;
    goto $bb15;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i62, out_$p63 := out_$i61, out_$p56;
    goto $bb15;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1544} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_6836;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p56, out_$i60);
    goto corral_source_split_6835;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i32(out_$i57, out_$i59);
    goto corral_source_split_6834;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i64.i32(out_$i58);
    goto corral_source_split_6833;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    out_$i58 := $lshr.i64(out_$i46, 32);
    goto corral_source_split_6832;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_6831;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p7, $mul.ref(1, 4));
    goto corral_source_split_6830;

  $bb13:
    assume out_$i55 == 1;
    goto corral_source_split_6829;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_6827;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    out_$i54 := $and.i32(out_$i53, 4);
    goto corral_source_split_6826;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p7);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p7, out_$i52);
    goto corral_source_split_6824;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    out_$i52 := $or.i32(out_$i51, out_$i50);
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p7);
    goto corral_source_split_6822;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} out_$i50 := vfio_generate_bar_flags(in_$p2, out_$i8);
    call {:si_unique_call 1543} {:cexpr "tmp"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p7, out_$i49);
    goto corral_source_split_6820;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    out_$i49 := $and.i32(out_$i47, out_$i48);
    goto corral_source_split_6819;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i64.i32(out_$i46);
    goto corral_source_split_6818;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p7);
    goto corral_source_split_6817;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6816;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$i46 := 0;
    goto $bb12;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i45;
    goto $bb12;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    out_$i45 := $xor.i64(out_$i44, $sub.i64(0, 1));
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i64(out_$i38, out_$i43);
    goto corral_source_split_6802;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(out_$i39, 56)), $mul.ref(0, 1));
    goto corral_source_split_6800;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i8);
    goto corral_source_split_6799;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.0, out_$p37);
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(out_$i34, 56)), $mul.ref(8, 1));
    goto corral_source_split_6797;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i8);
    goto corral_source_split_6796;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb8;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(out_$i17, 56)), $mul.ref(0, 1));
    goto corral_source_split_6792;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i8);
    goto corral_source_split_6791;

  $bb4:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i27, out_$i32);
    goto corral_source_split_6812;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    goto corral_source_split_6811;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(out_$i28, 56)), $mul.ref(0, 1));
    goto corral_source_split_6810;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i8);
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.0, out_$p26);
    goto corral_source_split_6808;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(out_$i23, 56)), $mul.ref(8, 1));
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i8);
    goto corral_source_split_6806;

  $bb9:
    assume !(out_$i22 == 1);
    goto corral_source_split_6805;

  $bb11:
    assume !(out_$i33 == 1);
    goto corral_source_split_6814;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i9, out_$p12, out_$i13, out_$i14, out_$i17, out_$p20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i15, out_$p16, out_$i64, out_$p65, out_$i66, out_$p7, out_$i8 := vfio_bar_fixup_loop_$bb1(in_$p2, out_$i9, out_$p12, out_$i13, out_$i14, out_$i17, out_$p20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i15, out_$p16, out_$i64, out_$p65, out_$i66, out_$p7, out_$i8);
    return;

  exit:
    return;
}



procedure vfio_bar_fixup_loop_$bb1(in_$p2: ref, in_$i9: i64, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i17: i64, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$i15: i32, in_$p16: ref, in_$i64: i32, in_$p65: ref, in_$i66: i1, in_$p7: ref, in_$i8: i32) returns (out_$i9: i64, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i17: i64, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$i15: i32, out_$p16: ref, out_$i64: i32, out_$p65: ref, out_$i66: i1, out_$p7: ref, out_$i8: i32);
  modifies $M.0;


