var $M.1: [ref]i8;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]i24;

var $M.7: [ref]i8;

var $M.8: [ref]i8;

var $M.9: i32;

var $M.11: [ref]i8;

var $M.12: [ref]i16;

var $M.13: [ref]i8;

var $M.15: [ref]i8;

var $M.16: [ref]i8;

var $M.18: [ref]i8;

var $M.19: [ref]i8;

var $M.20: [ref]ref;

var $M.21: [ref]i32;

var $M.22: ref;

var $M.23: ref;

var $M.24: ref;

var $M.25: ref;

var $M.26: ref;

var $M.27: ref;

var $M.28: ref;

var $M.29: ref;

var $M.30: ref;

var $M.31: ref;

var $M.32: ref;

var $M.33: [ref]i8;

var $M.34: [ref]i8;

var $M.35: [ref]i8;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.75: [ref]ref;

var $M.76: [ref]ref;

var $M.77: [ref]ref;

var $M.78: [ref]ref;

var $M.79: [ref]ref;

var $M.80: [ref]ref;

var $M.81: [ref]ref;

var $M.82: [ref]ref;

var $M.83: [ref]ref;

var $M.84: [ref]ref;

var $M.85: [ref]ref;

var $M.86: [ref]ref;

var $M.87: [ref]ref;

var $M.88: [ref]ref;

var $M.89: [ref]ref;

var $M.90: [ref]ref;

var $M.91: [ref]ref;

var $M.92: [ref]ref;

var $M.93: [ref]ref;

var $M.94: [ref]ref;

var $M.95: [ref]ref;

var $M.96: [ref]ref;

var $M.97: [ref]ref;

var $M.98: [ref]ref;

var $M.99: [ref]ref;

var $M.100: [ref]ref;

var $M.101: [ref]ref;

var $M.102: [ref]ref;

var $M.103: [ref]ref;

var $M.104: [ref]ref;

var $M.105: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 537201);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ep_fops_group1: ref;

axiom ep_fops_group1 == $sub.ref(0, 2060);

const ep_fops_group2: ref;

axiom ep_fops_group2 == $sub.ref(0, 3092);

const fifo_fops_group1: ref;

axiom fifo_fops_group1 == $sub.ref(0, 4124);

const fifo_fops_group2: ref;

axiom fifo_fops_group2 == $sub.ref(0, 5156);

const s3c_hsotg_gadget_ops_group0: ref;

axiom s3c_hsotg_gadget_ops_group0 == $sub.ref(0, 6188);

const s3c_hsotg_gadget_ops_group1: ref;

axiom s3c_hsotg_gadget_ops_group1 == $sub.ref(0, 7220);

const s3c_hsotg_ep_ops_group0: ref;

axiom s3c_hsotg_ep_ops_group0 == $sub.ref(0, 8252);

const s3c_hsotg_ep_ops_group1: ref;

axiom s3c_hsotg_ep_ops_group1 == $sub.ref(0, 9284);

const s3c_hsotg_driver_group0: ref;

axiom s3c_hsotg_driver_group0 == $sub.ref(0, 10316);

const state_fops_group1: ref;

axiom state_fops_group1 == $sub.ref(0, 11348);

const state_fops_group2: ref;

axiom state_fops_group2 == $sub.ref(0, 12380);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 13408);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 14436);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 15464);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 16492);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 17520);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 18548);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 19576);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 20604);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 21632);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 22660);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 23688);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 24716);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 25744);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 26772);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 27800);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 28828);

const s3c_hsotg_driver: ref;

axiom s3c_hsotg_driver == $sub.ref(0, 30028);

const ep_fops: ref;

axiom ep_fops == $sub.ref(0, 31284);

const fifo_fops: ref;

axiom fifo_fops == $sub.ref(0, 32540);

const state_fops: ref;

axiom state_fops == $sub.ref(0, 33796);

const s3c_hsotg_ep_ops: ref;

axiom s3c_hsotg_ep_ops == $sub.ref(0, 34900);

const {:count 2} s3c_hsotg_supply_names: ref;

axiom s3c_hsotg_supply_names == $sub.ref(0, 35940);

const s3c_hsotg_gadget_ops: ref;

axiom s3c_hsotg_gadget_ops == $sub.ref(0, 37044);

const .str: ref;

axiom .str == $sub.ref(0, 38079);

const {:count 21} .str.1: ref;

axiom .str.1 == $sub.ref(0, 39124);

const {:count 20} .str.2: ref;

axiom .str.2 == $sub.ref(0, 40168);

const {:count 12} .str.3: ref;

axiom .str.3 == $sub.ref(0, 41204);

const {:count 216} .str.4: ref;

axiom .str.4 == $sub.ref(0, 42444);

const {:count 20} .str.5: ref;

axiom .str.5 == $sub.ref(0, 43488);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 34} .str.35: ref;

axiom .str.35 == $sub.ref(0, 44546);

const {:count 42} .str.33: ref;

axiom .str.33 == $sub.ref(0, 45612);

const {:count 23} .str.34: ref;

axiom .str.34 == $sub.ref(0, 46659);

const {:count 27} .str.6: ref;

axiom .str.6 == $sub.ref(0, 47710);

const {:count 26} .str.7: ref;

axiom .str.7 == $sub.ref(0, 48760);

const {:count 38} .str.8: ref;

axiom .str.8 == $sub.ref(0, 49822);

const {:count 20} .str.9: ref;

axiom .str.9 == $sub.ref(0, 50866);

const {:count 20} .str.10: ref;

axiom .str.10 == $sub.ref(0, 51910);

const {:count 28} .str.11: ref;

axiom .str.11 == $sub.ref(0, 52962);

const {:count 35} .str.12: ref;

axiom .str.12 == $sub.ref(0, 54021);

const {:count 3} .str.13: ref;

axiom .str.13 == $sub.ref(0, 55048);

const {:count 4} .str.14: ref;

axiom .str.14 == $sub.ref(0, 56076);

const {:count 21} .str.15: ref;

axiom .str.15 == $sub.ref(0, 57121);

const {:count 33} .str.16: ref;

axiom .str.16 == $sub.ref(0, 58178);

const {:count 33} .str.17: ref;

axiom .str.17 == $sub.ref(0, 59235);

const {:count 27} .str.18: ref;

axiom .str.18 == $sub.ref(0, 60286);

const {:count 32} .str.19: ref;

axiom .str.19 == $sub.ref(0, 61342);

const {:count 20} .str.20: ref;

axiom .str.20 == $sub.ref(0, 62386);

const {:count 14} .str.21: ref;

axiom .str.21 == $sub.ref(0, 63424);

const {:count 50} .str.22: ref;

axiom .str.22 == $sub.ref(0, 64498);

const {:count 20} .str.23: ref;

axiom .str.23 == $sub.ref(0, 65542);

const {:count 21} .str.24: ref;

axiom .str.24 == $sub.ref(0, 66587);

const {:count 40} .str.25: ref;

axiom .str.25 == $sub.ref(0, 67651);

const {:count 22} .str.26: ref;

axiom .str.26 == $sub.ref(0, 68697);

const {:count 22} .str.27: ref;

axiom .str.27 == $sub.ref(0, 69743);

const {:count 39} .str.28: ref;

axiom .str.28 == $sub.ref(0, 70806);

const {:count 51} .str.29: ref;

axiom .str.29 == $sub.ref(0, 71881);

const {:count 36} .str.30: ref;

axiom .str.30 == $sub.ref(0, 72941);

const {:count 19} .str.31: ref;

axiom .str.31 == $sub.ref(0, 73984);

const {:count 21} .str.32: ref;

axiom .str.32 == $sub.ref(0, 75029);

const {:count 28} .str.216: ref;

axiom .str.216 == $sub.ref(0, 76081);

const {:count 20} .str.217: ref;

axiom .str.217 == $sub.ref(0, 77125);

const {:count 15} .str.218: ref;

axiom .str.218 == $sub.ref(0, 78164);

const {:count 15} .str.219: ref;

axiom .str.219 == $sub.ref(0, 79203);

const {:count 26} .str.220: ref;

axiom .str.220 == $sub.ref(0, 80253);

const {:count 31} .str.100: ref;

axiom .str.100 == $sub.ref(0, 81308);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 17} .str.221: ref;

axiom .str.221 == $sub.ref(0, 82349);

const {:count 17} .str.214: ref;

axiom .str.214 == $sub.ref(0, 83390);

const {:count 15} .str.215: ref;

axiom .str.215 == $sub.ref(0, 84429);

const {:count 20} .str.149: ref;

axiom .str.149 == $sub.ref(0, 85473);

const {:count 39} .str.123: ref;

axiom .str.123 == $sub.ref(0, 86536);

const {:count 13} .str.150: ref;

axiom .str.150 == $sub.ref(0, 87573);

const {:count 24} .str.42: ref;

axiom .str.42 == $sub.ref(0, 88621);

const {:count 28} .str.43: ref;

axiom .str.43 == $sub.ref(0, 89673);

const {:count 22} .str.44: ref;

axiom .str.44 == $sub.ref(0, 90719);

const {:count 23} .str.45: ref;

axiom .str.45 == $sub.ref(0, 91766);

const {:count 19} .str.68: ref;

axiom .str.68 == $sub.ref(0, 92809);

const {:count 45} .str.69: ref;

axiom .str.69 == $sub.ref(0, 93878);

const {:count 39} .str.70: ref;

axiom .str.70 == $sub.ref(0, 94941);

const {:count 18} .str.71: ref;

axiom .str.71 == $sub.ref(0, 95983);

const {:count 25} .str.46: ref;

axiom .str.46 == $sub.ref(0, 97032);

const {:count 15} .str.47: ref;

axiom .str.47 == $sub.ref(0, 98071);

const {:count 26} .str.48: ref;

axiom .str.48 == $sub.ref(0, 99121);

const {:count 42} .str.49: ref;

axiom .str.49 == $sub.ref(0, 100187);

const {:count 17} .str.50: ref;

axiom .str.50 == $sub.ref(0, 101228);

const {:count 16} .str.51: ref;

axiom .str.51 == $sub.ref(0, 102268);

const {:count 24} .str.52: ref;

axiom .str.52 == $sub.ref(0, 103316);

const {:count 20} .str.39: ref;

axiom .str.39 == $sub.ref(0, 104360);

const {:count 20} .str.40: ref;

axiom .str.40 == $sub.ref(0, 105404);

const {:count 49} .str.41: ref;

axiom .str.41 == $sub.ref(0, 106477);

const {:count 30} .str.63: ref;

axiom .str.63 == $sub.ref(0, 107531);

const {:count 16} .str.64: ref;

axiom .str.64 == $sub.ref(0, 108571);

const {:count 4} .str.65: ref;

axiom .str.65 == $sub.ref(0, 109599);

const {:count 6} .str.66: ref;

axiom .str.66 == $sub.ref(0, 110629);

const {:count 28} .str.67: ref;

axiom .str.67 == $sub.ref(0, 111681);

const {:count 26} .str.62: ref;

axiom .str.62 == $sub.ref(0, 112731);

const {:count 18} .str.36: ref;

axiom .str.36 == $sub.ref(0, 113773);

const {:count 21} .str.37: ref;

axiom .str.37 == $sub.ref(0, 114818);

const {:count 29} .str.38: ref;

axiom .str.38 == $sub.ref(0, 115871);

const {:count 29} .str.59: ref;

axiom .str.59 == $sub.ref(0, 116924);

const {:count 24} .str.60: ref;

axiom .str.60 == $sub.ref(0, 117972);

const {:count 20} .str.61: ref;

axiom .str.61 == $sub.ref(0, 119016);

const {:count 21} .str.53: ref;

axiom .str.53 == $sub.ref(0, 120061);

const {:count 21} .str.54: ref;

axiom .str.54 == $sub.ref(0, 121106);

const {:count 22} .str.55: ref;

axiom .str.55 == $sub.ref(0, 122152);

const {:count 22} .str.56: ref;

axiom .str.56 == $sub.ref(0, 123198);

const {:count 28} .str.57: ref;

axiom .str.57 == $sub.ref(0, 124250);

const {:count 19} .str.58: ref;

axiom .str.58 == $sub.ref(0, 125293);

const {:count 43} .str.151: ref;

axiom .str.151 == $sub.ref(0, 126360);

const {:count 20} .str.152: ref;

axiom .str.152 == $sub.ref(0, 127404);

const {:count 28} .str.153: ref;

axiom .str.153 == $sub.ref(0, 128456);

const {:count 20} .str.168: ref;

axiom .str.168 == $sub.ref(0, 129500);

const {:count 16} .str.169: ref;

axiom .str.169 == $sub.ref(0, 130540);

const {:count 32} .str.170: ref;

axiom .str.170 == $sub.ref(0, 131596);

const {:count 32} .str.171: ref;

axiom .str.171 == $sub.ref(0, 132652);

const {:count 18} .str.172: ref;

axiom .str.172 == $sub.ref(0, 133694);

const {:count 21} .str.166: ref;

axiom .str.166 == $sub.ref(0, 134739);

const {:count 11} .str.167: ref;

axiom .str.167 == $sub.ref(0, 135774);

const {:count 7} .str.164: ref;

axiom .str.164 == $sub.ref(0, 136805);

const {:count 7} .str.165: ref;

axiom .str.165 == $sub.ref(0, 137836);

const {:count 19} .str.80: ref;

axiom .str.80 == $sub.ref(0, 138879);

const {:count 20} .str.72: ref;

axiom .str.72 == $sub.ref(0, 139923);

const {:count 55} .str.73: ref;

axiom .str.73 == $sub.ref(0, 141002);

const {:count 25} .str.74: ref;

axiom .str.74 == $sub.ref(0, 142051);

const {:count 37} .str.75: ref;

axiom .str.75 == $sub.ref(0, 143112);

const {:count 31} .str.76: ref;

axiom .str.76 == $sub.ref(0, 144167);

const {:count 26} .str.77: ref;

axiom .str.77 == $sub.ref(0, 145217);

const {:count 25} .str.78: ref;

axiom .str.78 == $sub.ref(0, 146266);

const {:count 21} .str.79: ref;

axiom .str.79 == $sub.ref(0, 147311);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 39} .str.81: ref;

axiom .str.81 == $sub.ref(0, 148374);

const {:count 33} .str.82: ref;

axiom .str.82 == $sub.ref(0, 149431);

const {:count 32} .str.83: ref;

axiom .str.83 == $sub.ref(0, 150487);

const {:count 31} .str.84: ref;

axiom .str.84 == $sub.ref(0, 151542);

const {:count 31} .str.85: ref;

axiom .str.85 == $sub.ref(0, 152597);

const {:count 19} .str.86: ref;

axiom .str.86 == $sub.ref(0, 153640);

const {:count 37} .str.87: ref;

axiom .str.87 == $sub.ref(0, 154701);

const {:count 35} .str.88: ref;

axiom .str.88 == $sub.ref(0, 155760);

const {:count 2} .str.89: ref;

axiom .str.89 == $sub.ref(0, 156786);

const {:count 21} .str.198: ref;

axiom .str.198 == $sub.ref(0, 157831);

const {:count 17} .str.199: ref;

axiom .str.199 == $sub.ref(0, 158872);

const {:count 33} .str.200: ref;

axiom .str.200 == $sub.ref(0, 159929);

const {:count 20} .str.201: ref;

axiom .str.201 == $sub.ref(0, 160973);

const {:count 37} .str.202: ref;

axiom .str.202 == $sub.ref(0, 162034);

const {:count 39} .str.203: ref;

axiom .str.203 == $sub.ref(0, 163097);

const {:count 33} .str.204: ref;

axiom .str.204 == $sub.ref(0, 164154);

const {:count 33} .str.205: ref;

axiom .str.205 == $sub.ref(0, 165211);

const {:count 33} .str.206: ref;

axiom .str.206 == $sub.ref(0, 166268);

const {:count 35} .str.207: ref;

axiom .str.207 == $sub.ref(0, 167327);

const {:count 8} .str.208: ref;

axiom .str.208 == $sub.ref(0, 168359);

const {:count 16} .str.209: ref;

axiom .str.209 == $sub.ref(0, 169399);

const {:count 23} .str.210: ref;

axiom .str.210 == $sub.ref(0, 170446);

const {:count 30} .str.211: ref;

axiom .str.211 == $sub.ref(0, 171500);

const {:count 26} .str.212: ref;

axiom .str.212 == $sub.ref(0, 172550);

const {:count 17} .str.213: ref;

axiom .str.213 == $sub.ref(0, 173591);

const {:count 10} .str.197: ref;

axiom .str.197 == $sub.ref(0, 174625);

const {:count 24} .str.196: ref;

axiom .str.196 == $sub.ref(0, 175673);

const {:count 26} .str.195: ref;

axiom .str.195 == $sub.ref(0, 176723);

const {:count 19} .str.90: ref;

axiom .str.90 == $sub.ref(0, 177766);

const {:count 9} .str.91: ref;

axiom .str.91 == $sub.ref(0, 178799);

const {:count 41} .str.92: ref;

axiom .str.92 == $sub.ref(0, 179864);

const {:count 4} .str.93: ref;

axiom .str.93 == $sub.ref(0, 180892);

const {:count 22} .str.94: ref;

axiom .str.94 == $sub.ref(0, 181938);

const {:count 17} .str.95: ref;

axiom .str.95 == $sub.ref(0, 182979);

const {:count 23} .str.96: ref;

axiom .str.96 == $sub.ref(0, 184026);

const {:count 18} .str.97: ref;

axiom .str.97 == $sub.ref(0, 185068);

const {:count 17} .str.98: ref;

axiom .str.98 == $sub.ref(0, 186109);

const {:count 32} .str.99: ref;

axiom .str.99 == $sub.ref(0, 187165);

const {:count 28} .str.101: ref;

axiom .str.101 == $sub.ref(0, 188217);

const {:count 29} .str.102: ref;

axiom .str.102 == $sub.ref(0, 189270);

const {:count 32} .str.103: ref;

axiom .str.103 == $sub.ref(0, 190326);

const {:count 40} .str.189: ref;

axiom .str.189 == $sub.ref(0, 191390);

const {:count 29} .str.190: ref;

axiom .str.190 == $sub.ref(0, 192443);

const {:count 34} .str.174: ref;

axiom .str.174 == $sub.ref(0, 193501);

const {:count 34} .str.191: ref;

axiom .str.191 == $sub.ref(0, 194559);

const {:count 47} .str.192: ref;

axiom .str.192 == $sub.ref(0, 195630);

const {:count 48} .str.193: ref;

axiom .str.193 == $sub.ref(0, 196702);

const {:count 34} .str.194: ref;

axiom .str.194 == $sub.ref(0, 197760);

const {:count 26} .str.182: ref;

axiom .str.182 == $sub.ref(0, 198810);

const {:count 6} .str.183: ref;

axiom .str.183 == $sub.ref(0, 199840);

const {:count 28} .str.184: ref;

axiom .str.184 == $sub.ref(0, 200892);

const {:count 23} .str.185: ref;

axiom .str.185 == $sub.ref(0, 201939);

const {:count 5} .str.186: ref;

axiom .str.186 == $sub.ref(0, 202968);

const {:count 27} .str.187: ref;

axiom .str.187 == $sub.ref(0, 204019);

const {:count 32} .str.188: ref;

axiom .str.188 == $sub.ref(0, 205075);

const .str.179: ref;

axiom .str.179 == $sub.ref(0, 206100);

const {:count 7} .str.180: ref;

axiom .str.180 == $sub.ref(0, 207131);

const {:count 8} .str.175: ref;

axiom .str.175 == $sub.ref(0, 208163);

const {:count 10} .str.177: ref;

axiom .str.177 == $sub.ref(0, 209197);

const {:count 7} .str.178: ref;

axiom .str.178 == $sub.ref(0, 210228);

const {:count 10} .str.176: ref;

axiom .str.176 == $sub.ref(0, 211262);

const {:count 15} .str.173: ref;

axiom .str.173 == $sub.ref(0, 212301);

const {:count 14} .str.104: ref;

axiom .str.104 == $sub.ref(0, 213339);

const {:count 31} .str.105: ref;

axiom .str.105 == $sub.ref(0, 214394);

const {:count 14} .str.106: ref;

axiom .str.106 == $sub.ref(0, 215432);

const {:count 16} .str.107: ref;

axiom .str.107 == $sub.ref(0, 216472);

const {:count 40} .str.108: ref;

axiom .str.108 == $sub.ref(0, 217536);

const {:count 16} .str.109: ref;

axiom .str.109 == $sub.ref(0, 218576);

const {:count 12} .str.110: ref;

axiom .str.110 == $sub.ref(0, 219612);

const {:count 15} .str.111: ref;

axiom .str.111 == $sub.ref(0, 220651);

const {:count 10} .str.112: ref;

axiom .str.112 == $sub.ref(0, 221685);

const {:count 9} .str.113: ref;

axiom .str.113 == $sub.ref(0, 222718);

const {:count 34} .str.114: ref;

axiom .str.114 == $sub.ref(0, 223776);

const {:count 17} .str.115: ref;

axiom .str.115 == $sub.ref(0, 224817);

const {:count 16} .str.116: ref;

axiom .str.116 == $sub.ref(0, 225857);

const {:count 18} .str.117: ref;

axiom .str.117 == $sub.ref(0, 226899);

const {:count 22} .str.118: ref;

axiom .str.118 == $sub.ref(0, 227945);

const {:count 21} .str.119: ref;

axiom .str.119 == $sub.ref(0, 228990);

const {:count 20} .str.154: ref;

axiom .str.154 == $sub.ref(0, 230034);

const {:count 28} .str.155: ref;

axiom .str.155 == $sub.ref(0, 231086);

const {:count 14} .str.156: ref;

axiom .str.156 == $sub.ref(0, 232124);

const {:count 24} .str.157: ref;

axiom .str.157 == $sub.ref(0, 233172);

const {:count 43} .str.158: ref;

axiom .str.158 == $sub.ref(0, 234239);

const {:count 41} .str.159: ref;

axiom .str.159 == $sub.ref(0, 235304);

const {:count 25} .str.160: ref;

axiom .str.160 == $sub.ref(0, 236353);

const {:count 55} .str.161: ref;

axiom .str.161 == $sub.ref(0, 237432);

const {:count 18} .str.162: ref;

axiom .str.162 == $sub.ref(0, 238474);

const {:count 28} .str.163: ref;

axiom .str.163 == $sub.ref(0, 239526);

const {:count 25} .str.144: ref;

axiom .str.144 == $sub.ref(0, 240575);

const {:count 23} .str.145: ref;

axiom .str.145 == $sub.ref(0, 241622);

const {:count 39} .str.146: ref;

axiom .str.146 == $sub.ref(0, 242685);

const {:count 17} .str.141: ref;

axiom .str.141 == $sub.ref(0, 243726);

const {:count 19} .str.142: ref;

axiom .str.142 == $sub.ref(0, 244769);

const {:count 28} .str.143: ref;

axiom .str.143 == $sub.ref(0, 245821);

const {:count 16} .str.147: ref;

axiom .str.147 == $sub.ref(0, 246861);

const {:count 31} .str.148: ref;

axiom .str.148 == $sub.ref(0, 247916);

const {:count 16} .str.124: ref;

axiom .str.124 == $sub.ref(0, 248956);

const {:count 29} .str.125: ref;

axiom .str.125 == $sub.ref(0, 250009);

const {:count 46} .str.126: ref;

axiom .str.126 == $sub.ref(0, 251079);

const {:count 14} .str.127: ref;

axiom .str.127 == $sub.ref(0, 252117);

const {:count 12} .str.128: ref;

axiom .str.128 == $sub.ref(0, 253153);

const {:count 19} .str.129: ref;

axiom .str.129 == $sub.ref(0, 254196);

const {:count 25} .str.130: ref;

axiom .str.130 == $sub.ref(0, 255245);

const {:count 26} .str.131: ref;

axiom .str.131 == $sub.ref(0, 256295);

const {:count 19} .str.132: ref;

axiom .str.132 == $sub.ref(0, 257338);

const {:count 23} .str.133: ref;

axiom .str.133 == $sub.ref(0, 258385);

const {:count 22} .str.134: ref;

axiom .str.134 == $sub.ref(0, 259431);

const {:count 22} .str.135: ref;

axiom .str.135 == $sub.ref(0, 260477);

const {:count 21} .str.136: ref;

axiom .str.136 == $sub.ref(0, 261522);

const {:count 34} .str.137: ref;

axiom .str.137 == $sub.ref(0, 262580);

const {:count 44} .str.138: ref;

axiom .str.138 == $sub.ref(0, 263648);

const {:count 24} .str.139: ref;

axiom .str.139 == $sub.ref(0, 264696);

const {:count 27} .str.140: ref;

axiom .str.140 == $sub.ref(0, 265747);

const {:count 23} .str.120: ref;

axiom .str.120 == $sub.ref(0, 266794);

const {:count 24} .str.121: ref;

axiom .str.121 == $sub.ref(0, 267842);

const {:count 18} .str.122: ref;

axiom .str.122 == $sub.ref(0, 268884);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 269916);

const {:count 3} .str.1.412: ref;

axiom .str.1.412 == $sub.ref(0, 270943);

const {:count 14} .str.413: ref;

axiom .str.413 == $sub.ref(0, 271981);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 273009);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 274041);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 275073);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 276105);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 277137);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const s3c_hsotg_gadget_getframe: ref;

axiom s3c_hsotg_gadget_getframe == $sub.ref(0, 278169);

procedure s3c_hsotg_gadget_getframe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_gadget_getframe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p1 := to_hsotg($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i2 := s3c_hsotg_read_frameno($p1);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 12} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const s3c_hsotg_pullup: ref;

axiom s3c_hsotg_pullup == $sub.ref(0, 279201);

procedure s3c_hsotg_pullup($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_pullup($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 14} {:cexpr "s3c_hsotg_pullup:arg:is_on"} boogie_si_record_i32($i1);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p3 := to_hsotg($p0);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.3);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.214);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.4);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p7, .str.215);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.6, $p9);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 2984);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p9, $i12);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, 1);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.7, $p14);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 17} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} ldv_spin_lock();
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i1, 0);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} s3c_hsotg_disconnect($p3);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} s3c_hsotg_phy_disable($p3);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(112, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, 0);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} spin_unlock_irqrestore($p26, 0);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} s3c_hsotg_phy_enable($p3);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} s3c_hsotg_core_init($p3);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_11 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p21, .str.215, .str.214, $i1);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s3c_hsotg_udc_start: ref;

axiom s3c_hsotg_udc_start == $sub.ref(0, 280233);

procedure s3c_hsotg_udc_start($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation s3c_hsotg_udc_start($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $i6: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i64;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p2 := to_hsotg($p0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i14 := $ule.i32($i13, 1);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 30} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i29);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 32} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i29, 0);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} vslice_dummy_var_16 := ldv__builtin_expect($i37, 0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, $0.ref);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p41, $p1);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 1424)), $mul.ref(1240, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(136, 1)), $mul.ref(1240, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p48, $p45);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(112, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p50, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(136, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i53 := regulator_bulk_enable(2, $p52);
    call {:si_unique_call 36} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.1, jiffies);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p59, $i58);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_18 := _dev_info.ref.ref.ref($p61, .str.221, $p64);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_17 := dev_err.ref.ref.i32($p56, .str.100, $i53);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p66, $0.ref);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i6 := $i53;
    goto $bb3;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} warn_slowpath_null(.str.4, 2901);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_15 := dev_err.ref.ref.ref($p23, .str.220, .str.217);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} vslice_dummy_var_14 := dev_err.ref.ref.ref($p16, .str.219, .str.217);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_13 := dev_err.ref.ref.ref($p10, .str.218, .str.217);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} vslice_dummy_var_12 := printk.ref.ref(.str.216, .str.217);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;
}



const s3c_hsotg_udc_stop: ref;

axiom s3c_hsotg_udc_stop == $sub.ref(0, 281265);

procedure s3c_hsotg_udc_stop($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.15, $M.21, $CurrAddr, $M.12, $M.16, assertsPassed;



implementation s3c_hsotg_udc_stop($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i10: i32;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i5: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p2 := to_hsotg($p0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(189, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} ldv_spin_lock();
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} s3c_hsotg_phy_disable($p2);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p1);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(112, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, 0);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} spin_unlock_irqrestore($p26, 0);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(136, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_20 := regulator_bulk_disable(2, $p28);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, $0.ref);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb8;

  $bb8:
    call $p11, $p12, $i13, $p15, $i17, $i18, $i19, $i20, $i10, vslice_dummy_var_19 := s3c_hsotg_udc_stop_loop_$bb8($p2, $p6, $p11, $p12, $i13, $p15, $i17, $i18, $i19, $i20, $i10, vslice_dummy_var_19);
    goto $bb8_last;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i10);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref($i13, 144)), $mul.ref(0, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} vslice_dummy_var_19 := s3c_hsotg_ep_disable($p15);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i10, 1);
    call {:si_unique_call 41} {:cexpr "ep"} boogie_si_record_i32($i17);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p6);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, $i17);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb10_dummy;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;
}



const to_hsotg: ref;

axiom to_hsotg == $sub.ref(0, 282297);

procedure to_hsotg($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_hsotg($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 248), 1848));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const s3c_hsotg_ep_disable: ref;

axiom s3c_hsotg_ep_disable == $sub.ref(0, 283329);

procedure s3c_hsotg_ep_disable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $CurrAddr, $M.1, $M.15, $M.21, $M.12, $M.16, assertsPassed;



implementation s3c_hsotg_ep_disable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i28: i32;
  var $i29: i32;
  var $i27: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i24;
  var $i45: i24;
  var $i46: i24;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $p67: ref;
  var $i23: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p2 := our_ep($p0);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.8, $p3);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.8, $p5);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 48} {:cexpr "dir_in"} boogie_si_record_i32($i7);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.8, $p8);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 49} {:cexpr "index"} boogie_si_record_i32($i10);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_21 := _dev_info.ref.ref.ref.ref($p12, .str, .str.1, $p0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i17, $i18);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i7, 0);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i10, 88);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i29 := $mul.i32($i28, 32);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i27 := $i29;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} ldv_spin_lock();
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} kill_all_requests($p4, $p2, $sub.i32(0, 108), 0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i27);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p31, $mul.ref($i32, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i34 := readl($p33);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 55} {:cexpr "ctrl"} boogie_si_record_i32($i34);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 2147483647);
    call {:si_unique_call 56} {:cexpr "ctrl"} boogie_si_record_i32($i35);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, $sub.i32(0, 32769));
    call {:si_unique_call 57} {:cexpr "ctrl"} boogie_si_record_i32($i36);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, 134217728);
    call {:si_unique_call 58} {:cexpr "ctrl"} boogie_si_record_i32($i37);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, .str.3);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p39, .str.1);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str.4);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p41, .str.5);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i44 := $load.i24($M.6, $p43);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i45 := $and.i24($i44, $sub.i24(0, 262144));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i46 := $or.i24($i45, 2636);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p43, $i46);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p47, 1);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.7, $p48);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 1);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 60} {:cexpr "tmp___0"} boogie_si_record_i64($i52);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i27);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p58, $mul.ref($i59, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} writel($i37, $p60);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.8, $p61);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.8, $p64);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} s3c_hsotg_ctrl_epint($p4, $i63, $i66, 0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} spin_unlock_irqrestore($p67, $u0);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i53 == 1;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} vslice_dummy_var_23 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p55, .str.5, .str.1, $i37);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i10, 72);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i25, 32);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb7;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_22 := dev_err.ref.ref.ref($p21, .str.2, .str.1);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb3;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 284361);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 65} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    return;
}



const s3c_hsotg_phy_disable: ref;

axiom s3c_hsotg_phy_disable == $sub.ref(0, 285393);

procedure s3c_hsotg_phy_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_phy_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 16), 1472));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(24, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(32, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(32, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(32, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.1, $p33);
    call {:si_unique_call 69} vslice_dummy_var_26 := devirtbounce($p30, $p4, $i34);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(24, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} usb_phy_shutdown($p20);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_24 := phy_power_off($p10);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_25 := phy_exit($p13);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 286425);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.9;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} ldv_spin_unlock();
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    return;
}



const regulator_bulk_disable: ref;

axiom regulator_bulk_disable == $sub.ref(0, 287457);

procedure regulator_bulk_disable($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation regulator_bulk_disable($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 73} {:cexpr "regulator_bulk_disable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 1} true;
    call {:si_unique_call 74} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 75} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 288489);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 76} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 289521);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 290553);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    return;
}



const phy_power_off: ref;

axiom phy_power_off == $sub.ref(0, 291585);

procedure phy_power_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation phy_power_off($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 1} true;
    call {:si_unique_call 80} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 81} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const phy_exit: ref;

axiom phy_exit == $sub.ref(0, 292617);

procedure phy_exit($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation phy_exit($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 1} true;
    call {:si_unique_call 82} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 83} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_phy_shutdown: ref;

axiom usb_phy_shutdown == $sub.ref(0, 293649);

procedure usb_phy_shutdown($p0: ref);
  free requires assertsPassed;



implementation usb_phy_shutdown($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(176, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(176, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    call {:si_unique_call 84} devirtbounce.1($p8, $p0);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const our_ep: ref;

axiom our_ep == $sub.ref(0, 294681);

procedure our_ep($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation our_ep($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 295713);

procedure _dev_info.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 85} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 86} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 88} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 1} true;
    call {:si_unique_call 89} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 90} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 91} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 92} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 93} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 94} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 95} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 96} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 97} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 98} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 1} true;
    call {:si_unique_call 99} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 296745);

procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 101} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 102} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 1} true;
    call {:si_unique_call 103} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 104} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 1} true;
    call {:si_unique_call 105} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 106} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 1} true;
    call {:si_unique_call 107} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 108} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 1} true;
    call {:si_unique_call 109} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 110} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 111} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 112} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kill_all_requests: ref;

axiom kill_all_requests == $sub.ref(0, 297777);

procedure kill_all_requests($p0: ref, $p1: ref, $i2: i32, $i3: i1);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, $M.12, $M.16, assertsPassed;



implementation kill_all_requests($p0: ref, $p1: ref, $i2: i32, $i3: i1)
{
  var $i4: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p20: ref;
  var $p21: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} {:cexpr "kill_all_requests:arg:result"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 114} {:cexpr "kill_all_requests:arg:force"} boogie_si_record_i1($i3);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(88, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i16, $i18);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(188, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i44 == 1;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.1, $p47);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i50 := $mul.i32($i49, 32);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 2328);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p46, $mul.ref($i52, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i54 := readl($p53);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 117} {:cexpr "tmp"} boogie_si_record_i32($i54);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 65535);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i56 := $mul.i32($i55, 4);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i57 := $ule.i32($i56, 3071);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} s3c_hsotg_txfifo_flush($p0, $i60);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p20, $p21 := $p14, $p9;
    goto $bb4;

  $bb4:
    call $p22, $p23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $p33, $p34, $p35, $p36, $p37, $i38, $i39, $p20, $p21 := kill_all_requests_loop_$bb4($p0, $p1, $i2, $i4, $i18, $p22, $p23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $p33, $p34, $p35, $p36, $p37, $i38, $i39, $p20, $p21);
    goto $bb4_last;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p21);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i24, $i25);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} s3c_hsotg_complete_request($p0, $p1, $p21, $i2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, $i18);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $p20, $p21 := $p36, $p20;
    goto $bb15_dummy;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb8;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i4);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb8;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_449;
}



const readl: ref;

axiom readl == $sub.ref(0, 298809);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 119} $i2 := devirtbounce.2(0, $p1);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 120} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 299841);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 122} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 300873);

procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 125} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 126} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 1} true;
    call {:si_unique_call 135} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 1} true;
    call {:si_unique_call 137} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 1} true;
    call {:si_unique_call 139} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 143} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 144} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 146} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 1} true;
    call {:si_unique_call 147} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 1} true;
    call {:si_unique_call 149} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 150} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: i32, p.8: i32, p.9: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: i32, p.8: i32, p.9: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb15:
    assume {:verifier.code 1} true;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb16:
    assume {:verifier.code 1} true;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 1} true;
    call {:si_unique_call 153} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 154} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb17:
    assume {:verifier.code 1} true;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 155} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 156} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: i32, p.7: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: i32, p.7: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb18:
    assume {:verifier.code 1} true;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 1} true;
    call {:si_unique_call 157} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 158} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 301905);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 160} devirtbounce.3(0, $i0, $p2);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    return;
}



const s3c_hsotg_ctrl_epint: ref;

axiom s3c_hsotg_ctrl_epint == $sub.ref(0, 302937);

procedure s3c_hsotg_ctrl_epint($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_ctrl_epint($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i16: i32;
  var $i17: i32;
  var $i15: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} {:cexpr "s3c_hsotg_ctrl_epint:arg:ep"} boogie_si_record_i32($i1);
    call {:si_unique_call 162} {:cexpr "s3c_hsotg_ctrl_epint:arg:dir_in"} boogie_si_record_i32($i2);
    call {:si_unique_call 163} {:cexpr "s3c_hsotg_ctrl_epint:arg:en"} boogie_si_record_i32($i3);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32(1, $i1);
    call {:si_unique_call 164} {:cexpr "bit"} boogie_si_record_i32($i4);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i8 := arch_local_irq_save();
    call {:si_unique_call 167} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} trace_hardirqs_off();
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(2076, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i12 := readl($p11);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 170} {:cexpr "daint"} boogie_si_record_i32($i12);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i3, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i16 := $xor.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $i12);
    call {:si_unique_call 172} {:cexpr "daint"} boogie_si_record_i32($i17);
    assume {:verifier.code 0} true;
    $i15 := $i17;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(2076, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} writel($i15, $p20);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i21 := arch_irqs_disabled_flags($i8);
    call {:si_unique_call 175} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} trace_hardirqs_on();
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} arch_local_irq_restore($i8);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} arch_local_irq_restore($i8);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} trace_hardirqs_off();
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i12, $i7);
    call {:si_unique_call 171} {:cexpr "daint"} boogie_si_record_i32($i14);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb6;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i4, 16);
    call {:si_unique_call 165} {:cexpr "bit"} boogie_si_record_i32($i6);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const arch_local_irq_save: ref;

axiom arch_local_irq_save == $sub.ref(0, 303969);

procedure arch_local_irq_save() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_irq_save() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i0 := arch_local_save_flags();
    call {:si_unique_call 181} {:cexpr "f"} boogie_si_record_i64($i0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} arch_local_irq_disable();
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const trace_hardirqs_off: ref;

axiom trace_hardirqs_off == $sub.ref(0, 305001);

procedure trace_hardirqs_off();
  free requires assertsPassed;



implementation trace_hardirqs_off()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    return;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 306033);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const arch_local_irq_restore: ref;

axiom arch_local_irq_restore == $sub.ref(0, 307065);

procedure arch_local_irq_restore($i0: i64);
  free requires assertsPassed;



implementation arch_local_irq_restore($i0: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} {:cexpr "arch_local_irq_restore:arg:f"} boogie_si_record_i64($i0);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.1, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 188} $i8 := devirtbounce.5(0, 45, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), 1, $i0);
    call {:si_unique_call 189} {:cexpr "__eax"} boogie_si_record_i64($i8);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 187} devirtbounce.4(0, .str.35, 809, 12);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_restore_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const trace_hardirqs_on: ref;

axiom trace_hardirqs_on == $sub.ref(0, 308097);

procedure trace_hardirqs_on();
  free requires assertsPassed;



implementation trace_hardirqs_on()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    return;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 309129);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.1, pv_irq_ops);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 191} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 193} $i7 := devirtbounce.6(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 194} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 192} devirtbounce.4(0, .str.35, 804, 12);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_local_irq_disable: ref;

axiom arch_local_irq_disable == $sub.ref(0, 310161);

procedure arch_local_irq_disable();
  free requires assertsPassed;



implementation arch_local_irq_disable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.1, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 196} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 198} $i7 := devirtbounce.6(0, 46, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)), 1);
    call {:si_unique_call 199} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 197} devirtbounce.4(0, .str.35, 814, 12);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_disable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const s3c_hsotg_complete_request: ref;

axiom s3c_hsotg_complete_request == $sub.ref(0, 311193);

procedure s3c_hsotg_complete_request($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.12, $M.16, $M.15, $M.21, assertsPassed;



implementation s3c_hsotg_complete_request($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i1;
  var $i61: i8;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i8;
  var $i84: i1;
  var $p85: ref;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 202} {:cexpr "s3c_hsotg_complete_request:arg:result"} boogie_si_record_i32($i3);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p27, .str.3);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p28, .str.6);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p29, .str.4);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p30, .str.8);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.6, $p32);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 1272);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p32, $i35);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p36, 1);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.7, $p37);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 207} {:cexpr "tmp___0"} boogie_si_record_i64($i41);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, $sub.i32(0, 115));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p58, $0.ref);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} list_del_init($p59);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i60 := using_dma($p0);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i8($i60);
    call {:si_unique_call 211} {:cexpr "tmp___1"} boogie_si_record_i8($i61);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i8.i1($i61);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i78 == 1;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i79 := $sge.i32($i3, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb22;

  $bb23:
    assume $i79 == 1;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i81 := list_empty($p80);
    call {:si_unique_call 217} {:cexpr "tmp___2"} boogie_si_record_i32($i81);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i8($i82);
    call {:si_unique_call 218} {:cexpr "restart"} boogie_si_record_i8($i83);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i83);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i84 == 1;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p85 := get_ep_head($p1);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} s3c_hsotg_start_req($p0, $p1, $p85, 0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i67 == 1;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} spin_unlock($p68);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1));
    call {:si_unique_call 214} devirtbounce.7($p71, $p72, $p73);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} spin_lock($p74);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i62 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} s3c_hsotg_unmap_dma($p0, $p1, $p2);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i55 == 1;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p57, $i3);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} vslice_dummy_var_28 := __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref.i32.ref($p5, $p44, .str.8, $p1, $p47, $p2, $i3, $p50);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.3);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str.6);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.4);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p11, .str.7);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.6, $p13);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 1267);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p13, $i16);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p17, 1);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 204} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} vslice_dummy_var_27 := __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p25, .str.7, .str.6);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const s3c_hsotg_txfifo_flush: ref;

axiom s3c_hsotg_txfifo_flush == $sub.ref(0, 312225);

procedure s3c_hsotg_txfifo_flush($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_txfifo_flush($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} {:cexpr "s3c_hsotg_txfifo_flush:arg:idx"} boogie_si_record_i32($i1);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 6);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(16, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} writel($i3, $p6);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(16, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i10 := readl($p9);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 224} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 32);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i13, $i14 := $i10, 100;
    goto $bb4;

  $bb4:
    call $i13, $i14, $i15, $i16, $p17, $p18, $p20, $p21, $i22, $i23, $i24, vslice_dummy_var_29 := s3c_hsotg_txfifo_flush_loop_$bb4($p0, $p7, $i13, $i14, $i15, $i16, $p17, $p18, $p20, $p21, $i22, $i23, $i24, vslice_dummy_var_29);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 1);
    call {:si_unique_call 225} {:cexpr "timeout"} boogie_si_record_i32($i15);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} __const_udelay(4295);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p7);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(16, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i22 := readl($p21);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 229} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 32);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i13, $i14 := $i22, $i15;
    goto $bb11_dummy;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_29 := dev_err.ref.ref.ref.i32($p18, .str.33, .str.34, $i13);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 313257);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 314289);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} __list_del_entry($p0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} INIT_LIST_HEAD($p0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    return;
}



const using_dma: ref;

axiom using_dma == $sub.ref(0, 315321);

procedure using_dma($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation using_dma($p0: ref) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const s3c_hsotg_unmap_dma: ref;

axiom s3c_hsotg_unmap_dma == $sub.ref(0, 316353);

procedure s3c_hsotg_unmap_dma($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation s3c_hsotg_unmap_dma($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(248, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} usb_gadget_unmap_request($p8, $p3, $i11);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 317385);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} ldv_spin_unlock();
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} ldv_spin_unlock_5($p0);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 318417);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} ldv_spin_lock();
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} ldv_spin_lock_1($p0);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 319449);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const get_ep_head: ref;

axiom get_ep_head == $sub.ref(0, 320481);

procedure get_ep_head($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_ep_head($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i2 := list_empty($p1);
    call {:si_unique_call 239} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p4 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const s3c_hsotg_start_req: ref;

axiom s3c_hsotg_start_req == $sub.ref(0, 321513);

procedure s3c_hsotg_start_req($p0: ref, $p1: ref, $p2: ref, $i3: i1);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_start_req($p0: ref, $p1: ref, $p2: ref, $i3: i1)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i60: i32;
  var $i61: i32;
  var $i59: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i66: i32;
  var $i67: i32;
  var $i65: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i24;
  var $i75: i24;
  var $i76: i24;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i24;
  var $i119: i24;
  var $i120: i24;
  var $p121: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i64;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $i135: i32;
  var $i136: i1;
  var $p138: ref;
  var $i139: i16;
  var $i140: i32;
  var $i141: i32;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i24;
  var $i149: i24;
  var $i150: i24;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i64;
  var $i155: i64;
  var $i156: i64;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i161: i1;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $p167: ref;
  var $i168: i16;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $p173: ref;
  var $i174: i16;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $i180: i8;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $i184: i8;
  var $i185: i32;
  var $p187: ref;
  var $i188: i16;
  var $i189: i32;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $i195: i1;
  var $i196: i1;
  var $p197: ref;
  var $p198: ref;
  var $i199: i8;
  var $i200: i32;
  var $i201: i1;
  var $i202: i32;
  var $i203: i32;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $p207: ref;
  var $i208: i8;
  var $i209: i32;
  var $i210: i1;
  var $p212: ref;
  var $i213: i16;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i32;
  var $i219: i32;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $i229: i24;
  var $i230: i24;
  var $i231: i24;
  var $p232: ref;
  var $p233: ref;
  var $i234: i8;
  var $i235: i64;
  var $i236: i64;
  var $i237: i64;
  var $i238: i1;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $i242: i32;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i64;
  var $p248: ref;
  var $i249: i1;
  var $i250: i8;
  var $i251: i1;
  var $i252: i1;
  var $i253: i1;
  var $i254: i32;
  var $i255: i32;
  var $i257: i32;
  var $i258: i32;
  var $i256: i32;
  var $p259: ref;
  var $i260: i64;
  var $i261: i32;
  var $p262: ref;
  var $p263: ref;
  var $i264: i64;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i24;
  var $i273: i24;
  var $i274: i24;
  var $p275: ref;
  var $p276: ref;
  var $i277: i8;
  var $i278: i64;
  var $i279: i64;
  var $i280: i64;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i286: i32;
  var $i287: i32;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $i294: i24;
  var $i295: i24;
  var $i296: i24;
  var $p297: ref;
  var $p298: ref;
  var $i299: i8;
  var $i300: i64;
  var $i301: i64;
  var $i302: i64;
  var $i303: i1;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $i307: i32;
  var $p309: ref;
  var $i310: i32;
  var $i311: i1;
  var $i312: i1;
  var $p313: ref;
  var $i315: i32;
  var $i314: i32;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i24;
  var $i323: i24;
  var $i324: i24;
  var $p325: ref;
  var $p326: ref;
  var $i327: i8;
  var $i328: i64;
  var $i329: i64;
  var $i330: i64;
  var $i331: i1;
  var $p332: ref;
  var $p333: ref;
  var $p335: ref;
  var $p336: ref;
  var $i337: i64;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $i341: i32;
  var $p342: ref;
  var $i343: i1;
  var $i344: i1;
  var $i345: i8;
  var $i346: i1;
  var $i347: i32;
  var $i348: i1;
  var $p349: ref;
  var $i351: i1;
  var $p352: ref;
  var $p353: ref;
  var $i354: i32;
  var $i355: i32;
  var $i356: i64;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $i360: i64;
  var $p361: ref;
  var $i362: i32;
  var $i363: i1;
  var $p364: ref;
  var $p365: ref;
  var $i366: i64;
  var $p367: ref;
  var $i368: i32;
  var $p369: ref;
  var $p370: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $i378: i24;
  var $i379: i24;
  var $i380: i24;
  var $p381: ref;
  var $p382: ref;
  var $i383: i8;
  var $i384: i64;
  var $i385: i64;
  var $i386: i64;
  var $i387: i1;
  var $p388: ref;
  var $p389: ref;
  var $i390: i64;
  var $p391: ref;
  var $i392: i32;
  var $p393: ref;
  var $p394: ref;
  var $p396: ref;
  var $i397: i8;
  var $i398: i32;
  var $p399: ref;
  var $i400: i8;
  var $i401: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i64;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i64;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i3);
    call {:si_unique_call 248} {:cexpr "s3c_hsotg_start_req:arg:continuing"} boogie_si_record_i1($i3);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    call {:si_unique_call 249} {:cexpr "index"} boogie_si_record_i32($i16);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    call {:si_unique_call 250} {:cexpr "dir_in"} boogie_si_record_i32($i19);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i16, 0);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i19, 0);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i56 == 1);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i16, 88);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i61 := $mul.i32($i60, 32);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i59 := $i61;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i19, 0);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i62 == 1);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i66 := $mul.i32($i16, 32);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 2832);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i65 := $i67;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p68, .str.3);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p69, .str.10);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p70, .str.4);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p71, .str.12);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i74 := $load.i24($M.6, $p73);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i75 := $and.i24($i74, $sub.i24(0, 262144));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i76 := $or.i24($i75, 585);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p73, $i76);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p77, 1);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.7, $p78);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i64($i79);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i81 := $and.i64($i80, 1);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i82 := ldv__builtin_expect($i81, 0);
    call {:si_unique_call 262} {:cexpr "tmp___2"} boogie_si_record_i64($i82);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.1, $p97);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i99 := $zext.i32.i64($i59);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p98, $mul.ref($i99, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i101 := readl($p100);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 267} {:cexpr "ctrl"} boogie_si_record_i32($i101);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 2097152);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    $p107 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.1, $p107);
    $p109 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.1, $p109);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32($i108, $i110);
    call {:si_unique_call 269} {:cexpr "length"} boogie_si_record_i32($i111);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p112, .str.3);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p113, .str.10);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p114, .str.4);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p115, .str.16);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i118 := $load.i24($M.6, $p117);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i119 := $and.i24($i118, $sub.i24(0, 262144));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i120 := $or.i24($i119, 597);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p117, $i120);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p121, 1);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.7, $p122);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i64($i123);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i125 := $and.i64($i124, 1);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i126 := ldv__builtin_expect($i125, 0);
    call {:si_unique_call 271} {:cexpr "tmp___3"} boogie_si_record_i64($i126);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i135 := get_ep_limit($p1);
    call {:si_unique_call 274} {:cexpr "maxreq"} boogie_si_record_i32($i135);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i136 := $ugt.i32($i111, $i135);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i164 := $i111;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    $i177 := 1;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p1);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($p178, $mul.ref(130, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.1, $p179);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i180);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i181, 0);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i19, 0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i195 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i204 := 0;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i16, 0);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i219 := $i177;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i220 := $shl.i32($i219, 19);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i221 := $or.i32($i220, $i204);
    call {:si_unique_call 284} {:cexpr "epsize"} boogie_si_record_i32($i221);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i222 := $or.i32($i221, $i164);
    call {:si_unique_call 285} {:cexpr "epsize"} boogie_si_record_i32($i222);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p223, .str.3);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p224, .str.10);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p225, .str.4);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p226, .str.19);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p228 := $bitcast.ref.ref($p227);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i229 := $load.i24($M.6, $p228);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i230 := $and.i24($i229, $sub.i24(0, 262144));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i231 := $or.i24($i230, 650);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p228, $i231);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p232, 1);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i234 := $load.i8($M.7, $p233);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i235 := $zext.i8.i64($i234);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i236 := $and.i64($i235, 1);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i237 := ldv__builtin_expect($i236, 0);
    call {:si_unique_call 287} {:cexpr "tmp___6"} boogie_si_record_i64($i237);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i238 := $ne.i64($i237, 0);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p244, $p2);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.1, $p245);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i247 := $zext.i32.i64($i65);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($p246, $mul.ref($i247, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} writel($i222, $p248);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i249 := using_dma($p0);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i250 := $zext.i1.i8($i249);
    call {:si_unique_call 291} {:cexpr "tmp___8"} boogie_si_record_i8($i250);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i8.i1($i250);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i251 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i286 := $or.i32($i101, $sub.i32(0, 2147483648));
    call {:si_unique_call 296} {:cexpr "ctrl"} boogie_si_record_i32($i286);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i287 := $or.i32($i286, 32768);
    call {:si_unique_call 297} {:cexpr "ctrl"} boogie_si_record_i32($i287);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p288, .str.3);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p289, .str.10);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p290, .str.4);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p291, .str.21);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p293 := $bitcast.ref.ref($p292);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i294 := $load.i24($M.6, $p293);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i295 := $and.i24($i294, $sub.i24(0, 262144));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i296 := $or.i24($i295, 676);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p293, $i296);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p297, 1);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i299 := $load.i8($M.7, $p298);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i300 := $zext.i8.i64($i299);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i301 := $and.i64($i300, 1);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i302 := ldv__builtin_expect($i301, 0);
    call {:si_unique_call 299} {:cexpr "tmp___9"} boogie_si_record_i64($i302);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i303 := $ne.i64($i302, 0);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1824, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.1, $p309);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i311 := $ne.i32($i310, 0);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i311 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i315 := $or.i32($i287, 67108864);
    call {:si_unique_call 301} {:cexpr "ctrl"} boogie_si_record_i32($i315);
    assume {:verifier.code 0} true;
    $i314 := $i315;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p316, .str.3);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p317, .str.10);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p318, .str.4);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p319, .str.5);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p320);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i322 := $load.i24($M.6, $p321);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i323 := $and.i24($i322, $sub.i24(0, 262144));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i324 := $or.i24($i323, 685);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p321, $i324);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p325, 1);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i327 := $load.i8($M.7, $p326);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i328 := $zext.i8.i64($i327);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i329 := $and.i64($i328, 1);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i330 := ldv__builtin_expect($i329, 0);
    call {:si_unique_call 303} {:cexpr "tmp___10"} boogie_si_record_i64($i330);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i331 := $ne.i64($i330, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p336 := $load.ref($M.1, $p335);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i337 := $zext.i32.i64($i59);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($p336, $mul.ref($i337, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} writel($i314, $p338);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p339, $i164);
    $p340 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i341 := $load.i32($M.1, $p340);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(116, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p342, $i341);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i343 := $ne.i32($i19, 0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i351 := $ne.i32($i19, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.1, $p358);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i360 := $zext.i32.i64($i59);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($p359, $mul.ref($i360, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i362 := readl($p361);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 311} {:cexpr "tmp___14"} boogie_si_record_i32($i362);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i363 := $sge.i32($i362, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i363} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p372, .str.3);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p373, .str.10);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p374, .str.4);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p375, .str.23);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p376);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i378 := $load.i24($M.6, $p377);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i379 := $and.i24($i378, $sub.i24(0, 262144));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i380 := $or.i24($i379, 723);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p377, $i380);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p381, 1);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i383 := $load.i8($M.7, $p382);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i384 := $zext.i8.i64($i383);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i385 := $and.i64($i384, 1);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i386 := ldv__builtin_expect($i385, 0);
    call {:si_unique_call 316} {:cexpr "tmp___16"} boogie_si_record_i64($i386);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i387 := $ne.i64($i386, 0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i397 := $load.i8($M.1, $p396);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i398 := $zext.i8.i32($i397);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i400 := $load.i8($M.1, $p399);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i401 := $zext.i8.i32($i400);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} s3c_hsotg_ctrl_epint($p0, $i398, $i401, 1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb116:
    assume $i387 == 1;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p389 := $load.ref($M.1, $p388);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i390 := $zext.i32.i64($i59);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($p389, $mul.ref($i390, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i392 := readl($p391);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 318} {:cexpr "tmp___15"} boogie_si_record_i32($i392);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.1, $p393);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} vslice_dummy_var_45 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p11, $p394, .str.23, .str.10, $i392);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    goto $bb118;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb113:
    assume $i363 == 1;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.1, $p364);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i366 := $zext.i32.i64($i59);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($p365, $mul.ref($i366, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i368 := readl($p367);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 313} {:cexpr "tmp___13"} boogie_si_record_i32($i368);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.1, $p369);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_44 := dev_warn.ref.ref.i32.i32($p370, .str.22, $i16, $i368);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    goto $bb115;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb110:
    assume $i351 == 1;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.1, $p352);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i354 := $mul.i32($i16, 32);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i355 := $add.i32($i354, 2312);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i356 := $sext.i32.i64($i355);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($p353, $mul.ref($i356, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} writel(16, $p357);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb101:
    assume $i343 == 1;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i344 := using_dma($p0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i345 := $zext.i1.i8($i344);
    call {:si_unique_call 307} {:cexpr "tmp___11"} boogie_si_record_i8($i345);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i346 := $trunc.i8.i1($i345);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    $i347 := 1;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i348 := $ne.i32($i347, 0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb106:
    assume $i348 == 1;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p349, 0);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_43 := s3c_hsotg_write_fifo($p0, $p1, $p2);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i346 == 1;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i347 := 0;
    goto $bb105;

  $bb98:
    assume $i331 == 1;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p333 := $load.ref($M.1, $p332);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} vslice_dummy_var_42 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p10, $p333, .str.5, .str.10, $i314);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb92:
    assume $i311 == 1;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i16, 0);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i312 == 1);
    goto $bb94;

  $bb95:
    assume $i312 == 1;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1824, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p313, 0);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i314 := $i287;
    goto $bb97;

  $bb89:
    assume $i303 == 1;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p305 := $load.ref($M.1, $p304);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1824, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.1, $p306);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} vslice_dummy_var_41 := __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p305, .str.21, $i307);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb77:
    assume $i251 == 1;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i8.i1($i12);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i252 == 1);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i19, 0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i253 == 1);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i257 := $mul.i32($i16, 32);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i258 := $add.i32($i257, 2836);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i256 := $i258;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i260 := $load.i64($M.1, $p259);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i261 := $trunc.i64.i32($i260);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.1, $p262);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i264 := $zext.i32.i64($i256);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($p263, $mul.ref($i264, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} writel($i261, $p265);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p266, .str.3);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p267, .str.10);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p268, .str.4);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p269, .str.20);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p271 := $bitcast.ref.ref($p270);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i272 := $load.i24($M.6, $p271);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i273 := $and.i24($i272, $sub.i24(0, 262144));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i274 := $or.i24($i273, 670);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p271, $i274);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p275, 1);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.7, $p276);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i64($i277);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i279 := $and.i64($i278, 1);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i280 := ldv__builtin_expect($i279, 0);
    call {:si_unique_call 294} {:cexpr "tmp___7"} boogie_si_record_i64($i280);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i281 := $ne.i64($i280, 0);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb85:
    assume $i281 == 1;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.1, $p282);
    $p284 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_40 := __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p8, $p283, .str.20, .str.10, $p284, $i256);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume $i253 == 1;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i254 := $mul.i32($i16, 32);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i255 := $add.i32($i254, 2324);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i256 := $i255;
    goto $bb84;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i252 == 1;
    goto $bb79;

  $bb74:
    assume $i238 == 1;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.1, $p239);
    $p241 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.1, $p241);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} vslice_dummy_var_39 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p7, $p240, .str.19, .str.10, $i219, $i164, $i242, $i222, $i65);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb65:
    assume $i205 == 1;
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p13);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p206, $mul.ref(42, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.1, $p207);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i208);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb67;

  $bb68:
    assume $i210 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i213 := $load.i16($M.1, $p212);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32($i213);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i215 := $mul.i32($i214, $i177);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, $i164);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    $i218 := $i177;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i219 := $i218;
    goto $bb73;

  $bb70:
    assume $i216 == 1;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i217 := $add.i32($i177, 1);
    call {:si_unique_call 283} {:cexpr "packets"} boogie_si_record_i32($i217);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i218 := $i217;
    goto $bb72;

  $bb56:
    assume $i195 == 1;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i16, 0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb58;

  $bb59:
    assume $i196 == 1;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p1);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($p197, $mul.ref(130, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.1, $p198);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i199);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    $i203 := 536870912;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i204 := $i203;
    goto $bb64;

  $bb61:
    assume $i201 == 1;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i202 := $shl.i32($i177, 29);
    call {:si_unique_call 282} {:cexpr "epsize"} boogie_si_record_i32($i202);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i203 := $i202;
    goto $bb63;

  $bb50:
    assume $i182 == 1;
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.1, $p183);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i32($i184);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i188 := $load.i16($M.1, $p187);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i189 := $zext.i16.i32($i188);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i190 := $mul.i32($i185, $i189);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i191 := $ult.i32($i190, $i164);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb52;

  $bb53:
    assume $i191 == 1;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.1, $p192);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} vslice_dummy_var_38 := dev_err.ref.ref($p193, .str.18);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb47:
    assume $i165 == 1;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i168 := $load.i16($M.1, $p167);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i169 := $zext.i16.i32($i168);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i170 := $add.i32($i169, $i164);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i171 := $sub.i32($i170, 1);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i174 := $load.i16($M.1, $p173);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i175 := $zext.i16.i32($i174);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i176 := $udiv.i32($i171, $i175);
    call {:si_unique_call 280} {:cexpr "packets"} boogie_si_record_i32($i176);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i177 := $i176;
    goto $bb49;

  $bb38:
    assume $i136 == 1;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i139 := $load.i16($M.1, $p138);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i32($i139);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i141 := $urem.i32($i135, $i140);
    call {:si_unique_call 275} {:cexpr "round"} boogie_si_record_i32($i141);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p142, .str.3);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p143, .str.10);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p144, .str.4);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p145, .str.17);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i148 := $load.i24($M.6, $p147);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i149 := $and.i24($i148, $sub.i24(0, 262144));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i150 := $or.i24($i149, 609);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p147, $i150);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p151, 1);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.7, $p152);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i64($i153);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i155 := $and.i64($i154, 1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i156 := ldv__builtin_expect($i155, 0);
    call {:si_unique_call 277} {:cexpr "tmp___5"} boogie_si_record_i64($i156);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i141, 0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    $i163 := $i135;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i164 := $i163;
    goto $bb46;

  $bb43:
    assume $i161 == 1;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i162 := $sub.i32($i135, $i141);
    call {:si_unique_call 279} {:cexpr "maxreq"} boogie_si_record_i32($i162);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i163 := $i162;
    goto $bb45;

  $bb40:
    assume $i157 == 1;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.1, $p158);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} vslice_dummy_var_37 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p6, $p159, .str.17, .str.10, $i111, $i135, $i141);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb35:
    assume $i127 == 1;
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.1, $p128);
    $p130 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.1, $p130);
    $p132 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.1, $p132);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_36 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p5, $p129, .str.16, $i131, $i133);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i103 == 1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.1, $p104);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_35 := dev_warn.ref.ref.ref.i32($p105, .str.15, .str.10, $i16);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i83 == 1;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i59);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p85, $mul.ref($i86, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i88 := readl($p87);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 264} {:cexpr "tmp___1"} boogie_si_record_i32($i88);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.1, $p89);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.1, $p91);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p95 := (if $i94 == 1 then .str.13 else .str.14);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_34 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p4, $p90, .str.12, .str.10, $i88, $i16, $p95);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i62 == 1;
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i63 := $mul.i32($i16, 32);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 2320);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb28;

  $bb23:
    assume $i56 == 1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i16, 72);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i57, 32);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb25;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p2);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i40, $i41);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i12);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb14;

  $bb15:
    assume $i43 == 1;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} vslice_dummy_var_32 := dev_err.ref.ref.ref($p45, .str.11, .str.10);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32(1, 0);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 258} {:cexpr "tmp___0"} boogie_si_record_i64($i50);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32(1, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_33 := ldv__builtin_expect($i54, 0);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb17:
    assume $i51 == 1;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} warn_slowpath_null(.str.4, 575);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i12);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_30 := dev_err.ref.ref.ref($p27, .str.9, .str.10);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32(1, 0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 253} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32(1, 0);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} vslice_dummy_var_31 := ldv__builtin_expect($i36, 0);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} warn_slowpath_null(.str.4, 570);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb5;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 322545);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 323577);

procedure dev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 322} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 323} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 1} true;
    call {:si_unique_call 324} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 325} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 1} true;
    call {:si_unique_call 326} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 327} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_ep_limit: ref;

axiom get_ep_limit == $sub.ref(0, 324609);

procedure get_ep_limit($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_ep_limit($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i5: i32;
  var $i6: i32;
  var $i12: i32;
  var $i13: i32;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    call {:si_unique_call 328} {:cexpr "index"} boogie_si_record_i32($i3);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5, $i6 := 128, $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i6, 1);
    call {:si_unique_call 329} {:cexpr "maxpkt"} boogie_si_record_i32($i12);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i5, 1);
    call {:si_unique_call 330} {:cexpr "maxsize"} boogie_si_record_i32($i13);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, $i12);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i19 := $ult.i32($i18, $i13);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i13;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.1, $p21);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i24 := $mul.i32($i23, $i12);
    call {:si_unique_call 331} {:cexpr "maxsize"} boogie_si_record_i32($i24);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i11 := 4;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i5, $i6 := 524288, 1024;
    goto $bb3;
}



const s3c_hsotg_write_fifo: ref;

axiom s3c_hsotg_write_fifo == $sub.ref(0, 325641);

procedure s3c_hsotg_write_fifo($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_write_fifo($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i24;
  var $i86: i24;
  var $i87: i24;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i24;
  var $i109: i24;
  var $i110: i24;
  var $p111: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i64;
  var $i115: i64;
  var $i116: i64;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i121: i1;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i64;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i24;
  var $i155: i24;
  var $i156: i24;
  var $p157: ref;
  var $p158: ref;
  var $i159: i8;
  var $i160: i64;
  var $i161: i64;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $i167: i32;
  var $i168: i32;
  var $i144: i32;
  var $i122: i32;
  var $p170: ref;
  var $i171: i16;
  var $i172: i32;
  var $p173: ref;
  var $i174: i8;
  var $i175: i32;
  var $i176: i32;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i24;
  var $i184: i24;
  var $i185: i24;
  var $p186: ref;
  var $p187: ref;
  var $i188: i8;
  var $i189: i64;
  var $i190: i64;
  var $i191: i64;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $i196: i1;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $i202: i8;
  var $i203: i32;
  var $i204: i1;
  var $i205: i1;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i32;
  var $p213: ref;
  var $p214: ref;
  var $i215: i8;
  var $i216: i32;
  var $i217: i1;
  var $i218: i1;
  var $i219: i32;
  var $i220: i32;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i24;
  var $i228: i24;
  var $i229: i24;
  var $p230: ref;
  var $p231: ref;
  var $i232: i8;
  var $i233: i64;
  var $i234: i64;
  var $i235: i64;
  var $i236: i1;
  var $p237: ref;
  var $p238: ref;
  var $p240: ref;
  var $i241: i32;
  var $i243: i1;
  var $i244: i32;
  var $p246: ref;
  var $p247: ref;
  var $i248: i64;
  var $i249: i64;
  var $i250: i64;
  var $p251: ref;
  var $i252: i1;
  var $p253: ref;
  var $i254: i32;
  var $i255: i32;
  var $p256: ref;
  var $i257: i32;
  var $i258: i32;
  var $p260: ref;
  var $p261: ref;
  var $i262: i64;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $i267: i8;
  var $i268: i32;
  var $i269: i32;
  var $i270: i32;
  var $i271: i64;
  var $p272: ref;
  var $i273: i64;
  var $i274: i1;
  var $i275: i32;
  var $i26: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i9 := is_ep_periodic($p1);
    call {:si_unique_call 339} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 340} {:cexpr "periodic"} boogie_si_record_i8($i11);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(44, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i15 := readl($p14);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 342} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    call {:si_unique_call 343} {:cexpr "buf_pos"} boogie_si_record_i32($i18);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    call {:si_unique_call 344} {:cexpr "to_write"} boogie_si_record_i32($i20);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(116, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i22, $i18);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, $i20);
    call {:si_unique_call 345} {:cexpr "to_write"} boogie_si_record_i32($i24);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i11);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p0);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p123, $mul.ref(188, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.1, $p124);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i145 := $lshr.i32($i15, 16);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 255);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 0);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i167 := $and.i32($i15, 65535);
    call {:si_unique_call 374} {:cexpr "can_write"} boogie_si_record_i32($i167);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i168 := $mul.i32($i167, 4);
    call {:si_unique_call 375} {:cexpr "can_write"} boogie_si_record_i32($i168);
    assume {:verifier.code 0} true;
    $i144 := $i168;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i122 := $i144;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i171 := $load.i16($M.1, $p170);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i172 := $zext.i16.i32($i171);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i174 := $load.i8($M.1, $p173);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i174);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i176 := $mul.i32($i172, $i175);
    call {:si_unique_call 363} {:cexpr "max_transfer"} boogie_si_record_i32($i176);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p177, .str.3);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p178, .str.24);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p179, .str.4);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p180, .str.29);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p181);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i183 := $load.i24($M.6, $p182);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i184 := $and.i24($i183, $sub.i24(0, 262144));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i185 := $or.i24($i184, 428);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p182, $i185);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p186, 1);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.7, $p187);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i64($i188);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i190 := $and.i64($i189, 1);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i191 := ldv__builtin_expect($i190, 0);
    call {:si_unique_call 365} {:cexpr "tmp___7"} boogie_si_record_i64($i191);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i192 := $ne.i64($i191, 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i196 := $sgt.i32($i122, 512);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i198 := $i122;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i199 := $sgt.i32($i24, $i176);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i207 := $i24;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i208 := $sgt.i32($i207, $i198);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    $i220 := $i207;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p221, .str.3);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p222, .str.24);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p223, .str.4);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p224, .str.30);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p226 := $bitcast.ref.ref($p225);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i227 := $load.i24($M.6, $p226);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i228 := $and.i24($i227, $sub.i24(0, 262144));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i229 := $or.i24($i228, 483);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p226, $i229);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p230, 1);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i232 := $load.i8($M.7, $p231);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i233 := $zext.i8.i64($i232);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i234 := $and.i64($i233, 1);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i235 := ldv__builtin_expect($i234, 0);
    call {:si_unique_call 382} {:cexpr "tmp___8"} boogie_si_record_i64($i235);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i236 := $ne.i64($i235, 0);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i243 := $sle.i32($i220, 0);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i244 := $add.i32($i18, $i220);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p246, $i244);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i248 := $load.i64($M.1, $p247);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i249 := $sext.i32.i64($i220);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i250 := $add.i64($i248, $i249);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p251, $i250);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i8.i1($i11);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i257 := $add.i32($i220, 3);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i258 := $sdiv.i32($i257, 4);
    call {:si_unique_call 384} {:cexpr "to_write"} boogie_si_record_i32($i258);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.1, $p260);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i262 := $sext.i32.i64($i18);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($p261, $mul.ref($i262, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p265 := $load.ref($M.1, $p264);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i267 := $load.i8($M.1, $p266);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i268 := $zext.i8.i32($i267);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i269 := $add.i32($i268, 1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i270 := $mul.i32($i269, 4096);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i271 := $sext.i32.i64($i270);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($p265, $mul.ref($i271, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i273 := $sext.i32.i64($i258);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} iowrite32_rep($p272, $p263, $i273);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i274 := $sge.i32($i258, $i198);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i275 := (if $i274 == 1 then $sub.i32(0, 28) else 0);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i26 := $i275;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb68:
    assume $i252 == 1;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.1, $p253);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i255 := $add.i32($i254, $i220);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p256, $i255);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb65:
    assume $i243 == 1;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 28);
    goto $bb3;

  $bb62:
    assume $i236 == 1;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.1, $p237);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.1, $p240);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_51 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p8, $p238, .str.30, $i220, $i241, $i198, $i18);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb53:
    assume $i208 == 1;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i209 := $srem.i32($i198, $i176);
    call {:si_unique_call 378} {:cexpr "pkt_round"} boogie_si_record_i32($i209);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, 0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    $i212 := $i198;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($p213, $mul.ref(188, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i215 := $load.i8($M.1, $p214);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i216 := $zext.i8.i32($i215);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i220 := $i212;
    goto $bb61;

  $bb58:
    assume $i217 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i8.i1($i11);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i219 := (if $i218 == 1 then 67108864 else 32);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} s3c_hsotg_en_gsint($p0, $i219);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i210 == 1;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i211 := $sub.i32($i198, $i209);
    call {:si_unique_call 379} {:cexpr "to_write"} boogie_si_record_i32($i211);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i212 := $i211;
    goto $bb57;

  $bb47:
    assume $i199 == 1;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p200, $mul.ref(188, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.1, $p201);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($i202);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 0);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i207 := $i176;
    goto $bb52;

  $bb49:
    assume $i204 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i8.i1($i11);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i206 := (if $i205 == 1 then 67108864 else 32);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} s3c_hsotg_en_gsint($p0, $i206);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i196 == 1;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i8.i1($i11);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i197 == 1);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i198 := 512;
    goto $bb46;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb43;

  $bb38:
    assume $i192 == 1;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.1, $p193);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} vslice_dummy_var_50 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p7, $p194, .str.29, .str.24, $i15, $i122, $i24, $i176);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i147 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p148, .str.3);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p149, .str.24);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p150, .str.4);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p151, .str.28);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i154 := $load.i24($M.6, $p153);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i155 := $and.i24($i154, $sub.i24(0, 262144));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i156 := $or.i24($i155, 415);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p153, $i156);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p157, 1);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.7, $p158);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i64($i159);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i161 := $and.i64($i160, 1);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i162 := ldv__builtin_expect($i161, 0);
    call {:si_unique_call 371} {:cexpr "tmp___6"} boogie_si_record_i64($i162);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i163 := $ne.i64($i162, 0);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} s3c_hsotg_en_gsint($p0, 32);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 28);
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i163 == 1;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.1, $p164);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} vslice_dummy_var_49 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p6, $p165, .str.28, .str.24, $i15);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i127 == 1;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.1, $p128);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb28;

  $bb29:
    assume $i131 == 1;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.1, $p132);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.1, $p134);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i137 := $mul.i32($i136, 32);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i137, 2328);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i138);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p133, $mul.ref($i139, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i141 := readl($p140);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 367} {:cexpr "tmp___5"} boogie_si_record_i32($i141);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i141, 65535);
    call {:si_unique_call 368} {:cexpr "can_write"} boogie_si_record_i32($i142);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i143 := $mul.i32($i142, 4);
    call {:si_unique_call 369} {:cexpr "can_write"} boogie_si_record_i32($i143);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i144 := $i143;
    goto $bb31;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p0);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(188, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb7;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i38 := $mul.i32($i37, 32);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 2320);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p34, $mul.ref($i40, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i42 := readl($p41);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 347} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 524287);
    call {:si_unique_call 348} {:cexpr "size_left"} boogie_si_record_i32($i43);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p47, .str.3);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p48, .str.24);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p49, .str.4);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p50, .str.25);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.6, $p52);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 388);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p52, $i55);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p56, 1);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.7, $p57);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 351} {:cexpr "tmp___2"} boogie_si_record_i64($i61);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.1, $p73);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i74, $i43);
    call {:si_unique_call 353} {:cexpr "size_done"} boogie_si_record_i32($i75);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p76);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32($i77, $i75);
    call {:si_unique_call 354} {:cexpr "can_write"} boogie_si_record_i32($i78);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p79, .str.3);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p80, .str.24);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p81, .str.4);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p82, .str.26);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i85 := $load.i24($M.6, $p84);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i86 := $and.i24($i85, $sub.i24(0, 262144));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i87 := $or.i24($i86, 396);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p84, $i87);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p88, 1);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.7, $p89);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i64($i90);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i92 := $and.i64($i91, 1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i93 := ldv__builtin_expect($i92, 0);
    call {:si_unique_call 356} {:cexpr "tmp___3"} boogie_si_record_i64($i93);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.1, $p98);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i101 := $sub.i32($i100, $i78);
    call {:si_unique_call 358} {:cexpr "can_write"} boogie_si_record_i32($i101);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p102, .str.3);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p103, .str.24);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p104, .str.4);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p105, .str.27);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i108 := $load.i24($M.6, $p107);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i109 := $and.i24($i108, $sub.i24(0, 262144));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i110 := $or.i24($i109, 400);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p107, $i110);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p111, 1);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.7, $p112);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i64($i113);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i115 := $and.i64($i114, 1);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i116 := ldv__builtin_expect($i115, 0);
    call {:si_unique_call 360} {:cexpr "tmp___4"} boogie_si_record_i64($i116);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i121 := $sle.i32($i101, 0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i122 := $i101;
    goto $bb25;

  $bb22:
    assume $i121 == 1;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} s3c_hsotg_en_gsint($p0, 67108864);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 28);
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i117 == 1;
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.1, $p118);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} vslice_dummy_var_48 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p119, .str.27, .str.24, $i101);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i94 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_47 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p96, .str.26, .str.24, $i78);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p65);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.1, $p69);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} vslice_dummy_var_46 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p3, $p64, .str.25, .str.24, $i43, $i66, $i68, $i71);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} s3c_hsotg_en_gsint($p0, 67108864);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 28);
    goto $bb3;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const is_ep_periodic: ref;

axiom is_ep_periodic == $sub.ref(0, 326673);

procedure is_ep_periodic($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_ep_periodic($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i8($i2, 1);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i4 := $and.i8($i3, 1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const s3c_hsotg_en_gsint: ref;

axiom s3c_hsotg_en_gsint == $sub.ref(0, 327705);

procedure s3c_hsotg_en_gsint($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_en_gsint($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 387} {:cexpr "s3c_hsotg_en_gsint:arg:ints"} boogie_si_record_i32($i1);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(24, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i6 := readl($p5);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 389} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, $i1);
    call {:si_unique_call 390} {:cexpr "new_gsintmsk"} boogie_si_record_i32($i7);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, $i6);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.3);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.31);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.4);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.32);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.6, $p14);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 154);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p14, $i17);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p18, 1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.7, $p19);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 392} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(24, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} writel($i7, $p30);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} vslice_dummy_var_52 := __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p26, .str.32, $i7);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const iowrite32_rep: ref;

axiom iowrite32_rep == $sub.ref(0, 328737);

procedure iowrite32_rep($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation iowrite32_rep($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} {:cexpr "iowrite32_rep:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_1: ref;

axiom ldv_spin_lock_1 == $sub.ref(0, 329769);

procedure ldv_spin_lock_1($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} _raw_spin_lock($p2);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 330801);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_5: ref;

axiom ldv_spin_unlock_5 == $sub.ref(0, 331833);

procedure ldv_spin_unlock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} _raw_spin_unlock($p2);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 332865);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    return;
}



const usb_gadget_unmap_request: ref;

axiom usb_gadget_unmap_request == $sub.ref(0, 333897);

procedure usb_gadget_unmap_request($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation usb_gadget_unmap_request($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} {:cexpr "usb_gadget_unmap_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 334929);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 335961);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 336993);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 1} true;
    call {:si_unique_call 399} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 400} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const regulator_bulk_enable: ref;

axiom regulator_bulk_enable == $sub.ref(0, 338025);

procedure regulator_bulk_enable($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation regulator_bulk_enable($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 401} {:cexpr "regulator_bulk_enable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 1} true;
    call {:si_unique_call 402} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 403} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const s3c_hsotg_phy_enable: ref;

axiom s3c_hsotg_phy_enable == $sub.ref(0, 339057);

procedure s3c_hsotg_phy_enable($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_phy_enable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 16), 1472));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.3);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.166);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.4);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p9, .str.167);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.6, $p11);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 2795);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p11, $i14);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p15, 1);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.7, $p16);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 406} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(24, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(32, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(32, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(32, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    call {:si_unique_call 411} vslice_dummy_var_57 := devirtbounce($p51, $p5, $i55);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(24, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_56 := usb_phy_init($p40);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_54 := phy_init($p30);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_55 := phy_power_on($p33);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} vslice_dummy_var_53 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p23, .str.167, $p5);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s3c_hsotg_core_init: ref;

axiom s3c_hsotg_core_init == $sub.ref(0, 340089);

procedure s3c_hsotg_core_init($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_core_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i1;
  var $i51: i8;
  var $i52: i1;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i24;
  var $i67: i24;
  var $i68: i24;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i87: i1;
  var $i88: i8;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i24;
  var $i105: i24;
  var $i106: i24;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p127: ref;
  var $i128: i16;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p138: ref;
  var $i139: i16;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i24;
  var $i153: i24;
  var $i154: i24;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i64;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_58 := s3c_hsotg_corereset($p0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(184, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 5127);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(12, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} writel($i7, $p10);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} s3c_hsotg_init_fifo($p0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(2052, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} __orr32($p13, 2);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(2048, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} writel(262144, $p16);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(4, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} writel($sub.i32(0, 1), $p19);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(20, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} writel($sub.i32(0, 1), $p22);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(24, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} writel($sub.i32(0, 805290812), $p25);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i26 := using_dma($p0);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 424} {:cexpr "tmp"} boogie_si_record_i8($i27);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(188, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i37 := (if $i36 == 1 then 385 else 1);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(8, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} writel($i37, $p40);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref(188, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.1, $p42);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i46 := (if $i45 == 1 then 191 else 47);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(2064, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} writel($i46, $p49);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i50 := using_dma($p0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i8($i50);
    call {:si_unique_call 429} {:cexpr "tmp___0"} boogie_si_record_i8($i51);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i53 := (if $i52 == 1 then 15 else 14);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref(2068, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} writel($i53, $p56);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(2076, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} writel(0, $p59);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p60, .str.3);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p61, .str.149);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p62, .str.4);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p63, .str.123);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i66 := $load.i24($M.6, $p65);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i67 := $and.i24($i66, $sub.i24(0, 262144));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i68 := $or.i24($i67, 2222);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p65, $i68);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p69, 1);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.7, $p70);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i64($i71);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i73 := $and.i64($i72, 1);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i74 := ldv__builtin_expect($i73, 0);
    call {:si_unique_call 433} {:cexpr "tmp___3"} boogie_si_record_i64($i74);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} s3c_hsotg_en_gsint($p0, 786432);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i87 := using_dma($p0);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i8($i87);
    call {:si_unique_call 441} {:cexpr "tmp___4"} boogie_si_record_i8($i88);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i8.i1($i88);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} s3c_hsotg_ctrl_epint($p0, 0, 0, 1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} s3c_hsotg_ctrl_epint($p0, 0, 1, 1);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(2052, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} __orr32($p94, 2048);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} __const_udelay(42950);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p96, $mul.ref(2052, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} __bic32($p97, 2048);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p98, .str.3);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p99, .str.149);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p100, .str.4);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p101, .str.150);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i104 := $load.i24($M.6, $p103);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i105 := $and.i24($i104, $sub.i24(0, 262144));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i106 := $or.i24($i105, 2243);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p103, $i106);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p107, 1);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.7, $p108);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i64($i109);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i111 := $and.i64($i110, 1);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i112 := ldv__builtin_expect($i111, 0);
    call {:si_unique_call 449} {:cexpr "tmp___7"} boogie_si_record_i64($i112);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i113 := $ne.i64($i112, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.1, $p121);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p122, $mul.ref(2832, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} writel(537395208, $p123);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.1, $p124);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p125, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i128 := $load.i16($M.1, $p127);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i128);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i130 := s3c_hsotg_ep0_mps($i129);
    call {:si_unique_call 455} {:cexpr "tmp___8"} boogie_si_record_i32($i130);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i131 := $or.i32($i130, $sub.i32(0, 2080342016));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.1, $p132);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p133, $mul.ref(2816, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} writel($i131, $p134);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.1, $p135);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p136, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i139 := $load.i16($M.1, $p138);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i32($i139);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i141 := s3c_hsotg_ep0_mps($i140);
    call {:si_unique_call 458} {:cexpr "tmp___9"} boogie_si_record_i32($i141);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i142 := $or.i32($i141, 32768);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.1, $p143);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p144, $mul.ref(2304, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} writel($i142, $p145);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} s3c_hsotg_enqueue_setup($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p146, .str.3);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p147, .str.149);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p148, .str.4);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p149, .str.123);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i152 := $load.i24($M.6, $p151);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i153 := $and.i24($i152, $sub.i24(0, 262144));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i154 := $or.i24($i153, 2267);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p151, $i154);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p155, 1);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.7, $p156);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i64($i157);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i159 := $and.i64($i158, 1);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i160 := ldv__builtin_expect($i159, 0);
    call {:si_unique_call 462} {:cexpr "tmp___12"} boogie_si_record_i64($i160);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.1, $p173);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p174, $mul.ref(2052, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} writel(1280, $p175);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb19, $bb20;

  $bb20:
    assume !(1 == 1);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} __const_udelay(4295000);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} __const_udelay(4295000);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.1, $p176);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p177, $mul.ref(2052, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} __bic32($p178, 2);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb19:
    assume 1 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __const_udelay(12885000);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i161 == 1;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.1, $p162);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p163, $mul.ref(2816, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i165 := readl($p164);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 464} {:cexpr "tmp___10"} boogie_si_record_i32($i165);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.1, $p166);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($p167, $mul.ref(2304, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i169 := readl($p168);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 466} {:cexpr "tmp___11"} boogie_si_record_i32($i169);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.1, $p170);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_61 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p171, .str.123, $i169, $i165);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i113 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.1, $p114);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(2052, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i117 := readl($p116);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 451} {:cexpr "tmp___6"} boogie_si_record_i32($i117);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.1, $p118);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_60 := __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p119, .str.150, $i117);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i91 == 1;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} s3c_hsotg_en_gsint($p0, 16);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i89 == 1;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i90 := 0;
    goto $bb9;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i75 == 1;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(2816, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i79 := readl($p78);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 435} {:cexpr "tmp___1"} boogie_si_record_i32($i79);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(2304, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i83 := readl($p82);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 437} {:cexpr "tmp___2"} boogie_si_record_i32($i83);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_59 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p1, $p85, .str.123, $i83, $i79);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(8, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} writel(35, $p31);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const s3c_hsotg_disconnect: ref;

axiom s3c_hsotg_disconnect == $sub.ref(0, 341121);

procedure s3c_hsotg_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $CurrAddr, $M.15, $M.21, $M.12, $M.16, assertsPassed;



implementation s3c_hsotg_disconnect($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i5: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(189, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(112, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb11;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} spin_unlock($p28);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(248, 1));
    call {:si_unique_call 477} devirtbounce.8($p32, $p33);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} spin_lock($p34);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p9, $i10, $i11, $i12, $i13, $i5 := s3c_hsotg_disconnect_loop_$bb4($p0, $p1, $p6, $p7, $i8, $p9, $i10, $i11, $i12, $i13, $i5);
    goto $bb4_last;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i5);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 144));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} kill_all_requests($p0, $p9, $sub.i32(0, 108), 1);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i5, 1);
    call {:si_unique_call 475} {:cexpr "ep"} boogie_si_record_i32($i10);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p1);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, $i10);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb6_dummy;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;
}



const s3c_hsotg_corereset: ref;

axiom s3c_hsotg_corereset == $sub.ref(0, 342153);

procedure s3c_hsotg_corereset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_corereset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i32: i32;
  var $i33: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i40: i32;
  var $i31: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i55: i32;
  var $i56: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i24;
  var $i74: i24;
  var $i75: i24;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i50: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p3, .str.3);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p4, .str.168);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.4);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p6, .str.169);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.6, $p8);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 2110);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p8, $i11);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p12, 1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 482} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(16, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} writel(1, $p24);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(16, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i28 := readl($p27);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 486} {:cexpr "grstctl"} boogie_si_record_i32($i28);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i31 := $i28;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i44 := $i31;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(16, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i54 := readl($p53);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 492} {:cexpr "tmp___1"} boogie_si_record_i32($i54);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i55, $i56 := 9999, $i54;
    goto $bb18;

  $bb18:
    call $i57, $i55, $i56, $i61, $p62, $p63, $i64, $i65, $i66 := s3c_hsotg_corereset_loop_$bb18($p51, $i57, $i55, $i56, $i61, $p62, $p63, $i64, $i65, $i66);
    goto $bb18_last;

  $bb20:
    assume {:verifier.code 0} true;
    $i61 := $sge.i32($i56, 0);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p67, .str.3);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p68, .str.168);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p69, .str.4);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p70, .str.172);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i73 := $load.i24($M.6, $p72);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i74 := $and.i24($i73, $sub.i24(0, 262144));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i75 := $or.i24($i74, 2143);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p72, $i75);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p76, 1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.7, $p77);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i64($i78);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i80 := $and.i64($i79, 1);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i81 := ldv__builtin_expect($i80, 0);
    call {:si_unique_call 498} {:cexpr "tmp___3"} boogie_si_record_i64($i81);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  $bb27:
    assume $i82 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} vslice_dummy_var_65 := __dynamic_dev_dbg.ref.ref.ref($p2, $p84, .str.172);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i61 == 1;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p51);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(16, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i64 := readl($p63);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 495} {:cexpr "tmp___1"} boogie_si_record_i32($i64);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32($i55, 1);
    call {:si_unique_call 496} {:cexpr "timeout"} boogie_si_record_i32($i65);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i55, 0);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i57 := $i64;
    assume true;
    goto $bb19, $bb26;

  $bb26:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i55, $i56 := $i65, $i64;
    goto $bb26_dummy;

  $bb19:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_64 := _dev_info.ref.ref.ref.i32($p59, .str.171, .str.168, $i57);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 110);
    goto $bb16;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_63 := dev_err.ref.ref($p48, .str.170);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb16;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i28, 10000;
    goto $bb7;

  $bb7:
    call $i34, $p35, $p36, $i37, $i38, $i39, $i32, $i33, $i41, $i42, $i43, $i40 := s3c_hsotg_corereset_loop_$bb7($p25, $i34, $p35, $p36, $i37, $i38, $i39, $i32, $i33, $i41, $i42, $i43, $i40);
    goto $bb7_last;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i33, 1);
    call {:si_unique_call 487} {:cexpr "timeout"} boogie_si_record_i32($i41);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i33, 0);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i34, $i43 := $i41, $i32;
    assume true;
    goto $bb8, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb12;

  $bb8:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p25);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(16, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i37 := readl($p36);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 489} {:cexpr "grstctl"} boogie_si_record_i32($i37);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 1);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i40 := $i37;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i31 := $i40;
    goto $bb6;

  $bb9:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i32, $i33 := $i37, $i34;
    goto $bb9_dummy;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_62 := __dynamic_dev_dbg.ref.ref.ref($p1, $p20, .str.169);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2324;
}



const s3c_hsotg_init_fifo: ref;

axiom s3c_hsotg_init_fifo == $sub.ref(0, 343185);

procedure s3c_hsotg_init_fifo($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_init_fifo($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i23: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(36, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} writel(2048, $p4);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(40, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} writel(67110912, $p7);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(260, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} writel(50334720, $p10);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(264, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} writel(50335488, $p55);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(268, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} writel(50336256, $p58);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(272, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} writel(50337024, $p61);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(276, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} writel(50337792, $p64);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(280, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} writel(50338560, $p67);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.1, $p68);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref(284, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} writel(50339328, $p70);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(288, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} writel(50340096, $p73);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.1, $p74);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(292, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} writel(50340864, $p76);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.1, $p77);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(296, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} writel(50341632, $p79);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(300, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} writel(50342400, $p82);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(304, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} writel(50343168, $p85);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.1, $p86);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p87, $mul.ref(308, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} writel(50343936, $p88);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.1, $p89);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(312, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} writel(50344704, $p91);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(316, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} writel(50345472, $p94);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(16, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} writel(1072, $p13);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(16, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i17 := readl($p16);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 507} {:cexpr "val"} boogie_si_record_i32($i17);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 48);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i20 := 100;
    assume {:branchcond $i19} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i17, 100;
    goto $bb8;

  $bb8:
    call $i23, $i21, $i22, $i24, $i25, $p26, $p27, $p29, $p30, $i31, $i32, $i33, vslice_dummy_var_66 := s3c_hsotg_init_fifo_loop_$bb8($p0, $p14, $i23, $i21, $i22, $i24, $i25, $p26, $p27, $p29, $p30, $i31, $i32, $i33, vslice_dummy_var_66);
    goto $bb8_last;

  $bb11:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i22, 1);
    call {:si_unique_call 510} {:cexpr "timeout"} boogie_si_record_i32($i24);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} __const_udelay(4295);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p14);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(16, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i31 := readl($p30);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 514} {:cexpr "val"} boogie_si_record_i32($i31);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 48);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i23 := $i24;
    assume true;
    goto $bb9, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i21, $i22 := $i31, $i24;
    goto $bb15_dummy;

  $bb9:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p34, .str.3);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p35, .str.152);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p36, .str.4);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p37, .str.153);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.6, $p39);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 273);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p39, $i42);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p43, 1);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.7, $p44);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 509} {:cexpr "tmp"} boogie_si_record_i64($i48);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_67 := __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p51, .str.153, $i20);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_66 := dev_err.ref.ref.ref.i32($p27, .str.151, .str.152, $i21);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb6;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;
}



const __orr32: ref;

axiom __orr32 == $sub.ref(0, 344217);

procedure __orr32($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation __orr32($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} {:cexpr "__orr32:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i2 := readl($p0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 531} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, $i1);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} writel($i3, $p0);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const __bic32: ref;

axiom __bic32 == $sub.ref(0, 345249);

procedure __bic32($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation __bic32($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} {:cexpr "__bic32:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i2 := readl($p0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 535} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i3 := $xor.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i2, $i3);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} writel($i4, $p0);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const s3c_hsotg_ep0_mps: ref;

axiom s3c_hsotg_ep0_mps == $sub.ref(0, 346281);

procedure s3c_hsotg_ep0_mps($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation s3c_hsotg_ep0_mps($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i8: i32;
  var vslice_dummy_var_68: i64;

  $bb0:
    call {:si_unique_call 537} {:cexpr "s3c_hsotg_ep0_mps:arg:mps"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 64);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 64);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32(1, 0);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 539} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32(1, 0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_68 := ldv__builtin_expect($i16, 0);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb19:
    assume $i13 == 1;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} warn_slowpath_null(.str.4, 1610);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb17;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb17;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i8 := 2;
    goto $bb17;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i8 := 3;
    goto $bb17;
}



const s3c_hsotg_enqueue_setup: ref;

axiom s3c_hsotg_enqueue_setup == $sub.ref(0, 347313);

procedure s3c_hsotg_enqueue_setup($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $CurrAddr, $M.9, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_enqueue_setup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(224, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $p5 := our_req($p4);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.3);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.42);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.4);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p9, .str.43);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.6, $p11);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 1222);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p11, $i14);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p15, 1);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.7, $p16);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 546} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(42, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i27 := $and.i8($i26, $sub.i8(0, 3));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, $i27);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, 8);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(240, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, $p29);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p32, s3c_hsotg_complete_setup);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i34 := list_empty($p33);
    call {:si_unique_call 549} {:cexpr "tmp___2"} boogie_si_record_i32($i34);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, 0);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i61 := s3c_hsotg_ep_queue($p60, $p4, 32);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 554} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i62 == 1;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_71 := dev_err.ref.ref.ref.i32($p64, .str.45, .str.42, $i61);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p36, .str.3);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p37, .str.42);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p38, .str.4);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p39, .str.44);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.6, $p41);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 1230);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p41, $i44);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p45, 1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.7, $p46);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 551} {:cexpr "tmp___1"} boogie_si_record_i64($i50);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i51 == 1;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_70 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p53, .str.44, .str.42);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_69 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p23, .str.43, .str.42);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const our_req: ref;

axiom our_req == $sub.ref(0, 348345);

procedure our_req($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation our_req($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const s3c_hsotg_complete_setup: ref;

axiom s3c_hsotg_complete_setup == $sub.ref(0, 349377);

procedure s3c_hsotg_complete_setup($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.1, $CurrAddr, $M.12, $M.16, $M.15, $M.21, assertsPassed;



implementation s3c_hsotg_complete_setup($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p3 := our_ep($p0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.11, $p4);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} spin_lock($p30);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(84, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} s3c_hsotg_process_control($p5, $p36);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} spin_unlock($p37);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} s3c_hsotg_enqueue_setup($p5);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.3);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.46);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.4);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, .str.47);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.6, $p14);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 1197);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p14, $i17);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p18, 1);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.7, $p19);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 559} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_72 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p26, .str.47, .str.46, $i28);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const s3c_hsotg_ep_queue: ref;

axiom s3c_hsotg_ep_queue == $sub.ref(0, 350409);

procedure s3c_hsotg_ep_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_ep_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $i40: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i8;
  var $i44: i8;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i1;
  var $i51: i8;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i8;
  var $p60: ref;
  var $p61: ref;
  var $i62: i1;
  var $i55: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 566} {:cexpr "s3c_hsotg_ep_queue:arg:gfp_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $p4 := our_req($p1);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $p5 := our_ep($p0);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.3);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str.68);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.4);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p11, .str.69);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.6, $p13);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 775);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p13, $i16);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p17, 1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 570} {:cexpr "tmp___1"} boogie_si_record_i64($i22);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} INIT_LIST_HEAD($p47);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(84, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p48, 0);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p49, $sub.i32(0, 115));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i50 := using_dma($p7);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i8($i50);
    call {:si_unique_call 574} {:cexpr "tmp___3"} boogie_si_record_i8($i51);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i57 := list_empty($p56);
    call {:si_unique_call 578} {:cexpr "tmp___4"} boogie_si_record_i32($i57);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i8($i58);
    call {:si_unique_call 579} {:cexpr "first"} boogie_si_record_i8($i59);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} list_add_tail($p60, $p61);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i8.i1($i59);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb11:
    assume $i62 == 1;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} s3c_hsotg_start_req($p7, $p5, $p4, 0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i52 == 1;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i53 := s3c_hsotg_map_dma($p7, $p5, $p1);
    call {:si_unique_call 576} {:cexpr "tmp___2"} boogie_si_record_i32($i53);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i54 == 1;
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb8;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(42, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i34 := $and.i8($i33, 1);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(42, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i8($i37, 1);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, 1);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(42, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i43 := $lshr.i8($i42, 2);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i44 := $and.i8($i43, 1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_73 := __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.ref.i32.i32.i32($p3, $p25, .str.69, $p27, $p1, $i29, $p31, $i35, $i40, $i45);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s3c_hsotg_map_dma: ref;

axiom s3c_hsotg_map_dma == $sub.ref(0, 351441);

procedure s3c_hsotg_map_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation s3c_hsotg_map_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i8: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $p3 := our_req($p2);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(248, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i13 := usb_gadget_map_request($p9, $p2, $i12);
    call {:si_unique_call 584} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} vslice_dummy_var_74 := dev_err.ref.ref.ref.ref.i32($p16, .str.70, .str.71, $p18, $i20);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 352473);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} __list_add($p0, $p3, $p1);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 353505);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    return;
}



const usb_gadget_map_request: ref;

axiom usb_gadget_map_request == $sub.ref(0, 354537);

procedure usb_gadget_map_request($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_gadget_map_request($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 587} {:cexpr "usb_gadget_map_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 1} true;
    call {:si_unique_call 588} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 589} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const s3c_hsotg_process_control: ref;

axiom s3c_hsotg_process_control == $sub.ref(0, 355569);

procedure s3c_hsotg_process_control($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.12, $M.16, $CurrAddr, $M.15, $M.21, assertsPassed;



implementation s3c_hsotg_process_control($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i24;
  var $i55: i24;
  var $i56: i24;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i16;
  var $i108: i32;
  var $i110: i32;
  var $i111: i32;
  var $i113: i32;
  var $i112: i32;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $p127: ref;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i24;
  var $i136: i24;
  var $i137: i24;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i64;
  var $i142: i64;
  var $i143: i64;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $i148: i32;
  var $i149: i1;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i9 := $and.i8($i8, $sub.i8(0, 9));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, $i9);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.3);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.48);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.4);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.49);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.6, $p15);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 1120);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p15, $i18);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p19, 1);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p20);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 594} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i43 := $sext.i8.i32($i42);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p47, $i46);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p48, .str.3);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p49, .str.48);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, .str.4);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p51, .str.50);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i54 := $load.i24($M.6, $p53);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i55 := $and.i24($i54, $sub.i24(0, 262144));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i56 := $or.i24($i55, 1128);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p53, $i56);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p57, 1);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.7, $p58);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i64($i59);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i61 := $and.i64($i60, 1);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i62 := ldv__builtin_expect($i61, 0);
    call {:si_unique_call 597} {:cexpr "tmp___0"} boogie_si_record_i64($i62);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.1, $p70);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.1, $p75);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i77, 96);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i148 := $i114;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i148, 0);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    return;

  $bb45:
    assume $i149 == 1;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} s3c_hsotg_stall_ep0($p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i115 == 1;
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.1, $p116);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb35;

  $bb36:
    assume $i119 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} spin_unlock($p120);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.1, $p121);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.1, $p123);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(248, 1));
    call {:si_unique_call 613} $i126 := devirtbounce.9($p124, $p125, $p1);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 614} {:cexpr "ret"} boogie_si_record_i32($i126);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} spin_lock($p127);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i126, 0);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i148 := $i126;
    goto $bb44;

  $bb38:
    assume $i128 == 1;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p129, .str.3);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p130, .str.48);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p131, .str.4);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p132, .str.52);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i135 := $load.i24($M.6, $p134);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i136 := $and.i24($i135, $sub.i24(0, 262144));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i137 := $or.i24($i136, 1170);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p134, $i137);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p138, 1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.7, $p139);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i64($i140);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i142 := $and.i64($i141, 1);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i143 := ldv__builtin_expect($i142, 0);
    call {:si_unique_call 617} {:cexpr "tmp___1"} boogie_si_record_i64($i143);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i144 == 1;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.1, $p145);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_78 := __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p146, .str.52, $i126);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    goto $bb42;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i79 == 1;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.1, $p80);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i82, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i82, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i82, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i114 := $i112;
    goto $bb32;

  $bb17:
    assume $i85 == 1;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} s3c_hsotg_disconnect($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p91, $mul.ref(2048, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i93 := readl($p92);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 601} {:cexpr "dcfg"} boogie_si_record_i32($i93);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, $sub.i32(0, 2033));
    call {:si_unique_call 602} {:cexpr "dcfg"} boogie_si_record_i32($i94);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.1, $p95);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i98 := $shl.i32($i97, 4);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 2032);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i99, $i94);
    call {:si_unique_call 603} {:cexpr "dcfg"} boogie_si_record_i32($i100);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.1, $p101);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref(2048, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} writel($i100, $p103);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.1, $p104);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.1, $p106);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_77 := _dev_info.ref.ref.i32($p105, .str.51, $i108);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i110 := s3c_hsotg_send_reply($p0, $p6, $0.ref, 0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 607} {:cexpr "ret"} boogie_si_record_i32($i110);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i82, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb19;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i113 := s3c_hsotg_process_req_feature($p0, $p1);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 609} {:cexpr "ret"} boogie_si_record_i32($i113);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i112 := $i113;
    goto $bb30;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i82, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i82, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb19;

  $bb25:
    assume $i88 == 1;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb23:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i82, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb19;

  $bb27:
    assume $i89 == 1;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i111 := s3c_hsotg_process_req_status($p0, $p1);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 611} {:cexpr "ret"} boogie_si_record_i32($i111);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i112 := $i111;
    goto $bb30;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i73 == 1;
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p74, 1);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i63 == 1;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.1, $p66);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_76 := __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p65, .str.50, $i68);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.1, $p34);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} vslice_dummy_var_75 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p2, $p27, .str.49, $i30, $i33, $i36, $i39);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s3c_hsotg_send_reply: ref;

axiom s3c_hsotg_send_reply == $sub.ref(0, 356601);

procedure s3c_hsotg_send_reply($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_send_reply($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i8;
  var $i40: i8;
  var $p41: ref;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i8;
  var $i49: i8;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i32: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 621} {:cexpr "s3c_hsotg_send_reply:arg:length"} boogie_si_record_i32($i3);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.3);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.53);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.4);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p8, .str.54);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.6, $p10);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 885);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p10, $i13);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p14, 1);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 623} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $p25 := s3c_hsotg_ep_alloc_request($p24, 32);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(216, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, $p25);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p25);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(232, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p25, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, $p33);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p25, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p36, $i3);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p25, $mul.ref(0, 88)), $mul.ref(42, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, $sub.i8(0, 3));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i40 := $or.i8($i39, 2);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p37, $i40);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p25, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p41, s3c_hsotg_complete_oursetup);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i3, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.1, $p46);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i48 := $and.i8($i47, $sub.i8(0, 9));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i49 := $or.i8($i48, 8);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p46, $i49);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i51 := s3c_hsotg_ep_queue($p50, $p25, 32);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 630} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb11:
    assume $i52 == 1;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} vslice_dummy_var_81 := dev_warn.ref.ref.ref($p54, .str.56, .str.53);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i32 := $i51;
    goto $bb6;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i3);
    call {:si_unique_call 627} {:cexpr "__len"} boogie_si_record_i64($i43);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p25, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 628} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p45, $p2, $i43, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} vslice_dummy_var_80 := dev_warn.ref.ref.ref($p30, .str.55, .str.53);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_79 := __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p4, $p22, .str.54, .str.53, $p2, $i3);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s3c_hsotg_process_req_status: ref;

axiom s3c_hsotg_process_req_status == $sub.ref(0, 357633);

procedure s3c_hsotg_process_req_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.16;



implementation s3c_hsotg_process_req_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i16;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i32: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.3);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.59);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.4);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p9, .str.60);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.6, $p11);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 926);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p11, $i14);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p15, 1);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.7, $p16);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 635} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 31);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i36, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i36, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.1, $p41);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p44 := ep_from_windex($p0, $i43);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p44);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(130, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.13, $p48);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i16($i49);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 1);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p2, $i53);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.1, $p54);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 2);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p2);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i59 := s3c_hsotg_send_reply($p0, $p5, $p58, 2);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 640} {:cexpr "ret"} boogie_si_record_i32($i59);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb6;

  $bb26:
    assume $i60 == 1;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} vslice_dummy_var_84 := dev_err.ref.ref.ref($p62, .str.62, .str.59);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i32 := $i59;
    goto $bb6;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb6;

  $bb19:
    assume $i46 == 1;
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 2);
    goto $bb6;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p2, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb9:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i36, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb15;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p2, 0);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_83 := dev_warn.ref.ref.ref($p30, .str.61, .str.59);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_82 := __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p23, .str.60, .str.59);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s3c_hsotg_process_req_feature: ref;

axiom s3c_hsotg_process_req_feature == $sub.ref(0, 358665);

procedure s3c_hsotg_process_req_feature($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.15, $M.9, $CurrAddr, $M.21, $M.12, $M.16, assertsPassed;



implementation s3c_hsotg_process_req_feature($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $i74: i8;
  var $p75: ref;
  var $i76: i1;
  var $i77: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i84: i1;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $i102: i8;
  var $i103: i1;
  var $p104: ref;
  var $i64: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 644} {:cexpr "set"} boogie_si_record_i8($i10);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.3);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.63);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.4);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.64);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.6, $p16);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 1001);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p16, $i19);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p20, 1);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.7, $p21);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 646} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 2);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $r := $i64;
    return;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.1, $p36);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p39 := ep_from_windex($p0, $i38);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.1, $p65);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 2);
    goto $bb11;

  $bb14:
    assume $i68 == 1;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p39, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.1, $p69);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i71 := $and.i8($i70, 1);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i8($i73);
    call {:si_unique_call 652} {:cexpr "halted"} boogie_si_record_i8($i74);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p39, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i10);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_87 := s3c_hsotg_ep_sethalt($p75, $i77);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i79 := s3c_hsotg_send_reply($p0, $p5, $0.ref, 0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 655} {:cexpr "ret"} boogie_si_record_i32($i79);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i10);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i84 == 1);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i8.i1($i74);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i64 := 1;
    goto $bb11;

  $bb22:
    assume $i85 == 1;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p39, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.1, $p86);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p39, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i100 := list_empty($p99);
    call {:si_unique_call 660} {:cexpr "tmp___1"} boogie_si_record_i32($i100);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i8($i101);
    call {:si_unique_call 661} {:cexpr "restart"} boogie_si_record_i8($i102);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i8.i1($i102);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i103 == 1;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p104 := get_ep_head($p39);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} s3c_hsotg_start_req($p0, $p39, $p104, 0);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i89 == 1;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p39, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p39, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p92, $0.ref);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p91, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} list_del_init($p93);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p39, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p91, $mul.ref(0, 112)), $mul.ref(0, 1));
    call {:si_unique_call 658} devirtbounce.7($p96, $p97, $p98);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb20;

  $bb16:
    assume $i80 == 1;
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.1, $p81);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_88 := dev_err.ref.ref.ref($p82, .str.62, .str.63);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i64 := $i79;
    goto $bb11;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i41 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p42, .str.3);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p43, .str.63);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p44, .str.4);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p45, .str.67);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.6, $p47);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 1007);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p47, $i50);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p51, 1);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.7, $p52);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 650} {:cexpr "tmp___0"} boogie_si_record_i64($i56);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 2);
    goto $bb11;

  $bb8:
    assume $i57 == 1;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.1, $p60);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vslice_dummy_var_86 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p59, .str.67, .str.63, $i62);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i10);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p30 := (if $i29 == 1 then .str.65 else .str.66);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} vslice_dummy_var_85 := __dynamic_dev_dbg.ref.ref.ref.ref.ref($p2, $p28, .str.64, .str.63, $p30);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s3c_hsotg_stall_ep0: ref;

axiom s3c_hsotg_stall_ep0 == $sub.ref(0, 359697);

procedure s3c_hsotg_stall_ep0($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_stall_ep0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.3);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.39);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.4);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p8, .str.40);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.6, $p10);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1076);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p10, $i13);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p14, 1);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 667} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i31 := (if $i30 == 1 then 2304 else 2816);
    call {:si_unique_call 669} {:cexpr "reg"} boogie_si_record_i32($i31);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i31);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p33, $mul.ref($i34, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i36 := readl($p35);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 671} {:cexpr "ctrl"} boogie_si_record_i32($i36);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, 2097152);
    call {:si_unique_call 672} {:cexpr "ctrl"} boogie_si_record_i32($i37);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, 67108864);
    call {:si_unique_call 673} {:cexpr "ctrl"} boogie_si_record_i32($i38);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i31);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p40, $mul.ref($i41, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} writel($i38, $p42);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p43, .str.3);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p44, .str.39);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p45, .str.4);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p46, .str.41);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.6, $p48);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 1091);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p48, $i51);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p52, 1);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.7, $p53);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 676} {:cexpr "tmp___1"} boogie_si_record_i64($i57);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} s3c_hsotg_enqueue_setup($p0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i58 == 1;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i31);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p60, $mul.ref($i61, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i63 := readl($p62);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 678} {:cexpr "tmp___0"} boogie_si_record_i32($i63);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} vslice_dummy_var_90 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p2, $p65, .str.41, $i38, $i31, $i63);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_89 := __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p22, .str.40, $i25);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ep_from_windex: ref;

axiom ep_from_windex == $sub.ref(0, 360729);

procedure ep_from_windex($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ep_from_windex($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} {:cexpr "ep_from_windex:arg:windex"} boogie_si_record_i32($i1);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 127);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 144));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i1, 128);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 682} {:cexpr "dir"} boogie_si_record_i32($i9);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i1, 127);
    call {:si_unique_call 683} {:cexpr "idx"} boogie_si_record_i32($i10);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i1, 255);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(189, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, $i10);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i10, 0);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(126, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, $i9);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;
}



const s3c_hsotg_ep_sethalt: ref;

axiom s3c_hsotg_ep_sethalt == $sub.ref(0, 361761);

procedure s3c_hsotg_ep_sethalt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.15, $M.9, $CurrAddr, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_ep_sethalt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i30: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i50: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i8;
  var $p62: ref;
  var $i63: i8;
  var $i64: i8;
  var $i65: i8;
  var $i66: i8;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} {:cexpr "s3c_hsotg_ep_sethalt:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p2 := our_ep($p0);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.15, $p3);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.15, $p5);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 686} {:cexpr "index"} boogie_si_record_i32($i7);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_91 := _dev_info.ref.ref.ref.ref.ref.i32($p9, .str.36, .str.37, $p0, $p11, $i1);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, 0);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i7, 72);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i18, 32);
    call {:si_unique_call 690} {:cexpr "epreg"} boogie_si_record_i32($i19);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i19);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p21, $mul.ref($i22, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i24 := readl($p23);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    call {:si_unique_call 692} {:cexpr "epctl"} boogie_si_record_i32($i24);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i1, 0);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i24, $sub.i32(0, 2097153));
    call {:si_unique_call 694} {:cexpr "epctl"} boogie_si_record_i32($i31);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 786432);
    call {:si_unique_call 695} {:cexpr "xfertype"} boogie_si_record_i32($i32);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 524288);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i33 == 1);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i32, 786432);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i31;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i30 := $i36;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i19);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p38, $mul.ref($i39, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} writel($i30, $p40);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i7, 88);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i41, 32);
    call {:si_unique_call 698} {:cexpr "epreg"} boogie_si_record_i32($i42);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i42);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p44, $mul.ref($i45, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i47 := readl($p46);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    call {:si_unique_call 700} {:cexpr "epctl"} boogie_si_record_i32($i47);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i1, 0);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i47, $sub.i32(0, 2097153));
    call {:si_unique_call 703} {:cexpr "epctl"} boogie_si_record_i32($i51);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 786432);
    call {:si_unique_call 704} {:cexpr "xfertype"} boogie_si_record_i32($i52);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 524288);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i53 == 1);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i52, 786432);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i56 := $i51;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i50 := $i56;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i42);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p58, $mul.ref($i59, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} writel($i50, $p60);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i1);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.15, $p62);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i64 := $and.i8($i61, 1);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i65 := $and.i8($i63, $sub.i8(0, 2));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i66 := $or.i8($i65, $i64);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p62, $i66);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i51, 268435456);
    call {:si_unique_call 706} {:cexpr "epctl"} boogie_si_record_i32($i55);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb28;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb24;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i47, 2097152);
    call {:si_unique_call 702} {:cexpr "epctl"} boogie_si_record_i32($i49);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb22;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i31, 268435456);
    call {:si_unique_call 701} {:cexpr "epctl"} boogie_si_record_i32($i35);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb15;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i24, 136314880);
    call {:si_unique_call 693} {:cexpr "epctl"} boogie_si_record_i32($i26);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i26;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb13;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i26, 1073741824);
    call {:si_unique_call 696} {:cexpr "epctl"} boogie_si_record_i32($i28);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb12;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i1, 0);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_92 := dev_warn.ref.ref.ref($p16, .str.38, .str.37);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} s3c_hsotg_stall_ep0($p4);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const s3c_hsotg_ep_alloc_request: ref;

axiom s3c_hsotg_ep_alloc_request == $sub.ref(0, 362793);

procedure s3c_hsotg_ep_alloc_request($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation s3c_hsotg_ep_alloc_request($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} {:cexpr "s3c_hsotg_ep_alloc_request:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p2 := kzalloc(112, $i1);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} INIT_LIST_HEAD($p7);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p6 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const s3c_hsotg_complete_oursetup: ref;

axiom s3c_hsotg_complete_oursetup == $sub.ref(0, 363825);

procedure s3c_hsotg_complete_oursetup($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation s3c_hsotg_complete_oursetup($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p3 := our_ep($p0);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.3);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.57);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.4);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p9, .str.58);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.6, $p11);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 835);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p11, $i14);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p15, 1);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.7, $p16);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 713} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} s3c_hsotg_ep_free_request($p0, $p1);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} vslice_dummy_var_93 := __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p2, $p23, .str.58, .str.57, $p0, $p1);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 364857);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const s3c_hsotg_ep_free_request: ref;

axiom s3c_hsotg_ep_free_request == $sub.ref(0, 365889);

procedure s3c_hsotg_ep_free_request($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation s3c_hsotg_ep_free_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p2 := our_req($p1);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} kfree($p3);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 366921);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} free_($p0);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 367953);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 719} $free($p0);
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 368985);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 721} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} ldv_check_alloc_flags($i1);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 370017);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i1 := $M.9;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} ldv_error();
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 371049);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 725} __VERIFIER_error();
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const phy_init: ref;

axiom phy_init == $sub.ref(0, 372081);

procedure phy_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation phy_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 1} true;
    call {:si_unique_call 726} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 727} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const phy_power_on: ref;

axiom phy_power_on == $sub.ref(0, 373113);

procedure phy_power_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation phy_power_on($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 1} true;
    call {:si_unique_call 728} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 729} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_phy_init: ref;

axiom usb_phy_init == $sub.ref(0, 374145);

procedure usb_phy_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation usb_phy_init($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    call {:si_unique_call 730} $i9 := devirtbounce.10($p8, $p0);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 731} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb6;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const s3c_hsotg_read_frameno: ref;

axiom s3c_hsotg_read_frameno == $sub.ref(0, 375177);

procedure s3c_hsotg_read_frameno($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_read_frameno($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(2056, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i4 := readl($p3);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 733} {:cexpr "dsts"} boogie_si_record_i32($i4);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 4194048);
    call {:si_unique_call 734} {:cexpr "dsts"} boogie_si_record_i32($i5);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i5, 8);
    call {:si_unique_call 735} {:cexpr "dsts"} boogie_si_record_i32($i6);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const s3c_hsotg_ep_enable: ref;

axiom s3c_hsotg_ep_enable == $sub.ref(0, 376209);

procedure s3c_hsotg_ep_enable($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.16, $M.1, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12;



implementation s3c_hsotg_ep_enable($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i74: i32;
  var $i75: i32;
  var $i73: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i24;
  var $i88: i24;
  var $i89: i24;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $p107: ref;
  var $i108: i8;
  var $i109: i8;
  var $p110: ref;
  var $i111: i8;
  var $i112: i8;
  var $p113: ref;
  var $i114: i8;
  var $i115: i8;
  var $p116: ref;
  var $i117: i8;
  var $p118: ref;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i32;
  var $i140: i32;
  var $p141: ref;
  var $i142: i8;
  var $i143: i8;
  var $i144: i8;
  var $i145: i1;
  var $p146: ref;
  var $i147: i8;
  var $i148: i8;
  var $i149: i8;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i8;
  var $i155: i8;
  var $i156: i8;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $i150: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i8;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i32;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i24;
  var $i180: i24;
  var $i181: i24;
  var $p182: ref;
  var $p183: ref;
  var $i184: i8;
  var $i185: i64;
  var $i186: i64;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i24;
  var $i203: i24;
  var $i204: i24;
  var $p205: ref;
  var $p206: ref;
  var $i207: i8;
  var $i208: i64;
  var $i209: i64;
  var $i210: i64;
  var $i211: i1;
  var $p212: ref;
  var $p213: ref;
  var $i214: i64;
  var $p215: ref;
  var $i216: i32;
  var $p217: ref;
  var $p218: ref;
  var $p220: ref;
  var $i68: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i64;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p6 := our_ep($p0);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.16, $p7);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.16, $p9);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    call {:si_unique_call 741} {:cexpr "index"} boogie_si_record_i32($i11);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.3);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.72);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.4);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p15, .str.73);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.6, $p17);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 2491);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p17, $i20);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p21, 1);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.7, $p22);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 743} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i11, 0);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    call {:si_unique_call 745} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i46);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 747} {:cexpr "tmp___1"} boogie_si_record_i64($i50);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i46, 0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_95 := ldv__builtin_expect($i54, 0);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.1, $p56);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i58 := $sext.i8.i32($i57);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 0);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    call {:si_unique_call 750} {:cexpr "dir_in"} boogie_si_record_i32($i60);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.16, $p61);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, $i60);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i69 := usb_endpoint_maxp($p1);
    call {:si_unique_call 753} {:cexpr "tmp___2"} boogie_si_record_i32($i69);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i60, 0);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i70 == 1);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i11, 88);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i75 := $mul.i32($i74, 32);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i73 := $i75;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i78 := $zext.i32.i64($i73);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p77, $mul.ref($i78, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i80 := readl($p79);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 755} {:cexpr "epctrl"} boogie_si_record_i32($i80);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p81, .str.3);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p82, .str.72);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p83, .str.4);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p84, .str.75);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i87 := $load.i24($M.6, $p86);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i88 := $and.i24($i87, $sub.i24(0, 262144));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i89 := $or.i24($i88, 2510);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p86, $i89);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p90, 1);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.7, $p91);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i64($i92);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i94 := $and.i64($i93, 1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i95 := ldv__builtin_expect($i94, 0);
    call {:si_unique_call 757} {:cexpr "tmp___3"} boogie_si_record_i64($i95);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} ldv_spin_lock();
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i80, $sub.i32(0, 788480));
    call {:si_unique_call 760} {:cexpr "epctrl"} boogie_si_record_i32($i100);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i100, $i69);
    call {:si_unique_call 761} {:cexpr "epctrl"} boogie_si_record_i32($i101);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i102 := $or.i32($i101, 32768);
    call {:si_unique_call 762} {:cexpr "epctrl"} boogie_si_record_i32($i102);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i102, 134217728);
    call {:si_unique_call 763} {:cexpr "epctrl"} boogie_si_record_i32($i103);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.16, $p104);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} s3c_hsotg_set_ep_maxpacket($p8, $i106, $i69);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.16, $p107);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i109 := $and.i8($i108, $sub.i8(0, 5));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p107, $i109);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.16, $p110);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i112 := $and.i8($i111, $sub.i8(0, 3));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p110, $i112);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.16, $p113);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i115 := $and.i8($i114, $sub.i8(0, 2));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p113, $i115);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.1, $p116);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(129, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p118, $i117);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(129, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.16, $p119);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i122 := $ugt.i32($i121, 1);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.1, $p130);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, 3);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i133, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i133, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i133, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i136 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i150 := $i103;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i60, 0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i169 := $i150;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i11, 0);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    $i172 := $i169;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p173, .str.3);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p174, .str.72);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p175, .str.4);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p176, .str.77);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i179 := $load.i24($M.6, $p178);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i180 := $and.i24($i179, $sub.i24(0, 262144));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i181 := $or.i24($i180, 2590);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p178, $i181);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p182, 1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.7, $p183);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i64($i184);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i186 := $and.i64($i185, 1);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i187 := ldv__builtin_expect($i186, 0);
    call {:si_unique_call 774} {:cexpr "tmp___4"} boogie_si_record_i64($i187);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i187, 0);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p8, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.1, $p192);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i194 := $zext.i32.i64($i73);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($p193, $mul.ref($i194, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} writel($i172, $p195);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p196, .str.3);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p197, .str.72);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p198, .str.4);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p199, .str.78);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i202 := $load.i24($M.6, $p201);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i203 := $and.i24($i202, $sub.i24(0, 262144));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i204 := $or.i24($i203, 2594);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p201, $i204);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p205, 1);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.7, $p206);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i64($i207);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i209 := $and.i64($i208, 1);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i210 := ldv__builtin_expect($i209, 0);
    call {:si_unique_call 778} {:cexpr "tmp___6"} boogie_si_record_i64($i210);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i211 := $ne.i64($i210, 0);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} s3c_hsotg_ctrl_epint($p8, $i11, $i60, 1);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p8, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} spin_unlock_irqrestore($p220, $u0);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $r := $i68;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i211 == 1;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p8, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.1, $p212);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i214 := $zext.i32.i64($i73);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($p213, $mul.ref($i214, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i216 := readl($p215);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    call {:si_unique_call 780} {:cexpr "tmp___5"} boogie_si_record_i32($i216);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p8, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.1, $p217);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_100 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p218, .str.78, .str.72, $i216);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i188 == 1;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p8, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.1, $p189);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} vslice_dummy_var_99 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p190, .str.77, .str.72, $i172);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i170 == 1;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i171 := $or.i32($i169, 268435456);
    call {:si_unique_call 772} {:cexpr "epctrl"} boogie_si_record_i32($i171);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i172 := $i171;
    goto $bb51;

  $bb43:
    assume $i161 == 1;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p8);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p162, $mul.ref(188, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.1, $p163);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i164);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i166 := $ne.i32($i165, 0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb45;

  $bb46:
    assume $i166 == 1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i167 := $shl.i32($i11, 22);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i167, $i150);
    call {:si_unique_call 771} {:cexpr "epctrl"} boogie_si_record_i32($i168);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i169 := $i168;
    goto $bb48;

  $bb28:
    assume $i136 == 1;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i60, 0);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i159 := $i103;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i160 := $or.i32($i159, 786432);
    call {:si_unique_call 770} {:cexpr "epctrl"} boogie_si_record_i32($i160);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i150 := $i160;
    goto $bb38;

  $bb39:
    assume $i152 == 1;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.16, $p153);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i155 := $and.i8($i154, $sub.i8(0, 3));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i156 := $or.i8($i155, 2);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p153, $i156);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i157 := $shl.i32($i11, 22);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i158 := $or.i32($i157, $i103);
    call {:si_unique_call 769} {:cexpr "epctrl"} boogie_si_record_i32($i158);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i159 := $i158;
    goto $bb41;

  $bb26:
    assume $i135 == 1;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i151 := $or.i32($i103, 524288);
    call {:si_unique_call 766} {:cexpr "epctrl"} boogie_si_record_i32($i151);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i150 := $i151;
    goto $bb38;

  $bb24:
    assume $i134 == 1;
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i133, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i137 == 1);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i139 := $or.i32($i103, 262144);
    call {:si_unique_call 767} {:cexpr "epctrl"} boogie_si_record_i32($i139);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i140 := $or.i32($i139, 268435456);
    call {:si_unique_call 768} {:cexpr "epctrl"} boogie_si_record_i32($i140);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.16, $p141);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i143 := $and.i8($i142, $sub.i8(0, 5));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i144 := $or.i8($i143, 4);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p141, $i144);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i60, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i150 := $i140;
    goto $bb38;

  $bb35:
    assume $i145 == 1;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(130, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.16, $p146);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i148 := $and.i8($i147, $sub.i8(0, 3));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i149 := $or.i8($i148, 2);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p146, $i149);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i137 == 1;
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i133, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb30;

  $bb33:
    assume $i138 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i150 := $i103;
    goto $bb38;

  $bb17:
    assume $i122 == 1;
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.16, $p123);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i126 := $ugt.i32($i125, 1);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb19;

  $bb20:
    assume $i126 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p8, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.1, $p127);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} vslice_dummy_var_98 := dev_err.ref.ref($p128, .str.76);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i96 == 1;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p8, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.1, $p97);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_97 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p3, $p98, .str.75, .str.72, $i80, $i73);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i70 == 1;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i11, 72);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i72 := $mul.i32($i71, 32);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb13;

  $bb7:
    assume $i64 == 1;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_96 := dev_err.ref.ref.ref($p66, .str.74, .str.72);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i51 == 1;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} warn_slowpath_null(.str.4, 2494);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.1, $p38);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} vslice_dummy_var_94 := __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32($p2, $p29, .str.73, .str.72, $p31, $i34, $i37, $i40, $i43);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s3c_hsotg_ep_queue_lock: ref;

axiom s3c_hsotg_ep_queue_lock == $sub.ref(0, 377241);

procedure s3c_hsotg_ep_queue_lock($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_ep_queue_lock($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} {:cexpr "s3c_hsotg_ep_queue_lock:arg:gfp_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p3 := our_ep($p0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ldv_spin_lock();
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i6 := s3c_hsotg_ep_queue($p0, $p1, $i2);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 788} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} spin_unlock_irqrestore($p7, 0);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const s3c_hsotg_ep_dequeue: ref;

axiom s3c_hsotg_ep_dequeue == $sub.ref(0, 378273);

procedure s3c_hsotg_ep_dequeue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $CurrAddr, $M.12, $M.16, $M.15, $M.21, assertsPassed;



implementation s3c_hsotg_ep_dequeue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p16: ref;
  var $i15: i32;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p2 := our_req($p1);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $p3 := our_ep($p0);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.18, $p4);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vslice_dummy_var_101 := _dev_info.ref.ref.ref.ref($p7, .str.80, $p0, $p1);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_spin_lock();
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $i9 := on_list($p3, $p2);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 795} {:cexpr "tmp___1"} boogie_si_record_i8($i10);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} s3c_hsotg_complete_request($p5, $p3, $p2, $sub.i32(0, 104));
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} spin_unlock_irqrestore($p16, $u0);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} spin_unlock_irqrestore($p14, $u0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;
}



const s3c_hsotg_ep_sethalt_lock: ref;

axiom s3c_hsotg_ep_sethalt_lock == $sub.ref(0, 379305);

procedure s3c_hsotg_ep_sethalt_lock($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.15, $CurrAddr, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_ep_sethalt_lock($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} {:cexpr "s3c_hsotg_ep_sethalt_lock:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p2 := our_ep($p0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.19, $p3);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_spin_lock();
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i5 := s3c_hsotg_ep_sethalt($p0, $i1);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    call {:si_unique_call 803} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} spin_unlock_irqrestore($p6, 0);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const on_list: ref;

axiom on_list == $sub.ref(0, 380337);

procedure on_list($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation on_list($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p17: ref;
  var $p18: ref;
  var $i22: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.18, $p3);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.20, $p8);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(88, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p17, $p18 := $p11, $p6;
    goto $bb4;

  $bb4:
    call $i19, $i20, $i21, $p24, $p25, $p26, $p27, $p28, $i29, $i30, $p17, $p18 := on_list_loop_$bb4($p1, $i15, $i19, $i20, $i21, $p24, $p25, $p26, $p27, $p28, $i29, $i30, $p17, $p18);
    goto $bb4_last;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i19, $i20);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 112)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.20, $p24);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p17, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, $i15);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p17, $p18 := $p27, $p17;
    goto $bb10_dummy;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4030;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 381369);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const s3c_hsotg_set_ep_maxpacket: ref;

axiom s3c_hsotg_set_ep_maxpacket == $sub.ref(0, 382401);

procedure s3c_hsotg_set_ep_maxpacket($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_set_ep_maxpacket($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i16;
  var $p14: ref;
  var $p15: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $i24: i1;
  var $i25: i16;
  var $p27: ref;
  var $i16: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} {:cexpr "s3c_hsotg_set_ep_maxpacket:arg:ep"} boogie_si_record_i32($i1);
    call {:si_unique_call 806} {:cexpr "s3c_hsotg_set_ep_maxpacket:arg:mps"} boogie_si_record_i32($i2);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i2, 2047);
    call {:si_unique_call 809} {:cexpr "mpsval"} boogie_si_record_i32($i17);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, 1024);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i2, 11);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 3);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    call {:si_unique_call 816} {:cexpr "mcval"} boogie_si_record_i32($i21);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref($i5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, $i22);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i32($i21, 3);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i17);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref($i5, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p27, $i25);
    assume {:verifier.code 0} true;
    $i16 := $i17;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i1, 72);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i29 := $mul.i32($i28, 32);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p8, $mul.ref($i30, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i32 := readl($p31);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 812} {:cexpr "reg"} boogie_si_record_i32($i32);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $sub.i32(0, 2048));
    call {:si_unique_call 813} {:cexpr "reg"} boogie_si_record_i32($i33);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, $i16);
    call {:si_unique_call 814} {:cexpr "reg"} boogie_si_record_i32($i34);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i1, 72);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i35, 32);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p8, $mul.ref($i37, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} writel($i34, $p38);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i1, 0);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i1, 88);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i41 := $mul.i32($i40, 32);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p8, $mul.ref($i42, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i44 := readl($p43);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    call {:si_unique_call 818} {:cexpr "reg"} boogie_si_record_i32($i44);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, $sub.i32(0, 2048));
    call {:si_unique_call 819} {:cexpr "reg"} boogie_si_record_i32($i45);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, $i16);
    call {:si_unique_call 820} {:cexpr "reg"} boogie_si_record_i32($i46);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i1, 88);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i48 := $mul.i32($i47, 32);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p8, $mul.ref($i49, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} writel($i46, $p50);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_102 := dev_err.ref.ref.i32.i32($p52, .str.79, $i1, $i2);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i10 := s3c_hsotg_ep0_mps($i2);
    call {:si_unique_call 808} {:cexpr "mpsval"} boogie_si_record_i32($i10);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 3);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i2);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref($i5, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p14, $i12);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref($i5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 1);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i16 := $i10;
    goto $bb7;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 383433);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 822} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 823} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 1} true;
    call {:si_unique_call 824} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 825} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 384465);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 826} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 1} true;
    call {:si_unique_call 827} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 828} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const state_open: ref;

axiom state_open == $sub.ref(0, 385497);

procedure state_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation state_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1032)), $mul.ref(1024, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i4 := single_open($p1, state_show, $p3);
    call {:si_unique_call 830} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 386529);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 831} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 832} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const state_show: ref;

axiom state_show == $sub.ref(0, 387561);

procedure state_show($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation state_show($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $i104: i32;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $p112: ref;
  var $i113: i32;
  var $p114: ref;
  var $i115: i32;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $i120: i32;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $i126: i32;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $i131: i32;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $p139: ref;
  var $i140: i32;
  var $p141: ref;
  var $i142: i32;
  var $p145: ref;
  var $i146: i32;
  var $p147: ref;
  var $i148: i32;
  var $p150: ref;
  var $i151: i32;
  var $p152: ref;
  var $i153: i32;
  var $p156: ref;
  var $i157: i32;
  var $p158: ref;
  var $i159: i32;
  var $p161: ref;
  var $i162: i32;
  var $p163: ref;
  var $i164: i32;
  var $p167: ref;
  var $i168: i32;
  var $p169: ref;
  var $i170: i32;
  var $p172: ref;
  var $i173: i32;
  var $p174: ref;
  var $i175: i32;
  var $p178: ref;
  var $i179: i32;
  var $p180: ref;
  var $i181: i32;
  var $p183: ref;
  var $i184: i32;
  var $p185: ref;
  var $i186: i32;
  var $p189: ref;
  var $i190: i32;
  var $p191: ref;
  var $i192: i32;
  var $p194: ref;
  var $i195: i32;
  var $p196: ref;
  var $i197: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(256, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(2056, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i8 := readl($p7);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p6, $mul.ref(2052, 1));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i10 := readl($p9);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    call {:si_unique_call 836} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p6, $mul.ref(2048, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i12 := readl($p11);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    call {:si_unique_call 838} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vslice_dummy_var_103 := seq_printf.ref.ref.i32.i32.i32($p0, .str.81, $i12, $i10, $i8);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p6, $mul.ref(2068, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i15 := readl($p14);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    call {:si_unique_call 841} {:cexpr "tmp___2"} boogie_si_record_i32($i15);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p6, $mul.ref(2064, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i17 := readl($p16);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    call {:si_unique_call 843} {:cexpr "tmp___3"} boogie_si_record_i32($i17);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} vslice_dummy_var_104 := seq_printf.ref.ref.i32.i32($p0, .str.82, $i17, $i15);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p6, $mul.ref(20, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i20 := readl($p19);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    call {:si_unique_call 846} {:cexpr "tmp___4"} boogie_si_record_i32($i20);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p6, $mul.ref(24, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i22 := readl($p21);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    call {:si_unique_call 848} {:cexpr "tmp___5"} boogie_si_record_i32($i22);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_105 := seq_printf.ref.ref.i32.i32($p0, .str.83, $i22, $i20);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p6, $mul.ref(2072, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $i25 := readl($p24);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    call {:si_unique_call 851} {:cexpr "tmp___6"} boogie_si_record_i32($i25);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p6, $mul.ref(2076, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i27 := readl($p26);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    call {:si_unique_call 853} {:cexpr "tmp___7"} boogie_si_record_i32($i27);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} vslice_dummy_var_106 := seq_printf.ref.ref.i32.i32($p0, .str.84, $i27, $i25);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p6, $mul.ref(28, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i30 := readl($p29);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    call {:si_unique_call 856} {:cexpr "tmp___8"} boogie_si_record_i32($i30);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p6, $mul.ref(44, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i32 := readl($p31);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 858} {:cexpr "tmp___9"} boogie_si_record_i32($i32);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} vslice_dummy_var_107 := seq_printf.ref.ref.i32.i32($p0, .str.85, $i32, $i30);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_108 := seq_puts($p0, .str.86);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p6, $mul.ref(2304, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i36 := readl($p35);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    call {:si_unique_call 862} {:cexpr "in"} boogie_si_record_i32($i36);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p6, $mul.ref(2816, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i38 := readl($p37);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 864} {:cexpr "out"} boogie_si_record_i32($i38);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_109 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 0, $i36, $i38);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p6, $mul.ref(2320, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i41 := readl($p40);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 867} {:cexpr "in"} boogie_si_record_i32($i41);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p6, $mul.ref(2832, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i43 := readl($p42);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    call {:si_unique_call 869} {:cexpr "out"} boogie_si_record_i32($i43);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} vslice_dummy_var_110 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i41, $i43);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} vslice_dummy_var_111 := seq_puts($p0, .str.89);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p6, $mul.ref(2336, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i47 := readl($p46);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p6, $mul.ref(2848, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i49 := readl($p48);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_112 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 1, $i47, $i49);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p6, $mul.ref(2352, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $i52 := readl($p51);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p6, $mul.ref(2864, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i54 := readl($p53);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} vslice_dummy_var_113 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i52, $i54);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} vslice_dummy_var_114 := seq_puts($p0, .str.89);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p6, $mul.ref(2368, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i58 := readl($p57);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p6, $mul.ref(2880, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i60 := readl($p59);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} vslice_dummy_var_115 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 2, $i58, $i60);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p6, $mul.ref(2384, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i63 := readl($p62);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p6, $mul.ref(2896, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i65 := readl($p64);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_116 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i63, $i65);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_117 := seq_puts($p0, .str.89);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p6, $mul.ref(2400, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i69 := readl($p68);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p6, $mul.ref(2912, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i71 := readl($p70);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_118 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 3, $i69, $i71);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p6, $mul.ref(2416, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $i74 := readl($p73);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p6, $mul.ref(2928, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i76 := readl($p75);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} vslice_dummy_var_119 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i74, $i76);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_120 := seq_puts($p0, .str.89);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p6, $mul.ref(2432, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i80 := readl($p79);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p6, $mul.ref(2944, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i82 := readl($p81);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} vslice_dummy_var_121 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 4, $i80, $i82);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p6, $mul.ref(2448, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i85 := readl($p84);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p6, $mul.ref(2960, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i87 := readl($p86);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_122 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i85, $i87);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} vslice_dummy_var_123 := seq_puts($p0, .str.89);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p6, $mul.ref(2464, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i91 := readl($p90);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p6, $mul.ref(2976, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i93 := readl($p92);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_124 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 5, $i91, $i93);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p6, $mul.ref(2480, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i96 := readl($p95);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p6, $mul.ref(2992, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i98 := readl($p97);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} vslice_dummy_var_125 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i96, $i98);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_126 := seq_puts($p0, .str.89);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p6, $mul.ref(2496, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i102 := readl($p101);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p6, $mul.ref(3008, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i104 := readl($p103);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_127 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 6, $i102, $i104);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p6, $mul.ref(2512, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i107 := readl($p106);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p6, $mul.ref(3024, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i109 := readl($p108);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vslice_dummy_var_128 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i107, $i109);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} vslice_dummy_var_129 := seq_puts($p0, .str.89);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p6, $mul.ref(2528, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i113 := readl($p112);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p6, $mul.ref(3040, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i115 := readl($p114);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} vslice_dummy_var_130 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 7, $i113, $i115);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p6, $mul.ref(2544, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i118 := readl($p117);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p6, $mul.ref(3056, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i120 := readl($p119);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} vslice_dummy_var_131 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i118, $i120);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_132 := seq_puts($p0, .str.89);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p6, $mul.ref(2560, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i124 := readl($p123);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p6, $mul.ref(3072, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i126 := readl($p125);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} vslice_dummy_var_133 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 8, $i124, $i126);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p6, $mul.ref(2576, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i129 := readl($p128);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p6, $mul.ref(3088, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i131 := readl($p130);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} vslice_dummy_var_134 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i129, $i131);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} vslice_dummy_var_135 := seq_puts($p0, .str.89);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p6, $mul.ref(2592, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i135 := readl($p134);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p6, $mul.ref(3104, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i137 := readl($p136);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} vslice_dummy_var_136 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 9, $i135, $i137);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p6, $mul.ref(2608, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i140 := readl($p139);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p6, $mul.ref(3120, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i142 := readl($p141);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} vslice_dummy_var_137 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i140, $i142);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vslice_dummy_var_138 := seq_puts($p0, .str.89);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p6, $mul.ref(2624, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i146 := readl($p145);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p6, $mul.ref(3136, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i148 := readl($p147);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} vslice_dummy_var_139 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 10, $i146, $i148);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p6, $mul.ref(2640, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i151 := readl($p150);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p6, $mul.ref(3152, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i153 := readl($p152);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} vslice_dummy_var_140 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i151, $i153);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_141 := seq_puts($p0, .str.89);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p6, $mul.ref(2656, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i157 := readl($p156);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p6, $mul.ref(3168, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i159 := readl($p158);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vslice_dummy_var_142 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 11, $i157, $i159);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p6, $mul.ref(2672, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i162 := readl($p161);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p6, $mul.ref(3184, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i164 := readl($p163);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vslice_dummy_var_143 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i162, $i164);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_144 := seq_puts($p0, .str.89);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p6, $mul.ref(2688, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i168 := readl($p167);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p6, $mul.ref(3200, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i170 := readl($p169);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_145 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 12, $i168, $i170);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p6, $mul.ref(2704, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i173 := readl($p172);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p6, $mul.ref(3216, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i175 := readl($p174);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_146 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i173, $i175);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} vslice_dummy_var_147 := seq_puts($p0, .str.89);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p6, $mul.ref(2720, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $i179 := readl($p178);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($p6, $mul.ref(3232, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i181 := readl($p180);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_148 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 13, $i179, $i181);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($p6, $mul.ref(2736, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i184 := readl($p183);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p6, $mul.ref(3248, 1));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i186 := readl($p185);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} vslice_dummy_var_149 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i184, $i186);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_150 := seq_puts($p0, .str.89);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p6, $mul.ref(2752, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i190 := readl($p189);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p6, $mul.ref(3264, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i192 := readl($p191);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} vslice_dummy_var_151 := seq_printf.ref.ref.i32.i32.i32($p0, .str.87, 14, $i190, $i192);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p6, $mul.ref(2768, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i195 := readl($p194);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($p6, $mul.ref(3280, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i197 := readl($p196);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} vslice_dummy_var_152 := seq_printf.ref.ref.i32.i32($p0, .str.88, $i195, $i197);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} vslice_dummy_var_153 := seq_puts($p0, .str.89);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const single_open: ref;

axiom single_open == $sub.ref(0, 388593);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 1} true;
    call {:si_unique_call 970} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 971} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 389625);

procedure seq_printf.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 1} true;
    call {:si_unique_call 972} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 973} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 974} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 975} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 976} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 977} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 1} true;
    call {:si_unique_call 978} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 979} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 980} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 981} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 1} true;
    call {:si_unique_call 982} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 983} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 984} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 985} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 390657);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_puts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 986} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 987} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fifo_open: ref;

axiom fifo_open == $sub.ref(0, 391689);

procedure fifo_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fifo_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1032)), $mul.ref(1024, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i4 := single_open($p1, fifo_show, $p3);
    call {:si_unique_call 989} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const fifo_show: ref;

axiom fifo_show == $sub.ref(0, 392721);

procedure fifo_show($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation fifo_show($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(256, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_154 := seq_puts($p0, .str.198);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref(36, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i9 := readl($p8);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    call {:si_unique_call 992} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_155 := seq_printf.ref.ref.i32($p0, .str.199, $i9);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p6, $mul.ref(40, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i12 := readl($p11);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    call {:si_unique_call 995} {:cexpr "val"} boogie_si_record_i32($i12);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i32($i12, 16);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i12, $sub.i32(0, 65536));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_156 := seq_printf.ref.ref.i32.i32($p0, .str.200, $i13, $i14);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} vslice_dummy_var_157 := seq_puts($p0, .str.201);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p6, $mul.ref(260, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i18 := readl($p17);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    call {:si_unique_call 999} {:cexpr "val"} boogie_si_record_i32($i18);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i18, 16);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i18, 65535);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} vslice_dummy_var_158 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 1, $i19, $i20);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p6, $mul.ref(264, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i23 := readl($p22);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i32($i23, 16);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i23, 65535);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} vslice_dummy_var_159 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 2, $i24, $i25);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p6, $mul.ref(268, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i28 := readl($p27);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i29 := $lshr.i32($i28, 16);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i28, 65535);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} vslice_dummy_var_160 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 3, $i29, $i30);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p6, $mul.ref(272, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $i33 := readl($p32);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i34 := $lshr.i32($i33, 16);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i33, 65535);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_161 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 4, $i34, $i35);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p6, $mul.ref(276, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $i38 := readl($p37);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i32($i38, 16);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i38, 65535);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} vslice_dummy_var_162 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 5, $i39, $i40);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p6, $mul.ref(280, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i43 := readl($p42);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i44 := $lshr.i32($i43, 16);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i43, 65535);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} vslice_dummy_var_163 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 6, $i44, $i45);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p6, $mul.ref(284, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i48 := readl($p47);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i49 := $lshr.i32($i48, 16);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i48, 65535);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_164 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 7, $i49, $i50);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p6, $mul.ref(288, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i53 := readl($p52);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i54 := $lshr.i32($i53, 16);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i53, 65535);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} vslice_dummy_var_165 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 8, $i54, $i55);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p6, $mul.ref(292, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i58 := readl($p57);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i59 := $lshr.i32($i58, 16);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i58, 65535);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} vslice_dummy_var_166 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 9, $i59, $i60);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p6, $mul.ref(296, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $i63 := readl($p62);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i64 := $lshr.i32($i63, 16);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i63, 65535);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_167 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 10, $i64, $i65);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p6, $mul.ref(300, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i68 := readl($p67);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i69 := $lshr.i32($i68, 16);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i68, 65535);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} vslice_dummy_var_168 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 11, $i69, $i70);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p6, $mul.ref(304, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i73 := readl($p72);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i74 := $lshr.i32($i73, 16);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i73, 65535);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} vslice_dummy_var_169 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 12, $i74, $i75);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p6, $mul.ref(308, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i78 := readl($p77);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i79 := $lshr.i32($i78, 16);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i78, 65535);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} vslice_dummy_var_170 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 13, $i79, $i80);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p6, $mul.ref(312, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i83 := readl($p82);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i84 := $lshr.i32($i83, 16);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i83, 65535);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} vslice_dummy_var_171 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 14, $i84, $i85);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p6, $mul.ref(316, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i88 := readl($p87);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i89 := $lshr.i32($i88, 16);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i88, 65535);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} vslice_dummy_var_172 := seq_printf.ref.ref.i32.i32.i32($p0, .str.202, 15, $i89, $i90);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;
}



const ep_open: ref;

axiom ep_open == $sub.ref(0, 393753);

procedure ep_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ep_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1032)), $mul.ref(1024, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i4 := single_open($p1, ep_show, $p3);
    call {:si_unique_call 1030} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ep_show: ref;

axiom ep_show == $sub.ref(0, 394785);

procedure ep_show($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation ep_show($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $p73: ref;
  var $i74: i64;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $i95: i32;
  var $i96: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $i103: i32;
  var $p105: ref;
  var $i106: i32;
  var $p108: ref;
  var $p109: ref;
  var $p112: ref;
  var $i113: i32;
  var $p115: ref;
  var $i116: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $i93: i32;
  var $p94: ref;
  var $p126: ref;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(256, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    call {:si_unique_call 1031} {:cexpr "index"} boogie_si_record_i32($i11);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $p15 := decode_direction($i14);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_173 := seq_printf.ref.ref.i32.ref.ref($p0, .str.203, $i18, $p21, $p15);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i11, 88);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i24 := $mul.i32($i23, 32);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p8, $mul.ref($i25, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i27 := readl($p26);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    call {:si_unique_call 1035} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i11, 72);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i29 := $mul.i32($i28, 32);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p8, $mul.ref($i30, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i32 := readl($p31);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    call {:si_unique_call 1037} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} vslice_dummy_var_174 := seq_printf.ref.ref.i32.i32($p0, .str.204, $i32, $i27);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i11, 32);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 2836);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p8, $mul.ref($i36, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i38 := readl($p37);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    call {:si_unique_call 1040} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i39 := $mul.i32($i11, 32);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 2324);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p8, $mul.ref($i41, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i43 := readl($p42);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    call {:si_unique_call 1042} {:cexpr "tmp___3"} boogie_si_record_i32($i43);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} vslice_dummy_var_175 := seq_printf.ref.ref.i32.i32($p0, .str.205, $i43, $i38);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i45 := $mul.i32($i11, 32);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 2824);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p8, $mul.ref($i47, 1));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i49 := readl($p48);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    call {:si_unique_call 1045} {:cexpr "tmp___4"} boogie_si_record_i32($i49);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i50 := $mul.i32($i11, 32);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 2312);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p8, $mul.ref($i52, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i54 := readl($p53);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    call {:si_unique_call 1047} {:cexpr "tmp___5"} boogie_si_record_i32($i54);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} vslice_dummy_var_176 := seq_printf.ref.ref.i32.i32($p0, .str.206, $i54, $i49);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i56 := $mul.i32($i11, 32);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 2832);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p8, $mul.ref($i58, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i60 := readl($p59);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    call {:si_unique_call 1050} {:cexpr "tmp___6"} boogie_si_record_i32($i60);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i61 := $mul.i32($i11, 32);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 2320);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p8, $mul.ref($i63, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i65 := readl($p64);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    call {:si_unique_call 1052} {:cexpr "tmp___7"} boogie_si_record_i32($i65);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} vslice_dummy_var_177 := seq_printf.ref.ref.i32.i32($p0, .str.207, $i65, $i60);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} vslice_dummy_var_178 := seq_puts($p0, .str.89);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.1, $p69);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_179 := seq_printf.ref.ref.i32($p0, .str.208, $i71);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.1, $p73);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} vslice_dummy_var_180 := seq_printf.ref.ref.i64($p0, .str.209, $i74);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.1, $p77);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_181 := seq_printf.ref.ref.ref.ref($p0, .str.210, $p78, $p81);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} ldv_spin_lock();
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p86, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p86, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(88, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i89, $i91);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p6, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} spin_unlock_irqrestore($p126, $u0);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i92 == 1;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i93, $p94 := 15, $p87;
    goto $bb4;

  $bb4:
    call $i95, $i96, $p98, $p99, $i100, $i101, $i102, $i103, $p105, $i106, $p108, $p109, $p112, $i113, $p115, $i116, $p119, $p120, $p121, $p122, $p123, $i124, $i125, $i93, $p94, vslice_dummy_var_183, vslice_dummy_var_184 := ep_show_loop_$bb4($p0, $p4, $i91, $i95, $i96, $p98, $p99, $i100, $i101, $i102, $i103, $p105, $i106, $p108, $p109, $p112, $i113, $p115, $i116, $p119, $p120, $p121, $p122, $p123, $i124, $i125, $i93, $p94, vslice_dummy_var_183, vslice_dummy_var_184);
    goto $bb4_last;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32($i93, 1);
    call {:si_unique_call 1059} {:cexpr "show_limit"} boogie_si_record_i32($i95);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 0);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.1, $p98);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p94);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i100, $i101);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i103 := (if $i102 == 1 then 42 else 32);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.1, $p105);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.1, $p108);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} vslice_dummy_var_183 := seq_printf.ref.ref.i32.ref.i32.ref($p0, .str.212, $i103, $p94, $i106, $p109);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.1, $p112);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.1, $p115);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} vslice_dummy_var_184 := seq_printf.ref.ref.i32.i32($p0, .str.213, $i113, $i116);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 112)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.1, $p119);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p121, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p121, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(88, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, $i91);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i125 == 1);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i93, $p94 := $i95, $p122;
    goto $bb10_dummy;

  $bb6:
    assume $i96 == 1;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} vslice_dummy_var_182 := seq_puts($p0, .str.211);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4590;
}



const decode_direction: ref;

axiom decode_direction == $sub.ref(0, 395817);

procedure decode_direction($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation decode_direction($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} {:cexpr "decode_direction:arg:is_in"} boogie_si_record_i32($i0);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p2 := (if $i1 == 1 then .str.13 else .str.14);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const s3c_hsotg_probe: ref;

axiom s3c_hsotg_probe == $sub.ref(0, 396849);

procedure s3c_hsotg_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i1;
  var $i41: i8;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i1;
  var $p133: ref;
  var $i134: i8;
  var $i135: i32;
  var $i136: i32;
  var $i137: i64;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $p143: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i64;
  var $i159: i1;
  var $p162: ref;
  var $i163: i8;
  var $i164: i32;
  var $i165: i1;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $p170: ref;
  var $i171: i32;
  var $i172: i8;
  var $i173: i32;
  var $i174: i1;
  var $i166: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $i161: i32;
  var $p186: ref;
  var $i111: i32;
  var $i63: i32;
  var $p187: ref;
  var $p188: ref;
  var $i11: i32;
  var $p191: ref;
  var vslice_dummy_var_185: ref;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: ref;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} vslice_dummy_var_185 := dev_get_platdata($p2);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $p6 := devm_kzalloc($p5, 1840, 208);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $p13 := devm_phy_get($p12, .str.91);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i15 := IS_ERR($p14);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 1071} {:cexpr "tmp___3"} boogie_si_record_i8($i16);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p32, $p13);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $p4);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $p35 := devm_clk_get($p34, .str.93);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(128, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, $p35);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(128, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i40 := IS_ERR($p39);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 1079} {:cexpr "tmp___5"} boogie_si_record_i8($i41);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p7);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} platform_set_drvdata($p0, $p49);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $p50 := platform_get_resource($p0, 512, 0);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $p52 := devm_ioremap_resource($p51, $p50);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p53, $p52);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i56 := IS_ERR($p55);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    call {:si_unique_call 1087} {:cexpr "tmp___7"} boogie_si_record_i8($i57);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i64 := platform_get_irq($p0, 0);
    call {:si_unique_call 1093} {:cexpr "ret"} boogie_si_record_i32($i64);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 0);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_190 := spinlock_check($p67);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} __raw_spin_lock_init($p71, .str.96, $p1);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(120, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p72, $i64);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $p73 := dev_name($p4);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(120, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.1, $p75);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p7);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i78 := devm_request_irq($p74, $i76, s3c_hsotg_irq, 0, $p73, $p77);
    call {:si_unique_call 1099} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 0);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.1, $p81);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(120, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.1, $p83);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} vslice_dummy_var_192 := _dev_info.ref.ref.ref.i32($p4, .str.98, $p82, $i84);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(116, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p87, 3);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(80, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p89, s3c_hsotg_gadget_ops);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $p90 := dev_name($p4);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(128, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p92, $p90);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(128, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.1, $p93);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} vslice_dummy_var_193 := clk_prepare_enable($p94);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(136, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p98, .str.164);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(136, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p191, .str.165);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(136, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i101 := devm_regulator_bulk_get($p4, 2, $p100);
    call {:si_unique_call 1105} {:cexpr "ret"} boogie_si_record_i32($i101);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(136, 1));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i106 := regulator_bulk_enable(2, $p105);
    call {:si_unique_call 1108} {:cexpr "ret"} boogie_si_record_i32($i106);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(184, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p112, 8);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.1, $p113);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.1, $p120);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, 0);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} s3c_hsotg_phy_enable($p7);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} vslice_dummy_var_197 := s3c_hsotg_corereset($p7);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} s3c_hsotg_init($p7);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} s3c_hsotg_hw_cfg($p7);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(189, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.1, $p128);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 0);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(189, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.1, $p133);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i134);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i135, 1);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i137 := $sext.i32.i64($i136);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p138 := kcalloc($i137, 144, 208);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i141 := $eq.i64($i140, 0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p143, $p138);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(96, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} INIT_LIST_HEAD($p145);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.1, $p146);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(88, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p150, $p147);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.1, $p151);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $p154 := s3c_hsotg_ep_alloc_request($p153, 208);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(224, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p155, $p154);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(224, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.1, $p156);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i158 := $p2i.ref.i64($p157);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i159 := $eq.i64($i158, 0);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(189, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.1, $p162);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i163);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i165 := $sgt.i32($i164, 0);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(136, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i177 := regulator_bulk_disable(2, $p176);
    call {:si_unique_call 1128} {:cexpr "ret"} boogie_si_record_i32($i177);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} s3c_hsotg_phy_disable($p7);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(248, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i184 := usb_add_gadget_udc($p182, $p183);
    call {:si_unique_call 1132} {:cexpr "ret"} boogie_si_record_i32($i184);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} s3c_hsotg_create_debug($p7);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} s3c_hsotg_dump($p7);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i185 == 1;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i161 := $i184;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p139);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} kfree($p186);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i111 := $i161;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} s3c_hsotg_phy_disable($p7);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i63 := $i111;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(128, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.1, $p187);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} clk_disable_unprepare($p188);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i11 := $i63;
    goto $bb3;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb65:
    assume $i178 == 1;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.1, $p179);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_201 := dev_err.ref.ref.i32($p180, .str.103, $i177);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i161 := $i177;
    goto $bb55;

  $bb57:
    assume $i165 == 1;
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i166 := 0;
    goto $bb60;

  $bb60:
    call $p167, $p168, $i169, $p170, $i171, $i172, $i173, $i174, $i166 := s3c_hsotg_probe_loop_$bb60($p7, $p162, $p167, $p168, $i169, $p170, $i171, $i172, $i173, $i174, $i166);
    goto $bb60_last;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.1, $p167);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i166);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p168, $mul.ref($i169, 144));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} s3c_hsotg_initep($p7, $p170, $i166);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i171 := $add.i32($i166, 1);
    call {:si_unique_call 1126} {:cexpr "epnum"} boogie_si_record_i32($i171);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i172 := $load.i8($M.1, $p162);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i173 := $zext.i8.i32($i172);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i174 := $sgt.i32($i173, $i171);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i174 == 1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb62:
    assume $i174 == 1;
    assume {:verifier.code 0} true;
    $i166 := $i171;
    goto $bb62_dummy;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i159 == 1;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} vslice_dummy_var_200 := dev_err.ref.ref($p4, .str.102);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 12);
    goto $bb55;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i141 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} vslice_dummy_var_199 := dev_err.ref.ref($p4, .str.90);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32(0, 12);
    goto $bb36;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i131 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} vslice_dummy_var_198 := dev_err.ref.ref($p4, .str.101);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32(0, 22);
    goto $bb36;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i123 == 1;
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.1, $p124);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_196 := phy_init($p125);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb38:
    assume $i116 == 1;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i117 := phy_get_bus_width($p13);
    call {:si_unique_call 1112} {:cexpr "tmp___9"} boogie_si_record_i32($i117);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 8);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i118 == 1;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(184, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p119, 0);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i107 == 1;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.1, $p108);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_195 := dev_err.ref.ref.i32($p109, .str.100, $i106);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i111 := $i106;
    goto $bb36;

  $bb31:
    assume $i102 == 1;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} vslice_dummy_var_194 := dev_err.ref.ref.i32($p4, .str.99, $i101);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i63 := $i101;
    goto $bb19;

  $bb24:
    assume $i79 == 1;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} vslice_dummy_var_191 := dev_err.ref.ref($p4, .str.97);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i63 := $i78;
    goto $bb19;

  $bb21:
    assume $i65 == 1;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vslice_dummy_var_189 := dev_err.ref.ref($p4, .str.95);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i63 := $i64;
    goto $bb19;

  $bb17:
    assume $i58 == 1;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i61 := PTR_ERR($p60);
    call {:si_unique_call 1089} {:cexpr "tmp___6"} boogie_si_record_i64($i61);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i64.i32($i61);
    call {:si_unique_call 1090} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb19;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} vslice_dummy_var_188 := dev_err.ref.ref($p4, .str.94);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(128, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i47 := PTR_ERR($p46);
    call {:si_unique_call 1082} {:cexpr "tmp___4"} boogie_si_record_i64($i47);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i11 := $i48;
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $p18 := devm_usb_get_phy($p4, 1);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $i20 := IS_ERR($p19);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 1074} {:cexpr "tmp___2"} boogie_si_record_i8($i21);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(24, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, $p18);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $p24 := dev_get_platdata($p23);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 1848)), $mul.ref(32, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p30, $p24);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} vslice_dummy_var_187 := dev_err.ref.ref($p28, .str.92);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 517);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} vslice_dummy_var_186 := dev_err.ref.ref($p4, .str.90);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb62_dummy:
    assume false;
    return;

  $bb60_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4875;
}



const s3c_hsotg_remove: ref;

axiom s3c_hsotg_remove == $sub.ref(0, 397881);

procedure s3c_hsotg_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(248, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} usb_del_gadget_udc($p3);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} s3c_hsotg_delete_debug($p2);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} s3c_hsotg_phy_disable($p2);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(128, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} clk_disable_unprepare($p19);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(16, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} vslice_dummy_var_203 := phy_exit($p16);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} vslice_dummy_var_202 := usb_gadget_unregister_driver($p9);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s3c_hsotg_suspend: ref;

axiom s3c_hsotg_suspend == $sub.ref(0, 398913);

procedure s3c_hsotg_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.9, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.12, $M.16, assertsPassed;



implementation s3c_hsotg_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i29: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.21 := $store.i32($M.21, $p3, $i1);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $p4 := platform_get_drvdata($p0);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} ldv_spin_lock();
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} s3c_hsotg_disconnect($p5);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} s3c_hsotg_phy_disable($p5);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(112, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, 0);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} spin_unlock_irqrestore($p20, $u0);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(189, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, 0);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(136, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i42 := regulator_bulk_disable(2, $p41);
    call {:si_unique_call 1152} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb14;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb9;

  $bb9:
    call $p30, $p31, $i32, $p34, $i36, $i37, $i38, $i39, $i29, vslice_dummy_var_205 := s3c_hsotg_suspend_loop_$bb9($p5, $p25, $p30, $p31, $i32, $p34, $i36, $i37, $i38, $i39, $i29, vslice_dummy_var_205);
    goto $bb9_last;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i29);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref($i32, 144)), $mul.ref(0, 1));
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} vslice_dummy_var_205 := s3c_hsotg_ep_disable($p34);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i29, 1);
    call {:si_unique_call 1150} {:cexpr "ep"} boogie_si_record_i32($i36);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p25);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, $i36);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i36;
    goto $bb11_dummy;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 184)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} vslice_dummy_var_204 := _dev_info.ref.ref.ref($p11, .str.195, $p16);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4978;
}



const s3c_hsotg_resume: ref;

axiom s3c_hsotg_resume == $sub.ref(0, 399945);

procedure s3c_hsotg_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} ldv_spin_lock();
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, jiffies);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p20, $i19);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} s3c_hsotg_phy_enable($p2);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} s3c_hsotg_core_init($p2);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(40, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} spin_unlock_irqrestore($p21, $u0);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(8, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 184)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} vslice_dummy_var_206 := _dev_info.ref.ref.ref($p8, .str.196, $p13);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(136, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $i17 := regulator_bulk_enable(2, $p16);
    call {:si_unique_call 1156} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 400977);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 402009);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_del_gadget_udc: ref;

axiom usb_del_gadget_udc == $sub.ref(0, 403041);

procedure usb_del_gadget_udc($p0: ref);
  free requires assertsPassed;



implementation usb_del_gadget_udc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    return;
}



const s3c_hsotg_delete_debug: ref;

axiom s3c_hsotg_delete_debug == $sub.ref(0, 404073);

procedure s3c_hsotg_delete_debug($p0: ref);
  free requires assertsPassed;



implementation s3c_hsotg_delete_debug($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(189, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, 0);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(200, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} debugfs_remove($p17);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(208, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} debugfs_remove($p19);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(192, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} debugfs_remove($p21);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p10, $p11, $i12, $i13, $i14, $i15, $i5 := s3c_hsotg_delete_debug_loop_$bb4($p0, $p1, $p6, $p7, $i8, $p10, $p11, $i12, $i13, $i14, $i15, $i5);
    goto $bb4_last;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i5);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref($i8, 144)), $mul.ref(96, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} debugfs_remove($p11);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i5, 1);
    call {:si_unique_call 1163} {:cexpr "epidx"} boogie_si_record_i32($i12);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p1);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, $i12);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5047;
}



const usb_gadget_unregister_driver: ref;

axiom usb_gadget_unregister_driver == $sub.ref(0, 405105);

procedure usb_gadget_unregister_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_gadget_unregister_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1167} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1168} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const clk_disable_unprepare: ref;

axiom clk_disable_unprepare == $sub.ref(0, 406137);

procedure clk_disable_unprepare($p0: ref);
  free requires assertsPassed;



implementation clk_disable_unprepare($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} clk_disable($p0);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} clk_unprepare($p0);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    return;
}



const clk_disable: ref;

axiom clk_disable == $sub.ref(0, 407169);

procedure clk_disable($p0: ref);
  free requires assertsPassed;



implementation clk_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    return;
}



const clk_unprepare: ref;

axiom clk_unprepare == $sub.ref(0, 408201);

procedure clk_unprepare($p0: ref);
  free requires assertsPassed;



implementation clk_unprepare($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    return;
}



const debugfs_remove: ref;

axiom debugfs_remove == $sub.ref(0, 409233);

procedure debugfs_remove($p0: ref);
  free requires assertsPassed;



implementation debugfs_remove($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_platdata: ref;

axiom dev_get_platdata == $sub.ref(0, 410265);

procedure dev_get_platdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_platdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 411297);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1172} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const devm_phy_get: ref;

axiom devm_phy_get == $sub.ref(0, 412329);

procedure devm_phy_get($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_phy_get($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $p2 := external_alloc();
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 413361);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1176} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const devm_usb_get_phy: ref;

axiom devm_usb_get_phy == $sub.ref(0, 414393);

procedure devm_usb_get_phy($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_usb_get_phy($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} {:cexpr "devm_usb_get_phy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $p2 := external_alloc();
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const devm_clk_get: ref;

axiom devm_clk_get == $sub.ref(0, 415425);

procedure devm_clk_get($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_clk_get($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p2 := external_alloc();
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 416457);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 417489);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} dev_set_drvdata($p2, $p1);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    return;
}



const platform_get_resource: ref;

axiom platform_get_resource == $sub.ref(0, 418521);

procedure platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} {:cexpr "platform_get_resource:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1182} {:cexpr "platform_get_resource:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p3 := external_alloc();
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const devm_ioremap_resource: ref;

axiom devm_ioremap_resource == $sub.ref(0, 419553);

procedure devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p2 := external_alloc();
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const platform_get_irq: ref;

axiom platform_get_irq == $sub.ref(0, 420585);

procedure platform_get_irq($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation platform_get_irq($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1185} {:cexpr "platform_get_irq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1186} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1187} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 421617);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 422649);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 423681);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $p9 := kobject_name($p8);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const s3c_hsotg_irq: ref;

axiom s3c_hsotg_irq == $sub.ref(0, 424713);

procedure s3c_hsotg_irq($i0: i32, $p1: ref) returns ($r: i32);



const devm_request_irq: ref;

axiom devm_request_irq == $sub.ref(0, 425745);

procedure devm_request_irq($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_request_irq($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} {:cexpr "devm_request_irq:arg:irq"} boogie_si_record_i32($i1);
    call {:si_unique_call 1190} {:cexpr "devm_request_irq:arg:irqflags"} boogie_si_record_i64($i3);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $i6 := devm_request_threaded_irq($p0, $i1, $p2, $0.ref, $i3, $p4, $p5);
    call {:si_unique_call 1192} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const clk_prepare_enable: ref;

axiom clk_prepare_enable == $sub.ref(0, 426777);

procedure clk_prepare_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation clk_prepare_enable($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i1 := clk_prepare($p0);
    call {:si_unique_call 1194} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $i4 := clk_enable($p0);
    call {:si_unique_call 1196} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} clk_unprepare($p0);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const devm_regulator_bulk_get: ref;

axiom devm_regulator_bulk_get == $sub.ref(0, 427809);

procedure devm_regulator_bulk_get($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_regulator_bulk_get($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1198} {:cexpr "devm_regulator_bulk_get:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1199} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1200} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const phy_get_bus_width: ref;

axiom phy_get_bus_width == $sub.ref(0, 428841);

procedure phy_get_bus_width($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation phy_get_bus_width($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1632)), $mul.ref(1624, 1)), $mul.ref(0, 1));
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const s3c_hsotg_init: ref;

axiom s3c_hsotg_init == $sub.ref(0, 429873);

procedure s3c_hsotg_init($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(2064, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} writel(15, $p4);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(2068, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} writel(15, $p7);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(2076, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} writel(0, $p10);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(2052, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} __orr32($p13, 2);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.3);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.173);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.4);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p17, .str.174);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.6, $p19);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 2857);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p19, $i22);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p23, 1);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.7, $p24);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 1207} {:cexpr "tmp___1"} boogie_si_record_i64($i28);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} s3c_hsotg_init_fifo($p0);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(12, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} writel(5135, $p43);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $i44 := using_dma($p0);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 1216} {:cexpr "tmp___2"} boogie_si_record_i8($i45);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i47 := (if $i46 == 1 then 32 else 0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(8, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} writel($i47, $p50);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(40, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i33 := readl($p32);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    call {:si_unique_call 1209} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(36, 1));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $i37 := readl($p36);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    call {:si_unique_call 1211} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} vslice_dummy_var_207 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p1, $p39, .str.174, $i37, $i33);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;
}



const s3c_hsotg_hw_cfg: ref;

axiom s3c_hsotg_hw_cfg == $sub.ref(0, 430905);

procedure s3c_hsotg_hw_cfg($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_hw_cfg($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $i27: i8;
  var $i28: i8;
  var $i29: i8;
  var $i30: i8;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(72, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i4 := readl($p3);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    call {:si_unique_call 1219} {:cexpr "cfg2"} boogie_si_record_i32($i4);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 10);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 15);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(189, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, $i9);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(189, 1));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} vslice_dummy_var_208 := _dev_info.ref.ref.i32($p12, .str.175, $i15);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(80, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $i20 := readl($p19);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    call {:si_unique_call 1222} {:cexpr "cfg4"} boogie_si_record_i32($i20);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i21 := $lshr.i32($i20, 25);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 1);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(188, 1));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i28 := $and.i8($i25, 1);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i29 := $and.i8($i27, $sub.i8(0, 2));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i30 := $or.i8($i29, $i28);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, $i30);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p0);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(188, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p38 := (if $i37 == 1 then .str.177 else .str.178);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} vslice_dummy_var_209 := _dev_info.ref.ref.ref($p32, .str.176, $p38);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 431937);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $CurrAddr;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var vslice_dummy_var_210: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 1225} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1226} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} ldv_check_alloc_flags($i2);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} vslice_dummy_var_210 := ldv_kcalloc_14($i0, $i1, $i2);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;
}



const s3c_hsotg_initep: ref;

axiom s3c_hsotg_initep == $sub.ref(0, 432969);

procedure s3c_hsotg_initep($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_initep($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p7: ref;
  var $p4: ref;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i16;
  var $p44: ref;
  var $i45: i1;
  var $i46: i8;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i64;
  var $p62: ref;
  var vslice_dummy_var_211: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} {:cexpr "s3c_hsotg_initep:arg:epnum"} boogie_si_record_i32($i2);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i2, 1);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 1);
    assume {:verifier.code 0} true;
    $p7 := .str.13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p4 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i2);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(127, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, $i9);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(131, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} vslice_dummy_var_211 := snprintf.ref.i64.ref.i32.ref($p12, 10, .str.180, $i2, $p4);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} INIT_LIST_HEAD($p14);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} INIT_LIST_HEAD($p16);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i2, 0);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p22, $p0);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(131, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, $p23);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i2, 0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 1024 else 64);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} usb_ep_set_maxpacket_limit($p27, $i29);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, s3c_hsotg_ep_ops);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i2, 64);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i35 := $mul.i32($i34, 4);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p33, $mul.ref($i36, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i38 := readl($p37);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    call {:si_unique_call 1236} {:cexpr "ptxfifo"} boogie_si_record_i32($i38);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i32($i38, 16);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i41, 4);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(124, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p44, $i43);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i45 := using_dma($p0);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i8($i45);
    call {:si_unique_call 1238} {:cexpr "tmp"} boogie_si_record_i8($i46);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i2, 1);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i49 := $srem.i32($i48, 15);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i50 := $shl.i32($i49, 11);
    call {:si_unique_call 1239} {:cexpr "next"} boogie_si_record_i32($i50);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i2, 72);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i54 := $mul.i32($i53, 32);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p52, $mul.ref($i55, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} writel($i50, $p56);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i2, 88);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i60 := $mul.i32($i59, 32);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i60);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p58, $mul.ref($i61, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} writel($i50, $p62);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(248, 1)), $mul.ref(96, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} list_add_tail($p19, $p21);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p7 := .str.14;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p4 := .str.179;
    goto $bb3;
}



const usb_add_gadget_udc: ref;

axiom usb_add_gadget_udc == $sub.ref(0, 434001);

procedure usb_add_gadget_udc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_add_gadget_udc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1242} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1243} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const s3c_hsotg_create_debug: ref;

axiom s3c_hsotg_create_debug == $sub.ref(0, 435033);

procedure s3c_hsotg_create_debug($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation s3c_hsotg_create_debug($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i1;
  var $i55: i8;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i62: i32;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i41: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p3 := dev_name($p2);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p4 := debugfs_create_dir($p3, $0.ref);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(192, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $p4);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i7 := IS_ERR($p6);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 1247} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $p14 := debugfs_create_file(.str.183, 292, $p4, $p13, state_fops);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(200, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, $p14);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(200, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i19 := IS_ERR($p18);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 1251} {:cexpr "tmp___1"} boogie_si_record_i8($i20);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $p26 := debugfs_create_file(.str.186, 292, $p4, $p25, fifo_fops);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(208, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, $p26);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(208, 1));
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i31 := IS_ERR($p30);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    call {:si_unique_call 1255} {:cexpr "tmp___2"} boogie_si_record_i8($i32);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(189, 1));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i32($i39, 0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb14;

  $bb14:
    call $p42, $p43, $i44, $p45, $p46, $p47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $p59, $p60, $i62, $i63, $i64, $i65, $i41, vslice_dummy_var_215 := s3c_hsotg_create_debug_loop_$bb14($p0, $p4, $p37, $p42, $p43, $i44, $p45, $p46, $p47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $p59, $p60, $i62, $i63, $i64, $i65, $i41, vslice_dummy_var_215);
    goto $bb14_last;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i41);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p43, $mul.ref($i44, 144));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref($i44, 144)), $mul.ref(131, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p45);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $p49 := debugfs_create_file($p47, 292, $p4, $p48, ep_fops);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p43, $mul.ref($i44, 144)), $mul.ref(96, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p50, $p49);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p43, $mul.ref($i44, 144)), $mul.ref(96, 1));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i54 := IS_ERR($p53);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 1259} {:cexpr "tmp___3"} boogie_si_record_i8($i55);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i41, 1);
    call {:si_unique_call 1261} {:cexpr "epidx"} boogie_si_record_i32($i62);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.1, $p37);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i65 := $ugt.i32($i64, $i62);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i65 == 1);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i41 := $i62;
    goto $bb19_dummy;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p43, $mul.ref($i44, 144)), $mul.ref(131, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} vslice_dummy_var_215 := dev_err.ref.ref.ref($p58, .str.188, $p60);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} vslice_dummy_var_214 := dev_err.ref.ref.ref($p35, .str.187, .str.185);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} vslice_dummy_var_213 := dev_err.ref.ref.ref($p23, .str.184, .str.185);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} vslice_dummy_var_212 := dev_err.ref.ref($p11, .str.182);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5430;
}



const s3c_hsotg_dump: ref;

axiom s3c_hsotg_dump == $sub.ref(0, 436065);

procedure s3c_hsotg_dump($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_dump($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $p55: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $p71: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $p87: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $p103: ref;
  var $p105: ref;
  var $i106: i32;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $p112: ref;
  var $i113: i32;
  var $p114: ref;
  var $i115: i32;
  var $p116: ref;
  var $i117: i32;
  var $p119: ref;
  var $p121: ref;
  var $i122: i32;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $i126: i32;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $p135: ref;
  var $p137: ref;
  var $i138: i32;
  var $p139: ref;
  var $i140: i32;
  var $p141: ref;
  var $i142: i32;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $i147: i32;
  var $p148: ref;
  var $i149: i32;
  var $p151: ref;
  var $p153: ref;
  var $i154: i32;
  var $p155: ref;
  var $i156: i32;
  var $p157: ref;
  var $i158: i32;
  var $p160: ref;
  var $i161: i32;
  var $p162: ref;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $p167: ref;
  var $p169: ref;
  var $i170: i32;
  var $p171: ref;
  var $i172: i32;
  var $p173: ref;
  var $i174: i32;
  var $p176: ref;
  var $i177: i32;
  var $p178: ref;
  var $i179: i32;
  var $p180: ref;
  var $i181: i32;
  var $p183: ref;
  var $p185: ref;
  var $i186: i32;
  var $p187: ref;
  var $i188: i32;
  var $p189: ref;
  var $i190: i32;
  var $p192: ref;
  var $i193: i32;
  var $p194: ref;
  var $i195: i32;
  var $p196: ref;
  var $i197: i32;
  var $p199: ref;
  var $p201: ref;
  var $i202: i32;
  var $p203: ref;
  var $i204: i32;
  var $p205: ref;
  var $i206: i32;
  var $p208: ref;
  var $i209: i32;
  var $p210: ref;
  var $i211: i32;
  var $p212: ref;
  var $i213: i32;
  var $p215: ref;
  var $p217: ref;
  var $i218: i32;
  var $p219: ref;
  var $i220: i32;
  var $p221: ref;
  var $i222: i32;
  var $p224: ref;
  var $i225: i32;
  var $p226: ref;
  var $i227: i32;
  var $p228: ref;
  var $i229: i32;
  var $p231: ref;
  var $p233: ref;
  var $i234: i32;
  var $p235: ref;
  var $i236: i32;
  var $p237: ref;
  var $i238: i32;
  var $p240: ref;
  var $i241: i32;
  var $p242: ref;
  var $i243: i32;
  var $p244: ref;
  var $i245: i32;
  var $p247: ref;
  var $p249: ref;
  var $i250: i32;
  var $p251: ref;
  var $i252: i32;
  var $p253: ref;
  var $i254: i32;
  var $p256: ref;
  var $i257: i32;
  var $p258: ref;
  var $i259: i32;
  var $p260: ref;
  var $i261: i32;
  var $p263: ref;
  var $p265: ref;
  var $i266: i32;
  var $p267: ref;
  var $i268: i32;
  var $p269: ref;
  var $i270: i32;
  var $p272: ref;
  var $i273: i32;
  var $i274: i32;
  var $i275: i32;
  var $p277: ref;
  var $i278: i32;
  var $i279: i32;
  var $i280: i32;
  var $p282: ref;
  var $i283: i32;
  var $i284: i32;
  var $i285: i32;
  var $p287: ref;
  var $i288: i32;
  var $i289: i32;
  var $i290: i32;
  var $p292: ref;
  var $i293: i32;
  var $i294: i32;
  var $i295: i32;
  var $p297: ref;
  var $i298: i32;
  var $i299: i32;
  var $i300: i32;
  var $p302: ref;
  var $i303: i32;
  var $i304: i32;
  var $i305: i32;
  var $p307: ref;
  var $i308: i32;
  var $i309: i32;
  var $i310: i32;
  var $p312: ref;
  var $i313: i32;
  var $i314: i32;
  var $i315: i32;
  var $p317: ref;
  var $i318: i32;
  var $i319: i32;
  var $i320: i32;
  var $p322: ref;
  var $i323: i32;
  var $i324: i32;
  var $i325: i32;
  var $p327: ref;
  var $i328: i32;
  var $i329: i32;
  var $i330: i32;
  var $p332: ref;
  var $i333: i32;
  var $i334: i32;
  var $i335: i32;
  var $p337: ref;
  var $i338: i32;
  var $i339: i32;
  var $i340: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(112, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(2064, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i6 := readl($p5);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    call {:si_unique_call 1263} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p4, $mul.ref(2052, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i8 := readl($p7);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    call {:si_unique_call 1265} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p4, $mul.ref(2048, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i10 := readl($p9);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    call {:si_unique_call 1267} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} vslice_dummy_var_216 := _dev_info.ref.ref.i32.i32.i32($p2, .str.189, $i10, $i8, $i6);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p4, $mul.ref(68, 1));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i13 := readl($p12);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    call {:si_unique_call 1270} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p4, $mul.ref(8, 1));
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i15 := readl($p14);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    call {:si_unique_call 1272} {:cexpr "tmp___3"} boogie_si_record_i32($i15);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} vslice_dummy_var_217 := _dev_info.ref.ref.i32.i32($p2, .str.190, $i15, $i13);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p4, $mul.ref(40, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i18 := readl($p17);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    call {:si_unique_call 1275} {:cexpr "tmp___4"} boogie_si_record_i32($i18);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p4, $mul.ref(36, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i20 := readl($p19);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    call {:si_unique_call 1277} {:cexpr "tmp___5"} boogie_si_record_i32($i20);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} vslice_dummy_var_218 := _dev_info.ref.ref.i32.i32($p2, .str.174, $i20, $i18);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p4, $mul.ref(260, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $i23 := readl($p22);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    call {:si_unique_call 1280} {:cexpr "val"} boogie_si_record_i32($i23);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i32($i23, 16);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i23, 65535);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} vslice_dummy_var_219 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 1, $i24, $i25);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($p4, $mul.ref(264, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i273 := readl($p272);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i274 := $lshr.i32($i273, 16);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i275 := $and.i32($i273, 65535);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} vslice_dummy_var_220 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 2, $i274, $i275);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($p4, $mul.ref(268, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $i278 := readl($p277);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i279 := $lshr.i32($i278, 16);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i280 := $and.i32($i278, 65535);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} vslice_dummy_var_266 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 3, $i279, $i280);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($p4, $mul.ref(272, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $i283 := readl($p282);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i284 := $lshr.i32($i283, 16);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i285 := $and.i32($i283, 65535);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} vslice_dummy_var_267 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 4, $i284, $i285);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($p4, $mul.ref(276, 1));
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $i288 := readl($p287);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i289 := $lshr.i32($i288, 16);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i290 := $and.i32($i288, 65535);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} vslice_dummy_var_268 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 5, $i289, $i290);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($p4, $mul.ref(280, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $i293 := readl($p292);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i294 := $lshr.i32($i293, 16);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i295 := $and.i32($i293, 65535);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} vslice_dummy_var_269 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 6, $i294, $i295);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($p4, $mul.ref(284, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $i298 := readl($p297);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i299 := $lshr.i32($i298, 16);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i300 := $and.i32($i298, 65535);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} vslice_dummy_var_270 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 7, $i299, $i300);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($p4, $mul.ref(288, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $i303 := readl($p302);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i304 := $lshr.i32($i303, 16);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i305 := $and.i32($i303, 65535);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} vslice_dummy_var_271 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 8, $i304, $i305);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($p4, $mul.ref(292, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i308 := readl($p307);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i309 := $lshr.i32($i308, 16);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i310 := $and.i32($i308, 65535);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} vslice_dummy_var_272 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 9, $i309, $i310);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($p4, $mul.ref(296, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $i313 := readl($p312);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i314 := $lshr.i32($i313, 16);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i315 := $and.i32($i313, 65535);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} vslice_dummy_var_273 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 10, $i314, $i315);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($p4, $mul.ref(300, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $i318 := readl($p317);
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i319 := $lshr.i32($i318, 16);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i320 := $and.i32($i318, 65535);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} vslice_dummy_var_274 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 11, $i319, $i320);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($p4, $mul.ref(304, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $i323 := readl($p322);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i324 := $lshr.i32($i323, 16);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i325 := $and.i32($i323, 65535);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} vslice_dummy_var_275 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 12, $i324, $i325);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($p4, $mul.ref(308, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $i328 := readl($p327);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i329 := $lshr.i32($i328, 16);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i330 := $and.i32($i328, 65535);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} vslice_dummy_var_276 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 13, $i329, $i330);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($p4, $mul.ref(312, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $i333 := readl($p332);
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i334 := $lshr.i32($i333, 16);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i335 := $and.i32($i333, 65535);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} vslice_dummy_var_277 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 14, $i334, $i335);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($p4, $mul.ref(316, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i338 := readl($p337);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i339 := $lshr.i32($i338, 16);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i340 := $and.i32($i338, 65535);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} vslice_dummy_var_278 := _dev_info.ref.ref.i32.i32.i32($p2, .str.191, 15, $i339, $i340);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p4, $mul.ref(2324, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i28 := readl($p27);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    call {:si_unique_call 1285} {:cexpr "tmp___6"} boogie_si_record_i32($i28);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p4, $mul.ref(2320, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i30 := readl($p29);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    call {:si_unique_call 1287} {:cexpr "tmp___7"} boogie_si_record_i32($i30);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p4, $mul.ref(2304, 1));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i32 := readl($p31);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    call {:si_unique_call 1289} {:cexpr "tmp___8"} boogie_si_record_i32($i32);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} vslice_dummy_var_221 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 0, $i32, $i30, $i28);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p4, $mul.ref(2816, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i35 := readl($p34);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    call {:si_unique_call 1292} {:cexpr "val"} boogie_si_record_i32($i35);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p4, $mul.ref(2836, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i37 := readl($p36);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    call {:si_unique_call 1294} {:cexpr "tmp___9"} boogie_si_record_i32($i37);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p4, $mul.ref(2832, 1));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} $i39 := readl($p38);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    call {:si_unique_call 1296} {:cexpr "tmp___10"} boogie_si_record_i32($i39);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p4, $mul.ref(2816, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $i41 := readl($p40);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    call {:si_unique_call 1298} {:cexpr "tmp___11"} boogie_si_record_i32($i41);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_222 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 0, $i41, $i39, $i37);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p4, $mul.ref(2356, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i49 := readl($p48);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p4, $mul.ref(2352, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i51 := readl($p50);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p4, $mul.ref(2336, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $i53 := readl($p52);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} vslice_dummy_var_223 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 1, $i53, $i51, $i49);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p4, $mul.ref(2848, 1));
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} vslice_dummy_var_224 := readl($p55);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p4, $mul.ref(2868, 1));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $i58 := readl($p57);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p4, $mul.ref(2864, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $i60 := readl($p59);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p4, $mul.ref(2848, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $i62 := readl($p61);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} vslice_dummy_var_225 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 1, $i62, $i60, $i58);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p4, $mul.ref(2388, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $i65 := readl($p64);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p4, $mul.ref(2384, 1));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i67 := readl($p66);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p4, $mul.ref(2368, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i69 := readl($p68);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} vslice_dummy_var_227 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 2, $i69, $i67, $i65);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p4, $mul.ref(2880, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} vslice_dummy_var_228 := readl($p71);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p4, $mul.ref(2900, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $i74 := readl($p73);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p4, $mul.ref(2896, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i76 := readl($p75);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p4, $mul.ref(2880, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $i78 := readl($p77);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} vslice_dummy_var_229 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 2, $i78, $i76, $i74);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p4, $mul.ref(2420, 1));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $i81 := readl($p80);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p4, $mul.ref(2416, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i83 := readl($p82);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p4, $mul.ref(2400, 1));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i85 := readl($p84);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} vslice_dummy_var_230 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 3, $i85, $i83, $i81);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p4, $mul.ref(2912, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} vslice_dummy_var_231 := readl($p87);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p4, $mul.ref(2932, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i90 := readl($p89);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p4, $mul.ref(2928, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $i92 := readl($p91);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p4, $mul.ref(2912, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i94 := readl($p93);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} vslice_dummy_var_232 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 3, $i94, $i92, $i90);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p4, $mul.ref(2452, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i97 := readl($p96);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p4, $mul.ref(2448, 1));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i99 := readl($p98);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p4, $mul.ref(2432, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $i101 := readl($p100);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} vslice_dummy_var_233 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 4, $i101, $i99, $i97);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p4, $mul.ref(2944, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} vslice_dummy_var_234 := readl($p103);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p4, $mul.ref(2964, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $i106 := readl($p105);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p4, $mul.ref(2960, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $i108 := readl($p107);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p4, $mul.ref(2944, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i110 := readl($p109);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} vslice_dummy_var_235 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 4, $i110, $i108, $i106);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p4, $mul.ref(2484, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $i113 := readl($p112);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p4, $mul.ref(2480, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $i115 := readl($p114);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p4, $mul.ref(2464, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i117 := readl($p116);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} vslice_dummy_var_236 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 5, $i117, $i115, $i113);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p4, $mul.ref(2976, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} vslice_dummy_var_237 := readl($p119);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p4, $mul.ref(2996, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i122 := readl($p121);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p4, $mul.ref(2992, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i124 := readl($p123);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p4, $mul.ref(2976, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $i126 := readl($p125);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} vslice_dummy_var_238 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 5, $i126, $i124, $i122);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p4, $mul.ref(2516, 1));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $i129 := readl($p128);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p4, $mul.ref(2512, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $i131 := readl($p130);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p4, $mul.ref(2496, 1));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i133 := readl($p132);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} vslice_dummy_var_239 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 6, $i133, $i131, $i129);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p4, $mul.ref(3008, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} vslice_dummy_var_240 := readl($p135);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p4, $mul.ref(3028, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $i138 := readl($p137);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p4, $mul.ref(3024, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i140 := readl($p139);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p4, $mul.ref(3008, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $i142 := readl($p141);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} vslice_dummy_var_241 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 6, $i142, $i140, $i138);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p4, $mul.ref(2548, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $i145 := readl($p144);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p4, $mul.ref(2544, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $i147 := readl($p146);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p4, $mul.ref(2528, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $i149 := readl($p148);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} vslice_dummy_var_242 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 7, $i149, $i147, $i145);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p4, $mul.ref(3040, 1));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_243 := readl($p151);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p4, $mul.ref(3060, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i154 := readl($p153);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p4, $mul.ref(3056, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i156 := readl($p155);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p4, $mul.ref(3040, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $i158 := readl($p157);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} vslice_dummy_var_244 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 7, $i158, $i156, $i154);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p4, $mul.ref(2580, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i161 := readl($p160);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p4, $mul.ref(2576, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $i163 := readl($p162);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p4, $mul.ref(2560, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i165 := readl($p164);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_245 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 8, $i165, $i163, $i161);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p4, $mul.ref(3072, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} vslice_dummy_var_246 := readl($p167);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p4, $mul.ref(3092, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $i170 := readl($p169);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p4, $mul.ref(3088, 1));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $i172 := readl($p171);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p4, $mul.ref(3072, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $i174 := readl($p173);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} vslice_dummy_var_247 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 8, $i174, $i172, $i170);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p4, $mul.ref(2612, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $i177 := readl($p176);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p4, $mul.ref(2608, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $i179 := readl($p178);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($p4, $mul.ref(2592, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $i181 := readl($p180);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} vslice_dummy_var_248 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 9, $i181, $i179, $i177);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($p4, $mul.ref(3104, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} vslice_dummy_var_249 := readl($p183);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p4, $mul.ref(3124, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $i186 := readl($p185);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p4, $mul.ref(3120, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $i188 := readl($p187);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p4, $mul.ref(3104, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $i190 := readl($p189);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} vslice_dummy_var_250 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 9, $i190, $i188, $i186);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($p4, $mul.ref(2644, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $i193 := readl($p192);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p4, $mul.ref(2640, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $i195 := readl($p194);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($p4, $mul.ref(2624, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i197 := readl($p196);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} vslice_dummy_var_251 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 10, $i197, $i195, $i193);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($p4, $mul.ref(3136, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} vslice_dummy_var_252 := readl($p199);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p4, $mul.ref(3156, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $i202 := readl($p201);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($p4, $mul.ref(3152, 1));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i204 := readl($p203);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p4, $mul.ref(3136, 1));
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $i206 := readl($p205);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} vslice_dummy_var_253 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 10, $i206, $i204, $i202);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($p4, $mul.ref(2676, 1));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i209 := readl($p208);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($p4, $mul.ref(2672, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i211 := readl($p210);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p4, $mul.ref(2656, 1));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $i213 := readl($p212);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} vslice_dummy_var_254 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 11, $i213, $i211, $i209);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($p4, $mul.ref(3168, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} vslice_dummy_var_255 := readl($p215);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p4, $mul.ref(3188, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $i218 := readl($p217);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($p4, $mul.ref(3184, 1));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i220 := readl($p219);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p4, $mul.ref(3168, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i222 := readl($p221);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} vslice_dummy_var_256 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 11, $i222, $i220, $i218);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p4, $mul.ref(2708, 1));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $i225 := readl($p224);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p4, $mul.ref(2704, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i227 := readl($p226);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($p4, $mul.ref(2688, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $i229 := readl($p228);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} vslice_dummy_var_257 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 12, $i229, $i227, $i225);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p4, $mul.ref(3200, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} vslice_dummy_var_258 := readl($p231);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($p4, $mul.ref(3220, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $i234 := readl($p233);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($p4, $mul.ref(3216, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $i236 := readl($p235);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p4, $mul.ref(3200, 1));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $i238 := readl($p237);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} vslice_dummy_var_259 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 12, $i238, $i236, $i234);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($p4, $mul.ref(2740, 1));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $i241 := readl($p240);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($p4, $mul.ref(2736, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $i243 := readl($p242);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($p4, $mul.ref(2720, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $i245 := readl($p244);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_260 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 13, $i245, $i243, $i241);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($p4, $mul.ref(3232, 1));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} vslice_dummy_var_261 := readl($p247);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p4, $mul.ref(3252, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $i250 := readl($p249);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($p4, $mul.ref(3248, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $i252 := readl($p251);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($p4, $mul.ref(3232, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $i254 := readl($p253);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} vslice_dummy_var_262 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 13, $i254, $i252, $i250);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($p4, $mul.ref(2772, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $i257 := readl($p256);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($p4, $mul.ref(2768, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i259 := readl($p258);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($p4, $mul.ref(2752, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $i261 := readl($p260);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_263 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.192, 14, $i261, $i259, $i257);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($p4, $mul.ref(3264, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} vslice_dummy_var_264 := readl($p263);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($p4, $mul.ref(3284, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $i266 := readl($p265);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($p4, $mul.ref(3280, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i268 := readl($p267);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($p4, $mul.ref(3264, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $i270 := readl($p269);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} vslice_dummy_var_265 := _dev_info.ref.ref.i32.i32.i32.i32($p2, .str.193, 14, $i270, $i268, $i266);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p4, $mul.ref(2092, 1));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $i44 := readl($p43);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    call {:si_unique_call 1310} {:cexpr "tmp___12"} boogie_si_record_i32($i44);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p4, $mul.ref(2088, 1));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i46 := readl($p45);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    call {:si_unique_call 1312} {:cexpr "tmp___13"} boogie_si_record_i32($i46);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} vslice_dummy_var_226 := _dev_info.ref.ref.i32.i32($p2, .str.194, $i46, $i44);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;

  SeqInstr_1033:
    assume !assertsPassed;
    return;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;
}



const debugfs_create_dir: ref;

axiom debugfs_create_dir == $sub.ref(0, 437097);

procedure debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $p2 := external_alloc();
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const debugfs_create_file: ref;

axiom debugfs_create_file == $sub.ref(0, 438129);

procedure debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} {:cexpr "debugfs_create_file:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $p5 := external_alloc();
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 439161);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1460} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1461} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 440193);

procedure snprintf.ref.i64.ref.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: ref) returns ($r: i32);



const usb_ep_set_maxpacket_limit: ref;

axiom usb_ep_set_maxpacket_limit == $sub.ref(0, 441225);

procedure usb_ep_set_maxpacket_limit($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation usb_ep_set_maxpacket_limit($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} {:cexpr "usb_ep_set_maxpacket_limit:arg:maxpacket_limit"} boogie_si_record_i32($i1);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(42, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p3, $i2);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i1);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p5, $i4);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    return;
}



const ldv_kcalloc_14: ref;

axiom ldv_kcalloc_14 == $sub.ref(0, 442257);

procedure ldv_kcalloc_14($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_kcalloc_14($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} {:cexpr "ldv_kcalloc_14:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 1464} {:cexpr "ldv_kcalloc_14:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1465} {:cexpr "ldv_kcalloc_14:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 443289);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 1468} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1469} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const clk_prepare: ref;

axiom clk_prepare == $sub.ref(0, 444321);

procedure clk_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation clk_prepare($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1471} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1472} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const clk_enable: ref;

axiom clk_enable == $sub.ref(0, 445353);

procedure clk_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation clk_enable($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1473} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1474} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const devm_request_threaded_irq: ref;

axiom devm_request_threaded_irq == $sub.ref(0, 446385);

procedure devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1475} {:cexpr "devm_request_threaded_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1476} {:cexpr "devm_request_threaded_irq:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1477} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 1478} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const s3c_hsotg_irq_enumdone: ref;

axiom s3c_hsotg_irq_enumdone == $sub.ref(0, 447417);

procedure s3c_hsotg_irq_enumdone($p0: ref);



const s3c_hsotg_epint: ref;

axiom s3c_hsotg_epint == $sub.ref(0, 448449);

procedure s3c_hsotg_epint($p0: ref, $i1: i32, $i2: i32);



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 449481);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);



const s3c_hsotg_disable_gsint: ref;

axiom s3c_hsotg_disable_gsint == $sub.ref(0, 450513);

procedure s3c_hsotg_disable_gsint($p0: ref, $i1: i32);



const s3c_hsotg_irq_fifoempty: ref;

axiom s3c_hsotg_irq_fifoempty == $sub.ref(0, 451545);

procedure s3c_hsotg_irq_fifoempty($p0: ref, $i1: i1);



const s3c_hsotg_handle_rx: ref;

axiom s3c_hsotg_handle_rx == $sub.ref(0, 452577);

procedure s3c_hsotg_handle_rx($p0: ref);



const s3c_hsotg_handle_outdone: ref;

axiom s3c_hsotg_handle_outdone == $sub.ref(0, 453609);

procedure s3c_hsotg_handle_outdone($p0: ref, $i1: i32, $i2: i1);



const s3c_hsotg_rx_data: ref;

axiom s3c_hsotg_rx_data == $sub.ref(0, 454641);

procedure s3c_hsotg_rx_data($p0: ref, $i1: i32, $i2: i32);



const ioread32_rep: ref;

axiom ioread32_rep == $sub.ref(0, 455673);

procedure ioread32_rep($p0: ref, $p1: ref, $i2: i64);



const s3c_hsotg_send_zlp: ref;

axiom s3c_hsotg_send_zlp == $sub.ref(0, 456705);

procedure s3c_hsotg_send_zlp($p0: ref, $p1: ref);



const s3c_hsotg_trytx: ref;

axiom s3c_hsotg_trytx == $sub.ref(0, 457737);

procedure s3c_hsotg_trytx($p0: ref, $p1: ref) returns ($r: i32);



const s3c_hsotg_complete_in: ref;

axiom s3c_hsotg_complete_in == $sub.ref(0, 458769);

procedure s3c_hsotg_complete_in($p0: ref, $p1: ref);



const usb_speed_string: ref;

axiom usb_speed_string == $sub.ref(0, 459801);

procedure usb_speed_string($i0: i32) returns ($r: ref);



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 460833);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 461865);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p1);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    return;
}



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 462897);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1480} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $p3 := external_alloc();
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 463929);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1482} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1483} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1484} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1485} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p4 := calloc(1, $i0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1487} __VERIFIER_assume($i7);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_file_operations_2: ref;

axiom ldv_file_operations_2 == $sub.ref(0, 464961);

procedure ldv_file_operations_2();
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.1, $CurrAddr;



implementation ldv_file_operations_2()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $p0 := ldv_zalloc(1032);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $M.22 := $p0;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p2 := ldv_zalloc(512);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $M.23 := $p2;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_3: ref;

axiom ldv_file_operations_3 == $sub.ref(0, 465993);

procedure ldv_file_operations_3();
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.1, $CurrAddr;



implementation ldv_file_operations_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $p0 := ldv_zalloc(1032);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $M.24 := $p0;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $p2 := ldv_zalloc(512);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $M.25 := $p2;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_gadget_ops_5: ref;

axiom ldv_initialize_usb_gadget_ops_5 == $sub.ref(0, 467025);

procedure ldv_initialize_usb_gadget_ops_5();
  free requires assertsPassed;
  modifies $M.26, $M.27, $M.1, $CurrAddr;



implementation ldv_initialize_usb_gadget_ops_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $p0 := ldv_zalloc(184);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $M.26 := $p0;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $p2 := ldv_zalloc(1568);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.27 := $p2;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_ep_ops_6: ref;

axiom ldv_initialize_usb_ep_ops_6 == $sub.ref(0, 468057);

procedure ldv_initialize_usb_ep_ops_6();
  free requires assertsPassed;
  modifies $M.28, $M.29, $M.1, $CurrAddr;



implementation ldv_initialize_usb_ep_ops_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $p0 := ldv_zalloc(64);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $p2 := ldv_zalloc(88);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $M.29 := $p2;
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_platform_driver_1: ref;

axiom ldv_initialize_platform_driver_1 == $sub.ref(0, 469089);

procedure ldv_initialize_platform_driver_1();
  free requires assertsPassed;
  modifies $M.30, $M.1, $CurrAddr;



implementation ldv_initialize_platform_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $p0 := ldv_zalloc(1464);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $M.30 := $p0;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_4: ref;

axiom ldv_file_operations_4 == $sub.ref(0, 470121);

procedure ldv_file_operations_4();
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.1, $CurrAddr;



implementation ldv_file_operations_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $p0 := ldv_zalloc(1032);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $M.31 := $p0;
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $p2 := ldv_zalloc(512);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.32 := $p2;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 471153);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.1, $M.15, $M.16, $M.45, $M.46, $M.21, $M.47, $M.48, $M.49, $M.26, $M.27, $M.22, $M.23, $M.24, $M.25, $M.31, $M.32, $M.28, $M.29, $M.50, $M.51, $M.30, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $CurrAddr, $M.12, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i163: i1;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i1;
  var $i175: i1;
  var $i176: i1;
  var $i177: i1;
  var $i178: i1;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i32;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i1;
  var $i207: i1;
  var $i208: i1;
  var $i209: i1;
  var $i210: i1;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $p214: ref;
  var $i216: i32;
  var $i217: i32;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $i233: i32;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i1;
  var $i239: i1;
  var $i240: i1;
  var $i241: i1;
  var $i242: i1;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $p250: ref;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $p259: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: ref;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i64;
  var vslice_dummy_var_287: i64;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i64;
  var vslice_dummy_var_292: i64;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i64;
  var vslice_dummy_var_295: i64;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;

  $bb0:
    call {:si_unique_call 1499} $initialize();
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1500} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1504} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1505} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1506} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $p4 := ldv_zalloc(9);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p6 := ldv_zalloc(1);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1509} $i7 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1510} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i7);
    call {:si_unique_call 1511} {:cexpr "tmp___2"} boogie_si_record_i64($i7);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1512} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1513} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 1514} {:cexpr "tmp___3"} boogie_si_record_i32($i8);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1515} $i9 := __VERIFIER_nondet_loff_t();
    call {:si_unique_call 1516} {:cexpr "smack:ext:__VERIFIER_nondet_loff_t"} boogie_si_record_i64($i9);
    call {:si_unique_call 1517} {:cexpr "tmp___4"} boogie_si_record_i64($i9);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p10 := ldv_zalloc(8);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1519} $i12 := __VERIFIER_nondet_loff_t();
    call {:si_unique_call 1520} {:cexpr "smack:ext:__VERIFIER_nondet_loff_t"} boogie_si_record_i64($i12);
    call {:si_unique_call 1521} {:cexpr "tmp___6"} boogie_si_record_i64($i12);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $p13 := ldv_zalloc(1);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} $i14 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1524} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i14);
    call {:si_unique_call 1525} {:cexpr "tmp___8"} boogie_si_record_i64($i14);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1526} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 1527} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 1528} {:cexpr "tmp___9"} boogie_si_record_i32($i15);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $p16 := ldv_zalloc(8);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1530} $i18 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1531} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i18);
    call {:si_unique_call 1532} {:cexpr "tmp___11"} boogie_si_record_i64($i18);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $p19 := ldv_zalloc(8);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $p21 := ldv_zalloc(1);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1535} $i22 := __VERIFIER_nondet_loff_t();
    call {:si_unique_call 1536} {:cexpr "smack:ext:__VERIFIER_nondet_loff_t"} boogie_si_record_i64($i22);
    call {:si_unique_call 1537} {:cexpr "tmp___14"} boogie_si_record_i64($i22);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1538} $i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 1539} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i23);
    call {:si_unique_call 1540} {:cexpr "tmp___15"} boogie_si_record_i32($i23);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1541} $i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 1542} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i24);
    call {:si_unique_call 1543} {:cexpr "tmp___16"} boogie_si_record_i32($i24);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_initialize();
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.33;
    call {:si_unique_call 1545} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p25, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.33 := cmdloc_dummy_var_4;
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.34;
    call {:si_unique_call 1546} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p26, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.34 := cmdloc_dummy_var_6;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p2);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.35;
    call {:si_unique_call 1547} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p27, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.35 := cmdloc_dummy_var_8;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 1549} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 1551} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1552} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $i52, $i53, $p54, $p55, $i56, $i57, $p58, $i60, $i61, $p62, $p63, $i64, $i66, $i67, $p68, $i69, $i71, $i72, $p73, $i75, $i76, $p77, $p78, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $p91, $i93, $i94, $i95, $i96, $p97, $i99, $i100, $p101, $i103, $i104, $p105, $p106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $i136, $i137, $p138, $i140, $i141, $i142, $i143, $p144, $i146, $i147, $i148, $i149, $p150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $p181, $p182, $i184, $i185, $i186, $i187, $p188, $i190, $i191, $p192, $i194, $i195, $p196, $p197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $p213, $p214, $i216, $i217, $i218, $i219, $p220, $i222, $i223, $p224, $i226, $i227, $p228, $p229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $p245, $i247, $i248, $p249, $p250, $i252, $i253, $p254, $i256, $i257, $p258, $p259, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286, vslice_dummy_var_287, vslice_dummy_var_288, vslice_dummy_var_289, vslice_dummy_var_290, vslice_dummy_var_291, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295, vslice_dummy_var_296, vslice_dummy_var_297, vslice_dummy_var_298, vslice_dummy_var_299 := main_loop_$bb1($p0, $p1, $p2, $i3, $p5, $p6, $i7, $i8, $i9, $p11, $i12, $p13, $i14, $i15, $p17, $i18, $p20, $p21, $i22, $i23, $i24, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $i52, $i53, $p54, $p55, $i56, $i57, $p58, $i60, $i61, $p62, $p63, $i64, $i66, $i67, $p68, $i69, $i71, $i72, $p73, $i75, $i76, $p77, $p78, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $p91, $i93, $i94, $i95, $i96, $p97, $i99, $i100, $p101, $i103, $i104, $p105, $p106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $i136, $i137, $p138, $i140, $i141, $i142, $i143, $p144, $i146, $i147, $i148, $i149, $p150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $p181, $p182, $i184, $i185, $i186, $i187, $p188, $i190, $i191, $p192, $i194, $i195, $p196, $p197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $p213, $p214, $i216, $i217, $i218, $i219, $p220, $i222, $i223, $p224, $i226, $i227, $p228, $p229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $p245, $i247, $i248, $p249, $p250, $i252, $i253, $p254, $i256, $i257, $p258, $p259, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286, vslice_dummy_var_287, vslice_dummy_var_288, vslice_dummy_var_289, vslice_dummy_var_290, vslice_dummy_var_291, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295, vslice_dummy_var_296, vslice_dummy_var_297, vslice_dummy_var_298, vslice_dummy_var_299);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i28, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i28, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i28, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} ldv_stop();
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb65_dummy;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i235 := $M.43;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i236 := $ne.i32($i235, 0);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb237:
    assume $i236 == 1;
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1663} $i237 := __VERIFIER_nondet_int();
    call {:si_unique_call 1664} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i237);
    call {:si_unique_call 1665} {:cexpr "tmp___24"} boogie_si_record_i32($i237);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i238 := $slt.i32($i237, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    $i239 := $slt.i32($i237, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i237, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    assume !($i240 == 1);
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} ldv_stop();
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb244:
    assume $i240 == 1;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i256 := $M.43;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 1);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb261:
    assume $i257 == 1;
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p258 := $M.27;
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p259 := $M.26;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} vslice_dummy_var_299 := s3c_hsotg_udc_stop($p258, $p259);
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    goto $bb263;

  SeqInstr_1093:
    assume !assertsPassed;
    return;

  $bb242:
    assume $i239 == 1;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i252 := $M.43;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 1);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb258:
    assume $i253 == 1;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p254 := $M.27;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} vslice_dummy_var_298 := s3c_hsotg_gadget_getframe($p254);
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    goto $bb260;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  $bb240:
    assume $i238 == 1;
    assume {:verifier.code 0} true;
    $i241 := $slt.i32($i237, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i241 == 1);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i247 := $M.43;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 1);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb255:
    assume $i248 == 1;
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p249 := $M.27;
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p250 := $M.26;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} vslice_dummy_var_297 := s3c_hsotg_udc_start($p249, $p250);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1669} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb247:
    assume $i241 == 1;
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i237, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb246;

  $bb249:
    assume $i242 == 1;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i243 := $M.43;
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 1);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb251:
    assume $i244 == 1;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p245 := $M.27;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} vslice_dummy_var_296 := s3c_hsotg_pullup($p245, $i24);
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    goto $bb253;

  SeqInstr_1087:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i203 := $M.42;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb204:
    assume $i204 == 1;
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1648} $i205 := __VERIFIER_nondet_int();
    call {:si_unique_call 1649} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i205);
    call {:si_unique_call 1650} {:cexpr "tmp___23"} boogie_si_record_i32($i205);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i206 := $slt.i32($i205, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    $i207 := $slt.i32($i205, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i205, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_stop();
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb211:
    assume $i208 == 1;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i226 := $M.42;
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 1);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb228:
    assume $i227 == 1;
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p228 := $M.22;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p229 := $M.23;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $i230 := ep_open($p228, $p229);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $M.51 := $i230;
    call {:si_unique_call 1659} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i230);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i231 := $M.51;
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 0);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb230:
    assume $i232 == 1;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i233 := $M.39;
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i234 := $add.i32($i233, 1);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $M.39 := $i234;
    call {:si_unique_call 1661} {:cexpr "ref_cnt"} boogie_si_record_i32($i234);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb209:
    assume $i207 == 1;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i222 := $M.42;
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 2);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb225:
    assume $i223 == 1;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p224 := $M.23;
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} vslice_dummy_var_295 := seq_lseek($p224, $i22, $i23);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb207:
    assume $i206 == 1;
    assume {:verifier.code 0} true;
    $i209 := $slt.i32($i205, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i209 == 1);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i218 := $M.42;
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 2);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb222:
    assume $i219 == 1;
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p220 := $M.23;
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} vslice_dummy_var_294 := seq_read($p220, $p21, $i18, $p20);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb214:
    assume $i209 == 1;
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i205, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb213;

  $bb216:
    assume $i210 == 1;
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i211 := $M.42;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 2);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb218:
    assume $i212 == 1;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p213 := $M.22;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p214 := $M.23;
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} vslice_dummy_var_293 := single_release($p213, $p214);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i216 := $M.39;
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i217 := $sub.i32($i216, 1);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.39 := $i217;
    call {:si_unique_call 1653} {:cexpr "ref_cnt"} boogie_si_record_i32($i217);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb5:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i28, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i171 := $M.41;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb171:
    assume $i172 == 1;
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1633} $i173 := __VERIFIER_nondet_int();
    call {:si_unique_call 1634} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i173);
    call {:si_unique_call 1635} {:cexpr "tmp___22"} boogie_si_record_i32($i173);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i174 := $slt.i32($i173, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    $i175 := $slt.i32($i173, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i173, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !($i176 == 1);
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} ldv_stop();
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb178:
    assume $i176 == 1;
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i194 := $M.41;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb195:
    assume $i195 == 1;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p196 := $M.24;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p197 := $M.25;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} $i198 := fifo_open($p196, $p197);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.50 := $i198;
    call {:si_unique_call 1644} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i198);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i199 := $M.50;
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 0);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb197:
    assume $i200 == 1;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i201 := $M.39;
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i202 := $add.i32($i201, 1);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $M.39 := $i202;
    call {:si_unique_call 1646} {:cexpr "ref_cnt"} boogie_si_record_i32($i202);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb176:
    assume $i175 == 1;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i190 := $M.41;
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 2);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb192:
    assume $i191 == 1;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p192 := $M.25;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} vslice_dummy_var_292 := seq_lseek($p192, $i12, $i15);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1642} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb174:
    assume $i174 == 1;
    assume {:verifier.code 0} true;
    $i177 := $slt.i32($i173, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i177 == 1);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i186 := $M.41;
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 2);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb189:
    assume $i187 == 1;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p188 := $M.25;
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} vslice_dummy_var_291 := seq_read($p188, $p13, $i14, $p17);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1640} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb181:
    assume $i177 == 1;
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i173, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i178 == 1);
    goto $bb180;

  $bb183:
    assume $i178 == 1;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i179 := $M.41;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 2);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb185:
    assume $i180 == 1;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p181 := $M.24;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p182 := $M.25;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_290 := single_release($p181, $p182);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i184 := $M.39;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i185 := $sub.i32($i184, 1);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $M.39 := $i185;
    call {:si_unique_call 1638} {:cexpr "ref_cnt"} boogie_si_record_i32($i185);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i154 := $M.40;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb141:
    assume $i155 == 1;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1612} $i156 := __VERIFIER_nondet_int();
    call {:si_unique_call 1613} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i156);
    call {:si_unique_call 1614} {:cexpr "tmp___21"} boogie_si_record_i32($i156);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $i157 := $slt.i32($i156, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i156, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} ldv_stop();
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb146:
    assume $i158 == 1;
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i164 := $M.40;
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 1);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb159:
    assume $i165 == 1;
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $i166 := s3c_hsotg_driver_init();
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.49 := $i166;
    call {:si_unique_call 1619} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i166);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i167 := $M.49;
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 0);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i169 := $M.49;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb164:
    assume $i170 == 1;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} ldv_check_final_state();
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb161:
    assume $i168 == 1;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1620} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} ldv_initialize_usb_gadget_ops_5();
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_file_operations_2();
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_file_operations_3();
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} ldv_file_operations_4();
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} ldv_initialize_usb_ep_ops_6();
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb144:
    assume $i157 == 1;
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i156, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb148;

  $bb149:
    assume $i159 == 1;
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i160 := $M.40;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 3);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb151:
    assume $i161 == 1;
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i162 := $M.39;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 0);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb153;

  $bb154:
    assume $i163 == 1;
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} s3c_hsotg_driver_exit();
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1616} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb3:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i28, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i28, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i112 := $M.38;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb99:
    assume $i113 == 1;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1592} $i114 := __VERIFIER_nondet_int();
    call {:si_unique_call 1593} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i114);
    call {:si_unique_call 1594} {:cexpr "tmp___20"} boogie_si_record_i32($i114);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i114, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i114, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} ldv_stop();
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb106:
    assume $i117 == 1;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i148 := $M.38;
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 3);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb132:
    assume $i149 == 1;
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p150 := $M.30;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $i151 := s3c_hsotg_resume($p150);
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.48 := $i151;
    call {:si_unique_call 1609} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i151);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i152 := $M.48;
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 0);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb134:
    assume $i153 == 1;
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1610} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    goto $bb136;

  SeqInstr_1084:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i116 == 1;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i136 := $M.38;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 3);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i142 := $M.38;
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 2);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb129:
    assume $i143 == 1;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p144 := $M.30;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} vslice_dummy_var_289 := s3c_hsotg_remove($p144);
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1606} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i146 := $M.39;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i147 := $sub.i32($i146, 1);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $M.39 := $i147;
    call {:si_unique_call 1607} {:cexpr "ref_cnt"} boogie_si_record_i32($i147);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb131;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  $bb126:
    assume $i137 == 1;
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p138 := $M.30;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} vslice_dummy_var_288 := s3c_hsotg_remove($p138);
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1603} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i140 := $M.39;
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i141 := $sub.i32($i140, 1);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $M.39 := $i141;
    call {:si_unique_call 1604} {:cexpr "ref_cnt"} boogie_si_record_i32($i141);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    goto $bb128;

  SeqInstr_1078:
    assume !assertsPassed;
    return;

  $bb102:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i114, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i118 == 1);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i128 := $M.38;
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 2);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb120:
    assume $i129 == 1;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p130 := $M.30;
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.35, $p131);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $i133 := s3c_hsotg_suspend($p130, $i132);
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $M.47 := $i133;
    call {:si_unique_call 1600} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i133);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i134 := $M.47;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb122:
    assume $i135 == 1;
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    goto $bb124;

  SeqInstr_1075:
    assume !assertsPassed;
    return;

  $bb109:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i114, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb108;

  $bb111:
    assume $i119 == 1;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i120 := $M.38;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 1);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb113:
    assume $i121 == 1;
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p122 := $M.30;
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $i123 := s3c_hsotg_probe($p122);
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $M.46 := $i123;
    call {:si_unique_call 1596} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i123);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i124 := $M.46;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb115:
    assume $i125 == 1;
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1597} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i126 := $M.39;
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i126, 1);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $M.39 := $i127;
    call {:si_unique_call 1598} {:cexpr "ref_cnt"} boogie_si_record_i32($i127);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    goto $bb117;

  SeqInstr_1072:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i80 := $M.37;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb66:
    assume $i81 == 1;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1577} $i82 := __VERIFIER_nondet_int();
    call {:si_unique_call 1578} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i82);
    call {:si_unique_call 1579} {:cexpr "tmp___19"} boogie_si_record_i32($i82);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i82, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i82, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i82, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} ldv_stop();
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb73:
    assume $i85 == 1;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i103 := $M.37;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 1);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb90:
    assume $i104 == 1;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p105 := $M.31;
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p106 := $M.32;
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i107 := state_open($p105, $p106);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $M.45 := $i107;
    call {:si_unique_call 1588} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i107);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i108 := $M.45;
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb92:
    assume $i109 == 1;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i110 := $M.39;
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i110, 1);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $M.39 := $i111;
    call {:si_unique_call 1590} {:cexpr "ref_cnt"} boogie_si_record_i32($i111);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb71:
    assume $i84 == 1;
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i99 := $M.37;
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 2);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb87:
    assume $i100 == 1;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p101 := $M.32;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_287 := seq_lseek($p101, $i9, $i8);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb69:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i82, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i86 == 1);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i95 := $M.37;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 2);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb84:
    assume $i96 == 1;
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p97 := $M.32;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} vslice_dummy_var_286 := seq_read($p97, $p6, $i7, $p11);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb76:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i82, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb75;

  $bb78:
    assume $i87 == 1;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i88 := $M.37;
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 2);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb80:
    assume $i89 == 1;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p90 := $M.31;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p91 := $M.32;
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} vslice_dummy_var_285 := single_release($p90, $p91);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i93 := $M.39;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i93, 1);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $M.39 := $i94;
    call {:si_unique_call 1582} {:cexpr "ref_cnt"} boogie_si_record_i32($i94);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb14:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i28, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb11;

  $bb18:
    assume $i36 == 1;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i37 := $M.36;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1559} $i39 := __VERIFIER_nondet_int();
    call {:si_unique_call 1560} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i39);
    call {:si_unique_call 1561} {:cexpr "tmp___18"} boogie_si_record_i32($i39);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i39, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i39, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} ldv_stop();
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i75 := $M.36;
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 1);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb59:
    assume $i76 == 1;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p77 := $M.28;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p78 := $M.29;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} vslice_dummy_var_284 := s3c_hsotg_ep_dequeue($p77, $p78);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto $bb61;

  SeqInstr_1069:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i42 == 1;
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i71 := $M.36;
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb56:
    assume $i72 == 1;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p73 := $M.28;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_283 := s3c_hsotg_ep_enable($p73, $p5);
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    goto $bb58;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i39, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i44 == 1);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i66 := $M.36;
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 1);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb53:
    assume $i67 == 1;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p68 := $M.28;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.33, $p0);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_282 := s3c_hsotg_ep_alloc_request($p68, $i69);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i44 == 1;
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i60 := $M.36;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb50:
    assume $i61 == 1;
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p62 := $M.28;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p63 := $M.29;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.34, $p1);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_281 := s3c_hsotg_ep_queue_lock($p62, $p63, $i64);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1060:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i39, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i46 == 1);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i56 := $M.36;
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb47:
    assume $i57 == 1;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p58 := $M.28;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_280 := s3c_hsotg_ep_sethalt_lock($p58, $i3);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i46 == 1;
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i52 := $M.36;
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb44:
    assume $i53 == 1;
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p54 := $M.28;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p55 := $M.29;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} s3c_hsotg_ep_free_request($p54, $p55);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb34:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb31;

  $bb38:
    assume $i47 == 1;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i48 := $M.36;
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i49 == 1;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p50 := $M.28;
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} vslice_dummy_var_279 := s3c_hsotg_ep_disable($p50);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    goto $bb42;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  $bb65_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1556} $i28 := __VERIFIER_nondet_int();
    call {:si_unique_call 1557} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i28);
    call {:si_unique_call 1558} {:cexpr "tmp___17"} boogie_si_record_i32($i28);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 472185);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const __VERIFIER_nondet_loff_t: ref;

axiom __VERIFIER_nondet_loff_t == $sub.ref(0, 473217);

procedure __VERIFIER_nondet_loff_t() returns ($r: i64);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 474249);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 475281);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 476313);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const s3c_hsotg_driver_exit: ref;

axiom s3c_hsotg_driver_exit == $sub.ref(0, 477345);

procedure s3c_hsotg_driver_exit();
  free requires assertsPassed;
  modifies $M.38;



implementation s3c_hsotg_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} ldv_platform_driver_unregister_21(s3c_hsotg_driver);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    return;
}



const s3c_hsotg_driver_init: ref;

axiom s3c_hsotg_driver_init == $sub.ref(0, 478377);

procedure s3c_hsotg_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.30, $M.1, $CurrAddr;



implementation s3c_hsotg_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $i0 := ldv___platform_driver_register_20(s3c_hsotg_driver, __this_module);
    call {:si_unique_call 1678} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 479409);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    return;
}



const ldv___platform_driver_register_20: ref;

axiom ldv___platform_driver_register_20 == $sub.ref(0, 480441);

procedure ldv___platform_driver_register_20($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.30, $M.1, $CurrAddr;



implementation ldv___platform_driver_register_20($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 1680} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} ldv_initialize_platform_driver_1();
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 481473);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1683} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1684} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_platform_driver_unregister_21: ref;

axiom ldv_platform_driver_unregister_21 == $sub.ref(0, 482505);

procedure ldv_platform_driver_unregister_21($p0: ref);
  free requires assertsPassed;
  modifies $M.38;



implementation ldv_platform_driver_unregister_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} platform_driver_unregister($p0);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 483537);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 484569);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1687} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 1} true;
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 485601);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 486633);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 487665);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1096:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 488697);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 489729);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 490761);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 491793);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 492825);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 493857);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 494889);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 495921);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 496953);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 497985);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1688} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1689} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1690} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1691} __VERIFIER_assume($i4);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 499017);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 500049);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 501081);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 502113);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 503145);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1692} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1693} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1694} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1695} __VERIFIER_assume($i4);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 504177);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 505209);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 506241);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 507273);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 508305);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 509337);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 510369);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 511401);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 512433);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 513465);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 514497);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 515529);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 516561);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 517593);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 518625);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1697} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 519657);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 520689);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1698} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1699} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 521721);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 522753);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 523785);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1700} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1701} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1702} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1703} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} $p6 := malloc($i5);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.1;
    call {:si_unique_call 1705} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_10;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 524817);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 525849);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.9, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.1, $M.104, $M.105;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1706} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.22 := $0.ref;
    $M.23 := $0.ref;
    $M.24 := $0.ref;
    $M.25 := $0.ref;
    $M.26 := $0.ref;
    $M.27 := $0.ref;
    $M.28 := $0.ref;
    $M.29 := $0.ref;
    $M.30 := $0.ref;
    $M.31 := $0.ref;
    $M.32 := $0.ref;
    $M.36 := 0;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1708} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1710} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1711} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1712} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1714} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1715} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1716} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1717} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1718} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1719} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1720} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1721} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 1722} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.75 := $store.ref($M.75, ep_fops, __this_module);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(8, 1)), seq_lseek);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(16, 1)), seq_read);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(24, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(32, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(40, 1)), $0.ref);
    $M.81 := $store.ref($M.81, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(48, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(56, 1)), $0.ref);
    $M.83 := $store.ref($M.83, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(64, 1)), $0.ref);
    $M.84 := $store.ref($M.84, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(72, 1)), $0.ref);
    $M.85 := $store.ref($M.85, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(80, 1)), $0.ref);
    $M.86 := $store.ref($M.86, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(88, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(96, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(104, 1)), ep_open);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(112, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(120, 1)), single_release);
    $M.91 := $store.ref($M.91, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(128, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(136, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(144, 1)), $0.ref);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(152, 1)), $0.ref);
    $M.95 := $store.ref($M.95, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(160, 1)), $0.ref);
    $M.96 := $store.ref($M.96, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(168, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(176, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(184, 1)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(192, 1)), $0.ref);
    $M.100 := $store.ref($M.100, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(200, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(208, 1)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(216, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(ep_fops, $mul.ref(0, 232)), $mul.ref(224, 1)), $0.ref);
    $M.75 := $store.ref($M.75, fifo_fops, __this_module);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(8, 1)), seq_lseek);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(16, 1)), seq_read);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(24, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(32, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(40, 1)), $0.ref);
    $M.81 := $store.ref($M.81, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(48, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(56, 1)), $0.ref);
    $M.83 := $store.ref($M.83, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(64, 1)), $0.ref);
    $M.84 := $store.ref($M.84, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(72, 1)), $0.ref);
    $M.85 := $store.ref($M.85, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(80, 1)), $0.ref);
    $M.86 := $store.ref($M.86, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(88, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(96, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(104, 1)), fifo_open);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(112, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(120, 1)), single_release);
    $M.91 := $store.ref($M.91, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(128, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(136, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(144, 1)), $0.ref);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(152, 1)), $0.ref);
    $M.95 := $store.ref($M.95, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(160, 1)), $0.ref);
    $M.96 := $store.ref($M.96, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(168, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(176, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(184, 1)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(192, 1)), $0.ref);
    $M.100 := $store.ref($M.100, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(200, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(208, 1)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(216, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(fifo_fops, $mul.ref(0, 232)), $mul.ref(224, 1)), $0.ref);
    $M.75 := $store.ref($M.75, state_fops, __this_module);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(8, 1)), seq_lseek);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(16, 1)), seq_read);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(24, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(32, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(40, 1)), $0.ref);
    $M.81 := $store.ref($M.81, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(48, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(56, 1)), $0.ref);
    $M.83 := $store.ref($M.83, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(64, 1)), $0.ref);
    $M.84 := $store.ref($M.84, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(72, 1)), $0.ref);
    $M.85 := $store.ref($M.85, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(80, 1)), $0.ref);
    $M.86 := $store.ref($M.86, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(88, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(96, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(104, 1)), state_open);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(112, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(120, 1)), single_release);
    $M.91 := $store.ref($M.91, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(128, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(136, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(144, 1)), $0.ref);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(152, 1)), $0.ref);
    $M.95 := $store.ref($M.95, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(160, 1)), $0.ref);
    $M.96 := $store.ref($M.96, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(168, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(176, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(184, 1)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(192, 1)), $0.ref);
    $M.100 := $store.ref($M.100, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(200, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(208, 1)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(216, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(state_fops, $mul.ref(0, 232)), $mul.ref(224, 1)), $0.ref);
    $M.1 := $store.ref($M.1, s3c_hsotg_ep_ops, s3c_hsotg_ep_enable);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_ep_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), s3c_hsotg_ep_disable);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_ep_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), s3c_hsotg_ep_alloc_request);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_ep_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), s3c_hsotg_ep_free_request);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_ep_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), s3c_hsotg_ep_queue_lock);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_ep_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), s3c_hsotg_ep_dequeue);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_ep_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), s3c_hsotg_ep_sethalt_lock);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_ep_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_ep_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_ep_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), $0.ref);
    $M.104 := $store.ref($M.104, s3c_hsotg_supply_names, .str.164);
    $M.104 := $store.ref($M.104, $add.ref($add.ref(s3c_hsotg_supply_names, $mul.ref(0, 16)), $mul.ref(1, 8)), .str.165);
    $M.1 := $store.ref($M.1, s3c_hsotg_gadget_ops, s3c_hsotg_gadget_getframe);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_gadget_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_gadget_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_gadget_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_gadget_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_gadget_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), s3c_hsotg_pullup);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_gadget_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_gadget_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_gadget_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), s3c_hsotg_udc_start);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(s3c_hsotg_gadget_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), s3c_hsotg_udc_stop);
    $M.105 := $store.i8($M.105, .str.180, 101);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.180, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.180, $mul.ref(0, 7)), $mul.ref(2, 1)), 37);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.180, $mul.ref(0, 7)), $mul.ref(3, 1)), 100);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.180, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.180, $mul.ref(0, 7)), $mul.ref(5, 1)), 115);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.180, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    call {:si_unique_call 1723} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 526881);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(s3c_hsotg_suspend, $p0);
    assume {:branchcond $i8} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i8 == 1);
    $i7 := $eq.ref(s3c_hsotg_ep_sethalt_lock, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i7 == 1);
    $i6 := $eq.ref(s3c_hsotg_pullup, $p0);
    assume {:branchcond $i6} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1724} $i2 := s3c_hsotg_pullup($p1, arg1);
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    $r := $i2;
    return;

  SeqInstr_1099:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i7 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1725} $i4 := s3c_hsotg_ep_sethalt_lock($p3, arg1);
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    $r := $i4;
    return;

  SeqInstr_1102:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    call {:si_unique_call 1726} $i5 := s3c_hsotg_suspend(arg, arg1);
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    $r := $i5;
    return;

  SeqInstr_1105:
    assume !assertsPassed;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 527913);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 528945);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(s3c_hsotg_resume, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(s3c_hsotg_remove, $p0);
    assume {:branchcond $i14} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(s3c_hsotg_probe, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(s3c_hsotg_ep_disable, $p0);
    assume {:branchcond $i12} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(s3c_hsotg_gadget_getframe, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1727} $i2 := s3c_hsotg_gadget_getframe($p1);
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    $r := $i2;
    return;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1728} $i4 := s3c_hsotg_ep_disable($p3);
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    $r := $i4;
    return;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1729} $i6 := s3c_hsotg_probe($p5);
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    $r := $i6;
    return;

  SeqInstr_1114:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1730} $i8 := s3c_hsotg_remove($p7);
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    $r := $i8;
    return;

  SeqInstr_1117:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1731} $i10 := s3c_hsotg_resume($p9);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    $r := $i10;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 529977);

procedure devirtbounce.3(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 531009);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 532041);

procedure devirtbounce.5(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 533073);

procedure devirtbounce.6(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 534105);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.1, $CurrAddr, $M.12, $M.16, $M.15, $M.21, assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(s3c_hsotg_ep_free_request, $p0);
    assume {:branchcond $i3} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i3 == 1);
    $i2 := $eq.ref(s3c_hsotg_complete_oursetup, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i2 == 1);
    $i1 := $eq.ref(s3c_hsotg_complete_setup, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1732} s3c_hsotg_complete_setup(arg, arg1);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 1733} s3c_hsotg_complete_oursetup(arg, arg1);
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 1734} s3c_hsotg_ep_free_request(arg, arg1);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 535137);

procedure devirtbounce.8(funcPtr: ref, arg: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 536169);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.16, $M.15, $M.21, $CurrAddr, $M.12, assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i42 := $eq.ref(ep_show, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i42 == 1);
    $i41 := $eq.ref(ep_open, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i41 == 1);
    $i40 := $eq.ref(fifo_show, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i40 == 1);
    $i39 := $eq.ref(fifo_open, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i39 == 1);
    $i38 := $eq.ref(state_show, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i38 == 1);
    $i37 := $eq.ref(single_release, $p0);
    assume {:branchcond $i37} true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i37 == 1);
    $i36 := $eq.ref(state_open, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i36 == 1);
    $i35 := $eq.ref(s3c_hsotg_ep_dequeue, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i35 == 1);
    $i34 := $eq.ref(s3c_hsotg_ep_enable, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i34 == 1);
    $i33 := $eq.ref(s3c_hsotg_udc_stop, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i33 == 1);
    $i32 := $eq.ref(s3c_hsotg_udc_start, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume false;
    return;

  $bb2:
    assume $i32 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1735} $i2 := s3c_hsotg_udc_start(arg, $p1);
    $r := $i2;
    return;

  $bb3:
    assume $i33 == 1;
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1736} $i4 := s3c_hsotg_udc_stop(arg, $p3);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    $r := $i4;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i34 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1737} $i7 := s3c_hsotg_ep_enable($p5, $p6);
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    $r := $i7;
    return;

  SeqInstr_1129:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i35 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1738} $i10 := s3c_hsotg_ep_dequeue($p8, $p9);
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    $r := $i10;
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i36 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1739} $i13 := state_open($p11, $p12);
    $r := $i13;
    return;

  $bb7:
    assume $i37 == 1;
    $p14 := $bitcast.ref.ref(arg);
    $p15 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1740} $i16 := single_release($p14, $p15);
    $r := $i16;
    return;

  $bb8:
    assume $i38 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1741} $i19 := state_show($p17, $p18);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    $r := $i19;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i39 == 1;
    $p20 := $bitcast.ref.ref(arg);
    $p21 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1742} $i22 := fifo_open($p20, $p21);
    $r := $i22;
    return;

  $bb10:
    assume $i40 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1743} $i25 := fifo_show($p23, $p24);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    $r := $i25;
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i41 == 1;
    $p26 := $bitcast.ref.ref(arg);
    $p27 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1744} $i28 := ep_open($p26, $p27);
    $r := $i28;
    return;

  $bb12:
    assume $i42 == 1;
    $p29 := $bitcast.ref.ref(arg);
    $p30 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1745} $i31 := ep_show($p29, $p30);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    $r := $i31;
    return;

  SeqInstr_1141:
    assume !assertsPassed;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 537201);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(s3c_hsotg_resume, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(s3c_hsotg_remove, $p0);
    assume {:branchcond $i14} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(s3c_hsotg_probe, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(s3c_hsotg_ep_disable, $p0);
    assume {:branchcond $i12} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(s3c_hsotg_gadget_getframe, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1746} $i2 := s3c_hsotg_gadget_getframe($p1);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    $r := $i2;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1747} $i4 := s3c_hsotg_ep_disable($p3);
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    $r := $i4;
    return;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1748} $i6 := s3c_hsotg_probe($p5);
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    $r := $i6;
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1749} $i8 := s3c_hsotg_remove($p7);
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    $r := $i8;
    return;

  SeqInstr_1153:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1750} $i10 := s3c_hsotg_resume($p9);
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    $r := $i10;
    return;

  SeqInstr_1156:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.9, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.1, $M.104, $M.105, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1751} __SMACK_static_init();
    call {:si_unique_call 1752} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.1, $M.15, $M.16, $M.45, $M.46, $M.21, $M.47, $M.48, $M.49, $M.26, $M.27, $M.22, $M.23, $M.24, $M.25, $M.31, $M.32, $M.28, $M.29, $M.50, $M.51, $M.30, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $CurrAddr, $M.12;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation s3c_hsotg_udc_stop_loop_$bb8(in_$p2: ref, in_$p6: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$i17: i32, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$i10: i32, in_vslice_dummy_var_19: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$i17: i32, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$i10: i32, out_vslice_dummy_var_19: i32)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p15, out_$i17, out_$i18, out_$i19, out_$i20, out_$i10, out_vslice_dummy_var_19 := in_$p11, in_$p12, in_$i13, in_$p15, in_$i17, in_$i18, in_$i19, in_$i20, in_$i10, in_vslice_dummy_var_19;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  $bb10:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i17;
    goto $bb10_dummy;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i20 := $sgt.i32(out_$i19, out_$i17);
    goto corral_source_split_184;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.1, in_$p6);
    goto corral_source_split_182;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i10, 1);
    call {:si_unique_call 41} {:cexpr "ep"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_181;

  SeqInstr_18:
    goto corral_source_split_180;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} out_vslice_dummy_var_19 := s3c_hsotg_ep_disable(out_$p15);
    goto SeqInstr_17;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 144)), $mul.ref(0, 1));
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i10);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.1, out_$p11);
    goto corral_source_split_176;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p15, out_$i17, out_$i18, out_$i19, out_$i20, out_$i10, out_vslice_dummy_var_19 := s3c_hsotg_udc_stop_loop_$bb8(in_$p2, in_$p6, out_$p11, out_$p12, out_$i13, out_$p15, out_$i17, out_$i18, out_$i19, out_$i20, out_$i10, out_vslice_dummy_var_19);
    return;

  exit:
    return;
}



procedure s3c_hsotg_udc_stop_loop_$bb8(in_$p2: ref, in_$p6: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$i17: i32, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$i10: i32, in_vslice_dummy_var_19: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$i17: i32, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$i10: i32, out_vslice_dummy_var_19: i32);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $CurrAddr, $M.1, $M.15, $M.21, $M.12, $M.16, assertsPassed;



implementation kill_all_requests_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i4: i8, in_$i18: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p20: ref, in_$p21: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p20: ref, out_$p21: ref)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p20, out_$p21 := in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p20, in_$p21;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_449;

  $bb15:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$p20, out_$p21 := out_$p36, out_$p20;
    goto $bb15_dummy;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, in_$i18);
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_473;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p20, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p35, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_470;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.1, out_$p33);
    goto corral_source_split_469;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 112)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_468;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume !(out_$i31 == 1);
    goto corral_source_split_466;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i8.i1(in_$i4);
    goto corral_source_split_464;

  $bb9:
    assume out_$i30 == 1;
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_461;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_460;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.1, out_$p27);
    goto corral_source_split_459;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(126, 1));
    goto corral_source_split_458;

  $bb6:
    assume out_$i26 == 1;
    goto corral_source_split_457;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i64(out_$i24, out_$i25);
    goto corral_source_split_455;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_454;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_453;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, out_$p22);
    goto corral_source_split_452;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_36:
    goto corral_source_split_476;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} s3c_hsotg_complete_request(in_$p0, in_$p1, out_$p21, in_$i2);
    goto SeqInstr_35;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb8;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb8;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p20, out_$p21 := kill_all_requests_loop_$bb4(in_$p0, in_$p1, in_$i2, in_$i4, in_$i18, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p20, out_$p21);
    return;

  exit:
    return;
}



procedure kill_all_requests_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i4: i8, in_$i18: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p20: ref, in_$p21: ref) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p20: ref, out_$p21: ref);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.12, $M.16, $M.15, $M.21, assertsPassed;



implementation arch_local_irq_restore_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_restore_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_restore_loop_$bb3();



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation arch_local_irq_disable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_disable_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_disable_loop_$bb3();



implementation s3c_hsotg_txfifo_flush_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_vslice_dummy_var_29: i32) returns (out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_vslice_dummy_var_29: i32)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_vslice_dummy_var_29 := in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_vslice_dummy_var_29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := out_$i22, out_$i15;
    goto $bb11_dummy;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 0);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i32(out_$i22, 32);
    goto corral_source_split_806;

  SeqInstr_60:
    call {:si_unique_call 229} {:cexpr "tmp"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_805;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} out_$i22 := readl(out_$p21);
    goto SeqInstr_59;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p20, $mul.ref(16, 1));
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.1, in_$p7);
    goto corral_source_split_803;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} __const_udelay(4295);
    goto corral_source_split_802;

  $bb9:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} out_vslice_dummy_var_29 := dev_err.ref.ref.ref.i32(out_$p18, .str.33, .str.34, out_$i13);
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_798;

  $bb8:
    assume out_$i16 == 1;
    goto corral_source_split_797;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 0);
    goto corral_source_split_795;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i14, 1);
    call {:si_unique_call 225} {:cexpr "timeout"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_794;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_vslice_dummy_var_29 := s3c_hsotg_txfifo_flush_loop_$bb4(in_$p0, in_$p7, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_vslice_dummy_var_29);
    return;

  exit:
    return;
}



procedure s3c_hsotg_txfifo_flush_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_vslice_dummy_var_29: i32) returns (out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_vslice_dummy_var_29: i32);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_disconnect_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$i10: i32, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$i10: i32, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb6_dummy;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$i13 := $ugt.i32(out_$i12, out_$i10);
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i8($M.1, in_$p1);
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i5, 1);
    call {:si_unique_call 475} {:cexpr "ep"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2246;

  SeqInstr_165:
    goto corral_source_split_2245;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} kill_all_requests(in_$p0, out_$p9, $sub.i32(0, 108), 1);
    goto SeqInstr_164;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p7, $mul.ref(out_$i8, 144));
    goto corral_source_split_2244;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i32.i64(out_$i5);
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.1, out_$p6);
    goto corral_source_split_2242;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i5 := s3c_hsotg_disconnect_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i5);
    return;

  exit:
    return;
}



procedure s3c_hsotg_disconnect_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$i10: i32, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$i10: i32, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$i5: i32);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $CurrAddr, $M.15, $M.21, $M.12, $M.16, assertsPassed;



implementation s3c_hsotg_corereset_loop_$bb18(in_$p51: ref, in_$i57: i32, in_$i55: i32, in_$i56: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i1) returns (out_$i57: i32, out_$i55: i32, out_$i56: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i1)
{

  entry:
    out_$i57, out_$i55, out_$i56, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66 := in_$i57, in_$i55, in_$i56, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb26:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i55, out_$i56 := out_$i65, out_$i64;
    goto $bb26_dummy;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i64;
    assume true;
    goto $bb26;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i55, 0);
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$i65 := $sub.i32(out_$i55, 1);
    call {:si_unique_call 496} {:cexpr "timeout"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_2367;

  SeqInstr_177:
    call {:si_unique_call 495} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_2366;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} out_$i64 := readl(out_$p63);
    goto SeqInstr_176;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p62, $mul.ref(16, 1));
    goto corral_source_split_2365;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.1, in_$p51);
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i61 == 1;
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i61 := $sge.i32(out_$i56, 0);
    goto corral_source_split_2360;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i57, out_$i55, out_$i56, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66 := s3c_hsotg_corereset_loop_$bb18(in_$p51, out_$i57, out_$i55, out_$i56, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66);
    return;

  exit:
    return;
}



procedure s3c_hsotg_corereset_loop_$bb18(in_$p51: ref, in_$i57: i32, in_$i55: i32, in_$i56: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i1) returns (out_$i57: i32, out_$i55: i32, out_$i56: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i1);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_corereset_loop_$bb7(in_$p25: ref, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i32: i32, in_$i33: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i40: i32) returns (out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i32: i32, out_$i33: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i40: i32)
{

  entry:
    out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i32, out_$i33, out_$i41, out_$i42, out_$i43, out_$i40 := in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i32, in_$i33, in_$i41, in_$i42, in_$i43, in_$i40;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2324;

  $bb9:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i37, out_$i34;
    goto $bb9_dummy;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i37;
    assume true;
    goto $bb9;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, 1);
    goto corral_source_split_2332;

  SeqInstr_171:
    call {:si_unique_call 489} {:cexpr "grstctl"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_2331;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} out_$i37 := readl(out_$p36);
    goto SeqInstr_170;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p35, $mul.ref(16, 1));
    goto corral_source_split_2330;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.1, in_$p25);
    goto corral_source_split_2329;

  $bb8:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2328;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    out_$i34, out_$i43 := out_$i41, out_$i32;
    assume true;
    goto $bb8;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    out_$i42 := $sgt.i32(out_$i33, 0);
    goto corral_source_split_2326;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i33, 1);
    call {:si_unique_call 487} {:cexpr "timeout"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_2325;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i32, out_$i33, out_$i41, out_$i42, out_$i43, out_$i40 := s3c_hsotg_corereset_loop_$bb7(in_$p25, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i32, out_$i33, out_$i41, out_$i42, out_$i43, out_$i40);
    return;

  exit:
    return;
}



procedure s3c_hsotg_corereset_loop_$bb7(in_$p25: ref, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i32: i32, in_$i33: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i40: i32) returns (out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i32: i32, out_$i33: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i40: i32);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_init_fifo_loop_$bb8(in_$p0: ref, in_$p14: ref, in_$i23: i32, in_$i21: i32, in_$i22: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_vslice_dummy_var_66: i32) returns (out_$i23: i32, out_$i21: i32, out_$i22: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_vslice_dummy_var_66: i32)
{

  entry:
    out_$i23, out_$i21, out_$i22, out_$i24, out_$i25, out_$p26, out_$p27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_vslice_dummy_var_66 := in_$i23, in_$i21, in_$i22, in_$i24, in_$i25, in_$p26, in_$p27, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_vslice_dummy_var_66;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i21, out_$i22 := out_$i31, out_$i24;
    goto $bb15_dummy;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i24;
    assume true;
    goto $bb15;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 0);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 48);
    goto corral_source_split_2470;

  SeqInstr_183:
    call {:si_unique_call 514} {:cexpr "val"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2469;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} out_$i31 := readl(out_$p30);
    goto SeqInstr_182;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p29, $mul.ref(16, 1));
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.1, in_$p14);
    goto corral_source_split_2467;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} __const_udelay(4295);
    goto corral_source_split_2466;

  $bb13:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} out_vslice_dummy_var_66 := dev_err.ref.ref.ref.i32(out_$p27, .str.151, .str.152, out_$i21);
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.1, out_$p26);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_2462;

  $bb12:
    assume out_$i25 == 1;
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_2459;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i22, 1);
    call {:si_unique_call 510} {:cexpr "timeout"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2458;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i23, out_$i21, out_$i22, out_$i24, out_$i25, out_$p26, out_$p27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_vslice_dummy_var_66 := s3c_hsotg_init_fifo_loop_$bb8(in_$p0, in_$p14, out_$i23, out_$i21, out_$i22, out_$i24, out_$i25, out_$p26, out_$p27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_vslice_dummy_var_66);
    return;

  exit:
    return;
}



procedure s3c_hsotg_init_fifo_loop_$bb8(in_$p0: ref, in_$p14: ref, in_$i23: i32, in_$i21: i32, in_$i22: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_vslice_dummy_var_66: i32) returns (out_$i23: i32, out_$i21: i32, out_$i22: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_vslice_dummy_var_66: i32);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation on_list_loop_$bb4(in_$p1: ref, in_$i15: i64, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p17: ref, in_$p18: ref) returns (out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p17: ref, out_$p18: ref)
{

  entry:
    out_$i19, out_$i20, out_$i21, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p17, out_$p18 := in_$i19, in_$i20, in_$i21, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p17, in_$p18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4030;

  $bb10:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p17, out_$p18 := out_$p27, out_$p17;
    goto $bb10_dummy;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, in_$i15);
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p17, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_4044;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p26, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_4043;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_4042;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.20, out_$p24);
    goto corral_source_split_4041;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 112)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_4040;

  $bb7:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i19, out_$i20);
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_4033;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i21, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p17, out_$p18 := on_list_loop_$bb4(in_$p1, in_$i15, out_$i19, out_$i20, out_$i21, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p17, out_$p18);
    return;

  exit:
    return;
}



procedure on_list_loop_$bb4(in_$p1: ref, in_$i15: i64, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p17: ref, in_$p18: ref) returns (out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p17: ref, out_$p18: ref);



implementation ep_show_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i91: i64, in_$i95: i32, in_$i96: i1, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i64, in_$i102: i1, in_$i103: i32, in_$p105: ref, in_$i106: i32, in_$p108: ref, in_$p109: ref, in_$p112: ref, in_$i113: i32, in_$p115: ref, in_$i116: i32, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i93: i32, in_$p94: ref, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i32) returns (out_$i95: i32, out_$i96: i1, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i64, out_$i102: i1, out_$i103: i32, out_$p105: ref, out_$i106: i32, out_$p108: ref, out_$p109: ref, out_$p112: ref, out_$i113: i32, out_$p115: ref, out_$i116: i32, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i93: i32, out_$p94: ref, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i32)
{

  entry:
    out_$i95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$p108, out_$p109, out_$p112, out_$i113, out_$p115, out_$i116, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i93, out_$p94, out_vslice_dummy_var_183, out_vslice_dummy_var_184 := in_$i95, in_$i96, in_$p98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p105, in_$i106, in_$p108, in_$p109, in_$p112, in_$i113, in_$p115, in_$i116, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$i124, in_$i125, in_$i93, in_$p94, in_vslice_dummy_var_183, in_vslice_dummy_var_184;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4590;

  $bb10:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i93, out_$p94 := out_$i95, out_$p122;
    goto $bb10_dummy;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i64(out_$i124, in_$i91);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    out_$i124 := $p2i.ref.i64(out_$p123);
    goto corral_source_split_4622;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p121, $mul.ref($sub.ref(0, 88), 112)), $mul.ref(88, 1));
    goto corral_source_split_4621;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref(out_$p121, $mul.ref($sub.ref(0, 88), 112));
    goto corral_source_split_4620;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    out_$p121 := $bitcast.ref.ref(out_$p120);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.1, out_$p119);
    goto corral_source_split_4618;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 112)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} out_vslice_dummy_var_184 := seq_printf.ref.ref.i32.i32(in_$p0, .str.213, out_$i113, out_$i116);
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.1, out_$p115);
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.1, out_$p112);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} out_vslice_dummy_var_183 := seq_printf.ref.ref.i32.ref.i32.ref(in_$p0, .str.212, out_$i103, out_$p94, out_$i106, out_$p109);
    goto corral_source_split_4611;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.1, out_$p108);
    goto corral_source_split_4610;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4609;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.1, out_$p105);
    goto corral_source_split_4608;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4607;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    out_$i103 := (if out_$i102 == 1 then 42 else 32);
    goto corral_source_split_4606;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i64(out_$i100, out_$i101);
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p94);
    goto corral_source_split_4604;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.i64(out_$p99);
    goto corral_source_split_4603;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.1, out_$p98);
    goto corral_source_split_4602;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p4, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_4601;

  $bb7:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i95, 0);
    goto corral_source_split_4593;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i32(out_$i93, 1);
    call {:si_unique_call 1059} {:cexpr "show_limit"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$p108, out_$p109, out_$p112, out_$i113, out_$p115, out_$i116, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i93, out_$p94, out_vslice_dummy_var_183, out_vslice_dummy_var_184 := ep_show_loop_$bb4(in_$p0, in_$p4, in_$i91, out_$i95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$i106, out_$p108, out_$p109, out_$p112, out_$i113, out_$p115, out_$i116, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i93, out_$p94, out_vslice_dummy_var_183, out_vslice_dummy_var_184);
    return;

  exit:
    return;
}



procedure ep_show_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i91: i64, in_$i95: i32, in_$i96: i1, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i64, in_$i102: i1, in_$i103: i32, in_$p105: ref, in_$i106: i32, in_$p108: ref, in_$p109: ref, in_$p112: ref, in_$i113: i32, in_$p115: ref, in_$i116: i32, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i93: i32, in_$p94: ref, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i32) returns (out_$i95: i32, out_$i96: i1, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i64, out_$i102: i1, out_$i103: i32, out_$p105: ref, out_$i106: i32, out_$p108: ref, out_$p109: ref, out_$p112: ref, out_$i113: i32, out_$p115: ref, out_$i116: i32, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i93: i32, out_$p94: ref, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i32);



implementation s3c_hsotg_probe_loop_$bb60(in_$p7: ref, in_$p162: ref, in_$p167: ref, in_$p168: ref, in_$i169: i64, in_$p170: ref, in_$i171: i32, in_$i172: i8, in_$i173: i32, in_$i174: i1, in_$i166: i32) returns (out_$p167: ref, out_$p168: ref, out_$i169: i64, out_$p170: ref, out_$i171: i32, out_$i172: i8, out_$i173: i32, out_$i174: i1, out_$i166: i32)
{

  entry:
    out_$p167, out_$p168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i166 := in_$p167, in_$p168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i166;
    goto $bb60, exit;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_4875;

  $bb62:
    assume out_$i174 == 1;
    assume {:verifier.code 0} true;
    out_$i166 := out_$i171;
    goto $bb62_dummy;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    out_$i174 := $sgt.i32(out_$i173, out_$i171);
    goto corral_source_split_4885;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    out_$i173 := $zext.i8.i32(out_$i172);
    goto corral_source_split_4884;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i8($M.1, in_$p162);
    goto corral_source_split_4883;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    out_$i171 := $add.i32(out_$i166, 1);
    call {:si_unique_call 1126} {:cexpr "epnum"} boogie_si_record_i32(out_$i171);
    goto corral_source_split_4882;

  SeqInstr_618:
    goto corral_source_split_4881;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} s3c_hsotg_initep(in_$p7, out_$p170, out_$i166);
    goto SeqInstr_617;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref(out_$p168, $mul.ref(out_$i169, 144));
    goto corral_source_split_4880;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    out_$i169 := $sext.i32.i64(out_$i166);
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    out_$p168 := $load.ref($M.1, out_$p167);
    goto corral_source_split_4878;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p7, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb62_dummy:
    call {:si_unique_call 1} out_$p167, out_$p168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i166 := s3c_hsotg_probe_loop_$bb60(in_$p7, in_$p162, out_$p167, out_$p168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i166);
    return;

  exit:
    return;
}



procedure s3c_hsotg_probe_loop_$bb60(in_$p7: ref, in_$p162: ref, in_$p167: ref, in_$p168: ref, in_$i169: i64, in_$p170: ref, in_$i171: i32, in_$i172: i8, in_$i173: i32, in_$i174: i1, in_$i166: i32) returns (out_$p167: ref, out_$p168: ref, out_$i169: i64, out_$p170: ref, out_$i171: i32, out_$i172: i8, out_$i173: i32, out_$i174: i1, out_$i166: i32);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $M.15, $M.21, $CurrAddr, assertsPassed, $M.12, $M.16;



implementation s3c_hsotg_suspend_loop_$bb9(in_$p5: ref, in_$p25: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i36: i32, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$i29: i32, in_vslice_dummy_var_205: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i36: i32, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$i29: i32, out_vslice_dummy_var_205: i32)
{

  entry:
    out_$p30, out_$p31, out_$i32, out_$p34, out_$i36, out_$i37, out_$i38, out_$i39, out_$i29, out_vslice_dummy_var_205 := in_$p30, in_$p31, in_$i32, in_$p34, in_$i36, in_$i37, in_$i38, in_$i39, in_$i29, in_vslice_dummy_var_205;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4978;

  $bb11:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i36;
    goto $bb11_dummy;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$i39 := $sgt.i32(out_$i38, out_$i36);
    goto corral_source_split_4989;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.1, in_$p25);
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i29, 1);
    call {:si_unique_call 1150} {:cexpr "ep"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_4986;

  SeqInstr_636:
    goto corral_source_split_4985;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} out_vslice_dummy_var_205 := s3c_hsotg_ep_disable(out_$p34);
    goto SeqInstr_635;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 144)), $mul.ref(0, 1));
    goto corral_source_split_4984;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    goto corral_source_split_4983;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i29);
    goto corral_source_split_4982;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.1, out_$p30);
    goto corral_source_split_4981;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$i32, out_$p34, out_$i36, out_$i37, out_$i38, out_$i39, out_$i29, out_vslice_dummy_var_205 := s3c_hsotg_suspend_loop_$bb9(in_$p5, in_$p25, out_$p30, out_$p31, out_$i32, out_$p34, out_$i36, out_$i37, out_$i38, out_$i39, out_$i29, out_vslice_dummy_var_205);
    return;

  exit:
    return;
}



procedure s3c_hsotg_suspend_loop_$bb9(in_$p5: ref, in_$p25: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i36: i32, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$i29: i32, in_vslice_dummy_var_205: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i36: i32, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$i29: i32, out_vslice_dummy_var_205: i32);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $CurrAddr, $M.1, $M.15, $M.21, $M.12, $M.16, assertsPassed;



implementation s3c_hsotg_delete_debug_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5047;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i12;
    goto $bb6_dummy;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    out_$i15 := $ugt.i32(out_$i14, out_$i12);
    goto corral_source_split_5059;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_5058;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.1, in_$p1);
    goto corral_source_split_5057;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1163} {:cexpr "epidx"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_5056;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} debugfs_remove(out_$p11);
    goto corral_source_split_5055;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.1, out_$p10);
    goto corral_source_split_5054;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 144)), $mul.ref(96, 1));
    goto corral_source_split_5053;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    goto corral_source_split_5052;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i32.i64(out_$i5);
    goto corral_source_split_5051;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.1, out_$p6);
    goto corral_source_split_5050;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_5049;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5 := s3c_hsotg_delete_debug_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5);
    return;

  exit:
    return;
}



procedure s3c_hsotg_delete_debug_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i5: i32);



implementation s3c_hsotg_create_debug_loop_$bb14(in_$p0: ref, in_$p4: ref, in_$p37: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i62: i32, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i41: i32, in_vslice_dummy_var_215: i32) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i62: i32, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i41: i32, out_vslice_dummy_var_215: i32)
{

  entry:
    out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i62, out_$i63, out_$i64, out_$i65, out_$i41, out_vslice_dummy_var_215 := in_$p42, in_$p43, in_$i44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60, in_$i62, in_$i63, in_$i64, in_$i65, in_$i41, in_vslice_dummy_var_215;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5430;

  $bb19:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := out_$i62;
    goto $bb19_dummy;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    out_$i65 := $ugt.i32(out_$i64, out_$i62);
    goto corral_source_split_5459;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i32(out_$i63);
    goto corral_source_split_5458;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.1, in_$p37);
    goto corral_source_split_5457;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i41, 1);
    call {:si_unique_call 1261} {:cexpr "epidx"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_5456;

  $bb17:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} out_vslice_dummy_var_215 := dev_err.ref.ref.ref(out_$p58, .str.188, out_$p60);
    goto corral_source_split_5454;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_5453;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 144)), $mul.ref(131, 1));
    goto corral_source_split_5452;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.1, out_$p57);
    goto corral_source_split_5451;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1848)), $mul.ref(0, 1));
    goto corral_source_split_5450;

  $bb16:
    assume out_$i56 == 1;
    goto corral_source_split_5449;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i8.i1(out_$i55);
    goto corral_source_split_5447;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i1.i8(out_$i54);
    call {:si_unique_call 1259} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i55);
    goto corral_source_split_5446;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} out_$i54 := IS_ERR(out_$p53);
    goto corral_source_split_5445;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_5444;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.1, out_$p51);
    goto corral_source_split_5443;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 144)), $mul.ref(96, 1));
    goto corral_source_split_5442;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p50, out_$p49);
    goto corral_source_split_5441;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 144)), $mul.ref(96, 1));
    goto corral_source_split_5440;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} out_$p49 := debugfs_create_file(out_$p47, 292, in_$p4, out_$p48, ep_fops);
    goto corral_source_split_5439;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_5438;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_5437;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 144)), $mul.ref(131, 1));
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p43, $mul.ref(out_$i44, 144));
    goto corral_source_split_5435;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i32.i64(out_$i41);
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.1, out_$p42);
    goto corral_source_split_5433;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_5432;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i62, out_$i63, out_$i64, out_$i65, out_$i41, out_vslice_dummy_var_215 := s3c_hsotg_create_debug_loop_$bb14(in_$p0, in_$p4, in_$p37, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i62, out_$i63, out_$i64, out_$i65, out_$i41, out_vslice_dummy_var_215);
    return;

  exit:
    return;
}



procedure s3c_hsotg_create_debug_loop_$bb14(in_$p0: ref, in_$p4: ref, in_$p37: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i62: i32, in_$i63: i8, in_$i64: i32, in_$i65: i1, in_$i41: i32, in_vslice_dummy_var_215: i32) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i62: i32, out_$i63: i8, out_$i64: i32, out_$i65: i1, out_$i41: i32, out_vslice_dummy_var_215: i32);
  modifies $M.1;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i32, in_$i9: i64, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i32, in_$p17: ref, in_$i18: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i32, in_$i24: i32, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i32, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$i156: i32, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i1, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$i198: i32, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i32, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i1, in_$i210: i1, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$p214: ref, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$p229: ref, in_$i230: i32, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$i239: i1, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$p250: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$p259: ref, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: ref, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i64, in_vslice_dummy_var_287: i64, in_vslice_dummy_var_288: i32, in_vslice_dummy_var_289: i32, in_vslice_dummy_var_290: i32, in_vslice_dummy_var_291: i64, in_vslice_dummy_var_292: i64, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i64, in_vslice_dummy_var_295: i64, in_vslice_dummy_var_296: i32, in_vslice_dummy_var_297: i32, in_vslice_dummy_var_298: i32, in_vslice_dummy_var_299: i32) returns (out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i32, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$i156: i32, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i1, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$i198: i32, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i32, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i1, out_$i210: i1, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$p214: ref, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$p229: ref, out_$i230: i32, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$i239: i1, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$p250: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$p259: ref, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: ref, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i64, out_vslice_dummy_var_287: i64, out_vslice_dummy_var_288: i32, out_vslice_dummy_var_289: i32, out_vslice_dummy_var_290: i32, out_vslice_dummy_var_291: i64, out_vslice_dummy_var_292: i64, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i64, out_vslice_dummy_var_295: i64, out_vslice_dummy_var_296: i32, out_vslice_dummy_var_297: i32, out_vslice_dummy_var_298: i32, out_vslice_dummy_var_299: i32)
{

  entry:
    out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i66, out_$i67, out_$p68, out_$i69, out_$i71, out_$i72, out_$p73, out_$i75, out_$i76, out_$p77, out_$p78, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$p182, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i194, out_$i195, out_$p196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p214, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$p245, out_$i247, out_$i248, out_$p249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$p259, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297, out_vslice_dummy_var_298, out_vslice_dummy_var_299 := in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p58, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i66, in_$i67, in_$p68, in_$i69, in_$i71, in_$i72, in_$p73, in_$i75, in_$i76, in_$p77, in_$p78, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$p91, in_$i93, in_$i94, in_$i95, in_$i96, in_$p97, in_$i99, in_$i100, in_$p101, in_$i103, in_$i104, in_$p105, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$p122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$p138, in_$i140, in_$i141, in_$i142, in_$i143, in_$p144, in_$i146, in_$i147, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$p181, in_$p182, in_$i184, in_$i185, in_$i186, in_$i187, in_$p188, in_$i190, in_$i191, in_$p192, in_$i194, in_$i195, in_$p196, in_$p197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$p213, in_$p214, in_$i216, in_$i217, in_$i218, in_$i219, in_$p220, in_$i222, in_$i223, in_$p224, in_$i226, in_$i227, in_$p228, in_$p229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$p245, in_$i247, in_$i248, in_$p249, in_$p250, in_$i252, in_$i253, in_$p254, in_$i256, in_$i257, in_$p258, in_$p259, in_vslice_dummy_var_279, in_vslice_dummy_var_280, in_vslice_dummy_var_281, in_vslice_dummy_var_282, in_vslice_dummy_var_283, in_vslice_dummy_var_284, in_vslice_dummy_var_285, in_vslice_dummy_var_286, in_vslice_dummy_var_287, in_vslice_dummy_var_288, in_vslice_dummy_var_289, in_vslice_dummy_var_290, in_vslice_dummy_var_291, in_vslice_dummy_var_292, in_vslice_dummy_var_293, in_vslice_dummy_var_294, in_vslice_dummy_var_295, in_vslice_dummy_var_296, in_vslice_dummy_var_297, in_vslice_dummy_var_298, in_vslice_dummy_var_299;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1556} out_$i28 := __VERIFIER_nondet_int();
    call {:si_unique_call 1557} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i28);
    call {:si_unique_call 1558} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i28);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb65_dummy;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb21:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6053;

  SeqInstr_1056:
    goto corral_source_split_6052;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} out_vslice_dummy_var_279 := s3c_hsotg_ep_disable(out_$p50);
    goto SeqInstr_1055;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    out_$p50 := $M.28;
    goto corral_source_split_6051;

  $bb40:
    assume out_$i49 == 1;
    goto corral_source_split_6050;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 1);
    goto corral_source_split_6048;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    out_$i48 := $M.36;
    goto corral_source_split_6047;

  $bb38:
    assume out_$i47 == 1;
    goto corral_source_split_6046;

  $bb34:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb23:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i39, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_6020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1559} out_$i39 := __VERIFIER_nondet_int();
    call {:si_unique_call 1560} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i39);
    call {:si_unique_call 1561} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i39);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i38 == 1;
    goto corral_source_split_6020;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$i37 := $M.36;
    goto corral_source_split_6017;

  $bb18:
    assume out_$i36 == 1;
    goto corral_source_split_6016;

  $bb14:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i28, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i28, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i28, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb45:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6059;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} s3c_hsotg_ep_free_request(out_$p54, out_$p55);
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$p55 := $M.29;
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$p54 := $M.28;
    goto corral_source_split_6056;

  $bb44:
    assume out_$i53 == 1;
    goto corral_source_split_6055;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 1);
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$i52 := $M.36;
    goto corral_source_split_6039;

  $bb36:
    assume out_$i46 == 1;
    goto corral_source_split_6038;

  $bb35:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i39, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb48:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6064;

  SeqInstr_1059:
    goto corral_source_split_6063;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} out_vslice_dummy_var_280 := s3c_hsotg_ep_sethalt_lock(out_$p58, in_$i3);
    goto SeqInstr_1058;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$p58 := $M.28;
    goto corral_source_split_6062;

  $bb47:
    assume out_$i57 == 1;
    goto corral_source_split_6061;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 1);
    goto corral_source_split_6044;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    out_$i56 := $M.36;
    goto corral_source_split_6043;

  $bb37:
    assume !(out_$i46 == 1);
    goto corral_source_split_6042;

  $bb51:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6071;

  SeqInstr_1062:
    goto corral_source_split_6070;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} out_vslice_dummy_var_281 := s3c_hsotg_ep_queue_lock(out_$p62, out_$p63, out_$i64);
    goto SeqInstr_1061;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.34, in_$p1);
    goto corral_source_split_6069;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$p63 := $M.29;
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    out_$p62 := $M.28;
    goto corral_source_split_6067;

  $bb50:
    assume out_$i61 == 1;
    goto corral_source_split_6066;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 1);
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$i60 := $M.36;
    goto corral_source_split_6031;

  $bb32:
    assume out_$i44 == 1;
    goto corral_source_split_6030;

  $bb25:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i39, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb24:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i39, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb54:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6077;

  SeqInstr_1065:
    goto corral_source_split_6076;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} out_vslice_dummy_var_282 := s3c_hsotg_ep_alloc_request(out_$p68, out_$i69);
    goto SeqInstr_1064;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.33, in_$p0);
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    out_$p68 := $M.28;
    goto corral_source_split_6074;

  $bb53:
    assume out_$i67 == 1;
    goto corral_source_split_6073;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 1);
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$i66 := $M.36;
    goto corral_source_split_6035;

  $bb33:
    assume !(out_$i44 == 1);
    goto corral_source_split_6034;

  $bb57:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6082;

  SeqInstr_1068:
    goto corral_source_split_6081;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} out_vslice_dummy_var_283 := s3c_hsotg_ep_enable(out_$p73, in_$p5);
    goto SeqInstr_1067;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    out_$p73 := $M.28;
    goto corral_source_split_6080;

  $bb56:
    assume out_$i72 == 1;
    goto corral_source_split_6079;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 1);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    out_$i71 := $M.36;
    goto corral_source_split_6023;

  $bb27:
    assume out_$i42 == 1;
    goto corral_source_split_6022;

  $bb26:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i39, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb60:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6088;

  SeqInstr_1071:
    goto corral_source_split_6087;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} out_vslice_dummy_var_284 := s3c_hsotg_ep_dequeue(out_$p77, out_$p78);
    goto SeqInstr_1070;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$p78 := $M.29;
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$p77 := $M.28;
    goto corral_source_split_6085;

  $bb59:
    assume out_$i76 == 1;
    goto corral_source_split_6084;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 1);
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$i75 := $M.36;
    goto corral_source_split_6027;

  $bb29:
    assume out_$i43 == 1;
    goto corral_source_split_6026;

  $bb28:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i39, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} ldv_stop();
    goto corral_source_split_6090;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb31;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb31;

  $bb67:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $M.39 := out_$i94;
    call {:si_unique_call 1582} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    out_$i94 := $sub.i32(out_$i93, 1);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$i93 := $M.39;
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} out_vslice_dummy_var_285 := single_release(out_$p90, out_$p91);
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$p91 := $M.32;
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$p90 := $M.31;
    goto corral_source_split_6111;

  $bb80:
    assume out_$i89 == 1;
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 2);
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$i88 := $M.37;
    goto corral_source_split_6107;

  $bb78:
    assume out_$i87 == 1;
    goto corral_source_split_6106;

  $bb76:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i82, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb69:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i82, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i82, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_6092:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1577} out_$i82 := __VERIFIER_nondet_int();
    call {:si_unique_call 1578} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i82);
    call {:si_unique_call 1579} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i82);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume out_$i81 == 1;
    goto corral_source_split_6092;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i80, 0);
    goto corral_source_split_6010;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    out_$i80 := $M.37;
    goto corral_source_split_6009;

  $bb16:
    assume out_$i35 == 1;
    goto corral_source_split_6008;

  $bb15:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i28, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb85:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} out_vslice_dummy_var_286 := seq_read(out_$p97, in_$p6, in_$i7, in_$p11);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$p97 := $M.32;
    goto corral_source_split_6120;

  $bb84:
    assume out_$i96 == 1;
    goto corral_source_split_6119;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 2);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$i95 := $M.37;
    goto corral_source_split_6103;

  $bb77:
    assume !(out_$i86 == 1);
    goto corral_source_split_6102;

  $bb88:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} out_vslice_dummy_var_287 := seq_lseek(out_$p101, in_$i9, in_$i8);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    out_$p101 := $M.32;
    goto corral_source_split_6125;

  $bb87:
    assume out_$i100 == 1;
    goto corral_source_split_6124;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 2);
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$i99 := $M.37;
    goto corral_source_split_6095;

  $bb71:
    assume out_$i84 == 1;
    goto corral_source_split_6094;

  $bb70:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i82, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb91:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb93:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $M.39 := out_$i111;
    call {:si_unique_call 1590} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i110, 1);
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$i110 := $M.39;
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6138;

  $bb92:
    assume out_$i109 == 1;
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 0);
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$i108 := $M.45;
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $M.45 := out_$i107;
    call {:si_unique_call 1588} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} out_$i107 := state_open(out_$p105, out_$p106);
    goto corral_source_split_6132;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    out_$p106 := $M.32;
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$p105 := $M.31;
    goto corral_source_split_6130;

  $bb90:
    assume out_$i104 == 1;
    goto corral_source_split_6129;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 1);
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    out_$i103 := $M.37;
    goto corral_source_split_6099;

  $bb73:
    assume out_$i85 == 1;
    goto corral_source_split_6098;

  $bb72:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i82, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} ldv_stop();
    goto corral_source_split_6143;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i85 == 1);
    goto $bb75;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(out_$i87 == 1);
    goto $bb75;

  $bb100:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb114:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb116:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $M.39 := out_$i127;
    call {:si_unique_call 1598} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i127);
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i127 := $add.i32(out_$i126, 1);
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i126 := $M.39;
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1597} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6171;

  $bb115:
    assume out_$i125 == 1;
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 0);
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$i124 := $M.46;
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $M.46 := out_$i123;
    call {:si_unique_call 1596} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_6166;

  SeqInstr_1074:
    goto corral_source_split_6165;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} out_$i123 := s3c_hsotg_probe(out_$p122);
    goto SeqInstr_1073;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$p122 := $M.30;
    goto corral_source_split_6164;

  $bb113:
    assume out_$i121 == 1;
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 1);
    goto corral_source_split_6161;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$i120 := $M.38;
    goto corral_source_split_6160;

  $bb111:
    assume out_$i119 == 1;
    goto corral_source_split_6159;

  $bb109:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i114, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb102:
    assume out_$i115 == 1;
    assume {:verifier.code 0} true;
    out_$i118 := $slt.i32(out_$i114, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i114, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_6145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1592} out_$i114 := __VERIFIER_nondet_int();
    call {:si_unique_call 1593} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i114);
    call {:si_unique_call 1594} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i114);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb99:
    assume out_$i113 == 1;
    goto corral_source_split_6145;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    out_$i113 := $ne.i32(out_$i112, 0);
    goto corral_source_split_6014;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    out_$i112 := $M.38;
    goto corral_source_split_6013;

  $bb17:
    assume !(out_$i35 == 1);
    goto corral_source_split_6012;

  $bb121:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb123:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_6186;

  $bb122:
    assume out_$i135 == 1;
    goto corral_source_split_6185;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 0);
    goto corral_source_split_6183;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    out_$i134 := $M.47;
    goto corral_source_split_6182;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $M.47 := out_$i133;
    call {:si_unique_call 1600} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_6181;

  SeqInstr_1077:
    goto corral_source_split_6180;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} out_$i133 := s3c_hsotg_suspend(out_$p130, out_$i132);
    goto SeqInstr_1076;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.35, out_$p131);
    goto corral_source_split_6179;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6178;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    out_$p130 := $M.30;
    goto corral_source_split_6177;

  $bb120:
    assume out_$i129 == 1;
    goto corral_source_split_6176;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 2);
    goto corral_source_split_6157;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    out_$i128 := $M.38;
    goto corral_source_split_6156;

  $bb110:
    assume !(out_$i118 == 1);
    goto corral_source_split_6155;

  $bb130:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $M.39 := out_$i147;
    call {:si_unique_call 1607} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i147);
    goto corral_source_split_6205;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    out_$i147 := $sub.i32(out_$i146, 1);
    goto corral_source_split_6204;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    out_$i146 := $M.39;
    goto corral_source_split_6203;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1606} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6202;

  SeqInstr_1083:
    goto corral_source_split_6201;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} out_vslice_dummy_var_289 := s3c_hsotg_remove(out_$p144);
    goto SeqInstr_1082;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    out_$p144 := $M.30;
    goto corral_source_split_6200;

  $bb129:
    assume out_$i143 == 1;
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 2);
    goto corral_source_split_6197;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i142 := $M.38;
    goto corral_source_split_6196;

  $bb127:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $M.39 := out_$i141;
    call {:si_unique_call 1604} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_6194;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    out_$i141 := $sub.i32(out_$i140, 1);
    goto corral_source_split_6193;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    out_$i140 := $M.39;
    goto corral_source_split_6192;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1603} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6191;

  SeqInstr_1080:
    goto corral_source_split_6190;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} out_vslice_dummy_var_288 := s3c_hsotg_remove(out_$p138);
    goto SeqInstr_1079;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    out_$p138 := $M.30;
    goto corral_source_split_6189;

  $bb126:
    assume out_$i137 == 1;
    goto corral_source_split_6188;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 3);
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i136 := $M.38;
    goto corral_source_split_6148;

  $bb104:
    assume out_$i116 == 1;
    goto corral_source_split_6147;

  $bb103:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    out_$i116 := $slt.i32(out_$i114, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb133:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb135:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1610} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6215;

  $bb134:
    assume out_$i153 == 1;
    goto corral_source_split_6214;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 0);
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    out_$i152 := $M.48;
    goto corral_source_split_6211;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.48 := out_$i151;
    call {:si_unique_call 1609} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_6210;

  SeqInstr_1086:
    goto corral_source_split_6209;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} out_$i151 := s3c_hsotg_resume(out_$p150);
    goto SeqInstr_1085;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    out_$p150 := $M.30;
    goto corral_source_split_6208;

  $bb132:
    assume out_$i149 == 1;
    goto corral_source_split_6207;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 3);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i148 := $M.38;
    goto corral_source_split_6152;

  $bb106:
    assume out_$i117 == 1;
    goto corral_source_split_6151;

  $bb105:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i114, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} ldv_stop();
    goto corral_source_split_6217;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb107:
    assume {:verifier.code 0} true;
    assume !(out_$i117 == 1);
    goto $bb108;

  $bb112:
    assume {:verifier.code 0} true;
    assume !(out_$i119 == 1);
    goto $bb108;

  $bb142:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb152:
    assume {:verifier.code 0} true;
    assume !(out_$i161 == 1);
    goto $bb153;

  $bb155:
    assume {:verifier.code 0} true;
    assume !(out_$i163 == 1);
    goto $bb153;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 0);
    goto corral_source_split_6231;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    out_$i162 := $M.39;
    goto corral_source_split_6230;

  $bb151:
    assume out_$i161 == 1;
    goto corral_source_split_6229;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 3);
    goto corral_source_split_6227;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$i160 := $M.40;
    goto corral_source_split_6226;

  $bb149:
    assume out_$i159 == 1;
    goto corral_source_split_6225;

  $bb144:
    assume out_$i157 == 1;
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i156, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb143:
    assume {:verifier.code 0} true;
    out_$i157 := $slt.i32(out_$i156, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_6219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1612} out_$i156 := __VERIFIER_nondet_int();
    call {:si_unique_call 1613} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i156);
    call {:si_unique_call 1614} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i156);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb141:
    assume out_$i155 == 1;
    goto corral_source_split_6219;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$i155 := $ne.i32(out_$i154, 0);
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$i154 := $M.40;
    goto corral_source_split_6001;

  $bb12:
    assume out_$i33 == 1;
    goto corral_source_split_6000;

  $bb5:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i28, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i28, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb160:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb165:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    out_$i170 := $ne.i32(out_$i169, 0);
    goto corral_source_split_6259;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i169 := $M.49;
    goto corral_source_split_6258;

  $bb162:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} ldv_initialize_usb_ep_ops_6();
    goto corral_source_split_6256;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6255;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} ldv_file_operations_4();
    goto corral_source_split_6254;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6253;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_file_operations_3();
    goto corral_source_split_6252;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6251;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_file_operations_2();
    goto corral_source_split_6250;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6249;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} ldv_initialize_usb_gadget_ops_5();
    goto corral_source_split_6248;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6247;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1620} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6246;

  $bb161:
    assume out_$i168 == 1;
    goto corral_source_split_6245;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 0);
    goto corral_source_split_6243;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    out_$i167 := $M.49;
    goto corral_source_split_6242;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.49 := out_$i166;
    call {:si_unique_call 1619} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_6241;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} out_$i166 := s3c_hsotg_driver_init();
    goto corral_source_split_6240;

  $bb159:
    assume out_$i165 == 1;
    goto corral_source_split_6239;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 1);
    goto corral_source_split_6223;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    out_$i164 := $M.40;
    goto corral_source_split_6222;

  $bb146:
    assume out_$i158 == 1;
    goto corral_source_split_6221;

  $bb145:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i156, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} ldv_stop();
    goto corral_source_split_6264;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb147:
    assume {:verifier.code 0} true;
    assume !(out_$i158 == 1);
    goto $bb148;

  $bb150:
    assume {:verifier.code 0} true;
    assume !(out_$i159 == 1);
    goto $bb148;

  $bb172:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb186:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $M.39 := out_$i185;
    call {:si_unique_call 1638} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i185);
    goto corral_source_split_6291;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$i185 := $sub.i32(out_$i184, 1);
    goto corral_source_split_6290;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    out_$i184 := $M.39;
    goto corral_source_split_6289;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6288;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} out_vslice_dummy_var_290 := single_release(out_$p181, out_$p182);
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$p182 := $M.25;
    goto corral_source_split_6286;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    out_$p181 := $M.24;
    goto corral_source_split_6285;

  $bb185:
    assume out_$i180 == 1;
    goto corral_source_split_6284;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 2);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    out_$i179 := $M.41;
    goto corral_source_split_6281;

  $bb183:
    assume out_$i178 == 1;
    goto corral_source_split_6280;

  $bb181:
    assume out_$i177 == 1;
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i173, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb174:
    assume out_$i174 == 1;
    assume {:verifier.code 0} true;
    out_$i177 := $slt.i32(out_$i173, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb173:
    assume {:verifier.code 0} true;
    out_$i174 := $slt.i32(out_$i173, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_6266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1633} out_$i173 := __VERIFIER_nondet_int();
    call {:si_unique_call 1634} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i173);
    call {:si_unique_call 1635} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i173);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb171:
    assume out_$i172 == 1;
    goto corral_source_split_6266;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    out_$i172 := $ne.i32(out_$i171, 0);
    goto corral_source_split_6006;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    out_$i171 := $M.41;
    goto corral_source_split_6005;

  $bb13:
    assume !(out_$i33 == 1);
    goto corral_source_split_6004;

  $bb190:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1640} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6296;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} out_vslice_dummy_var_291 := seq_read(out_$p188, in_$p13, in_$i14, in_$p17);
    goto corral_source_split_6295;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    out_$p188 := $M.25;
    goto corral_source_split_6294;

  $bb189:
    assume out_$i187 == 1;
    goto corral_source_split_6293;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 2);
    goto corral_source_split_6278;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    out_$i186 := $M.41;
    goto corral_source_split_6277;

  $bb182:
    assume !(out_$i177 == 1);
    goto corral_source_split_6276;

  $bb193:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1642} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6301;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} out_vslice_dummy_var_292 := seq_lseek(out_$p192, in_$i12, in_$i15);
    goto corral_source_split_6300;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    out_$p192 := $M.25;
    goto corral_source_split_6299;

  $bb192:
    assume out_$i191 == 1;
    goto corral_source_split_6298;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 2);
    goto corral_source_split_6270;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    out_$i190 := $M.41;
    goto corral_source_split_6269;

  $bb176:
    assume out_$i175 == 1;
    goto corral_source_split_6268;

  $bb175:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    out_$i175 := $slt.i32(out_$i173, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb196:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb198:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $M.39 := out_$i202;
    call {:si_unique_call 1646} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i202);
    goto corral_source_split_6315;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    out_$i202 := $add.i32(out_$i201, 1);
    goto corral_source_split_6314;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    out_$i201 := $M.39;
    goto corral_source_split_6313;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6312;

  $bb197:
    assume out_$i200 == 1;
    goto corral_source_split_6311;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 0);
    goto corral_source_split_6309;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    out_$i199 := $M.50;
    goto corral_source_split_6308;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.50 := out_$i198;
    call {:si_unique_call 1644} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i198);
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} out_$i198 := fifo_open(out_$p196, out_$p197);
    goto corral_source_split_6306;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$p197 := $M.25;
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$p196 := $M.24;
    goto corral_source_split_6304;

  $bb195:
    assume out_$i195 == 1;
    goto corral_source_split_6303;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 1);
    goto corral_source_split_6274;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    out_$i194 := $M.41;
    goto corral_source_split_6273;

  $bb178:
    assume out_$i176 == 1;
    goto corral_source_split_6272;

  $bb177:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i173, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} ldv_stop();
    goto corral_source_split_6317;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb179:
    assume {:verifier.code 0} true;
    assume !(out_$i176 == 1);
    goto $bb180;

  $bb184:
    assume {:verifier.code 0} true;
    assume !(out_$i178 == 1);
    goto $bb180;

  $bb205:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb219:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.39 := out_$i217;
    call {:si_unique_call 1653} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i217);
    goto corral_source_split_6344;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    out_$i217 := $sub.i32(out_$i216, 1);
    goto corral_source_split_6343;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    out_$i216 := $M.39;
    goto corral_source_split_6342;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6341;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} out_vslice_dummy_var_293 := single_release(out_$p213, out_$p214);
    goto corral_source_split_6340;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    out_$p214 := $M.23;
    goto corral_source_split_6339;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    out_$p213 := $M.22;
    goto corral_source_split_6338;

  $bb218:
    assume out_$i212 == 1;
    goto corral_source_split_6337;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 2);
    goto corral_source_split_6335;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    out_$i211 := $M.42;
    goto corral_source_split_6334;

  $bb216:
    assume out_$i210 == 1;
    goto corral_source_split_6333;

  $bb214:
    assume out_$i209 == 1;
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i205, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb207:
    assume out_$i206 == 1;
    assume {:verifier.code 0} true;
    out_$i209 := $slt.i32(out_$i205, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb206:
    assume {:verifier.code 0} true;
    out_$i206 := $slt.i32(out_$i205, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_6319:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1648} out_$i205 := __VERIFIER_nondet_int();
    call {:si_unique_call 1649} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i205);
    call {:si_unique_call 1650} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i205);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb204:
    assume out_$i204 == 1;
    goto corral_source_split_6319;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$i204 := $ne.i32(out_$i203, 0);
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$i203 := $M.42;
    goto corral_source_split_5993;

  $bb7:
    assume out_$i31 == 1;
    goto corral_source_split_5992;

  $bb6:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i28, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb223:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6349;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} out_vslice_dummy_var_294 := seq_read(out_$p220, in_$p21, in_$i18, in_$p20);
    goto corral_source_split_6348;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    out_$p220 := $M.23;
    goto corral_source_split_6347;

  $bb222:
    assume out_$i219 == 1;
    goto corral_source_split_6346;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 2);
    goto corral_source_split_6331;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    out_$i218 := $M.42;
    goto corral_source_split_6330;

  $bb215:
    assume !(out_$i209 == 1);
    goto corral_source_split_6329;

  $bb226:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6354;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} out_vslice_dummy_var_295 := seq_lseek(out_$p224, in_$i22, in_$i23);
    goto corral_source_split_6353;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    out_$p224 := $M.23;
    goto corral_source_split_6352;

  $bb225:
    assume out_$i223 == 1;
    goto corral_source_split_6351;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 2);
    goto corral_source_split_6323;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$i222 := $M.42;
    goto corral_source_split_6322;

  $bb209:
    assume out_$i207 == 1;
    goto corral_source_split_6321;

  $bb208:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    out_$i207 := $slt.i32(out_$i205, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb229:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb231:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $M.39 := out_$i234;
    call {:si_unique_call 1661} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i234);
    goto corral_source_split_6368;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    out_$i234 := $add.i32(out_$i233, 1);
    goto corral_source_split_6367;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    out_$i233 := $M.39;
    goto corral_source_split_6366;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6365;

  $bb230:
    assume out_$i232 == 1;
    goto corral_source_split_6364;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i231, 0);
    goto corral_source_split_6362;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    out_$i231 := $M.51;
    goto corral_source_split_6361;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $M.51 := out_$i230;
    call {:si_unique_call 1659} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i230);
    goto corral_source_split_6360;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} out_$i230 := ep_open(out_$p228, out_$p229);
    goto corral_source_split_6359;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    out_$p229 := $M.23;
    goto corral_source_split_6358;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    out_$p228 := $M.22;
    goto corral_source_split_6357;

  $bb228:
    assume out_$i227 == 1;
    goto corral_source_split_6356;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 1);
    goto corral_source_split_6327;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    out_$i226 := $M.42;
    goto corral_source_split_6326;

  $bb211:
    assume out_$i208 == 1;
    goto corral_source_split_6325;

  $bb210:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i205, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_stop();
    goto corral_source_split_6370;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb212:
    assume {:verifier.code 0} true;
    assume !(out_$i208 == 1);
    goto $bb213;

  $bb217:
    assume {:verifier.code 0} true;
    assume !(out_$i210 == 1);
    goto $bb213;

  $bb238:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb252:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6393;

  SeqInstr_1089:
    goto corral_source_split_6392;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} out_vslice_dummy_var_296 := s3c_hsotg_pullup(out_$p245, in_$i24);
    goto SeqInstr_1088;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    out_$p245 := $M.27;
    goto corral_source_split_6391;

  $bb251:
    assume out_$i244 == 1;
    goto corral_source_split_6390;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i32(out_$i243, 1);
    goto corral_source_split_6388;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    out_$i243 := $M.43;
    goto corral_source_split_6387;

  $bb249:
    assume out_$i242 == 1;
    goto corral_source_split_6386;

  $bb247:
    assume out_$i241 == 1;
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i237, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb240:
    assume out_$i238 == 1;
    assume {:verifier.code 0} true;
    out_$i241 := $slt.i32(out_$i237, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb239:
    assume {:verifier.code 0} true;
    out_$i238 := $slt.i32(out_$i237, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_6372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1663} out_$i237 := __VERIFIER_nondet_int();
    call {:si_unique_call 1664} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i237);
    call {:si_unique_call 1665} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i237);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb237:
    assume out_$i236 == 1;
    goto corral_source_split_6372;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$i236 := $ne.i32(out_$i235, 0);
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    out_$i235 := $M.43;
    goto corral_source_split_5997;

  $bb9:
    assume out_$i32 == 1;
    goto corral_source_split_5996;

  $bb8:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i28, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb256:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1669} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6399;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} out_vslice_dummy_var_297 := s3c_hsotg_udc_start(out_$p249, out_$p250);
    goto corral_source_split_6398;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    out_$p250 := $M.26;
    goto corral_source_split_6397;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    out_$p249 := $M.27;
    goto corral_source_split_6396;

  $bb255:
    assume out_$i248 == 1;
    goto corral_source_split_6395;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 1);
    goto corral_source_split_6384;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    out_$i247 := $M.43;
    goto corral_source_split_6383;

  $bb248:
    assume !(out_$i241 == 1);
    goto corral_source_split_6382;

  $bb259:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6404;

  SeqInstr_1092:
    goto corral_source_split_6403;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} out_vslice_dummy_var_298 := s3c_hsotg_gadget_getframe(out_$p254);
    goto SeqInstr_1091;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    out_$p254 := $M.27;
    goto corral_source_split_6402;

  $bb258:
    assume out_$i253 == 1;
    goto corral_source_split_6401;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 1);
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    out_$i252 := $M.43;
    goto corral_source_split_6375;

  $bb242:
    assume out_$i239 == 1;
    goto corral_source_split_6374;

  $bb241:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    out_$i239 := $slt.i32(out_$i237, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb262:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6410;

  SeqInstr_1095:
    goto corral_source_split_6409;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} out_vslice_dummy_var_299 := s3c_hsotg_udc_stop(out_$p258, out_$p259);
    goto SeqInstr_1094;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    out_$p259 := $M.26;
    goto corral_source_split_6408;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    out_$p258 := $M.27;
    goto corral_source_split_6407;

  $bb261:
    assume out_$i257 == 1;
    goto corral_source_split_6406;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 1);
    goto corral_source_split_6380;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    out_$i256 := $M.43;
    goto corral_source_split_6379;

  $bb244:
    assume out_$i240 == 1;
    goto corral_source_split_6378;

  $bb243:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i237, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} ldv_stop();
    goto corral_source_split_6412;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb245:
    assume {:verifier.code 0} true;
    assume !(out_$i240 == 1);
    goto $bb246;

  $bb250:
    assume {:verifier.code 0} true;
    assume !(out_$i242 == 1);
    goto $bb246;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} ldv_stop();
    goto corral_source_split_6414;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb11;

  $bb65_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i66, out_$i67, out_$p68, out_$i69, out_$i71, out_$i72, out_$p73, out_$i75, out_$i76, out_$p77, out_$p78, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$p182, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i194, out_$i195, out_$p196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p214, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$p245, out_$i247, out_$i248, out_$p249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$p259, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297, out_vslice_dummy_var_298, out_vslice_dummy_var_299 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$i3, in_$p5, in_$p6, in_$i7, in_$i8, in_$i9, in_$p11, in_$i12, in_$p13, in_$i14, in_$i15, in_$p17, in_$i18, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i66, out_$i67, out_$p68, out_$i69, out_$i71, out_$i72, out_$p73, out_$i75, out_$i76, out_$p77, out_$p78, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i140, out_$i141, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$p182, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i194, out_$i195, out_$p196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$p214, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$p245, out_$i247, out_$i248, out_$p249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$p259, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297, out_vslice_dummy_var_298, out_vslice_dummy_var_299);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i32, in_$i9: i64, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i32, in_$p17: ref, in_$i18: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i32, in_$i24: i32, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i32, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$i156: i32, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i1, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$i198: i32, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i32, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i1, in_$i210: i1, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$p214: ref, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$p229: ref, in_$i230: i32, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$i239: i1, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$p250: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$p259: ref, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: ref, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i64, in_vslice_dummy_var_287: i64, in_vslice_dummy_var_288: i32, in_vslice_dummy_var_289: i32, in_vslice_dummy_var_290: i32, in_vslice_dummy_var_291: i64, in_vslice_dummy_var_292: i64, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i64, in_vslice_dummy_var_295: i64, in_vslice_dummy_var_296: i32, in_vslice_dummy_var_297: i32, in_vslice_dummy_var_298: i32, in_vslice_dummy_var_299: i32) returns (out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i32, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$i156: i32, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i1, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$i198: i32, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i32, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i1, out_$i210: i1, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$p214: ref, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$p229: ref, out_$i230: i32, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$i239: i1, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$p250: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$p259: ref, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: ref, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i64, out_vslice_dummy_var_287: i64, out_vslice_dummy_var_288: i32, out_vslice_dummy_var_289: i32, out_vslice_dummy_var_290: i32, out_vslice_dummy_var_291: i64, out_vslice_dummy_var_292: i64, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i64, out_vslice_dummy_var_295: i64, out_vslice_dummy_var_296: i32, out_vslice_dummy_var_297: i32, out_vslice_dummy_var_298: i32, out_vslice_dummy_var_299: i32);
  modifies $M.36, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.9, $CurrAddr, $M.1, $M.15, $M.21, $M.12, $M.16, assertsPassed, $M.39, $M.37, $M.45, $M.38, $M.46, $M.47, $M.48, $M.28, $M.29, $M.31, $M.32, $M.24, $M.25, $M.41, $M.22, $M.23, $M.42, $M.26, $M.27, $M.43, $M.40, $M.49, $M.30, $M.50, $M.51;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


