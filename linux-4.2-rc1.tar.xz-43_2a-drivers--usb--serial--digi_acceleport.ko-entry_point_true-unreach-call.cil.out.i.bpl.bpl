var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: [ref]i8;

var $M.8: [ref]i32;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]i32;

var $M.15: [ref]i8;

var $M.16: i32;

var $M.17: ref;

var $M.18: i32;

var $M.20: i32;

var $M.22: i32;

var $M.24: i32;

var $M.25: [ref]i8;

var $M.26: [ref]i8;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.29: [ref]i8;

var $M.30: ref;

var $M.31: ref;

var $M.32: ref;

var $M.33: ref;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.49: [ref]i16;

var $M.50: [ref]i16;

var $M.51: [ref]i16;

var $M.52: [ref]i16;

var $M.53: [ref]i16;

var $M.54: [ref]i8;

var $M.55: [ref]i8;

var $M.56: [ref]i8;

var $M.57: [ref]i8;

var $M.58: [ref]i8;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.61: [ref]i64;

var $M.62: [ref]i16;

var $M.63: [ref]i16;

var $M.64: [ref]i16;

var $M.65: [ref]i16;

var $M.66: [ref]i16;

var $M.67: [ref]i8;

var $M.68: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $M.71: [ref]i8;

var $M.72: [ref]i8;

var $M.73: [ref]i8;

var $M.74: [ref]i64;

var $M.75: [ref]i8;

var $M.76: [ref]i8;

var $M.77: [ref]ref;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 279425);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 2056);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 3088);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 4116);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 5148);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 6176);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 7208);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 8236);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 9268);

const digi_acceleport_4_device_group0: ref;

axiom digi_acceleport_4_device_group0 == $sub.ref(0, 10300);

const digi_acceleport_4_device_group1: ref;

axiom digi_acceleport_4_device_group1 == $sub.ref(0, 11332);

const digi_acceleport_4_device_group2: ref;

axiom digi_acceleport_4_device_group2 == $sub.ref(0, 12364);

const digi_acceleport_4_device_group3: ref;

axiom digi_acceleport_4_device_group3 == $sub.ref(0, 13396);

const digi_acceleport_2_device_group0: ref;

axiom digi_acceleport_2_device_group0 == $sub.ref(0, 14428);

const digi_acceleport_2_device_group1: ref;

axiom digi_acceleport_2_device_group1 == $sub.ref(0, 15460);

const digi_acceleport_2_device_group2: ref;

axiom digi_acceleport_2_device_group2 == $sub.ref(0, 16492);

const digi_acceleport_2_device_group3: ref;

axiom digi_acceleport_2_device_group3 == $sub.ref(0, 17524);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 18552);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 19580);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 20608);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 21636);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 22664);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 23692);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 24720);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 25748);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 26776);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 27804);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 28832);

const {:count 3} __mod_usb__id_table_combined_device_table: ref;

axiom __mod_usb__id_table_combined_device_table == $sub.ref(0, 29952);

const {:count 3} id_table_combined: ref;

axiom id_table_combined == $sub.ref(0, 31072);

const {:count 2} id_table_4: ref;

axiom id_table_4 == $sub.ref(0, 32160);

const digi_acceleport_4_device: ref;

axiom digi_acceleport_4_device == $sub.ref(0, 33736);

const {:count 2} id_table_2: ref;

axiom id_table_2 == $sub.ref(0, 34824);

const digi_acceleport_2_device: ref;

axiom digi_acceleport_2_device == $sub.ref(0, 36400);

const {:count 3} serial_drivers: ref;

axiom serial_drivers == $sub.ref(0, 37448);

const .str: ref;

axiom .str == $sub.ref(0, 38496);

const {:count 7} .str.1: ref;

axiom .str.1 == $sub.ref(0, 39527);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 47} .str.26: ref;

axiom .str.26 == $sub.ref(0, 40598);

const {:count 25} .str.27: ref;

axiom .str.27 == $sub.ref(0, 41647);

const {:count 50} .str.28: ref;

axiom .str.28 == $sub.ref(0, 42721);

const {:count 16} .str.4: ref;

axiom .str.4 == $sub.ref(0, 43761);

const {:count 215} .str.6: ref;

axiom .str.6 == $sub.ref(0, 45000);

const {:count 40} .str.29: ref;

axiom .str.29 == $sub.ref(0, 46064);

const {:count 44} .str.15: ref;

axiom .str.15 == $sub.ref(0, 47132);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 38} .str.42: ref;

axiom .str.42 == $sub.ref(0, 48194);

const {:count 24} .str.43: ref;

axiom .str.43 == $sub.ref(0, 49242);

const {:count 57} .str.44: ref;

axiom .str.44 == $sub.ref(0, 50323);

const {:count 50} .str.45: ref;

axiom .str.45 == $sub.ref(0, 51397);

const {:count 46} .str.46: ref;

axiom .str.46 == $sub.ref(0, 52467);

const {:count 103} .str.49: ref;

axiom .str.49 == $sub.ref(0, 53594);

const {:count 23} .str.50: ref;

axiom .str.50 == $sub.ref(0, 54641);

const {:count 25} .str.51: ref;

axiom .str.51 == $sub.ref(0, 55690);

const {:count 24} .str.52: ref;

axiom .str.52 == $sub.ref(0, 56738);

const {:count 23} .str.47: ref;

axiom .str.47 == $sub.ref(0, 57785);

const {:count 63} .str.48: ref;

axiom .str.48 == $sub.ref(0, 58872);

const {:count 23} .str.5: ref;

axiom .str.5 == $sub.ref(0, 59919);

const {:count 58} .str.7: ref;

axiom .str.7 == $sub.ref(0, 61001);

const {:count 35} .str.8: ref;

axiom .str.8 == $sub.ref(0, 62060);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 19} .str.16: ref;

axiom .str.16 == $sub.ref(0, 63103);

const {:count 21} .str.40: ref;

axiom .str.40 == $sub.ref(0, 64148);

const {:count 41} .str.41: ref;

axiom .str.41 == $sub.ref(0, 65213);

const {:count 23} .str.36: ref;

axiom .str.36 == $sub.ref(0, 66260);

const {:count 48} .str.37: ref;

axiom .str.37 == $sub.ref(0, 67332);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 17} .str.22: ref;

axiom .str.22 == $sub.ref(0, 68373);

const {:count 88} .str.23: ref;

axiom .str.23 == $sub.ref(0, 69485);

const {:count 45} .str.24: ref;

axiom .str.24 == $sub.ref(0, 70554);

const {:count 44} .str.25: ref;

axiom .str.25 == $sub.ref(0, 71622);

const {:count 23} .str.20: ref;

axiom .str.20 == $sub.ref(0, 72669);

const {:count 48} .str.21: ref;

axiom .str.21 == $sub.ref(0, 73741);

const {:count 16} .str.38: ref;

axiom .str.38 == $sub.ref(0, 74781);

const {:count 35} .str.39: ref;

axiom .str.39 == $sub.ref(0, 75840);

const {:count 11} .str.30: ref;

axiom .str.30 == $sub.ref(0, 76875);

const {:count 54} .str.31: ref;

axiom .str.31 == $sub.ref(0, 77953);

const {:count 26} .str.32: ref;

axiom .str.32 == $sub.ref(0, 79003);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 11} .str.34: ref;

axiom .str.34 == $sub.ref(0, 80038);

const {:count 38} .str.35: ref;

axiom .str.35 == $sub.ref(0, 81100);

const {:count 10} .str.17: ref;

axiom .str.17 == $sub.ref(0, 82134);

const {:count 37} .str.18: ref;

axiom .str.18 == $sub.ref(0, 83195);

const {:count 20} .str.19: ref;

axiom .str.19 == $sub.ref(0, 84239);

const {:count 30} .str.9: ref;

axiom .str.9 == $sub.ref(0, 85293);

const {:count 29} .str.10: ref;

axiom .str.10 == $sub.ref(0, 86346);

const {:count 21} .str.11: ref;

axiom .str.11 == $sub.ref(0, 87391);

const {:count 21} .str.12: ref;

axiom .str.12 == $sub.ref(0, 88436);

const {:count 24} .str.13: ref;

axiom .str.13 == $sub.ref(0, 89484);

const {:count 18} .str.14: ref;

axiom .str.14 == $sub.ref(0, 90526);

const {:count 39} .str.33: ref;

axiom .str.33 == $sub.ref(0, 91589);

const {:count 24} .str.2: ref;

axiom .str.2 == $sub.ref(0, 92637);

const {:count 7} .str.3: ref;

axiom .str.3 == $sub.ref(0, 93668);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 94700);

const {:count 3} .str.1.120: ref;

axiom .str.1.120 == $sub.ref(0, 95727);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 96765);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 97793);

const memcpy_guard: ref;

axiom memcpy_guard == $sub.ref(0, 98825);

procedure memcpy_guard($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation memcpy_guard($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "memcpy_guard:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref($i2, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i4 := $ule.ref($p3, $p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p1, $mul.ref($i2, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i6 := $ule.ref($p5, $p0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} abort();
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 99857);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const abort: ref;

axiom abort == $sub.ref(0, 100889);

procedure abort();



const digi_startup: ref;

axiom digi_startup == $sub.ref(0, 101921);

procedure digi_startup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation digi_startup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i6: i32;
  var vslice_dummy_var_28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p2 := kzalloc(88, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} vslice_dummy_var_28 := spinlock_check($p7);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} __raw_spin_lock_init($p11, .str.33, $p1);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i20, 8));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p23);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i29 := digi_port_init($p26, $i28);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 7} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p3);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} usb_set_serial_data($p0, $p32);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} kfree($p31);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i6 := $i29;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const digi_disconnect: ref;

axiom digi_disconnect == $sub.ref(0, 102953);

procedure digi_disconnect($p0: ref);
  free requires assertsPassed;



implementation digi_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $i9, $p11, $p12, $p13, $p14, $i15, $p17, $p18, $p19, $p20, $i21, $p22, $p23, $i24, $i25, $i26, $i27, $i8 := digi_disconnect_loop_$bb4($p0, $p1, $i9, $p11, $p12, $p13, $p14, $i15, $p17, $p18, $p19, $p20, $i21, $p22, $p23, $i24, $i25, $i26, $i27, $i8);
    goto $bb4_last;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i9, 8));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} usb_kill_urb($p14);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i8);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i15, 8));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} usb_kill_urb($p20);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i8, 1);
    call {:si_unique_call 12} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p1);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i25 := $sext.i8.i32($i24);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, $i21);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i21;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_66;
}



const digi_release: ref;

axiom digi_release == $sub.ref(0, 103985);

procedure digi_release($p0: ref);
  free requires assertsPassed;



implementation digi_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p1 := usb_get_serial_data($p0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p5 := usb_get_serial_port_data($p4);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} kfree($p7);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} kfree($p8);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    return;
}



const digi_port_probe: ref;

axiom digi_port_probe == $sub.ref(0, 105017);

procedure digi_port_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation digi_port_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i4 := digi_port_init($p0, $i3);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 18} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const digi_port_remove: ref;

axiom digi_port_remove == $sub.ref(0, 106049);

procedure digi_port_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation digi_port_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p1 := usb_get_serial_port_data($p0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} kfree($p3);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const digi_open: ref;

axiom digi_open == $sub.ref(0, 107081);

procedure digi_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, assertsPassed;



implementation digi_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p5 := usb_get_serial_port_data($p1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i9 := digi_startup_device($p8);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 26} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 8);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i15);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 1);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 9);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(5, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(6, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 3);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(7, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i27 := digi_write_oob_command($p1, $p26, 8, 1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 28} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i51 := $xor.i32($i50, $sub.i32(0, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i56 := $xor.i32($i55, $sub.i32(0, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} digi_set_termios($p0, $p1, $p3);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p29, .str.4);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p30, .str.17);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p31, .str.6);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p32, .str.18);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.5, $p34);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 1114);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p34, $i37);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p38, 0);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.6, $p39);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 30} {:cexpr "tmp___1"} boogie_si_record_i64($i43);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i44 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p45, .str.18, $i27);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 6);
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const digi_close: ref;

axiom digi_close == $sub.ref(0, 108113);

procedure digi_close($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $CurrAddr, assertsPassed;



implementation digi_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i8;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i8;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p4 := get_current();
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p5, 0);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p7, $p4);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p8, autoremove_wake_function);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p11, $p9);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p14, $p12);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p15 := usb_get_serial_port_data($p0);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} mutex_lock_nested($p19, 0);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(24, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_29 := digi_transmit_idle($p0, 1250);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 4);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i31);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 5);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(5, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i38);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(6, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(7, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 8);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(9, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i45);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(10, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(11, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 10);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(13, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i52);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(14, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(15, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 9);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(17, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, $i59);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(18, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 3);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(19, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p2);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i64 := digi_write_oob_command($p0, $p63, 20, 0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 45} {:cexpr "ret"} boogie_si_record_i32($i64);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} prepare_to_wait($p83, $p1, 1);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_30 := schedule_timeout(1250);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} finish_wait($p85, $p1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} usb_kill_urb($p87);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} spin_lock_irq($p88);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(288, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} __wake_up($p90, 1, 1, $0.ref);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} spin_unlock_irq($p91);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} mutex_unlock($p94);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i65 == 1;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p66, .str.4);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p67, .str.34);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p68, .str.6);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p69, .str.35);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.5, $p71);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 1174);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p71, $i74);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p75, 0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.6, $p76);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 47} {:cexpr "tmp___1"} boogie_si_record_i64($i80);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i81 == 1;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p82, .str.35, $i64);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const digi_write: ref;

axiom digi_write == $sub.ref(0, 109145);

procedure digi_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.24, $CurrAddr, assertsPassed;



implementation digi_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $i81: i8;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i64;
  var $p92: ref;
  var $i93: i32;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i112: i1;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i24;
  var $i124: i24;
  var $i125: i24;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $i60: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 55} {:cexpr "digi_write:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p6 := usb_get_serial_port_data($p1);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.4);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.30);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str.6);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str.31);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.5, $p17);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 917);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p17, $i20);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p21, 0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 58} {:cexpr "tmp___1"} boogie_si_record_i64($i26);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 62} {:cexpr "digi_write:arg:_min1"} boogie_si_record_i32($i3);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $sub.i32(0, 2));
    call {:si_unique_call 63} {:cexpr "_min2"} boogie_si_record_i32($i36);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i3, $i36);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32(64, $i38);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} ldv_spin_lock();
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, $sub.i32(0, 2));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i63, $i65);
    call {:si_unique_call 67} {:cexpr "_min2___1"} boogie_si_record_i32($i66);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i40, $i66);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i67 == 1);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i68 := $i66;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, $i68);
    call {:si_unique_call 68} {:cexpr "data_len"} boogie_si_record_i32($i71);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i71, 2);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i74);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p11, $mul.ref(1, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 18);
    $i79 := $add.i64(1, 1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p11, $mul.ref($i79, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i71);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, $i81);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} memcpy_guard($p80, $p83, $i86);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i90);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 71} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p80, $p88, $i91, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i93);
    $i95 := $add.i64($i79, $i94);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p11, $mul.ref($i95, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i68);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} memcpy_guard($p96, $p2, $i97);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i68);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 73} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p96, $p2, $i98, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i101 := ldv_usb_submit_urb_32($p100, 32);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 75} {:cexpr "ret"} boogie_si_record_i32($i101);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i105 := $i101;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} spin_unlock_irqrestore($p106, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i105, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p117, .str.4);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p118, .str.30);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p119, .str.6);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p120, .str.32);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i123 := $load.i24($M.5, $p122);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i124 := $and.i24($i123, $sub.i24(0, 262144));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i125 := $or.i24($i124, 975);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p122, $i125);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p126, 0);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.6, $p127);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i64($i128);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i130 := $and.i64($i129, 1);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i131 := ldv__builtin_expect($i130, 0);
    call {:si_unique_call 79} {:cexpr "tmp___5"} boogie_si_record_i64($i131);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i60 := $i105;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $r := $i60;
    return;

  $bb38:
    assume $i132 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p133, .str.32, $i105);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb29:
    assume $i107 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p1);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(696, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i112 == 1);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i8.i1(1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} dev_err.ref.ref.ref.i32.i32($p114, .str.15, .str.30, $i105, $i116);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb32;

  $bb26:
    assume $i102 == 1;
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, 1);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, 0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i105 := $i68;
    goto $bb28;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i72 == 1;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} spin_unlock_irqrestore($p73, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i60 := 0;
    goto $bb18;

  $bb20:
    assume $i67 == 1;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i68 := $i40;
    goto $bb22;

  $bb10:
    assume $i43 == 1;
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i40, 1);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} spin_unlock_irqrestore($p59, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i60 := $i58;
    goto $bb18;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i47 := $sle.i32($i46, 7);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb14;

  $bb15:
    assume $i47 == 1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    call {:si_unique_call 65} {:cexpr "tmp___2"} boogie_si_record_i32($i49);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 1);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p2);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i49);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(80, 1)), $mul.ref($i55, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i54);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i58 := 1;
    goto $bb17;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i40 := 64;
    goto $bb9;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i38 := $i3;
    goto $bb6;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i28 := preempt_count();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 60} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i28);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 2096896);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i64($p4, $p29, .str.31, $i31, $i3, $i33);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const digi_write_room: ref;

axiom digi_write_room == $sub.ref(0, 110177);

procedure digi_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $CurrAddr;



implementation digi_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i10: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p5 := usb_get_serial_port_data($p4);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} ldv_spin_lock();
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $sub.i32(0, 2));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i13, $i15);
    call {:si_unique_call 84} {:cexpr "room"} boogie_si_record_i32($i16);
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} spin_unlock_irqrestore($p17, 0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, .str.4);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, .str.38);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str.6);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.39);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.5, $p23);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 1060);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p23, $i26);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 0);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.6, $p28);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 87} {:cexpr "tmp___0"} boogie_si_record_i64($i32);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p1, $p34, .str.39, $i36, $i10);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const digi_set_termios: ref;

axiom digi_set_termios == $sub.ref(0, 111209);

procedure digi_set_termios($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, assertsPassed;



implementation digi_set_termios($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i24;
  var $i27: i24;
  var $i28: i24;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i48: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i64;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i8;
  var $i103: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i8;
  var $i107: i64;
  var $p108: ref;
  var $i109: i32;
  var $i110: i64;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i64;
  var $p132: ref;
  var $i133: i32;
  var $p134: ref;
  var $i135: i32;
  var $i136: i8;
  var $i137: i64;
  var $p138: ref;
  var $i139: i32;
  var $i140: i8;
  var $i141: i64;
  var $p142: ref;
  var $i143: i32;
  var $i144: i64;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i24;
  var $i166: i24;
  var $i167: i24;
  var $p168: ref;
  var $p169: ref;
  var $i170: i8;
  var $i171: i64;
  var $i172: i64;
  var $i173: i64;
  var $i174: i1;
  var $i175: i32;
  var $i158: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i64;
  var $p179: ref;
  var $i180: i32;
  var $p181: ref;
  var $i182: i32;
  var $i183: i8;
  var $i184: i64;
  var $p185: ref;
  var $i186: i32;
  var $i187: i8;
  var $i188: i64;
  var $p189: ref;
  var $i190: i32;
  var $i191: i64;
  var $p192: ref;
  var $i193: i32;
  var $i194: i32;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $i200: i32;
  var $i201: i32;
  var $i202: i64;
  var $p203: ref;
  var $i204: i32;
  var $p205: ref;
  var $i206: i32;
  var $i207: i8;
  var $i208: i64;
  var $p209: ref;
  var $i210: i32;
  var $i211: i8;
  var $i212: i64;
  var $p213: ref;
  var $i214: i32;
  var $i215: i64;
  var $p216: ref;
  var $i217: i32;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i227: i32;
  var $i226: i32;
  var $i228: i1;
  var $i229: i32;
  var $i230: i32;
  var $i231: i64;
  var $p232: ref;
  var $i233: i32;
  var $p234: ref;
  var $i235: i32;
  var $i236: i8;
  var $i237: i64;
  var $p238: ref;
  var $i239: i32;
  var $i240: i64;
  var $p241: ref;
  var $i242: i32;
  var $i243: i64;
  var $p244: ref;
  var $i247: i32;
  var $i245: i32;
  var $i246: i32;
  var $i248: i32;
  var $i249: i64;
  var $p250: ref;
  var $i251: i32;
  var $p252: ref;
  var $i253: i32;
  var $i254: i8;
  var $i255: i64;
  var $p256: ref;
  var $i257: i32;
  var $i258: i8;
  var $i259: i64;
  var $p260: ref;
  var $i261: i32;
  var $i262: i64;
  var $p263: ref;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i1;
  var $i268: i32;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $i272: i32;
  var $i274: i32;
  var $i273: i32;
  var $i275: i1;
  var $i276: i32;
  var $i278: i32;
  var $i277: i32;
  var $i279: i32;
  var $i280: i64;
  var $p281: ref;
  var $i282: i32;
  var $p283: ref;
  var $i284: i32;
  var $i285: i8;
  var $i286: i64;
  var $p287: ref;
  var $i288: i32;
  var $i289: i8;
  var $i290: i64;
  var $p291: ref;
  var $i292: i32;
  var $i293: i64;
  var $p294: ref;
  var $i295: i32;
  var $i296: i32;
  var $i297: i32;
  var $i298: i1;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i32;
  var $i303: i64;
  var $p304: ref;
  var $i305: i32;
  var $p306: ref;
  var $i307: i32;
  var $i308: i8;
  var $i309: i64;
  var $p310: ref;
  var $i311: i32;
  var $i312: i8;
  var $i313: i64;
  var $p314: ref;
  var $i315: i32;
  var $i316: i64;
  var $p317: ref;
  var $i318: i32;
  var $p319: ref;
  var $i320: i32;
  var $i321: i1;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $i328: i24;
  var $i329: i24;
  var $i330: i24;
  var $p331: ref;
  var $p332: ref;
  var $i333: i8;
  var $i334: i64;
  var $i335: i64;
  var $i336: i64;
  var $i337: i1;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $p7 := usb_get_serial_port_data($p1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 94} {:cexpr "iflag"} boogie_si_record_i32($i12);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 95} {:cexpr "cflag"} boogie_si_record_i32($i15);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 96} {:cexpr "old_iflag"} boogie_si_record_i32($i17);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 97} {:cexpr "old_cflag"} boogie_si_record_i32($i19);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, .str.4);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p21, .str.22);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p22, .str.6);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p23, .str.23);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i26 := $load.i24($M.5, $p25);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i27 := $and.i24($i26, $sub.i24(0, 262144));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i28 := $or.i24($i27, 690);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p25, $i28);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p29, 0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.6, $p30);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 1);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 99} {:cexpr "tmp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i38 := tty_get_baud_rate($p0);
    call {:si_unique_call 102} {:cexpr "baud"} boogie_si_record_i32($i38);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i39 := tty_termios_baud_rate($p2);
    call {:si_unique_call 104} {:cexpr "tmp___6"} boogie_si_record_i32($i39);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, $i38);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i113, $i114 := 0, $i38;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, $sub.i32(0, 1073741825));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, $i118);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i121 := $xor.i32($i15, $i19);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, 768);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i146 := $i113;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i147 := $xor.i32($i15, $i19);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i147, 48);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    $i194 := $i146;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i195 := $xor.i32($i15, $i19);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, 64);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    $i217 := $i194;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i218 := $xor.i32($i12, $i17);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i219 := $and.i32($i218, 4096);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb139, $bb141;

  $bb141:
    assume !($i220 == 1);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i221 := $xor.i32($i15, $i19);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i222 := $slt.i32($i221, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    $i264 := $i217;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i265 := $xor.i32($i12, $i17);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i266 := $and.i32($i265, 1024);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i267 := $ne.i32($i266, 0);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb153;

  $bb153:
    assume !($i267 == 1);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i268 := $xor.i32($i15, $i19);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i269 := $slt.i32($i268, 0);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    $i295 := $i264;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i296 := $xor.i32($i15, $i19);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i297 := $and.i32($i296, 128);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 0);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    $i318 := $i295;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p319 := $bitcast.ref.ref($p3);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i320 := digi_write_oob_command($p1, $p319, $i318, 1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 155} {:cexpr "ret"} boogie_si_record_i32($i320);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} tty_encode_baud_rate($p0, $i114, $i114);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    return;

  $bb169:
    assume $i321 == 1;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p322, .str.4);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p323, .str.22);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p324, .str.6);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p325, .str.25);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p327 := $bitcast.ref.ref($p326);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i328 := $load.i24($M.5, $p327);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i329 := $and.i24($i328, $sub.i24(0, 262144));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i330 := $or.i24($i329, 859);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p327, $i330);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p331, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i333 := $load.i8($M.6, $p332);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i334 := $zext.i8.i64($i333);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i335 := $and.i64($i334, 1);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i336 := ldv__builtin_expect($i335, 0);
    call {:si_unique_call 157} {:cexpr "tmp___36"} boogie_si_record_i64($i336);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i337 := $ne.i64($i336, 0);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb171:
    assume $i337 == 1;
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p9, .str.25, $i320);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    goto $bb173;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb163:
    assume $i298 == 1;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i299 := $and.i32($i15, 128);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    $i301 := 0;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i302 := $add.i32($i295, 1);
    call {:si_unique_call 150} {:cexpr "i"} boogie_si_record_i32($i302);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i303 := $sext.i32.i64($i295);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i303, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p304, 10);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i305 := $add.i32($i302, 1);
    call {:si_unique_call 151} {:cexpr "i"} boogie_si_record_i32($i305);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p8, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.0, $p306);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i8($i307);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i309 := $sext.i32.i64($i302);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i309, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p310, $i308);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i311 := $add.i32($i305, 1);
    call {:si_unique_call 152} {:cexpr "i"} boogie_si_record_i32($i311);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i312 := $trunc.i32.i8($i301);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i313 := $sext.i32.i64($i305);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i313, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p314, $i312);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i315 := $add.i32($i311, 1);
    call {:si_unique_call 153} {:cexpr "i"} boogie_si_record_i32($i315);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i316 := $sext.i32.i64($i311);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i316, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p317, 0);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i318 := $i315;
    goto $bb168;

  $bb165:
    assume $i300 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i301 := 1;
    goto $bb167;

  $bb154:
    assume {:verifier.code 0} true;
    assume $i269 == 1;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i270 := $and.i32($i12, 1024);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 0);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i271 == 1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i274 := $and.i32(0, $sub.i32(0, 2));
    call {:si_unique_call 143} {:cexpr "arg"} boogie_si_record_i32($i274);
    assume {:verifier.code 0} true;
    $i273 := $i274;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i275 := $slt.i32($i15, 0);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i275 == 1);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i278 := $and.i32($i273, $sub.i32(0, 3));
    call {:si_unique_call 145} {:cexpr "arg"} boogie_si_record_i32($i278);
    assume {:verifier.code 0} true;
    $i277 := $i278;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i279 := $add.i32($i264, 1);
    call {:si_unique_call 146} {:cexpr "i"} boogie_si_record_i32($i279);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i280 := $sext.i32.i64($i264);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i280, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p281, 5);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i282 := $add.i32($i279, 1);
    call {:si_unique_call 147} {:cexpr "i"} boogie_si_record_i32($i282);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p8, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p283);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i285 := $trunc.i32.i8($i284);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i286 := $sext.i32.i64($i279);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i286, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p287, $i285);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i282, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i288);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i32.i8($i277);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i290 := $sext.i32.i64($i282);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i290, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p291, $i289);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i292 := $add.i32($i288, 1);
    call {:si_unique_call 149} {:cexpr "i"} boogie_si_record_i32($i292);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i293 := $sext.i32.i64($i288);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i293, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p294, 0);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i295 := $i292;
    goto $bb162;

  $bb159:
    assume $i275 == 1;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i276 := $or.i32($i273, 2);
    call {:si_unique_call 144} {:cexpr "arg"} boogie_si_record_i32($i276);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i277 := $i276;
    goto $bb161;

  $bb156:
    assume $i271 == 1;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i272 := $or.i32(0, 1);
    call {:si_unique_call 142} {:cexpr "arg"} boogie_si_record_i32($i272);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i273 := $i272;
    goto $bb158;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i267 == 1;
    goto $bb152;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i222 == 1;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i223 := $and.i32($i12, 4096);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i224 == 1);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i227 := $and.i32(0, $sub.i32(0, 2));
    call {:si_unique_call 131} {:cexpr "arg"} boogie_si_record_i32($i227);
    assume {:verifier.code 0} true;
    $i226 := $i227;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i228 := $slt.i32($i15, 0);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i228 == 1);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i247 := $and.i32($i226, $sub.i32(0, 3));
    call {:si_unique_call 137} {:cexpr "arg"} boogie_si_record_i32($i247);
    assume {:verifier.code 0} true;
    $i245, $i246 := $i247, $i217;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i248 := $add.i32($i246, 1);
    call {:si_unique_call 138} {:cexpr "i"} boogie_si_record_i32($i248);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i249 := $sext.i32.i64($i246);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i249, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p250, 4);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i251 := $add.i32($i248, 1);
    call {:si_unique_call 139} {:cexpr "i"} boogie_si_record_i32($i251);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p8, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.0, $p252);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i254 := $trunc.i32.i8($i253);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i255 := $sext.i32.i64($i248);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i255, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p256, $i254);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i257 := $add.i32($i251, 1);
    call {:si_unique_call 140} {:cexpr "i"} boogie_si_record_i32($i257);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i258 := $trunc.i32.i8($i245);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i259 := $sext.i32.i64($i251);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i259, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p260, $i258);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i261 := $add.i32($i257, 1);
    call {:si_unique_call 141} {:cexpr "i"} boogie_si_record_i32($i261);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i262 := $sext.i32.i64($i257);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i262, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p263, 0);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i264 := $i261;
    goto $bb150;

  $bb147:
    assume $i228 == 1;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i229 := $or.i32($i226, 2);
    call {:si_unique_call 132} {:cexpr "arg"} boogie_si_record_i32($i229);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i230 := $add.i32($i217, 1);
    call {:si_unique_call 133} {:cexpr "i"} boogie_si_record_i32($i230);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i231 := $sext.i32.i64($i217);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i231, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p232, 7);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i230, 1);
    call {:si_unique_call 134} {:cexpr "i"} boogie_si_record_i32($i233);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p8, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.0, $p234);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i32.i8($i235);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i237 := $sext.i32.i64($i230);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i237, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p238, $i236);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i239 := $add.i32($i233, 1);
    call {:si_unique_call 135} {:cexpr "i"} boogie_si_record_i32($i239);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i240 := $sext.i32.i64($i233);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i240, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p241, 1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i242 := $add.i32($i239, 1);
    call {:si_unique_call 136} {:cexpr "i"} boogie_si_record_i32($i242);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i243 := $sext.i32.i64($i239);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i243, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p244, 0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i245, $i246 := $i229, $i242;
    goto $bb149;

  $bb144:
    assume $i224 == 1;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i225 := $or.i32(0, 1);
    call {:si_unique_call 130} {:cexpr "arg"} boogie_si_record_i32($i225);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i226 := $i225;
    goto $bb146;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb140;

  $bb133:
    assume $i197 == 1;
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i198 := $and.i32($i15, 64);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i200 := 0;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i194, 1);
    call {:si_unique_call 126} {:cexpr "i"} boogie_si_record_i32($i201);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i202 := $sext.i32.i64($i194);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i202, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p203, 3);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i201, 1);
    call {:si_unique_call 127} {:cexpr "i"} boogie_si_record_i32($i204);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p8, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.0, $p205);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i8($i206);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i208 := $sext.i32.i64($i201);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i208, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p209, $i207);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i210 := $add.i32($i204, 1);
    call {:si_unique_call 128} {:cexpr "i"} boogie_si_record_i32($i210);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i8($i200);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i212 := $sext.i32.i64($i204);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i212, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p213, $i211);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i214 := $add.i32($i210, 1);
    call {:si_unique_call 129} {:cexpr "i"} boogie_si_record_i32($i214);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i215 := $sext.i32.i64($i210);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i215, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p216, 0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i217 := $i214;
    goto $bb138;

  $bb135:
    assume $i199 == 1;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i200 := 1;
    goto $bb137;

  $bb106:
    assume $i149 == 1;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i15, 48);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i151 := $slt.i32($i150, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    $i152 := $slt.i32($i150, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i150, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p159, .str.4);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p160, .str.22);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p161, .str.6);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p162, .str.24);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i165 := $load.i24($M.5, $p164);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i166 := $and.i24($i165, $sub.i24(0, 262144));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i167 := $or.i24($i166, 768);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p164, $i167);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p168, 0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.6, $p169);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i64($i170);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i172 := $and.i64($i171, 1);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i173 := ldv__builtin_expect($i172, 0);
    call {:si_unique_call 120} {:cexpr "tmp___11"} boogie_si_record_i64($i173);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i174 := $ne.i64($i173, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i158 := $sub.i32(0, 1);
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i158, $sub.i32(0, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    $i193 := $i146;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i194 := $i193;
    goto $bb132;

  $bb129:
    assume $i176 == 1;
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i177 := $add.i32($i146, 1);
    call {:si_unique_call 122} {:cexpr "i"} boogie_si_record_i32($i177);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i146);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i178, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p179, 1);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i180 := $add.i32($i177, 1);
    call {:si_unique_call 123} {:cexpr "i"} boogie_si_record_i32($i180);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p8, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i183 := $trunc.i32.i8($i182);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i177);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i184, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p185, $i183);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i180, 1);
    call {:si_unique_call 124} {:cexpr "i"} boogie_si_record_i32($i186);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i8($i158);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i188 := $sext.i32.i64($i180);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i188, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p189, $i187);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i186, 1);
    call {:si_unique_call 125} {:cexpr "i"} boogie_si_record_i32($i190);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i191 := $sext.i32.i64($i186);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i191, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p192, 0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i193 := $i190;
    goto $bb131;

  $bb126:
    assume $i174 == 1;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i175 := $and.i32($i15, 48);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p9, .str.24, $i175);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb113:
    assume $i153 == 1;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i158 := 3;
    goto $bb124;

  $bb111:
    assume $i152 == 1;
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i150, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb115;

  $bb116:
    assume $i154 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i158 := 2;
    goto $bb124;

  $bb109:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i150, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i150, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb115;

  $bb120:
    assume $i156 == 1;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i158 := 1;
    goto $bb124;

  $bb118:
    assume $i155 == 1;
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i150, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb115;

  $bb122:
    assume $i157 == 1;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i158 := 0;
    goto $bb124;

  $bb97:
    assume $i123 == 1;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i15, 256);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i129 := 0;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i113, 1);
    call {:si_unique_call 115} {:cexpr "i"} boogie_si_record_i32($i130);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i113);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i131, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, 2);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i130, 1);
    call {:si_unique_call 116} {:cexpr "i"} boogie_si_record_i32($i133);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p8, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i8($i135);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i137 := $sext.i32.i64($i130);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i137, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p138, $i136);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i133, 1);
    call {:si_unique_call 117} {:cexpr "i"} boogie_si_record_i32($i139);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i8($i129);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i133);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i141, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, $i140);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i139, 1);
    call {:si_unique_call 118} {:cexpr "i"} boogie_si_record_i32($i143);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i144 := $sext.i32.i64($i139);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i144, 1));
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p145, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i146 := $i143;
    goto $bb105;

  $bb99:
    assume $i125 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i15, 512);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := 2;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i129 := $i128;
    goto $bb104;

  $bb101:
    assume $i127 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i128 := 1;
    goto $bb103;

  $bb4:
    assume $i40 == 1;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i19, 4111);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i38, 1800);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i38, 38400);
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i38, 115200);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i38, 230400);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i38, 460800);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i38, 460800);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i93, $i94 := 12, 9600;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i93, $sub.i32(0, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i113, $i114 := $i112, $i94;
    goto $bb96;

  $bb93:
    assume $i95 == 1;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i96 := $add.i32(0, 1);
    call {:si_unique_call 111} {:cexpr "i"} boogie_si_record_i32($i96);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64(0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i97, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 0);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i96, 1);
    call {:si_unique_call 112} {:cexpr "i"} boogie_si_record_i32($i99);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p8, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i96);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i103, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, $i102);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i99, 1);
    call {:si_unique_call 113} {:cexpr "i"} boogie_si_record_i32($i105);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i93);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i99);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i107, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, $i106);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i105, 1);
    call {:si_unique_call 114} {:cexpr "i"} boogie_si_record_i32($i109);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i105);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i110, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, 0);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i112 := $i109;
    goto $bb95;

  $bb26:
    assume $i60 == 1;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i93, $i94 := 22, $i38;
    goto $bb91;

  $bb24:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i38, 230400);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb28;

  $bb29:
    assume $i61 == 1;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i93, $i94 := 21, $i38;
    goto $bb91;

  $bb22:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i38, 115200);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb28;

  $bb31:
    assume $i62 == 1;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i93, $i94 := 19, $i38;
    goto $bb91;

  $bb20:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i38, 57600);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i38, 57600);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb28;

  $bb35:
    assume $i64 == 1;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i93, $i94 := 17, $i38;
    goto $bb91;

  $bb33:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i38, 38400);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb28;

  $bb37:
    assume $i65 == 1;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i93, $i94 := 16, $i38;
    goto $bb91;

  $bb18:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i38, 4800);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i38, 9600);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i38, 19200);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i38, 19200);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb28;

  $bb45:
    assume $i69 == 1;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i93, $i94 := 14, $i38;
    goto $bb91;

  $bb43:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i38, 9600);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb28;

  $bb47:
    assume $i70 == 1;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i93, $i94 := 12, $i38;
    goto $bb91;

  $bb41:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i38, 4800);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb28;

  $bb49:
    assume $i71 == 1;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i93, $i94 := 10, $i38;
    goto $bb91;

  $bb39:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i38, 2400);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i38, 2400);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb28;

  $bb53:
    assume $i73 == 1;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i93, $i94 := 9, $i38;
    goto $bb91;

  $bb51:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i38, 1800);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb28;

  $bb55:
    assume $i74 == 1;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i93, $i94 := 8, $i38;
    goto $bb91;

  $bb16:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i38, 150);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i38, 300);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i38, 600);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i38, 1200);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i38, 1200);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb28;

  $bb65:
    assume $i79 == 1;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i93, $i94 := 7, $i38;
    goto $bb91;

  $bb63:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i38, 600);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb28;

  $bb67:
    assume $i80 == 1;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i93, $i94 := 6, $i38;
    goto $bb91;

  $bb61:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i38, 300);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb28;

  $bb69:
    assume $i81 == 1;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i93, $i94 := 5, $i38;
    goto $bb91;

  $bb59:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i38, 200);
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i38, 200);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb28;

  $bb73:
    assume $i83 == 1;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i93, $i94 := 4, $i38;
    goto $bb91;

  $bb71:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i38, 150);
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb28;

  $bb75:
    assume $i84 == 1;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i93, $i94 := 3, $i38;
    goto $bb91;

  $bb57:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i38, 75);
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i38, 110);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i38, 110);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb28;

  $bb81:
    assume $i87 == 1;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i93, $i94 := 2, $i38;
    goto $bb91;

  $bb79:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i38, 75);
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb28;

  $bb83:
    assume $i88 == 1;
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i93, $i94 := 1, $i38;
    goto $bb91;

  $bb77:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i38, 50);
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i38, 50);
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb28;

  $bb87:
    assume $i90 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i93, $i94 := 0, $i38;
    goto $bb91;

  $bb85:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb28;

  $bb89:
    assume $i91 == 1;
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} vslice_dummy_var_32 := digi_set_modem_signals($p1, 0, 1);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i93, $i94 := $sub.i32(0, 1), $i38;
    goto $bb91;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i42 == 1;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i46 := $sge.i32($i45, 0);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1336, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i50 := constant_test_bit(0, $p49);
    call {:si_unique_call 107} {:cexpr "tmp___1"} boogie_si_record_i32($i50);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i53 := 2;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i48 := $i53;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} vslice_dummy_var_31 := digi_set_modem_signals($p1, $i48, 1);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i51 == 1;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i52 := $or.i32(2, 4);
    call {:si_unique_call 109} {:cexpr "modem_signals"} boogie_si_record_i32($i52);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb13;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i47 := $or.i32(2, 4);
    call {:si_unique_call 105} {:cexpr "modem_signals"} boogie_si_record_i32($i47);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb10;

  $bb1:
    assume $i35 == 1;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p8, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32($p4, $p9, .str.23, $i37, $i12, $i17, $i15, $i19);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const digi_break_ctl: ref;

axiom digi_break_ctl == $sub.ref(0, 112241);

procedure digi_break_ctl($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, assertsPassed;



implementation digi_break_ctl($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 161} {:cexpr "digi_break_ctl:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 11);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 2);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i1, 0);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} vslice_dummy_var_33 := digi_write_inb_command($p5, $p13, 4, 0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const digi_chars_in_buffer: ref;

axiom digi_chars_in_buffer == $sub.ref(0, 113273);

procedure digi_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation digi_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p6 := usb_get_serial_port_data($p5);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, .str.4);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p35, .str.40);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str.6);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.41);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.5, $p39);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 1077);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p39, $i42);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p43, 0);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.6, $p44);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 169} {:cexpr "tmp___1"} boogie_si_record_i64($i48);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i33 := $i56;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb7:
    assume $i49 == 1;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p2, $p50, .str.41, $i52, $i54);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.4);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.40);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.6);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.41);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 1072);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 0);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 167} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i33 := 256;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, $sub.i32(0, 2));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p1, $p27, .str.41, $i29, $i32);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const digi_rx_throttle: ref;

axiom digi_rx_throttle == $sub.ref(0, 114305);

procedure digi_rx_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.24;



implementation digi_rx_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} ldv_spin_lock();
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 1);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(196, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    return;
}



const digi_rx_unthrottle: ref;

axiom digi_rx_unthrottle == $sub.ref(0, 115337);

procedure digi_rx_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.24, assertsPassed;



implementation digi_rx_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} ldv_spin_lock();
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(196, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(196, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} spin_unlock_irqrestore($p15, $u0);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i12, 0);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} dev_err.ref.ref.ref.i32.i32($p17, .str.15, .str.16, $i12, $i19);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i11 := ldv_usb_submit_urb_31($p10, 32);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 178} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const digi_tiocmget: ref;

axiom digi_tiocmget == $sub.ref(0, 116369);

procedure digi_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24;



implementation digi_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} ldv_spin_lock();
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 183} {:cexpr "val"} boogie_si_record_i32($i7);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const digi_tiocmset: ref;

axiom digi_tiocmset == $sub.ref(0, 117401);

procedure digi_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, assertsPassed;



implementation digi_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} {:cexpr "digi_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 186} {:cexpr "digi_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $p6 := usb_get_serial_port_data($p5);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} ldv_spin_lock();
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i10 := $xor.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i9, $i10);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, $i1);
    call {:si_unique_call 189} {:cexpr "val"} boogie_si_record_i32($i12);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} spin_unlock_irqrestore($p13, $u0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i14 := digi_set_modem_signals($p5, $i12, 1);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 192} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const digi_dtr_rts: ref;

axiom digi_dtr_rts == $sub.ref(0, 118433);

procedure digi_dtr_rts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, assertsPassed;



implementation digi_dtr_rts($p0: ref, $i1: i32)
{
  var $i2: i32;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} {:cexpr "digi_dtr_rts:arg:on"} boogie_si_record_i32($i1);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i1, 6);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} vslice_dummy_var_34 := digi_set_modem_signals($p0, $i2, 1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const digi_read_bulk_callback: ref;

axiom digi_read_bulk_callback == $sub.ref(0, 119465);

procedure digi_read_bulk_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.24, $M.26, $M.27, $M.28, $CurrAddr, assertsPassed;



implementation digi_read_bulk_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 195} {:cexpr "status"} boogie_si_record_i32($i5);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p8 := usb_get_serial_port_data($p3);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p20 := usb_get_serial_data($p19);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i5, 0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p21, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i30, $i32);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i36 := digi_read_inb_callback($p0);
    call {:si_unique_call 205} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i38 := ldv_usb_submit_urb_35($p0, 32);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 207} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i38, $sub.i32(0, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb28;

  $bb29:
    assume $i40 == 1;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} dev_err.ref.ref.ref.i32.i32($p41, .str.46, .str.43, $i38, $i43);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i33 == 1;
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i34 := digi_read_oob_callback($p0);
    call {:si_unique_call 203} {:cexpr "tmp___1"} boogie_si_record_i32($i34);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i35 == 1;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} dev_err.ref.ref.ref.i32.i32($p26, .str.45, .str.43, $i5, $i28);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} dev_err.ref.ref.ref.i32($p24, .str.44, .str.43, $i5);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} dev_err.ref.ref.ref.i32($p17, .str.44, .str.43, $i5);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} dev_err.ref.ref.ref.i32($p12, .str.42, .str.43, $i5);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const digi_write_bulk_callback: ref;

axiom digi_write_bulk_callback == $sub.ref(0, 120497);

procedure digi_write_bulk_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.14, $CurrAddr, $M.24, assertsPassed, $M.17, $M.16, $M.18, $M.20, $M.22;



implementation digi_write_bulk_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i8;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $p104: ref;
  var $i105: i1;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i1;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 210} {:cexpr "status"} boogie_si_record_i32($i6);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p4);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p10 := usb_get_serial_port_data($p4);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $p20 := usb_get_serial_data($p16);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i26, $i28);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} spin_lock($p51);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 0);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i54, 0);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i100 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} tty_port_tty_wakeup($p101);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(376, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_37 := schedule_work($p102);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} spin_unlock($p104);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i100, 0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i105 == 1;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i100, $sub.i32(0, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb28;

  $bb29:
    assume $i106 == 1;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p4);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p107, $mul.ref(696, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i111 == 1);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i8.i1(1);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} dev_err.ref.ref.ref.i32.i32($p113, .str.15, .str.27, $i100, $i115);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb32;

  $bb20:
    assume $i55 == 1;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.13, $p58);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 18);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.13, $p65);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(1, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i62);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 2);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p73, $i70);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.13, $p76);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(2, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} memcpy_guard($p78, $p80, $i83);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.13, $p86);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p87, $mul.ref(2, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 225} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p88, $p90, $i93, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i96 := ldv_usb_submit_urb_33($p95, 32);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 227} {:cexpr "ret"} boogie_si_record_i32($i96);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i100 := $i96;
    goto $bb25;

  $bb22:
    assume $i97 == 1;
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, 1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p30, .str.4);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p31, .str.27);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p32, .str.6);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p33, .str.29);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.5, $p35);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 1006);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p35, $i38);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p39, 0);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.6, $p40);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 218} {:cexpr "tmp___1"} boogie_si_record_i64($i44);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} spin_lock($p47);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1408, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} __wake_up($p49, 1, 1, $0.ref);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} spin_unlock($p50);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} __dynamic_dev_dbg.ref.ref.ref($p1, $p46, .str.29);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} dev_err.ref.ref.ref.i32($p24, .str.28, .str.27, $i6);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} dev_err.ref.ref.ref.i32($p19, .str.28, .str.27, $i6);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vslice_dummy_var_36 := printk.ref.ref.i32(.str.26, .str.27, $i6);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} vslice_dummy_var_35 := printk.ref.ref.i32(.str.26, .str.27, $i6);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 121529);

procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 232} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 233} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_get_serial_port_data: ref;

axiom usb_get_serial_port_data == $sub.ref(0, 122561);

procedure usb_get_serial_port_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_serial_port_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 123593);

procedure dev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    return;
}



const usb_get_serial_data: ref;

axiom usb_get_serial_data == $sub.ref(0, 124625);

procedure usb_get_serial_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_serial_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 125657);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 236} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 126689);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i64);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i64)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 127721);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} ldv_spin_lock();
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} ldv_spin_lock_5($p0);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 128753);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 240} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 129785);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} ldv_spin_unlock();
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} ldv_spin_unlock_9($p0);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 130817);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ldv_usb_submit_urb_33: ref;

axiom ldv_usb_submit_urb_33 == $sub.ref(0, 131849);

procedure ldv_usb_submit_urb_33($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_33($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} {:cexpr "ldv_usb_submit_urb_33:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} ldv_check_alloc_flags($i1);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p2 := ldv_undef_ptr();
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const tty_port_tty_wakeup: ref;

axiom tty_port_tty_wakeup == $sub.ref(0, 132881);

procedure tty_port_tty_wakeup($p0: ref);
  free requires assertsPassed;



implementation tty_port_tty_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 133913);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.18, $M.20, $M.22;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.15, system_wq);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i2 := queue_work($p1, $p0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 247} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 134945);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.18, $M.20, $M.22;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i2 := ldv_queue_work_on_15(8192, $p0, $p1);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 249} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_15: ref;

axiom ldv_queue_work_on_15 == $sub.ref(0, 135977);

procedure ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.18, $M.20, $M.22;



implementation ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} {:cexpr "ldv_queue_work_on_15:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 252} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 253} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} activate_work_1($p2, 2);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 137009);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 255} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 256} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 257} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 138041);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.18, $M.20, $M.22;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i2 := $M.16;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.18;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.20;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.22;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $M.22 := $i1;
    call {:si_unique_call 262} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $M.20 := $i1;
    call {:si_unique_call 261} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.18 := $i1;
    call {:si_unique_call 260} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $M.16 := $i1;
    call {:si_unique_call 259} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 139073);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} ldv_error();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 140105);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 265} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 266} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 141137);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 267} __VERIFIER_error();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 142169);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 268} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 143201);

procedure ldv_spin_unlock_9($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_9($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} _raw_spin_unlock($p2);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 144233);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 145265);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 270} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 146297);

procedure ldv_spin_lock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} _raw_spin_lock($p2);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 147329);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 148361);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const digi_read_oob_callback: ref;

axiom digi_read_oob_callback == $sub.ref(0, 149393);

procedure digi_read_oob_callback($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.24, $CurrAddr;



implementation digi_read_oob_callback($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i74: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i64;
  var $i93: i1;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $p137: ref;
  var $p138: ref;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i1;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p12: ref;
  var $i13: i32;
  var $i15: i32;
  var $i82: i32;
  var vslice_dummy_var_38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} vslice_dummy_var_38 := usb_get_serial_port_data($p4);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i9, 3);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i10);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $r := $i82;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p12, $i13 := $p3, 0;
    goto $bb4;

  $bb4:
    call $i14, $p16, $p17, $i18, $p19, $i20, $i21, $i22, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $p30, $p31, $i32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $p61, $p62, $p63, $i64, $i65, $i66, $i71, $i72, $i73, $i67, $i68, $i69, $i70, $i74, $p76, $p77, $p78, $p79, $i80, $i81, $p83, $p84, $i85, $i86, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $p98, $i99, $i100, $p101, $i102, $p103, $p104, $i105, $i106, $p107, $i108, $i109, $p110, $i111, $i112, $p113, $p114, $i115, $i116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $p124, $i125, $i126, $p127, $i128, $i129, $p130, $i131, $i132, $p133, $p134, $i135, $i136, $p137, $p138, $i139, $p140, $p141, $p142, $p143, $i144, $p145, $i146, $i147, $i148, $p12, $i13, $i15 := digi_read_oob_callback_loop_$bb4($p0, $p1, $p6, $p8, $i14, $p16, $p17, $i18, $p19, $i20, $i21, $i22, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $p30, $p31, $i32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $p61, $p62, $p63, $i64, $i65, $i66, $i71, $i72, $i73, $i67, $i68, $i69, $i70, $i74, $p76, $p77, $p78, $p79, $i80, $i81, $p83, $p84, $i85, $i86, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $p98, $i99, $i100, $p101, $i102, $p103, $p104, $i105, $i106, $p107, $i108, $i109, $p110, $i111, $i112, $p113, $p114, $i115, $i116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $p124, $i125, $i126, $p127, $i128, $i129, $p130, $i131, $i132, $p133, $p134, $i135, $i136, $p137, $p138, $i139, $p140, $p141, $p142, $p143, $i144, $p145, $i146, $i147, $i148, $p12, $i13, $i15);
    goto $bb4_last;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb53;

  $bb53:
    call $i14, $p16, $p17, $i18, $p19, $i20, $i21, $i22, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $p30, $p31, $i32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $p61, $p62, $p63, $i64, $i65, $i66, $i71, $i72, $i73, $i67, $i68, $i69, $i70, $i15 := digi_read_oob_callback_loop_$bb53($p0, $p1, $p6, $p8, $i14, $p16, $p17, $i18, $p19, $i20, $i21, $i22, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $p30, $p31, $i32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $p61, $p62, $p63, $i64, $i65, $i66, $i71, $i72, $i73, $i67, $i68, $i69, $i70, $p12, $i15);
    goto $bb53_last;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i15, 1);
    call {:si_unique_call 274} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i15);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.25, $p19);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    call {:si_unique_call 275} {:cexpr "opcode"} boogie_si_record_i32($i21);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i14, 1);
    call {:si_unique_call 276} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i14);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p24, $mul.ref($i25, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.25, $p26);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    call {:si_unique_call 277} {:cexpr "line"} boogie_si_record_i32($i28);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i22, 1);
    call {:si_unique_call 278} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i22);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p31, $mul.ref($i32, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.25, $p33);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    call {:si_unique_call 279} {:cexpr "status"} boogie_si_record_i32($i35);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i29, 1);
    call {:si_unique_call 280} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i29);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p38, $mul.ref($i39, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.25, $p40);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    call {:si_unique_call 281} {:cexpr "val"} boogie_si_record_i32($i42);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, .str.4);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p44, .str.47);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p45, .str.6);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p46, .str.48);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.5, $p48);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 1479);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p48, $i51);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p52, 0);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.6, $p53);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 283} {:cexpr "tmp___4"} boogie_si_record_i64($i57);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i35, 0);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i60 == 1);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i65 := $sext.i8.i32($i64);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i66 := $sle.i32($i65, $i28);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i67, $i68, $i69, $i70 := $i21, $i28, $i36, $i42;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i68);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i74, 8));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p78 := usb_get_serial_port_data($p77);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p77, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p84 := tty_port_tty_get($p83);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p84);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i67, 13);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i139 == 1);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i67, 9);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} tty_kref_put($p84);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p8);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i147 := $sub.i32($i146, 3);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i148 := $ult.i32($i69, $i147);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i148 == 1);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb51:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $p12, $i13 := $p77, $i69;
    goto $bb51_dummy;

  $bb48:
    assume $i144 == 1;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} __wake_up($p145, 1, 1, $0.ref);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i139 == 1;
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} spin_lock($p140);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, 1);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} __wake_up($p142, 1, 1, $0.ref);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} spin_unlock($p143);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb24:
    assume $i93 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i67, 8);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb26;

  $bb27:
    assume $i94 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} spin_lock($p95);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i70, 16);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i97 == 1);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, $sub.i32(0, 33));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, $i106);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i70, 32);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i109 == 1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, $sub.i32(0, 257));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i116);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i70, 64);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i119 == 1);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, $sub.i32(0, 129));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $i126);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i70, 128);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i129 == 1);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, $sub.i32(0, 65));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i136);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} spin_unlock($p138);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i129 == 1;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i132 := $or.i32($i131, 64);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p133, $i132);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i119 == 1;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i122 := $or.i32($i121, 128);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, $i122);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i109 == 1;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i112 := $or.i32($i111, 256);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i112);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i97 == 1;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i99, 32);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $i100);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i91, 0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i102 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p77, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} tty_port_tty_wakeup($p103);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb21:
    assume $i86 == 1;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, $sub.i32(0, 2147483648));
    call {:si_unique_call 287} {:cexpr "rts"} boogie_si_record_i32($i90);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i91 := $i90;
    goto $bb23;

  $bb17:
    assume $i81 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 1);
    goto $bb19;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p8);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i71, 3);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i73 := $ult.i32($i36, $i72);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i73 == 1);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb14:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i36;
    goto $bb14_dummy;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb10;

  $bb6:
    assume $i58 == 1;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p12, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p1, $p59, .str.48, $i21, $i28, $i35, $i42);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb14_dummy:
    assume false;
    return;

  $bb53_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  $bb51_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1634;
}



const digi_read_inb_callback: ref;

axiom digi_read_inb_callback == $sub.ref(0, 150425);

procedure digi_read_inb_callback($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.26, $M.27, $M.28, $CurrAddr;



implementation digi_read_inb_callback($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i50: i32;
  var $i51: i1;
  var $i53: i32;
  var $i54: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i55: i32;
  var $i52: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i8;
  var $i65: i64;
  var $p67: ref;
  var $p68: ref;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i24;
  var $i77: i24;
  var $i78: i24;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i24;
  var $i95: i24;
  var $i96: i24;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $i105: i1;
  var $i106: i32;
  var $i30: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $p6 := usb_get_serial_port_data($p5);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.25, $p9);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    call {:si_unique_call 299} {:cexpr "opcode"} boogie_si_record_i32($i11);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(1, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.25, $p14);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    call {:si_unique_call 300} {:cexpr "len"} boogie_si_record_i32($i16);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(2, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.25, $p19);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    call {:si_unique_call 301} {:cexpr "port_status"} boogie_si_record_i32($i21);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(3, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 302} {:cexpr "status"} boogie_si_record_i32($i26);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, $sub.i32(0, 2));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i16, 2);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i32, $i33);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} spin_lock($p40);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    call {:si_unique_call 305} {:cexpr "throttled"} boogie_si_record_i32($i42);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i11, 19);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} spin_unlock($p68);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i11, 20);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i69 == 1);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i11, 19);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i42, 0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i32($i105);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i30 := $i106;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb35:
    assume $i87 == 1;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p88, .str.4);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p89, .str.50);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p90, .str.6);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p91, .str.52);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i94 := $load.i24($M.5, $p93);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i95 := $and.i24($i94, $sub.i24(0, 262144));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i96 := $or.i24($i95, 1444);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p93, $i96);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p97, 0);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.6, $p98);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i64($i99);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i101 := $and.i64($i100, 1);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i102 := ldv__builtin_expect($i101, 0);
    call {:si_unique_call 315} {:cexpr "tmp___1"} boogie_si_record_i64($i102);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i103 == 1;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p104, .str.52, .str.50, $i11);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb29:
    assume $i69 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p70, .str.4);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p71, .str.50);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p72, .str.6);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p73, .str.51);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i76 := $load.i24($M.5, $p75);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i77 := $and.i24($i76, $sub.i24(0, 262144));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i78 := $or.i24($i77, 1442);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p75, $i78);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p79, 0);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.6, $p80);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i64($i81);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i83 := $and.i64($i82, 1);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i84 := ldv__builtin_expect($i83, 0);
    call {:si_unique_call 312} {:cexpr "tmp___0"} boogie_si_record_i64($i84);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i85 == 1;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p86, .str.51, .str.50);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i21, 4);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i21, 32);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i51 == 1);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i21, 8);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i21, 16);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i55 := $i58;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i52 := $i55;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32($i16, 1);
    call {:si_unique_call 307} {:cexpr "len"} boogie_si_record_i32($i59);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i59, 0);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i60 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i52);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i63 := $sext.i8.i32($i62);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i59);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_40 := tty_insert_flip_string_fixed_flag($p61, $p24, $i64, $i65);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} tty_flip_buffer_push($p67);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i57 == 1;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i58 := 2;
    goto $bb24;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i55 := 3;
    goto $bb21;

  $bb16:
    assume $i51 == 1;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i52 := 1;
    goto $bb18;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} vslice_dummy_var_39 := tty_insert_flip_char($p48, 0, 4);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(196, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 1);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i34 == 1;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} dev_err.ref.ref.ref.i32.i32.i32.i32.i32.i32($p35, .str.49, .str.50, $i26, $i37, $i11, $i16, $i39, $i21);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb3;
}



const ldv_usb_submit_urb_35: ref;

axiom ldv_usb_submit_urb_35 == $sub.ref(0, 151457);

procedure ldv_usb_submit_urb_35($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_35($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} {:cexpr "ldv_usb_submit_urb_35:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} ldv_check_alloc_flags($i1);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p2 := ldv_undef_ptr();
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const tty_insert_flip_char: ref;

axiom tty_insert_flip_char == $sub.ref(0, 152489);

procedure tty_insert_flip_char($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.27, $M.28, $CurrAddr;



implementation tty_insert_flip_char($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i12: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i40: i32;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p3, $i1);
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p4, $i2);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(0, 1)), $mul.ref(304, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.28, $p8);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i12);
    call {:si_unique_call 322} {:cexpr "change"} boogie_si_record_i32($i16);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i40 := tty_insert_flip_string_flags($p0, $p3, $p4, 1);
    call {:si_unique_call 327} {:cexpr "tmp___2"} boogie_si_record_i32($i40);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.28, $p18);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.28, $p20);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i19, $i21);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.28, $p23);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.28, $p31);
    call {:si_unique_call 324} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.28, $p33);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p36, $i35);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p37 := char_buf_ptr($p7, $i32);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.26, $p3);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p37, $i38);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb12;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.28, $p27);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $p29 := flag_buf_ptr($p7, $i28);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.27, $p4);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p29, $i30);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.27, $p4);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb3;
}



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 153521);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 328} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 329} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 1} true;
    call {:si_unique_call 330} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 331} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 154553);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    return;
}



const flag_buf_ptr: ref;

axiom flag_buf_ptr == $sub.ref(0, 155585);

procedure flag_buf_ptr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation flag_buf_ptr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} {:cexpr "flag_buf_ptr:arg:ofs"} boogie_si_record_i32($i1);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p2 := char_buf_ptr($p0, $i1);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.28, $p3);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const char_buf_ptr: ref;

axiom char_buf_ptr == $sub.ref(0, 156617);

procedure char_buf_ptr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation char_buf_ptr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} {:cexpr "char_buf_ptr:arg:ofs"} boogie_si_record_i32($i1);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const tty_insert_flip_string_flags: ref;

axiom tty_insert_flip_string_flags == $sub.ref(0, 157649);

procedure tty_insert_flip_string_flags($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_flags($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 335} {:cexpr "tty_insert_flip_string_flags:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 1} true;
    call {:si_unique_call 336} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 337} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const tty_port_tty_get: ref;

axiom tty_port_tty_get == $sub.ref(0, 158681);

procedure tty_port_tty_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_tty_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $p1 := external_alloc();
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_kref_put: ref;

axiom tty_kref_put == $sub.ref(0, 159713);

procedure tty_kref_put($p0: ref);
  free requires assertsPassed;



implementation tty_kref_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 160745);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 1} true;
    call {:si_unique_call 339} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 340} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const digi_set_modem_signals: ref;

axiom digi_set_modem_signals == $sub.ref(0, 161777);

procedure digi_set_modem_signals($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, assertsPassed;



implementation digi_set_modem_signals($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i8;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i8;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i8;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i1;
  var $p91: ref;
  var $i49: i32;
  var vslice_dummy_var_41: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 342} {:cexpr "digi_set_modem_signals:arg:modem_signals"} boogie_si_record_i32($i1);
    call {:si_unique_call 343} {:cexpr "digi_set_modem_signals:arg:interruptible"} boogie_si_record_i32($i2);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $p4 := usb_get_serial_port_data($p0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p8 := usb_get_serial_data($p7);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p12 := usb_get_serial_port_data($p11);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, .str.4);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, .str.5);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str.6);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.7);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.5, $p23);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 540);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p23, $i26);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 0);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.6, $p28);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 348} {:cexpr "tmp___2"} boogie_si_record_i64($i32);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} ldv_spin_lock();
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} spin_lock($p37);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 6);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p17, $mul.ref(1, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, $i55);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i1, 2);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p17, $mul.ref(2, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i60);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p17, $mul.ref(3, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p17, $mul.ref(4, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 7);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p17, $mul.ref(5, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i66);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i1, 4);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p17, $mul.ref(6, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $i71);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p17, $mul.ref(7, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p11, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 8);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p11, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i79 := ldv_usb_submit_urb_30($p78, 32);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 360} {:cexpr "ret"} boogie_si_record_i32($i79);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} spin_unlock($p88);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} spin_unlock_irqrestore($p89, 0);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i79, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i49 := $i79;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb22:
    assume $i90 == 1;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} dev_err.ref.ref.ref.i32($p91, .str.8, .str.5, $i79);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i80 == 1;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 1);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, $sub.i32(0, 7));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i1, 6);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i84, $i85);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i40 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p41, $p42, $p43, $i45, $p46, $i47, $i48, $p50, $i51, $i52, vslice_dummy_var_41 := digi_set_modem_signals_loop_$bb7($i2, $p5, $p11, $p13, $p38, $p41, $p42, $p43, $i45, $p46, $i47, $i48, $p50, $i51, $i52, vslice_dummy_var_41);
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} spin_unlock($p41);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p11, $mul.ref(0, 3016)), $mul.ref(1408, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_41 := cond_wait_interruptible_timeout_irqrestore($p42, 25, $p43, 0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i2, 0);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} ldv_spin_lock();
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} spin_lock($p50);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p38);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb16_dummy;

  $bb9:
    assume $i45 == 1;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p46 := get_current();
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i47 := signal_pending($p46);
    call {:si_unique_call 356} {:cexpr "tmp___4"} boogie_si_record_i32($i47);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 4);
    goto $bb13;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p34, .str.7, $i36, $i1);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const cond_wait_interruptible_timeout_irqrestore: ref;

axiom cond_wait_interruptible_timeout_irqrestore == $sub.ref(0, 162809);

procedure cond_wait_interruptible_timeout_irqrestore($p0: ref, $i1: i64, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.24, $CurrAddr;



implementation cond_wait_interruptible_timeout_irqrestore($p0: ref, $i1: i64, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 365} {:cexpr "cond_wait_interruptible_timeout_irqrestore:arg:timeout"} boogie_si_record_i64($i1);
    call {:si_unique_call 366} {:cexpr "cond_wait_interruptible_timeout_irqrestore:arg:flags"} boogie_si_record_i64($i3);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p5 := get_current();
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p6, 0);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p8, $p5);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p9, autoremove_wake_function);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p12, $p10);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p15, $p13);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} prepare_to_wait($p0, $p4, 1);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} spin_unlock_irqrestore($p2, $i3);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i16 := schedule_timeout($i1);
    call {:si_unique_call 371} {:cexpr "timeout"} boogie_si_record_i64($i16);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} finish_wait($p0, $p4);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 163841);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $p0 := devirtbounce(0, current_task);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 164873);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 375} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 377} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_usb_submit_urb_30: ref;

axiom ldv_usb_submit_urb_30 == $sub.ref(0, 165905);

procedure ldv_usb_submit_urb_30($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_30($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} {:cexpr "ldv_usb_submit_urb_30:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} ldv_check_alloc_flags($i1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p2 := ldv_undef_ptr();
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 166937);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.24;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} ldv_spin_unlock();
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 167969);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 169001);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 170033);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(8, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.7, $p2);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 389} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 171065);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 392} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 172097);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 394} $i2 := devirtbounce.1(0, $p1, $i0);
    call {:si_unique_call 395} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 173129);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 174161);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 175193);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 397} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 1} true;
    call {:si_unique_call 398} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 399} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 176225);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_31: ref;

axiom ldv_usb_submit_urb_31 == $sub.ref(0, 177257);

procedure ldv_usb_submit_urb_31($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_31($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} {:cexpr "ldv_usb_submit_urb_31:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} ldv_check_alloc_flags($i1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p2 := ldv_undef_ptr();
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const digi_write_inb_command: ref;

axiom digi_write_inb_command == $sub.ref(0, 178289);

procedure digi_write_inb_command($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $M.0, $CurrAddr, assertsPassed;



implementation digi_write_inb_command($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i8;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i32;
  var $i92: i64;
  var $i93: i64;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $i119: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i121: i1;
  var $i122: i32;
  var $i120: i32;
  var $i35: i32;
  var $p123: ref;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i48: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_42: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 404} {:cexpr "digi_write_inb_command:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 405} {:cexpr "digi_write_inb_command:arg:timeout"} boogie_si_record_i64($i3);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $p5 := usb_get_serial_port_data($p0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.4);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.36);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str.6);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.37);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 457);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 0);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 408} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i3, 0);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i33 := $sub.i64(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} ldv_spin_lock();
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i2, 0);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i35 := 0;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} spin_unlock_irqrestore($p123, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i35, 0);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i48 := $i35;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb43:
    assume $i124 == 1;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} dev_err.ref.ref.ref.i32.i32($p125, .str.15, .str.36, $i35, $i127);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p36, $i37, $i38 := $p1, $i2, 0;
    goto $bb10;

  $bb10:
    call $p39, $i40, $i41, $p42, $p43, $p45, $i46, $i47, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $p75, $i76, $i77, $p78, $p79, $p80, $p81, $i82, $i83, $p84, $i85, $i86, $i87, $p88, $i89, $p90, $i91, $i92, $i93, $p94, $i95, $p96, $i97, $i98, $i99, $p100, $p101, $p102, $i103, $i104, $p105, $p106, $p107, $p108, $p109, $i110, $i111, $p112, $p113, $i114, $i115, $p116, $i117, $p118, $i119, $p36, $i37, $i38, $i121, $i122, $i120, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, vslice_dummy_var_42 := digi_write_inb_command_loop_$bb10($p0, $p6, $p10, $i33, $p39, $i40, $i41, $p42, $p43, $p45, $i46, $i47, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $p75, $i76, $i77, $p78, $p79, $p80, $p81, $i82, $i83, $p84, $i85, $i86, $i87, $p88, $i89, $p90, $i91, $i92, $i93, $p94, $i95, $p96, $i97, $i98, $i99, $p100, $p101, $p102, $i103, $i104, $p105, $p106, $p107, $p108, $p109, $i110, $i111, $p112, $p113, $i114, $i115, $p116, $i117, $p118, $i119, $p36, $i37, $i38, $i121, $i122, $i120, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, vslice_dummy_var_42);
    goto $bb10_last;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i38, 0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i122 := $i38;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i35 := $i122;
    goto $bb9;

  $bb40:
    assume $i121 == 1;
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, $sub.i32(0, 2));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32($i56, $i58);
    call {:si_unique_call 417} {:cexpr "_min2"} boogie_si_record_i32($i59);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i37, $i59);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i60 == 1);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i61 := $i59;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, 4);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i61;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i67 := $sgt.i32($i66, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i67 == 1);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i64);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} memcpy_guard($p10, $p36, $i103);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i64);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 424} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p10, $p36, $i104, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, $i64);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i110 := ldv_usb_submit_urb_29($p109, 32);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 426} {:cexpr "ret"} boogie_si_record_i32($i110);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 0);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i117, $p118 := $i37, $p36;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i119 := $sgt.i32($i117, 0);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i120 := $i110;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i35 := $i120;
    goto $bb9;

  $bb38:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $p36, $i37, $i38 := $p118, $i117, $i110;
    goto $bb38_dummy;

  $bb35:
    assume $i111 == 1;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, 1);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i114 := $sub.i32($i37, $i64);
    call {:si_unique_call 427} {:cexpr "count"} boogie_si_record_i32($i114);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i64);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p36, $mul.ref($i115, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i117, $p118 := $i114, $p116;
    goto $bb37;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i67 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 18);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p10, $mul.ref(1, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, $i70);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p10, $mul.ref(2, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i76);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} memcpy_guard($p72, $p74, $i77);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p10, $mul.ref(2, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 420} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p78, $p80, $i83, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i86, 2);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p10, $mul.ref($i87, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i64);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} memcpy_guard($p88, $p36, $i89);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i91);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i92, 2);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p10, $mul.ref($i93, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i64);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 422} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p94, $p36, $i95, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, 2);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, $i64);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i99);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i62 == 1;
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i61, $sub.i32(0, 4));
    call {:si_unique_call 418} {:cexpr "len"} boogie_si_record_i32($i63);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb31;

  $bb26:
    assume $i60 == 1;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i61 := $i37;
    goto $bb28;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $p42, $p43, $p45, $i46, $i47, $i49, $i50, $i51, $i52, $i53, vslice_dummy_var_42 := digi_write_inb_command_loop_$bb15($p0, $p6, $i33, $p39, $p42, $p43, $p45, $i46, $i47, $i49, $i50, $i51, $i52, $i53, vslice_dummy_var_42);
    goto $bb15_last;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i52 := $sub.i64($i51, $i33);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i53 := $slt.i64($i52, 0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1408, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_42 := cond_wait_interruptible_timeout_irqrestore($p42, 25, $p43, 0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p45 := get_current();
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i46 := signal_pending($p45);
    call {:si_unique_call 415} {:cexpr "tmp___2"} boogie_si_record_i32($i46);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_spin_lock();
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p39);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i50 == 1);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb21_dummy;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 4);
    goto $bb19;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.15, jiffies);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i3, $i31);
    call {:si_unique_call 410} {:cexpr "timeout"} boogie_si_record_i64($i32);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb6;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p4, $p27, .str.37, $i29, $i2);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.15, jiffies);
    goto corral_source_split_2356;

  $bb38_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;
}



const ldv_usb_submit_urb_29: ref;

axiom ldv_usb_submit_urb_29 == $sub.ref(0, 179321);

procedure ldv_usb_submit_urb_29($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_29($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} {:cexpr "ldv_usb_submit_urb_29:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} ldv_check_alloc_flags($i1);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p2 := ldv_undef_ptr();
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const tty_get_baud_rate: ref;

axiom tty_get_baud_rate == $sub.ref(0, 180353);

procedure tty_get_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_get_baud_rate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i2 := tty_termios_baud_rate($p1);
    call {:si_unique_call 434} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_termios_baud_rate: ref;

axiom tty_termios_baud_rate == $sub.ref(0, 181385);

procedure tty_termios_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_termios_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 1} true;
    call {:si_unique_call 435} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 436} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 182417);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const digi_write_oob_command: ref;

axiom digi_write_oob_command == $sub.ref(0, 183449);

procedure digi_write_oob_command($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $M.0, $CurrAddr, assertsPassed;



implementation digi_write_oob_command($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i1;
  var $p34: ref;
  var $i35: i32;
  var $i80: i32;
  var $i33: i32;
  var $p81: ref;
  var $i82: i1;
  var $p83: ref;
  var $i46: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var vslice_dummy_var_43: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 439} {:cexpr "digi_write_oob_command:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 440} {:cexpr "digi_write_oob_command:arg:interruptible"} boogie_si_record_i32($i3);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $p7 := usb_get_serial_data($p6);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $p11 := usb_get_serial_port_data($p10);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str.4);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.20);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.6);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.21);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.5, $p18);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 400);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p18, $i21);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.6, $p23);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 444} {:cexpr "tmp___1"} boogie_si_record_i64($i27);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} ldv_spin_lock();
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i2, 0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i33 := 0;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} spin_unlock_irqrestore($p81, 0);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i33, 0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i46 := $i33;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb36:
    assume $i82 == 1;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} dev_err.ref.ref.ref.i32($p83, .str.8, .str.20, $i33);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p34, $i35 := $p1, $i2;
    goto $bb7;

  $bb7:
    call $p36, $i37, $i38, $p39, $p40, $i42, $p43, $i44, $i45, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $p57, $p58, $p59, $i60, $p61, $p62, $p63, $p64, $i65, $p66, $p67, $p68, $p69, $p70, $i71, $i72, $p73, $i74, $i75, $p76, $i77, $p78, $i79, $p34, $i35, $i80, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20, vslice_dummy_var_43 := digi_write_oob_command_loop_$bb7($i3, $p10, $p12, $p36, $i37, $i38, $p39, $p40, $i42, $p43, $i44, $i45, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $p57, $p58, $p59, $i60, $p61, $p62, $p63, $p64, $i65, $p66, $p67, $p68, $p69, $p70, $i71, $i72, $p73, $i74, $i75, $p76, $i77, $p78, $i79, $p34, $i35, $i80, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20, vslice_dummy_var_43);
    goto $bb7_last;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p10, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    call {:si_unique_call 452} {:cexpr "_min2"} boogie_si_record_i32($i50);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i35, $i50);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i51 == 1);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i52 := $i50;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i32($i52, 4);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i52;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p10, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i55);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} memcpy_guard($p59, $p34, $i60);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p10, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i55);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 455} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p64, $p34, $i65, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p10, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i55);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p10, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i71 := ldv_usb_submit_urb_28($p70, 32);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 457} {:cexpr "ret"} boogie_si_record_i32($i71);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i77, $p78 := $i35, $p34;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i79 := $sgt.i32($i77, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i80 := $i71;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i33 := $i80;
    goto $bb6;

  $bb33:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $p34, $i35 := $p78, $i77;
    goto $bb33_dummy;

  $bb30:
    assume $i72 == 1;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 1);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32($i35, $i55);
    call {:si_unique_call 458} {:cexpr "count"} boogie_si_record_i32($i74);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i55);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p34, $mul.ref($i75, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i77, $p78 := $i74, $p76;
    goto $bb32;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i53 == 1;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i52, $sub.i32(0, 4));
    call {:si_unique_call 453} {:cexpr "len"} boogie_si_record_i32($i54);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb29;

  $bb24:
    assume $i51 == 1;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i52 := $i35;
    goto $bb26;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call $p39, $p40, $i42, $p43, $i44, $i45, $i47, $i48, vslice_dummy_var_43 := digi_write_oob_command_loop_$bb12($i3, $p10, $p12, $p36, $p39, $p40, $i42, $p43, $i44, $i45, $i47, $i48, vslice_dummy_var_43);
    goto $bb12_last;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref(0, 3016)), $mul.ref(1408, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vslice_dummy_var_43 := cond_wait_interruptible_timeout_irqrestore($p39, 25, $p40, 0);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i3, 0);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} ldv_spin_lock();
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p36);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i48 == 1);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb21_dummy;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $p43 := get_current();
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i44 := signal_pending($p43);
    call {:si_unique_call 450} {:cexpr "tmp___3"} boogie_si_record_i32($i44);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 4);
    goto $bb18;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p4, $p29, .str.21, $i31, $i2);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb33_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2557;
}



const tty_encode_baud_rate: ref;

axiom tty_encode_baud_rate == $sub.ref(0, 184481);

procedure tty_encode_baud_rate($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation tty_encode_baud_rate($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} {:cexpr "tty_encode_baud_rate:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 462} {:cexpr "tty_encode_baud_rate:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_28: ref;

axiom ldv_usb_submit_urb_28 == $sub.ref(0, 185513);

procedure ldv_usb_submit_urb_28($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_28($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} {:cexpr "ldv_usb_submit_urb_28:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} ldv_check_alloc_flags($i1);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p2 := ldv_undef_ptr();
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const preempt_count: ref;

axiom preempt_count == $sub.ref(0, 186545);

procedure preempt_count() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $CurrAddr, assertsPassed;



implementation preempt_count() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i0 := devirtbounce.2(0, __preempt_count);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 467} {:cexpr "pfo_ret__"} boogie_si_record_i32($i0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 2147483647);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const ldv_usb_submit_urb_32: ref;

axiom ldv_usb_submit_urb_32 == $sub.ref(0, 187577);

procedure ldv_usb_submit_urb_32($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_32($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} {:cexpr "ldv_usb_submit_urb_32:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} ldv_check_alloc_flags($i1);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $p2 := ldv_undef_ptr();
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 188609);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    return;
}



const digi_transmit_idle: ref;

axiom digi_transmit_idle == $sub.ref(0, 189641);

procedure digi_transmit_idle($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, assertsPassed;



implementation digi_transmit_idle($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i16: i32;
  var vslice_dummy_var_44: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 473} {:cexpr "digi_transmit_idle:arg:timeout"} boogie_si_record_i64($i1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p3 := usb_get_serial_port_data($p0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} ldv_spin_lock();
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} spin_unlock_irqrestore($p6, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 13);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.15, jiffies);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i1, $i9);
    call {:si_unique_call 477} {:cexpr "timeout"} boogie_si_record_i64($i10);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.15, jiffies);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64($i10, $i12);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i14 := digi_write_inb_command($p0, $p11, 2, $i13);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 479} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} ldv_spin_lock();
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.15, jiffies);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64($i17, $i10);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i19 := $slt.i64($i18, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} spin_unlock_irqrestore($p33, 0);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $p20, $p21, $p23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, vslice_dummy_var_44 := digi_transmit_idle_loop_$bb8($p4, $i10, $p20, $p21, $p23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, vslice_dummy_var_44);
    goto $bb8_last;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} vslice_dummy_var_44 := cond_wait_interruptible_timeout_irqrestore($p20, 25, $p21, 0);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p23 := get_current();
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i24 := signal_pending($p23);
    call {:si_unique_call 484} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} ldv_spin_lock();
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.15, jiffies);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i27 := $sub.i64($i26, $i10);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i28 := $slt.i64($i27, 0);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb13_dummy;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 4);
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2692;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 190673);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 191705);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} ldv_spin_lock();
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} ldv_spin_lock_irq_8($p0);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 192737);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} ldv_spin_unlock();
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} ldv_spin_unlock_irq_11($p0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 193769);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_11: ref;

axiom ldv_spin_unlock_irq_11 == $sub.ref(0, 194801);

procedure ldv_spin_unlock_irq_11($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_11($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} _raw_spin_unlock_irq($p2);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 195833);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_8: ref;

axiom ldv_spin_lock_irq_8 == $sub.ref(0, 196865);

procedure ldv_spin_lock_irq_8($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_8($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} _raw_spin_lock_irq($p2);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 197897);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    return;
}



const digi_startup_device: ref;

axiom digi_startup_device == $sub.ref(0, 198929);

procedure digi_startup_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, assertsPassed;



implementation digi_startup_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i19: i32;
  var $i40: i32;
  var $i18: i32;
  var $i32: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p1 := usb_get_serial_data($p0);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} spin_lock($p3);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(84, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(84, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 1);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} spin_unlock($p10);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i18 := 0;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i32 := $i18;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i8 := $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb8;

  $bb8:
    call $i20, $p22, $p23, $p24, $p25, $i26, $i27, $i28, $p29, $i30, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i19, $i40 := digi_startup_device_loop_$bb8($p0, $p11, $i20, $p22, $p23, $p24, $p25, $i26, $i27, $i28, $p29, $i30, $i33, $p34, $p35, $i36, $i37, $i38, $i39, $i19, $i40);
    goto $bb8_last;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i20, 8));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i26 := ldv_usb_submit_urb_34($p25, 208);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 498} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i28, $p29, $i30 := $i19, $p23, $i26;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i19, 1);
    call {:si_unique_call 500} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p11);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i36);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, $i33);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i40 := $i26;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i18 := $i40;
    goto $bb7;

  $bb14:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i33;
    goto $bb14_dummy;

  $bb10:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p29, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} dev_err.ref.ref.ref.i32.i32($p31, .str.15, .str.19, $i30, $i28);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    goto $bb12;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} spin_unlock($p7);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2776;
}



const ldv_usb_submit_urb_34: ref;

axiom ldv_usb_submit_urb_34 == $sub.ref(0, 199961);

procedure ldv_usb_submit_urb_34($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_34($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} {:cexpr "ldv_usb_submit_urb_34:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} ldv_check_alloc_flags($i1);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $p2 := ldv_undef_ptr();
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 200993);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} free_($p0);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 202025);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 505} $free($p0);
    return;
}



const digi_port_init: ref;

axiom digi_port_init == $sub.ref(0, 203057);

procedure digi_port_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation digi_port_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i13: i32;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var vslice_dummy_var_45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 513} {:cexpr "digi_port_init:arg:port_num"} boogie_si_record_i32($i1);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $p9 := kzalloc(464, 208);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_45 := spinlock_check($p14);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} __raw_spin_lock_init($p18, .str.9, $p2);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i1);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} __init_waitqueue_head($p20, .str.10, $p3);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} __init_waitqueue_head($p21, .str.11, $p4);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(288, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} __init_waitqueue_head($p22, .str.12, $p5);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(376, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} __init_work($p23, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, 137438953408);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(376, 1)), $mul.ref(0, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p7);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 521} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p27, $p28, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(376, 1)), $mul.ref(32, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} lockdep_init_map($p30, .str.13, $p6, 0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} INIT_LIST_HEAD($p32);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(376, 1)), $mul.ref(24, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, digi_wakeup_write_lock);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1408, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} __init_waitqueue_head($p37, .str.14, $p8);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p10);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} usb_set_serial_port_data($p0, $p38);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 204089);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 527} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} ldv_check_alloc_flags($i1);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p2 := ldv_undef_ptr();
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 205121);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 206153);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 207185);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 208217);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 209249);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 210281);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    return;
}



const digi_wakeup_write_lock: ref;

axiom digi_wakeup_write_lock == $sub.ref(0, 211313);

procedure digi_wakeup_write_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation digi_wakeup_write_lock($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 376), 464)), $mul.ref(456, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} ldv_spin_lock();
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} tty_port_tty_wakeup($p5);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 376), 464)), $mul.ref(0, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} spin_unlock_irqrestore($p6, $u0);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_serial_port_data: ref;

axiom usb_set_serial_port_data == $sub.ref(0, 212345);

procedure usb_set_serial_port_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_serial_port_data($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} dev_set_drvdata($p2, $p1);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 213377);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_serial_data: ref;

axiom usb_set_serial_data == $sub.ref(0, 214409);

procedure usb_set_serial_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_serial_data($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 215441);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 536} $r := $malloc($i0);
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 216473);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p1 := calloc(1, $i0);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 1} true;
    call {:si_unique_call 539} __VERIFIER_assume($i4);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 217505);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.29;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 541} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.29;
    call {:si_unique_call 542} cmdloc_dummy_var_25 := $memset.i8(cmdloc_dummy_var_24, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.29 := cmdloc_dummy_var_25;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 218537);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 219569);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.16, $M.24, $M.18, $M.20, $M.22;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 1} true;
    call {:si_unique_call 543} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 544} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 545} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ldv_stop();
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i21 := $M.22;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i23 := $M.22;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 555} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p25 := $M.17;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} digi_wakeup_write_lock($p25);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 557} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i16 := $M.20;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i18 := $M.20;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.20 := 4;
    call {:si_unique_call 552} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p20 := $M.17;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} digi_wakeup_write_lock($p20);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 554} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i11 := $M.18;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i13 := $M.18;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.18 := 4;
    call {:si_unique_call 549} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p15 := $M.17;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} digi_wakeup_write_lock($p15);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 551} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i6 := $M.16;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i8 := $M.16;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.16 := 4;
    call {:si_unique_call 546} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p10 := $M.17;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} digi_wakeup_write_lock($p10);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 548} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 220601);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_usb_serial_driver_2: ref;

axiom ldv_initialize_usb_serial_driver_2 == $sub.ref(0, 221633);

procedure ldv_initialize_usb_serial_driver_2();
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.32, $M.33, $M.0, $CurrAddr;



implementation ldv_initialize_usb_serial_driver_2()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $M.30 := $p0;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p2 := ldv_init_zalloc(3008);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $M.31 := $p2;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $p4 := ldv_init_zalloc(272);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $M.32 := $p4;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $p6 := ldv_init_zalloc(1816);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $M.33 := $p6;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_serial_driver_3: ref;

axiom ldv_initialize_usb_serial_driver_3 == $sub.ref(0, 222665);

procedure ldv_initialize_usb_serial_driver_3();
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.37, $M.0, $CurrAddr;



implementation ldv_initialize_usb_serial_driver_3()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p2 := ldv_init_zalloc(3008);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $M.35 := $p2;
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $p4 := ldv_init_zalloc(272);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.36 := $p4;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p6 := ldv_init_zalloc(1816);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.37 := $p6;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 223697);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 567} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 568} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 569} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 570} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 224729);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.16, $M.18, $M.20, $M.22, $M.38, $M.39, $M.40, $M.41, $M.42, $M.24, $M.43, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.44, $M.14, $M.45, $M.8, $M.9, $M.10, $M.11, $M.12, $M.46, $M.47, $M.17, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $CurrAddr, $M.26, $M.27, $M.28, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i32;
  var $i184: i32;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i32;
  var $i189: i32;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i194: i32;
  var $i195: i32;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i32;
  var $i201: i32;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i32;
  var $i207: i32;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $i213: i32;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $p224: ref;
  var $i225: i32;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $i261: i32;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i32;
  var $i267: i1;
  var $p268: ref;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i273: i32;
  var $i274: i32;
  var $i275: i1;
  var $p276: ref;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $i292: i32;
  var $i293: i1;
  var $p294: ref;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $i300: i32;
  var $i301: i1;
  var $p302: ref;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $i315: i32;
  var $i316: i1;
  var $i318: i32;
  var $i319: i32;
  var $i320: i32;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i1;
  var $i328: i1;
  var $i329: i1;
  var $i330: i1;
  var $i331: i1;
  var $i332: i1;
  var $i333: i1;
  var $i334: i1;
  var $i335: i1;
  var $i336: i1;
  var $i337: i1;
  var $i338: i1;
  var $i339: i1;
  var $i340: i1;
  var $i341: i1;
  var $i342: i1;
  var $i343: i32;
  var $i344: i1;
  var $p345: ref;
  var $i346: i32;
  var $i347: i1;
  var $p348: ref;
  var $i349: i32;
  var $i350: i1;
  var $p351: ref;
  var $i352: i32;
  var $i353: i1;
  var $p354: ref;
  var $i355: i32;
  var $i356: i1;
  var $p357: ref;
  var $i359: i32;
  var $i360: i1;
  var $p361: ref;
  var $i363: i32;
  var $i364: i1;
  var $p365: ref;
  var $i367: i32;
  var $i368: i1;
  var $p369: ref;
  var $i371: i32;
  var $i372: i1;
  var $p373: ref;
  var $p374: ref;
  var $i375: i32;
  var $i376: i32;
  var $i377: i1;
  var $i378: i32;
  var $i379: i1;
  var $p380: ref;
  var $i381: i32;
  var $i382: i1;
  var $p383: ref;
  var $i384: i32;
  var $i385: i1;
  var $p386: ref;
  var $i387: i32;
  var $i388: i1;
  var $p389: ref;
  var $i390: i32;
  var $i391: i1;
  var $p392: ref;
  var $p393: ref;
  var $i394: i32;
  var $i395: i1;
  var $p396: ref;
  var $p397: ref;
  var $i398: i32;
  var $i399: i1;
  var $p400: ref;
  var $p401: ref;
  var $i402: i32;
  var $i403: i1;
  var $p404: ref;
  var $p405: ref;
  var $i406: i32;
  var $i407: i1;
  var $p408: ref;
  var $i409: i32;
  var $i410: i1;
  var $p411: ref;
  var $i413: i32;
  var $i414: i1;
  var $p415: ref;
  var $i417: i32;
  var $i418: i1;
  var $p419: ref;
  var $i421: i32;
  var $i422: i1;
  var $p423: ref;
  var $i425: i32;
  var $i426: i1;
  var $p427: ref;
  var $i428: i32;
  var $i429: i32;
  var $i430: i32;
  var $i431: i1;
  var $p432: ref;
  var $i433: i32;
  var $i434: i32;
  var $i436: i32;
  var $i437: i1;
  var $p438: ref;
  var $i439: i32;
  var $i440: i32;
  var $i442: i32;
  var $i443: i1;
  var $p444: ref;
  var $i445: i32;
  var $i446: i32;
  var $i448: i32;
  var $i449: i1;
  var $p450: ref;
  var $i451: i32;
  var $i452: i32;
  var $i454: i32;
  var $i455: i1;
  var $p456: ref;
  var $p457: ref;
  var $i458: i32;
  var $i460: i32;
  var $i461: i1;
  var $p462: ref;
  var $p463: ref;
  var $i464: i32;
  var $i466: i32;
  var $i467: i1;
  var $p468: ref;
  var $p469: ref;
  var $i470: i32;
  var $i472: i32;
  var $i473: i1;
  var $p474: ref;
  var $p475: ref;
  var $i476: i32;
  var $i478: i32;
  var $i479: i1;
  var $p480: ref;
  var $i481: i32;
  var $i482: i32;
  var $i483: i1;
  var $i484: i32;
  var $i485: i1;
  var $p486: ref;
  var $i487: i32;
  var $i488: i1;
  var $p489: ref;
  var $i491: i32;
  var $i492: i1;
  var $p493: ref;
  var $i495: i32;
  var $i496: i1;
  var $p497: ref;
  var $i499: i32;
  var $i500: i1;
  var $p501: ref;
  var $i503: i32;
  var $i504: i1;
  var $p505: ref;
  var $i506: i32;
  var $i507: i32;
  var $i508: i1;
  var $p509: ref;
  var $i510: i32;
  var $i511: i32;
  var $i512: i1;
  var $p513: ref;
  var $i514: i32;
  var $i515: i32;
  var $i516: i1;
  var $p517: ref;
  var $i518: i32;
  var $i519: i32;
  var $i520: i1;
  var $p521: ref;
  var $i522: i32;
  var $i523: i1;
  var $p524: ref;
  var $i525: i32;
  var $i526: i1;
  var $p527: ref;
  var $i529: i32;
  var $i530: i1;
  var $p531: ref;
  var $i533: i32;
  var $i534: i1;
  var $p535: ref;
  var $i537: i32;
  var $i538: i1;
  var $p539: ref;
  var $i541: i32;
  var $i542: i1;
  var $p543: ref;
  var $i545: i32;
  var $i546: i1;
  var $p547: ref;
  var $i549: i32;
  var $i550: i1;
  var $p551: ref;
  var $i553: i32;
  var $i554: i1;
  var $p555: ref;
  var $i557: i32;
  var $i558: i1;
  var $p559: ref;
  var $i560: i32;
  var $i561: i1;
  var $i563: i32;
  var $i564: i32;
  var vslice_dummy_var_46: ref;
  var vslice_dummy_var_47: ref;
  var vslice_dummy_var_48: ref;
  var vslice_dummy_var_49: ref;
  var vslice_dummy_var_50: ref;
  var vslice_dummy_var_51: ref;
  var vslice_dummy_var_52: ref;
  var vslice_dummy_var_53: ref;
  var vslice_dummy_var_54: ref;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;

  $bb0:
    call {:si_unique_call 571} $initialize();
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $p9 := ldv_init_zalloc(44);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $p11 := ldv_init_zalloc(1);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p12 := ldv_init_zalloc(44);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $p14 := ldv_init_zalloc(1);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} ldv_initialize();
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_46 := ldv_memset($p15, 0, 4);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} vslice_dummy_var_47 := ldv_memset($p17, 0, 4);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_48 := ldv_memset($p19, 0, 4);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p3);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_49 := ldv_memset($p21, 0, 4);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} vslice_dummy_var_50 := ldv_memset($p23, 0, 4);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p5);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} vslice_dummy_var_51 := ldv_memset($p25, 0, 4);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p6);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vslice_dummy_var_52 := ldv_memset($p27, 0, 4);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p7);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} vslice_dummy_var_53 := ldv_memset($p29, 0, 4);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p8);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} vslice_dummy_var_54 := ldv_memset($p31, 0, 4);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} work_init_1();
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 597} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 598} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 599} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 600} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 601} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $p100, $i101, $i102, $p103, $i104, $i105, $p106, $i107, $i108, $p109, $i110, $i111, $p112, $i114, $i115, $p116, $i118, $i119, $p120, $i122, $i123, $p124, $i126, $i127, $p128, $i129, $i130, $p131, $i132, $i133, $p134, $i135, $i136, $p137, $i138, $i139, $p140, $p141, $i142, $i143, $i144, $i145, $i146, $p147, $p148, $i149, $i150, $p151, $p152, $i153, $i154, $p155, $p156, $i157, $i158, $p159, $p160, $i161, $i162, $p163, $i165, $i166, $p167, $i169, $i170, $p171, $i173, $i174, $p175, $i177, $i178, $p179, $i180, $i181, $p182, $i183, $i184, $i185, $i186, $p187, $i188, $i189, $i191, $i192, $p193, $i194, $i195, $i197, $i198, $p199, $i200, $i201, $i203, $i204, $p205, $i206, $i207, $i209, $i210, $p211, $p212, $i213, $i215, $i216, $p217, $p218, $i219, $i221, $i222, $p223, $p224, $i225, $i227, $i228, $p229, $p230, $i231, $i233, $i234, $p235, $i236, $i237, $i238, $i239, $i240, $p241, $i242, $i243, $p244, $i246, $i247, $p248, $i250, $i251, $p252, $i254, $i255, $p256, $i258, $i259, $p260, $i261, $i262, $i263, $p264, $i265, $i266, $i267, $p268, $i269, $i270, $i271, $p272, $i273, $i274, $i275, $p276, $i277, $i278, $p279, $i280, $i281, $p282, $i284, $i285, $p286, $i288, $i289, $p290, $i292, $i293, $p294, $i296, $i297, $p298, $i300, $i301, $p302, $i304, $i305, $p306, $i308, $i309, $p310, $i312, $i313, $p314, $i315, $i316, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $p345, $i346, $i347, $p348, $i349, $i350, $p351, $i352, $i353, $p354, $i355, $i356, $p357, $i359, $i360, $p361, $i363, $i364, $p365, $i367, $i368, $p369, $i371, $i372, $p373, $p374, $i375, $i376, $i377, $i378, $i379, $p380, $i381, $i382, $p383, $i384, $i385, $p386, $i387, $i388, $p389, $i390, $i391, $p392, $p393, $i394, $i395, $p396, $p397, $i398, $i399, $p400, $p401, $i402, $i403, $p404, $p405, $i406, $i407, $p408, $i409, $i410, $p411, $i413, $i414, $p415, $i417, $i418, $p419, $i421, $i422, $p423, $i425, $i426, $p427, $i428, $i429, $i430, $i431, $p432, $i433, $i434, $i436, $i437, $p438, $i439, $i440, $i442, $i443, $p444, $i445, $i446, $i448, $i449, $p450, $i451, $i452, $i454, $i455, $p456, $p457, $i458, $i460, $i461, $p462, $p463, $i464, $i466, $i467, $p468, $p469, $i470, $i472, $i473, $p474, $p475, $i476, $i478, $i479, $p480, $i481, $i482, $i483, $i484, $i485, $p486, $i487, $i488, $p489, $i491, $i492, $p493, $i495, $i496, $p497, $i499, $i500, $p501, $i503, $i504, $p505, $i506, $i507, $i508, $p509, $i510, $i511, $i512, $p513, $i514, $i515, $i516, $p517, $i518, $i519, $i520, $p521, $i522, $i523, $p524, $i525, $i526, $p527, $i529, $i530, $p531, $i533, $i534, $p535, $i537, $i538, $p539, $i541, $i542, $p543, $i545, $i546, $p547, $i549, $i550, $p551, $i553, $i554, $p555, $i557, $i558, $p559, $i560, $i561, $i563, $i564, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p10, $p11, $p13, $p14, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $p100, $i101, $i102, $p103, $i104, $i105, $p106, $i107, $i108, $p109, $i110, $i111, $p112, $i114, $i115, $p116, $i118, $i119, $p120, $i122, $i123, $p124, $i126, $i127, $p128, $i129, $i130, $p131, $i132, $i133, $p134, $i135, $i136, $p137, $i138, $i139, $p140, $p141, $i142, $i143, $i144, $i145, $i146, $p147, $p148, $i149, $i150, $p151, $p152, $i153, $i154, $p155, $p156, $i157, $i158, $p159, $p160, $i161, $i162, $p163, $i165, $i166, $p167, $i169, $i170, $p171, $i173, $i174, $p175, $i177, $i178, $p179, $i180, $i181, $p182, $i183, $i184, $i185, $i186, $p187, $i188, $i189, $i191, $i192, $p193, $i194, $i195, $i197, $i198, $p199, $i200, $i201, $i203, $i204, $p205, $i206, $i207, $i209, $i210, $p211, $p212, $i213, $i215, $i216, $p217, $p218, $i219, $i221, $i222, $p223, $p224, $i225, $i227, $i228, $p229, $p230, $i231, $i233, $i234, $p235, $i236, $i237, $i238, $i239, $i240, $p241, $i242, $i243, $p244, $i246, $i247, $p248, $i250, $i251, $p252, $i254, $i255, $p256, $i258, $i259, $p260, $i261, $i262, $i263, $p264, $i265, $i266, $i267, $p268, $i269, $i270, $i271, $p272, $i273, $i274, $i275, $p276, $i277, $i278, $p279, $i280, $i281, $p282, $i284, $i285, $p286, $i288, $i289, $p290, $i292, $i293, $p294, $i296, $i297, $p298, $i300, $i301, $p302, $i304, $i305, $p306, $i308, $i309, $p310, $i312, $i313, $p314, $i315, $i316, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $p345, $i346, $i347, $p348, $i349, $i350, $p351, $i352, $i353, $p354, $i355, $i356, $p357, $i359, $i360, $p361, $i363, $i364, $p365, $i367, $i368, $p369, $i371, $i372, $p373, $p374, $i375, $i376, $i377, $i378, $i379, $p380, $i381, $i382, $p383, $i384, $i385, $p386, $i387, $i388, $p389, $i390, $i391, $p392, $p393, $i394, $i395, $p396, $p397, $i398, $i399, $p400, $p401, $i402, $i403, $p404, $p405, $i406, $i407, $p408, $i409, $i410, $p411, $i413, $i414, $p415, $i417, $i418, $p419, $i421, $i422, $p423, $i425, $i426, $p427, $i428, $i429, $i430, $i431, $p432, $i433, $i434, $i436, $i437, $p438, $i439, $i440, $i442, $i443, $p444, $i445, $i446, $i448, $i449, $p450, $i451, $i452, $i454, $i455, $p456, $p457, $i458, $i460, $i461, $p462, $p463, $i464, $i466, $i467, $p468, $p469, $i470, $i472, $i473, $p474, $p475, $i476, $i478, $i479, $p480, $i481, $i482, $i483, $i484, $i485, $p486, $i487, $i488, $p489, $i491, $i492, $p493, $i495, $i496, $p497, $i499, $i500, $p501, $i503, $i504, $p505, $i506, $i507, $i508, $p509, $i510, $i511, $i512, $p513, $i514, $i515, $i516, $p517, $i518, $i519, $i520, $p521, $i522, $i523, $p524, $i525, $i526, $p527, $i529, $i530, $p531, $i533, $i534, $p535, $i537, $i538, $p539, $i541, $i542, $p543, $i545, $i546, $p547, $i549, $i550, $p551, $i553, $i554, $p555, $i557, $i558, $p559, $i560, $i561, $i563, $i564, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} ldv_stop();
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i320 := $M.42;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb275:
    assume $i321 == 1;
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 1} true;
    call {:si_unique_call 743} $i322 := __VERIFIER_nondet_int();
    call {:si_unique_call 744} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i322);
    call {:si_unique_call 745} {:cexpr "tmp___6"} boogie_si_record_i32($i322);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $i323 := $slt.i32($i322, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    $i324 := $slt.i32($i322, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i325 := $slt.i32($i322, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    $i326 := $slt.i32($i322, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    $i327 := $slt.i32($i322, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i322, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    assume !($i328 == 1);
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} ldv_stop();
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb288:
    assume $i328 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i560 := $M.42;
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i561 := $eq.i32($i560, 1);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  $bb483:
    assume !($i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb482:
    assume $i561 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} vslice_dummy_var_112 := ldv_probe_2();
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 854} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i563 := $M.39;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i564 := $add.i32($i563, 1);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $M.39 := $i564;
    call {:si_unique_call 855} {:cexpr "ref_cnt"} boogie_si_record_i32($i564);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb286:
    assume $i327 == 1;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i557 := $M.42;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i558 := $eq.i32($i557, 4);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb479:
    assume $i558 == 1;
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p559 := $M.30;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} digi_read_bulk_callback($p559);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 852} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb481;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb284:
    assume $i326 == 1;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i541 := $M.42;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i542 := $eq.i32($i541, 4);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    $i545 := $M.42;
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i546 := $eq.i32($i545, 1);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  $bb471:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    $i549 := $M.42;
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i550 := $eq.i32($i549, 3);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  $bb474:
    assume !($i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $i553 := $M.42;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i554 := $eq.i32($i553, 2);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb476:
    assume $i554 == 1;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p555 := $M.33;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_111 := digi_tiocmget($p555);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 850} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb473:
    assume $i550 == 1;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p551 := $M.33;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_110 := digi_tiocmget($p551);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 848} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb470:
    assume $i546 == 1;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p547 := $M.33;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} vslice_dummy_var_109 := digi_tiocmget($p547);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 846} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb467:
    assume $i542 == 1;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p543 := $M.33;
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} vslice_dummy_var_108 := digi_tiocmget($p543);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb282:
    assume $i325 == 1;
    assume {:verifier.code 0} true;
    $i329 := $slt.i32($i322, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i329 == 1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i525 := $M.42;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i526 := $eq.i32($i525, 4);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    $i529 := $M.42;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i530 := $eq.i32($i529, 1);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  $bb459:
    assume !($i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    $i533 := $M.42;
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i534 := $eq.i32($i533, 3);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  $bb462:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    $i537 := $M.42;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i538 := $eq.i32($i537, 2);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  $bb465:
    assume !($i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb464:
    assume $i538 == 1;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p539 := $M.33;
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vslice_dummy_var_107 := digi_chars_in_buffer($p539);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb461:
    assume $i534 == 1;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p535 := $M.33;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vslice_dummy_var_106 := digi_chars_in_buffer($p535);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 840} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb458:
    assume $i530 == 1;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p531 := $M.33;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vslice_dummy_var_105 := digi_chars_in_buffer($p531);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 838} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb455:
    assume $i526 == 1;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p527 := $M.33;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_104 := digi_chars_in_buffer($p527);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 836} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb291:
    assume $i329 == 1;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i519 := $M.42;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i520 := $eq.i32($i519, 4);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  $bb450:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $i522 := $M.42;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i523 := $eq.i32($i522, 3);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb452:
    assume $i523 == 1;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p524 := $M.32;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} digi_disconnect($p524);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 834} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb449:
    assume $i520 == 1;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p521 := $M.32;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} digi_disconnect($p521);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 832} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb280:
    assume $i324 == 1;
    assume {:verifier.code 0} true;
    $i330 := $slt.i32($i322, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    $i331 := $slt.i32($i322, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    $i332 := $slt.i32($i322, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i332 == 1);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i503 := $M.42;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i504 := $eq.i32($i503, 4);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $i507 := $M.42;
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i508 := $eq.i32($i507, 1);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i508 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    $i511 := $M.42;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i512 := $eq.i32($i511, 3);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  $bb444:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    $i515 := $M.42;
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i516 := $eq.i32($i515, 2);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  $bb447:
    assume !($i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb446:
    assume $i516 == 1;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p517 := $M.33;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i518 := $load.i32($M.29, $p7);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} digi_break_ctl($p517, $i518);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    goto $bb448;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb443:
    assume $i512 == 1;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p513 := $M.33;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i514 := $load.i32($M.29, $p7);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} digi_break_ctl($p513, $i514);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    goto $bb445;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb440:
    assume $i508 == 1;
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p509 := $M.33;
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i510 := $load.i32($M.29, $p7);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} digi_break_ctl($p509, $i510);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    goto $bb442;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb437:
    assume $i504 == 1;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p505 := $M.33;
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i506 := $load.i32($M.29, $p7);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} digi_break_ctl($p505, $i506);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 824} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    goto $bb439;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb297:
    assume $i332 == 1;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i487 := $M.42;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i488 := $eq.i32($i487, 4);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  $bb426:
    assume !($i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $i491 := $M.42;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i492 := $eq.i32($i491, 1);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb428, $bb429;

  $bb429:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    $i495 := $M.42;
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i496 := $eq.i32($i495, 3);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    $i499 := $M.42;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i500 := $eq.i32($i499, 2);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  $bb435:
    assume !($i500 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb434:
    assume $i500 == 1;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p501 := $M.33;
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} vslice_dummy_var_103 := digi_write_room($p501);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 822} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb431:
    assume $i496 == 1;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p497 := $M.33;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_102 := digi_write_room($p497);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 820} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb428:
    assume $i492 == 1;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p493 := $M.33;
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} vslice_dummy_var_101 := digi_write_room($p493);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 818} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb425:
    assume $i488 == 1;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p489 := $M.33;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_100 := digi_write_room($p489);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 816} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb295:
    assume $i331 == 1;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i484 := $M.42;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i485 := $eq.i32($i484, 4);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb422, $bb423;

  $bb423:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb422:
    assume $i485 == 1;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p486 := $M.31;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} digi_close($p486);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 814} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    goto $bb424;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb293:
    assume $i330 == 1;
    assume {:verifier.code 0} true;
    $i333 := $slt.i32($i322, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i333 == 1);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i478 := $M.42;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i478, 2);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb416, $bb417;

  $bb417:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb416:
    assume $i479 == 1;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p480 := $M.32;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i481 := digi_startup($p480);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.47 := $i481;
    call {:si_unique_call 811} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i481);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i482 := $M.47;
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i483 := $eq.i32($i482, 0);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  $bb419:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb418:
    assume $i483 == 1;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 812} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    goto $bb420;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb299:
    assume $i333 == 1;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i454 := $M.42;
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i455 := $eq.i32($i454, 4);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb404, $bb405;

  $bb405:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    $i460 := $M.42;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i460, 1);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    $i466 := $M.42;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i467 := $eq.i32($i466, 3);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    $i472 := $M.42;
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i473 := $eq.i32($i472, 2);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  $bb414:
    assume !($i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb413:
    assume $i473 == 1;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p474 := $M.33;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p475 := $M.31;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i476 := $load.i32($M.29, $p5);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_99 := digi_write($p474, $p475, $p14, $i476);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    goto $bb415;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb410:
    assume $i467 == 1;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p468 := $M.33;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p469 := $M.31;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i470 := $load.i32($M.29, $p5);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_98 := digi_write($p468, $p469, $p14, $i470);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    goto $bb412;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb407:
    assume $i461 == 1;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p462 := $M.33;
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p463 := $M.31;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i464 := $load.i32($M.29, $p5);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} vslice_dummy_var_97 := digi_write($p462, $p463, $p14, $i464);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 805} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    goto $bb409;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb404:
    assume $i455 == 1;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p456 := $M.33;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p457 := $M.31;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i458 := $load.i32($M.29, $p5);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} vslice_dummy_var_96 := digi_write($p456, $p457, $p14, $i458);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 803} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    goto $bb406;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb278:
    assume $i323 == 1;
    assume {:verifier.code 0} true;
    $i334 := $slt.i32($i322, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    $i335 := $slt.i32($i322, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    $i336 := $slt.i32($i322, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    $i337 := $slt.i32($i322, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i337 == 1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i430 := $M.42;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i431 := $eq.i32($i430, 4);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i431 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    $i436 := $M.42;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i437 := $eq.i32($i436, 1);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    $i442 := $M.42;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i442, 3);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  $bb399:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    $i448 := $M.42;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i448, 2);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb401:
    assume $i449 == 1;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p450 := $M.33;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i451 := $load.i32($M.29, $p6);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i452 := $load.i32($M.29, $p8);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_95 := digi_tiocmset($p450, $i451, $i452);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 801} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    goto $bb403;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb398:
    assume $i443 == 1;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p444 := $M.33;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i445 := $load.i32($M.29, $p6);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i446 := $load.i32($M.29, $p8);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vslice_dummy_var_94 := digi_tiocmset($p444, $i445, $i446);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 799} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    goto $bb400;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb395:
    assume $i437 == 1;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p438 := $M.33;
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i439 := $load.i32($M.29, $p6);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i440 := $load.i32($M.29, $p8);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} vslice_dummy_var_93 := digi_tiocmset($p438, $i439, $i440);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 797} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto $bb397;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb392:
    assume $i431 == 1;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p432 := $M.33;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i433 := $load.i32($M.29, $p6);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i434 := $load.i32($M.29, $p8);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_92 := digi_tiocmset($p432, $i433, $i434);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 795} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    goto $bb394;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb307:
    assume $i337 == 1;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i425 := $M.42;
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i426 := $eq.i32($i425, 2);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb389:
    assume $i426 == 1;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p427 := $M.32;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} digi_release($p427);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 792} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i428 := $M.39;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i429 := $sub.i32($i428, 1);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.39 := $i429;
    call {:si_unique_call 793} {:cexpr "ref_cnt"} boogie_si_record_i32($i429);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb305:
    assume $i336 == 1;
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i409 := $M.42;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i409, 4);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $i413 := $M.42;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i414 := $eq.i32($i413, 1);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $i417 := $M.42;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i418 := $eq.i32($i417, 3);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    $i421 := $M.42;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i421, 2);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb386:
    assume $i422 == 1;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p423 := $M.31;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} vslice_dummy_var_91 := digi_port_remove($p423);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb383:
    assume $i418 == 1;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p419 := $M.31;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_90 := digi_port_remove($p419);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 788} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb380:
    assume $i414 == 1;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p415 := $M.31;
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_89 := digi_port_remove($p415);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 786} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb377:
    assume $i410 == 1;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p411 := $M.31;
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} vslice_dummy_var_88 := digi_port_remove($p411);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb303:
    assume $i335 == 1;
    assume {:verifier.code 0} true;
    $i338 := $slt.i32($i322, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i338 == 1);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i406 := $M.42;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i406, 4);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb374:
    assume $i407 == 1;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p408 := $M.30;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} digi_write_bulk_callback($p408);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 782} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    goto $bb376;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb309:
    assume $i338 == 1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i390 := $M.42;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i391 := $eq.i32($i390, 4);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $i394 := $M.42;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i394, 1);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $i398 := $M.42;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i399 := $eq.i32($i398, 3);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    $i402 := $M.42;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i403 := $eq.i32($i402, 2);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb371:
    assume $i403 == 1;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p404 := $M.33;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p405 := $M.31;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} digi_set_termios($p404, $p405, $p13);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 780} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    goto $bb373;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb368:
    assume $i399 == 1;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p400 := $M.33;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p401 := $M.31;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} digi_set_termios($p400, $p401, $p13);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 778} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    goto $bb370;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb365:
    assume $i395 == 1;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p396 := $M.33;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p397 := $M.31;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} digi_set_termios($p396, $p397, $p13);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 776} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    goto $bb367;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb362:
    assume $i391 == 1;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p392 := $M.33;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p393 := $M.31;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} digi_set_termios($p392, $p393, $p13);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 774} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    goto $bb364;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb301:
    assume $i334 == 1;
    assume {:verifier.code 0} true;
    $i339 := $slt.i32($i322, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    $i340 := $slt.i32($i322, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i340 == 1);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i378 := $M.42;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 4);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    $i381 := $M.42;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i381, 1);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $i384 := $M.42;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i384, 3);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $i387 := $M.42;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i388 := $eq.i32($i387, 2);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb359:
    assume $i388 == 1;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p389 := $M.33;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} digi_rx_unthrottle($p389);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 772} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    goto $bb361;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb356:
    assume $i385 == 1;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p386 := $M.33;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} digi_rx_unthrottle($p386);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 770} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    goto $bb358;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb353:
    assume $i382 == 1;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p383 := $M.33;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} digi_rx_unthrottle($p383);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 768} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto $bb355;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb350:
    assume $i379 == 1;
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p380 := $M.33;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} digi_rx_unthrottle($p380);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 766} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    goto $bb352;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb313:
    assume $i340 == 1;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i371 := $M.42;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i372 := $eq.i32($i371, 3);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb344:
    assume $i372 == 1;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p373 := $M.33;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p374 := $M.31;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i375 := digi_open($p373, $p374);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $M.46 := $i375;
    call {:si_unique_call 763} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i375);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i376 := $M.46;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i376, 0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb346:
    assume $i377 == 1;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 764} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    goto $bb348;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb311:
    assume $i339 == 1;
    assume {:verifier.code 0} true;
    $i341 := $slt.i32($i322, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i341 == 1);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i355 := $M.42;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i355, 4);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $i359 := $M.42;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i359, 1);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    $i363 := $M.42;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i363, 3);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $i367 := $M.42;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i367, 2);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb341:
    assume $i368 == 1;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p369 := $M.31;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vslice_dummy_var_87 := digi_port_probe($p369);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    goto $bb343;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb338:
    assume $i364 == 1;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p365 := $M.31;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_86 := digi_port_probe($p365);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    goto $bb340;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb335:
    assume $i360 == 1;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p361 := $M.31;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_85 := digi_port_probe($p361);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    goto $bb337;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb332:
    assume $i356 == 1;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p357 := $M.31;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} vslice_dummy_var_84 := digi_port_probe($p357);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 755} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    goto $bb334;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb315:
    assume $i341 == 1;
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i322, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    assume !($i342 == 1);
    goto $bb290;

  $bb317:
    assume $i342 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i343 := $M.42;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 4);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    $i346 := $M.42;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    $i349 := $M.42;
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 3);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $i352 := $M.42;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 2);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb328:
    assume $i353 == 1;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p354 := $M.33;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} digi_rx_throttle($p354);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 753} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb325:
    assume $i350 == 1;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p351 := $M.33;
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} digi_rx_throttle($p351);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 751} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb322:
    assume $i347 == 1;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p348 := $M.33;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} digi_rx_throttle($p348);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 749} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb319:
    assume $i344 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p345 := $M.33;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} digi_rx_throttle($p345);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 747} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i58 := $M.41;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb48:
    assume $i59 == 1;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 1} true;
    call {:si_unique_call 621} $i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 622} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i60);
    call {:si_unique_call 623} {:cexpr "tmp___5"} boogie_si_record_i32($i60);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i60, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i60, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i60, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i60, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i60, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_stop();
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb61:
    assume $i66 == 1;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i315 := $M.41;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i315, 1);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb269:
    assume $i316 == 1;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} vslice_dummy_var_83 := ldv_probe_3();
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 740} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i318 := $M.39;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i319 := $add.i32($i318, 1);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $M.39 := $i319;
    call {:si_unique_call 741} {:cexpr "ref_cnt"} boogie_si_record_i32($i319);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb59:
    assume $i65 == 1;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i312 := $M.41;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 4);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb266:
    assume $i313 == 1;
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p314 := $M.34;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} digi_read_bulk_callback($p314);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 738} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    goto $bb268;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i64 == 1;
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i296 := $M.41;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 4);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $i300 := $M.41;
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i300, 1);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $i304 := $M.41;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 3);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $i308 := $M.41;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 2);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb263:
    assume $i309 == 1;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p310 := $M.37;
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_82 := digi_tiocmget($p310);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 736} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb260:
    assume $i305 == 1;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p306 := $M.37;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vslice_dummy_var_81 := digi_tiocmget($p306);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 734} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb257:
    assume $i301 == 1;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p302 := $M.37;
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vslice_dummy_var_80 := digi_tiocmget($p302);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb254:
    assume $i297 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p298 := $M.37;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_79 := digi_tiocmget($p298);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 730} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb55:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i60, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i67 == 1);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i280 := $M.41;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 4);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i284 := $M.41;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 1);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i288 := $M.41;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 3);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i292 := $M.41;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 2);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb251:
    assume $i293 == 1;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p294 := $M.37;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vslice_dummy_var_78 := digi_chars_in_buffer($p294);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 728} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb248:
    assume $i289 == 1;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p290 := $M.37;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_77 := digi_chars_in_buffer($p290);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 726} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb245:
    assume $i285 == 1;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p286 := $M.37;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_76 := digi_chars_in_buffer($p286);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 724} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb242:
    assume $i281 == 1;
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p282 := $M.37;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_75 := digi_chars_in_buffer($p282);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 722} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb64:
    assume $i67 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i274 := $M.41;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i274, 4);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i277 := $M.41;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 3);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb239:
    assume $i278 == 1;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p279 := $M.36;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} digi_disconnect($p279);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 720} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb236:
    assume $i275 == 1;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p276 := $M.36;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} digi_disconnect($p276);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 718} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb53:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i60, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i60, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i60, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i70 == 1);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i258 := $M.41;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 4);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $i262 := $M.41;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 1);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i266 := $M.41;
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 3);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i270 := $M.41;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 2);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb233:
    assume $i271 == 1;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p272 := $M.37;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.29, $p3);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} digi_break_ctl($p272, $i273);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 716} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb235;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb230:
    assume $i267 == 1;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p268 := $M.37;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.29, $p3);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} digi_break_ctl($p268, $i269);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 714} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb232;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb227:
    assume $i263 == 1;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p264 := $M.37;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.29, $p3);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} digi_break_ctl($p264, $i265);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 712} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    goto $bb229;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb224:
    assume $i259 == 1;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p260 := $M.37;
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.29, $p3);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} digi_break_ctl($p260, $i261);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 710} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb226;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i70 == 1;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i242 := $M.41;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 4);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $i246 := $M.41;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 1);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i250 := $M.41;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 3);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i254 := $M.41;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 2);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb221:
    assume $i255 == 1;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p256 := $M.37;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_74 := digi_write_room($p256);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 708} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb218:
    assume $i251 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p252 := $M.37;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_73 := digi_write_room($p252);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 706} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb215:
    assume $i247 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p248 := $M.37;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_72 := digi_write_room($p248);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 704} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb212:
    assume $i243 == 1;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p244 := $M.37;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_71 := digi_write_room($p244);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 702} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb68:
    assume $i69 == 1;
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i239 := $M.41;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 4);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb209:
    assume $i240 == 1;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p241 := $M.35;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} digi_close($p241);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 700} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    goto $bb211;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i60, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i71 == 1);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i233 := $M.41;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 2);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb203:
    assume $i234 == 1;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p235 := $M.36;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i236 := digi_startup($p235);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.45 := $i236;
    call {:si_unique_call 697} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i236);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i237 := $M.45;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb205:
    assume $i238 == 1;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 698} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    goto $bb207;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i71 == 1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i209 := $M.41;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 4);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i215 := $M.41;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 1);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $i221 := $M.41;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 3);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $i227 := $M.41;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 2);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb200:
    assume $i228 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p229 := $M.37;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p230 := $M.35;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.29, $p0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} vslice_dummy_var_70 := digi_write($p229, $p230, $p11, $i231);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 695} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    goto $bb202;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb197:
    assume $i222 == 1;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p223 := $M.37;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p224 := $M.35;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.29, $p0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_69 := digi_write($p223, $p224, $p11, $i225);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 693} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb199;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb194:
    assume $i216 == 1;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p217 := $M.37;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p218 := $M.35;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.29, $p0);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_68 := digi_write($p217, $p218, $p11, $i219);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 691} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    goto $bb196;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb191:
    assume $i210 == 1;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p211 := $M.37;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p212 := $M.35;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.29, $p0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_67 := digi_write($p211, $p212, $p11, $i213);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 689} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    goto $bb193;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i60, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i60, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i60, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i60, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i75 == 1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i185 := $M.41;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 4);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i191 := $M.41;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 1);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i197 := $M.41;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 3);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i203 := $M.41;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 2);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb188:
    assume $i204 == 1;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p205 := $M.37;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.29, $p1);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.29, $p2);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} vslice_dummy_var_66 := digi_tiocmset($p205, $i206, $i207);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 687} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    goto $bb190;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb185:
    assume $i198 == 1;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p199 := $M.37;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.29, $p1);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.29, $p2);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_65 := digi_tiocmset($p199, $i200, $i201);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 685} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto $bb187;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb182:
    assume $i192 == 1;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p193 := $M.37;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.29, $p1);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.29, $p2);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} vslice_dummy_var_64 := digi_tiocmset($p193, $i194, $i195);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 683} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    goto $bb184;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb179:
    assume $i186 == 1;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p187 := $M.37;
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.29, $p1);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.29, $p2);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} vslice_dummy_var_63 := digi_tiocmset($p187, $i188, $i189);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 681} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    goto $bb181;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i75 == 1;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i180 := $M.41;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 2);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb176:
    assume $i181 == 1;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p182 := $M.36;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} digi_release($p182);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 678} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i183 := $M.39;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i184 := $sub.i32($i183, 1);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.39 := $i184;
    call {:si_unique_call 679} {:cexpr "ref_cnt"} boogie_si_record_i32($i184);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb78:
    assume $i74 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i177 := $M.41;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 4);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb173:
    assume $i178 == 1;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p179 := $M.34;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} digi_write_bulk_callback($p179);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 676} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb175;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb76:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i60, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i76 == 1);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i161 := $M.41;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 4);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i165 := $M.41;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 1);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i169 := $M.41;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 3);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i173 := $M.41;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 2);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb170:
    assume $i174 == 1;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p175 := $M.35;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vslice_dummy_var_62 := digi_port_remove($p175);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 674} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb167:
    assume $i170 == 1;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p171 := $M.35;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_61 := digi_port_remove($p171);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 672} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb164:
    assume $i166 == 1;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p167 := $M.35;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_60 := digi_port_remove($p167);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 670} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb161:
    assume $i162 == 1;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p163 := $M.35;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_59 := digi_port_remove($p163);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 668} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb82:
    assume $i76 == 1;
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i145 := $M.41;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 4);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i149 := $M.41;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 1);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i153 := $M.41;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 3);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i157 := $M.41;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 2);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb158:
    assume $i158 == 1;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p159 := $M.37;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p160 := $M.35;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} digi_set_termios($p159, $p160, $p10);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 666} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    goto $bb160;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb155:
    assume $i154 == 1;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p155 := $M.37;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p156 := $M.35;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} digi_set_termios($p155, $p156, $p10);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 664} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb157;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb152:
    assume $i150 == 1;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p151 := $M.37;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p152 := $M.35;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} digi_set_termios($p151, $p152, $p10);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 662} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb154;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb149:
    assume $i146 == 1;
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p147 := $M.37;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p148 := $M.35;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} digi_set_termios($p147, $p148, $p10);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 660} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    goto $bb151;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb74:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i60, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i60, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i60, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i79 == 1);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i138 := $M.41;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 3);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb143:
    assume $i139 == 1;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p140 := $M.37;
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p141 := $M.35;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i142 := digi_open($p140, $p141);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $M.44 := $i142;
    call {:si_unique_call 657} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i142);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i143 := $M.44;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 0);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb145:
    assume $i144 == 1;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 658} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    goto $bb147;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i79 == 1;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i126 := $M.41;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 4);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i129 := $M.41;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i132 := $M.41;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 3);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i135 := $M.41;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 2);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb140:
    assume $i136 == 1;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p137 := $M.37;
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} digi_rx_unthrottle($p137);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 655} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    goto $bb142;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb137:
    assume $i133 == 1;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p134 := $M.37;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} digi_rx_unthrottle($p134);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 653} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i130 == 1;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p131 := $M.37;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} digi_rx_unthrottle($p131);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 651} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    goto $bb136;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb131:
    assume $i127 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p128 := $M.37;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} digi_rx_unthrottle($p128);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 649} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    goto $bb133;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i78 == 1;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i110 := $M.41;
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 4);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i114 := $M.41;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 1);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i118 := $M.41;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 3);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i122 := $M.41;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 2);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb128:
    assume $i123 == 1;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p124 := $M.35;
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_58 := digi_port_probe($p124);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 647} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    goto $bb130;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb125:
    assume $i119 == 1;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p120 := $M.35;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_57 := digi_port_probe($p120);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 645} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb127;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb122:
    assume $i115 == 1;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p116 := $M.35;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} vslice_dummy_var_56 := digi_port_probe($p116);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 643} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb124;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb119:
    assume $i111 == 1;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p112 := $M.35;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_55 := digi_port_probe($p112);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 641} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    goto $bb121;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i60, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i80 == 1);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i98 := $M.41;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 4);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i101 := $M.41;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i104 := $M.41;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 3);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i107 := $M.41;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 2);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb116:
    assume $i108 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p109 := $M.37;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} digi_rx_throttle($p109);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 639} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb113:
    assume $i105 == 1;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p106 := $M.37;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} digi_rx_throttle($p106);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 637} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume $i102 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p103 := $M.37;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} digi_rx_throttle($p103);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 635} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume $i99 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p100 := $M.37;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} digi_rx_throttle($p100);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 633} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb90:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb63;

  $bb92:
    assume $i81 == 1;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i82 := $M.41;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 4);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i86 := $M.41;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 1);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i90 := $M.41;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 3);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i94 := $M.41;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 2);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb103:
    assume $i95 == 1;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p96 := $M.35;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.29, $p4);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} digi_dtr_rts($p96, $i97);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 631} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i91 == 1;
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p92 := $M.35;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.29, $p4);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} digi_dtr_rts($p92, $i93);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 629} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb97:
    assume $i87 == 1;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p88 := $M.35;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.29, $p4);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} digi_dtr_rts($p88, $i89);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 627} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb94:
    assume $i83 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p84 := $M.35;
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.29, $p4);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} digi_dtr_rts($p84, $i85);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 625} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i37 == 1);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i41 := $M.40;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 1} true;
    call {:si_unique_call 606} $i43 := __VERIFIER_nondet_int();
    call {:si_unique_call 607} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i43);
    call {:si_unique_call 608} {:cexpr "tmp___4"} boogie_si_record_i32($i43);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i43, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} ldv_stop();
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i51 := $M.40;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36:
    assume $i52 == 1;
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i53 := usb_serial_module_init();
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $M.43 := $i53;
    call {:si_unique_call 613} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i53);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i54 := $M.43;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i56 := $M.43;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i57 == 1;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 619} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} ldv_check_final_state();
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb38:
    assume $i55 == 1;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 614} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 615} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} ldv_initialize_usb_serial_driver_2();
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 617} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} ldv_initialize_usb_serial_driver_3();
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb21:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i43, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb25;

  $bb26:
    assume $i46 == 1;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i47 := $M.40;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 3);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i49 := $M.39;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb30;

  $bb31:
    assume $i50 == 1;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} usb_serial_module_exit();
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 610} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb9;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i39 := $M.38;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} invoke_work_1();
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 602} $i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 603} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
    call {:si_unique_call 604} {:cexpr "tmp___3"} boogie_si_record_i32($i33);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 225761);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_module_exit: ref;

axiom usb_serial_module_exit == $sub.ref(0, 226793);

procedure usb_serial_module_exit();
  free requires assertsPassed;



implementation usb_serial_module_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} usb_serial_deregister_drivers(serial_drivers);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_module_init: ref;

axiom usb_serial_module_init == $sub.ref(0, 227825);

procedure usb_serial_module_init() returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_module_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i0 := usb_serial_register_drivers(serial_drivers, .str.4, id_table_combined);
    call {:si_unique_call 860} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_3: ref;

axiom ldv_probe_3 == $sub.ref(0, 228857);

procedure ldv_probe_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 861} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 862} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_2: ref;

axiom ldv_probe_2 == $sub.ref(0, 229889);

procedure ldv_probe_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 863} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 864} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 230921);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_register_drivers: ref;

axiom usb_serial_register_drivers == $sub.ref(0, 231953);

procedure usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 1} true;
    call {:si_unique_call 865} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 866} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_deregister_drivers: ref;

axiom usb_serial_deregister_drivers == $sub.ref(0, 232985);

procedure usb_serial_deregister_drivers($p0: ref);
  free requires assertsPassed;



implementation usb_serial_deregister_drivers($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 234017);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 867} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 1} true;
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 235049);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 236081);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 237113);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 238145);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 239177);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 240209);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 241241);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 242273);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 243305);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 244337);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 245369);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 246401);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 247433);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 868} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 869} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 870} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 1} true;
    call {:si_unique_call 871} __VERIFIER_assume($i4);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 248465);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 249497);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 250529);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 251561);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 873} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 874} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 875} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 876} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 877} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 1} true;
    call {:si_unique_call 878} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 879} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 880} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 881} __VERIFIER_assume($i7);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 882} __VERIFIER_assume($i11);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 252593);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 253625);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 1} true;
    call {:si_unique_call 883} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 884} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 885} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 886} __VERIFIER_assume($i4);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 254657);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 255689);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 256721);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 257753);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 258785);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 259817);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 260849);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 261881);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 262913);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 263945);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 264977);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 266009);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 267041);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 1} true;
    call {:si_unique_call 887} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 888} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 889} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 1} true;
    call {:si_unique_call 890} __VERIFIER_assume($i10);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 268073);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 1} true;
    call {:si_unique_call 891} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 892} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 893} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 269105);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 1} true;
    call {:si_unique_call 894} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 895} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 270137);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 271169);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 896} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 897} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 272201);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 273233);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 274265);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 898} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 899} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 1} true;
    call {:si_unique_call 900} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 901} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p6 := malloc($i5);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 903} cmdloc_dummy_var_27 := $memset.i8(cmdloc_dummy_var_26, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 275297);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 276329);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.18, $M.20, $M.22, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.24, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 904} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.16 := 0;
    call {:si_unique_call 905} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.18 := 0;
    call {:si_unique_call 906} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 907} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 908} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.30 := $0.ref;
    $M.31 := $0.ref;
    $M.32 := $0.ref;
    $M.33 := $0.ref;
    $M.34 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.38 := 0;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 910} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 912} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 914} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 915} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 916} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 917} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 918} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 919} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.49 := $store.i16($M.49, __mod_usb__id_table_combined_device_table, 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.54 := $store.i8($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.61 := $store.i64($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.54 := $store.i8($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.61 := $store.i64($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.54 := $store.i8($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.61 := $store.i64($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.62 := $store.i16($M.62, id_table_combined, 3);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1477);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 2);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.74 := $store.i64($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1477);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 4);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.74 := $store.i64($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.74 := $store.i64($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, id_table_4, 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1477);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 4);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table_4, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.76 := $store.ref($M.76, digi_acceleport_4_device, .str.2);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(8, 1)), id_table_4);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(16, 1)), 4);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.3);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(160, 1)), $0.ref);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.76 := $store.i64($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.76 := $store.i64($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(256, 1)), 0);
    $M.76 := $store.i64($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(264, 1)), 0);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(272, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(280, 1)), digi_startup);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(288, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(296, 1)), digi_disconnect);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(304, 1)), digi_release);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(312, 1)), digi_port_probe);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(320, 1)), digi_port_remove);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(328, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(336, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(344, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(352, 1)), digi_open);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(360, 1)), digi_close);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(368, 1)), digi_write);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(376, 1)), digi_write_room);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(384, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(392, 1)), digi_set_termios);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(400, 1)), digi_break_ctl);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(408, 1)), digi_chars_in_buffer);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(416, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(424, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(432, 1)), digi_rx_throttle);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(440, 1)), digi_rx_unthrottle);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(448, 1)), digi_tiocmget);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(456, 1)), digi_tiocmset);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(464, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(472, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(480, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(488, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(496, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(504, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(512, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(520, 1)), digi_read_bulk_callback);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(528, 1)), digi_write_bulk_callback);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(536, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_4_device, $mul.ref(0, 552)), $mul.ref(544, 1)), $0.ref);
    $M.75 := $store.i16($M.75, id_table_2, 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1477);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 2);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table_2, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.76 := $store.ref($M.76, digi_acceleport_2_device, .str);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(8, 1)), id_table_2);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(16, 1)), 3);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.1);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(160, 1)), $0.ref);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.76 := $store.i64($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.76 := $store.i64($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(256, 1)), 0);
    $M.76 := $store.i64($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(264, 1)), 0);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(272, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(280, 1)), digi_startup);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(288, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(296, 1)), digi_disconnect);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(304, 1)), digi_release);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(312, 1)), digi_port_probe);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(320, 1)), digi_port_remove);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(328, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(336, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(344, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(352, 1)), digi_open);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(360, 1)), digi_close);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(368, 1)), digi_write);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(376, 1)), digi_write_room);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(384, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(392, 1)), digi_set_termios);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(400, 1)), digi_break_ctl);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(408, 1)), digi_chars_in_buffer);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(416, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(424, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(432, 1)), digi_rx_throttle);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(440, 1)), digi_rx_unthrottle);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(448, 1)), digi_tiocmget);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(456, 1)), digi_tiocmset);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(464, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(472, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(480, 1)), digi_dtr_rts);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(488, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(496, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(504, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(512, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(520, 1)), digi_read_bulk_callback);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(528, 1)), digi_write_bulk_callback);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(536, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(digi_acceleport_2_device, $mul.ref(0, 552)), $mul.ref(544, 1)), $0.ref);
    $M.77 := $store.ref($M.77, serial_drivers, digi_acceleport_2_device);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(serial_drivers, $mul.ref(0, 24)), $mul.ref(1, 8)), digi_acceleport_4_device);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(serial_drivers, $mul.ref(0, 24)), $mul.ref(2, 8)), $0.ref);
    call {:si_unique_call 920} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 277361);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 278393);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 279425);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $CurrAddr, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(digi_tiocmget, $p0);
    assume {:branchcond $i18} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i18 == 1);
    $i17 := $eq.ref(digi_chars_in_buffer, $p0);
    assume {:branchcond $i17} true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i17 == 1);
    $i16 := $eq.ref(digi_write_room, $p0);
    assume {:branchcond $i16} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(digi_port_remove, $p0);
    assume {:branchcond $i15} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(digi_port_probe, $p0);
    assume {:branchcond $i14} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(digi_startup, $p0);
    assume {:branchcond $i13} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 921} $i2 := digi_startup($p1);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    $r := $i2;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 922} $i4 := digi_port_probe($p3);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    $r := $i4;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 923} $i6 := digi_port_remove($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 924} $i8 := digi_write_room($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i17 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 925} $i10 := digi_chars_in_buffer($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i18 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 926} $i12 := digi_tiocmget($p11);
    $r := $i12;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.18, $M.20, $M.22, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.24, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 927} __SMACK_static_init();
    call {:si_unique_call 928} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.29, $M.16, $M.18, $M.20, $M.22, $M.38, $M.39, $M.40, $M.41, $M.42, $M.24, $M.43, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.44, $M.14, $M.45, $M.8, $M.9, $M.10, $M.11, $M.12, $M.46, $M.47, $M.17, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $CurrAddr, $M.26, $M.27, $M.28;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation digi_disconnect_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i8: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i8: i32)
{

  entry:
    out_$i9, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i8 := in_$i9, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_66;

  $bb6:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i21;
    goto $bb6_dummy;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    out_$i27 := $sgt.i32(out_$i26, out_$i21);
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i25, 1);
    goto corral_source_split_85;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i8.i32(out_$i24);
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, out_$p23);
    goto corral_source_split_83;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, in_$p1);
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i8, 1);
    call {:si_unique_call 12} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} usb_kill_urb(out_$p20);
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_77;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i15, 8));
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i8);
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} usb_kill_urb(out_$p14);
    goto corral_source_split_73;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i9, 8));
    goto corral_source_split_69;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i9, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i8 := digi_disconnect_loop_$bb4(in_$p0, in_$p1, out_$i9, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i8);
    return;

  exit:
    return;
}



procedure digi_disconnect_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i8: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i8: i32);



implementation digi_read_oob_callback_loop_$bb53(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p8: ref, in_$i14: i32, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i24, in_$i50: i24, in_$i51: i24, in_$p52: ref, in_$p53: ref, in_$i54: i8, in_$i55: i64, in_$i56: i64, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$p12: ref, in_$i15: i32) returns (out_$i14: i32, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i24, out_$i50: i24, out_$i51: i24, out_$p52: ref, out_$p53: ref, out_$i54: i8, out_$i55: i64, out_$i56: i64, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i15: i32)
{

  entry:
    out_$i14, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i71, out_$i72, out_$i73, out_$i67, out_$i68, out_$i69, out_$i70, out_$i15 := in_$i14, in_$p16, in_$p17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i71, in_$i72, in_$i73, in_$i67, in_$i68, in_$i69, in_$i70, in_$i15;
    goto $bb53, exit;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  $bb14:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i36;
    goto $bb14_dummy;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$i73 := $ult.i32(out_$i36, out_$i72);
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$i72 := $sub.i32(out_$i71, 3);
    goto corral_source_split_1694;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, in_$p8);
    goto corral_source_split_1693;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i66 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i60 == 1;
    goto $bb10;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i35, 0);
    goto corral_source_split_1691;

  $bb7:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32(in_$p1, out_$p59, .str.48, out_$i21, out_$i28, out_$i35, out_$i42);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p12, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1688;

  $bb6:
    assume out_$i58 == 1;
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} out_$i57 := ldv__builtin_expect(out_$i56, 0);
    call {:si_unique_call 283} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$i56 := $and.i64(out_$i55, 1);
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i8.i64(out_$i54);
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i8($M.6, out_$p53);
    goto corral_source_split_1681;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p52, 0);
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p48, out_$i51);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i51 := $or.i24(out_$i50, 1479);
    goto corral_source_split_1676;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i24(out_$i49, $sub.i24(0, 262144));
    goto corral_source_split_1675;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i24($M.5, out_$p48);
    goto corral_source_split_1674;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p46, .str.48);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p45, .str.6);
    goto corral_source_split_1669;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1668;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p44, .str.47);
    goto corral_source_split_1667;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1666;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p43, .str.4);
    goto corral_source_split_1665;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1664;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    call {:si_unique_call 281} {:cexpr "val"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_1663;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.25, out_$p40);
    goto corral_source_split_1662;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p38, $mul.ref(out_$i39, 1));
    goto corral_source_split_1661;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i29);
    goto corral_source_split_1660;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_1659;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1658;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i29, 1);
    call {:si_unique_call 280} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1657;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    call {:si_unique_call 279} {:cexpr "status"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1656;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.25, out_$p33);
    goto corral_source_split_1655;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p31, $mul.ref(out_$i32, 1));
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i22);
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_1652;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1651;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i22, 1);
    call {:si_unique_call 278} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_1650;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(out_$i27);
    call {:si_unique_call 277} {:cexpr "line"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1649;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.25, out_$p26);
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(out_$i25, 1));
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1646;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1645;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1644;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i14, 1);
    call {:si_unique_call 276} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    call {:si_unique_call 275} {:cexpr "opcode"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_1642;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.25, out_$p19);
    goto corral_source_split_1641;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 1));
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i15);
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1637;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i15, 1);
    call {:si_unique_call 274} {:cexpr "i"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_1636;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$i67, out_$i68, out_$i69, out_$i70 := out_$i21, out_$i28, out_$i36, out_$i42;
    assume true;
    goto $bb12;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$i66 := $sle.i32(out_$i65, out_$i28);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i8.i32(out_$i64);
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.0, out_$p63);
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p62, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p6, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1698;

  $bb11:
    assume !(out_$i60 == 1);
    goto corral_source_split_1697;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i14, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i71, out_$i72, out_$i73, out_$i67, out_$i68, out_$i69, out_$i70, out_$i15 := digi_read_oob_callback_loop_$bb53(in_$p0, in_$p1, in_$p6, in_$p8, out_$i14, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i71, out_$i72, out_$i73, out_$i67, out_$i68, out_$i69, out_$i70, in_$p12, out_$i15);
    return;

  exit:
    return;
}



procedure digi_read_oob_callback_loop_$bb53(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p8: ref, in_$i14: i32, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i24, in_$i50: i24, in_$i51: i24, in_$p52: ref, in_$p53: ref, in_$i54: i8, in_$i55: i64, in_$i56: i64, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$p12: ref, in_$i15: i32) returns (out_$i14: i32, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i24, out_$i50: i24, out_$i51: i24, out_$p52: ref, out_$p53: ref, out_$i54: i8, out_$i55: i64, out_$i56: i64, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i15: i32);
  modifies $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation digi_read_oob_callback_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p8: ref, in_$i14: i32, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i24, in_$i50: i24, in_$i51: i24, in_$p52: ref, in_$p53: ref, in_$i54: i8, in_$i55: i64, in_$i56: i64, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i74: i64, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i64, in_$i93: i1, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$p101: ref, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i111: i32, in_$i112: i32, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$p123: ref, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$p137: ref, in_$p138: ref, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i1, in_$p145: ref, in_$i146: i32, in_$i147: i32, in_$i148: i1, in_$p12: ref, in_$i13: i32, in_$i15: i32) returns (out_$i14: i32, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i24, out_$i50: i24, out_$i51: i24, out_$p52: ref, out_$p53: ref, out_$i54: i8, out_$i55: i64, out_$i56: i64, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i74: i64, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i64, out_$i93: i1, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$p101: ref, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i111: i32, out_$i112: i32, out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$p123: ref, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$p137: ref, out_$p138: ref, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i1, out_$p145: ref, out_$i146: i32, out_$i147: i32, out_$i148: i1, out_$p12: ref, out_$i13: i32, out_$i15: i32)
{

  entry:
    out_$i14, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i71, out_$i72, out_$i73, out_$i67, out_$i68, out_$i69, out_$i70, out_$i74, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$i139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$p12, out_$i13, out_$i15 := in_$i14, in_$p16, in_$p17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i71, in_$i72, in_$i73, in_$i67, in_$i68, in_$i69, in_$i70, in_$i74, in_$p76, in_$p77, in_$p78, in_$p79, in_$i80, in_$i81, in_$p83, in_$p84, in_$i85, in_$i86, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$p101, in_$i102, in_$p103, in_$p104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$p110, in_$i111, in_$i112, in_$p113, in_$p114, in_$i115, in_$i116, in_$p117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$p123, in_$p124, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$p133, in_$p134, in_$i135, in_$i136, in_$p137, in_$p138, in_$i139, in_$p140, in_$p141, in_$p142, in_$p143, in_$i144, in_$p145, in_$i146, in_$i147, in_$i148, in_$p12, in_$i13, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1634;

  $bb51:
    assume out_$i148 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$i13 := out_$p77, out_$i69;
    goto $bb51_dummy;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_$i148 := $ult.i32(out_$i69, out_$i147);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$i147 := $sub.i32(out_$i146, 3);
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i32($M.0, in_$p8);
    goto corral_source_split_1814;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} tty_kref_put(out_$p84);
    goto corral_source_split_1813;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} spin_unlock(out_$p138);
    goto corral_source_split_1811;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p137, out_$i136);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p133, out_$i132);
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$i132 := $or.i32(out_$i131, 64);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i32($M.0, out_$p130);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1798;

  $bb41:
    assume out_$i129 == 1;
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.i32(out_$i128, 0);
    goto corral_source_split_1795;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i128 := $and.i32(out_$i70, 128);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p127, out_$i126);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p123, out_$i122);
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$i122 := $or.i32(out_$i121, 128);
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.0, out_$p120);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1782;

  $bb38:
    assume out_$i119 == 1;
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$i119 := $ne.i32(out_$i118, 0);
    goto corral_source_split_1779;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i118 := $and.i32(out_$i70, 64);
    goto corral_source_split_1778;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p117, out_$i116);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p113, out_$i112);
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i112 := $or.i32(out_$i111, 256);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i32($M.0, out_$p110);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1766;

  $bb35:
    assume out_$i109 == 1;
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i32(out_$i108, 0);
    goto corral_source_split_1763;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i108 := $and.i32(out_$i70, 32);
    goto corral_source_split_1762;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p107, out_$i106);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} tty_port_tty_wakeup(out_$p103);
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p77, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1759;

  $bb31:
    assume out_$i102 == 1;
    goto corral_source_split_1758;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i91, 0);
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p101, out_$i100);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$i100 := $or.i32(out_$i99, 32);
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i32($M.0, out_$p98);
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1745;

  $bb29:
    assume out_$i97 == 1;
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 0);
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    out_$i96 := $and.i32(out_$i70, 16);
    goto corral_source_split_1741;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} spin_lock(out_$p95);
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1739;

  $bb27:
    assume out_$i94 == 1;
    goto corral_source_split_1738;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i67, 8);
    goto corral_source_split_1734;

  $bb24:
    assume out_$i93 == 1;
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i64(out_$i92, 0);
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    out_$i92 := $p2i.ref.i64(out_$p84);
    goto corral_source_split_1730;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  $bb22:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := 0;
    goto $bb23;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i90;
    goto $bb23;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$i90 := $and.i32(out_$i89, $sub.i32(0, 2147483648));
    call {:si_unique_call 287} {:cexpr "rts"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.0, out_$p88);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(out_$p84, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_1725;

  $bb21:
    assume out_$i86 == 1;
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, 0);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p84);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} out_$p84 := tty_port_tty_get(out_$p83);
    goto corral_source_split_1720;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p77, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_1719;

  $bb18:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i64(out_$i80, 0);
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(out_$p78);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} out_$p78 := usb_get_serial_port_data(out_$p77);
    goto corral_source_split_1710;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i74, 8));
    goto corral_source_split_1708;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i68);
    goto corral_source_split_1707;

  $bb13:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$i67, out_$i68, out_$i69, out_$i70 := out_$i21, out_$i28, out_$i36, out_$i42;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$i66 := $sle.i32(out_$i65, out_$i28);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i8.i32(out_$i64);
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.0, out_$p63);
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p62, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p6, $mul.ref(0, 272)), $mul.ref(8, 1));
    goto corral_source_split_1698;

  $bb11:
    assume !(out_$i60 == 1);
    goto corral_source_split_1697;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i35, 0);
    goto corral_source_split_1691;

  $bb7:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32(in_$p1, out_$p59, .str.48, out_$i21, out_$i28, out_$i35, out_$i42);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p12, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1688;

  $bb6:
    assume out_$i58 == 1;
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} out_$i57 := ldv__builtin_expect(out_$i56, 0);
    call {:si_unique_call 283} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$i56 := $and.i64(out_$i55, 1);
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i8.i64(out_$i54);
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i8($M.6, out_$p53);
    goto corral_source_split_1681;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p52, 0);
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p48, out_$i51);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i51 := $or.i24(out_$i50, 1479);
    goto corral_source_split_1676;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i24(out_$i49, $sub.i24(0, 262144));
    goto corral_source_split_1675;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i24($M.5, out_$p48);
    goto corral_source_split_1674;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p46, .str.48);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p45, .str.6);
    goto corral_source_split_1669;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1668;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p44, .str.47);
    goto corral_source_split_1667;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1666;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p43, .str.4);
    goto corral_source_split_1665;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1664;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    call {:si_unique_call 281} {:cexpr "val"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_1663;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.25, out_$p40);
    goto corral_source_split_1662;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p38, $mul.ref(out_$i39, 1));
    goto corral_source_split_1661;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i29);
    goto corral_source_split_1660;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_1659;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1658;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i29, 1);
    call {:si_unique_call 280} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1657;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    call {:si_unique_call 279} {:cexpr "status"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1656;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.25, out_$p33);
    goto corral_source_split_1655;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p31, $mul.ref(out_$i32, 1));
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i22);
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_1652;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1651;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i22, 1);
    call {:si_unique_call 278} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_1650;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(out_$i27);
    call {:si_unique_call 277} {:cexpr "line"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1649;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.25, out_$p26);
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(out_$i25, 1));
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1646;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1645;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1644;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i14, 1);
    call {:si_unique_call 276} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    call {:si_unique_call 275} {:cexpr "opcode"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_1642;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.25, out_$p19);
    goto corral_source_split_1641;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 1));
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i15);
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1637;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i15, 1);
    call {:si_unique_call 274} {:cexpr "i"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_1636;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb53:
    call out_$i14, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i71, out_$i72, out_$i73, out_$i67, out_$i68, out_$i69, out_$i70, out_$i15 := digi_read_oob_callback_loop_$bb53(in_$p0, in_$p1, in_$p6, in_$p8, out_$i14, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i71, out_$i72, out_$i73, out_$i67, out_$i68, out_$i69, out_$i70, out_$p12, out_$i15);
    goto $bb53_last;

  $bb53_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i13;
    goto $bb53;

  $bb14:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i36;
    assume false;
    return;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$i73 := $ult.i32(out_$i36, out_$i72);
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$i72 := $sub.i32(out_$i71, 3);
    goto corral_source_split_1694;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, in_$p8);
    goto corral_source_split_1693;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i66 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i60 == 1;
    goto $bb10;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1756;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$i106 := $and.i32(out_$i105, $sub.i32(0, 33));
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.0, out_$p104);
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1753;

  $bb30:
    assume !(out_$i97 == 1);
    goto corral_source_split_1752;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$i116 := $and.i32(out_$i115, $sub.i32(0, 257));
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.0, out_$p114);
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1773;

  $bb36:
    assume !(out_$i109 == 1);
    goto corral_source_split_1772;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1792;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$i126 := $and.i32(out_$i125, $sub.i32(0, 129));
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.0, out_$p124);
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1789;

  $bb39:
    assume !(out_$i119 == 1);
    goto corral_source_split_1788;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$i136 := $and.i32(out_$i135, $sub.i32(0, 65));
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.0, out_$p134);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_1805;

  $bb42:
    assume !(out_$i129 == 1);
    goto corral_source_split_1804;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} spin_unlock(out_$p143);
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} __wake_up(out_$p142, 1, 1, $0.ref);
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p141, 1);
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} spin_lock(out_$p140);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1819;

  $bb45:
    assume out_$i139 == 1;
    goto corral_source_split_1818;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i67, 13);
    goto corral_source_split_1736;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i93 == 1);
    goto $bb26;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb26;

  $bb49:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} __wake_up(out_$p145, 1, 1, $0.ref);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(out_$p79, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_1832;

  $bb48:
    assume out_$i144 == 1;
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i67, 9);
    goto corral_source_split_1829;

  $bb46:
    assume !(out_$i139 == 1);
    goto corral_source_split_1828;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i14, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i71, out_$i72, out_$i73, out_$i67, out_$i68, out_$i69, out_$i70, out_$i74, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$i139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$p12, out_$i13, out_$i15 := digi_read_oob_callback_loop_$bb4(in_$p0, in_$p1, in_$p6, in_$p8, out_$i14, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i71, out_$i72, out_$i73, out_$i67, out_$i68, out_$i69, out_$i70, out_$i74, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$i139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$p12, out_$i13, out_$i15);
    return;

  exit:
    return;
}



procedure digi_read_oob_callback_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p8: ref, in_$i14: i32, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i24, in_$i50: i24, in_$i51: i24, in_$p52: ref, in_$p53: ref, in_$i54: i8, in_$i55: i64, in_$i56: i64, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i74: i64, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i64, in_$i93: i1, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$p101: ref, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i111: i32, in_$i112: i32, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$p123: ref, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$p137: ref, in_$p138: ref, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i1, in_$p145: ref, in_$i146: i32, in_$i147: i32, in_$i148: i1, in_$p12: ref, in_$i13: i32, in_$i15: i32) returns (out_$i14: i32, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i24, out_$i50: i24, out_$i51: i24, out_$p52: ref, out_$p53: ref, out_$i54: i8, out_$i55: i64, out_$i56: i64, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i74: i64, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i64, out_$i93: i1, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$p101: ref, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i111: i32, out_$i112: i32, out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$p123: ref, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$p137: ref, out_$p138: ref, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i1, out_$p145: ref, out_$i146: i32, out_$i147: i32, out_$i148: i1, out_$p12: ref, out_$i13: i32, out_$i15: i32);
  modifies $M.24, $M.0, $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation digi_set_modem_signals_loop_$bb7(in_$i2: i32, in_$p5: ref, in_$p11: ref, in_$p13: ref, in_$p38: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_vslice_dummy_var_41: i64) returns (out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_vslice_dummy_var_41: i64)
{

  entry:
    out_$p41, out_$p42, out_$p43, out_$i45, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_vslice_dummy_var_41 := in_$p41, in_$p42, in_$p43, in_$i45, in_$p46, in_$i47, in_$i48, in_$p50, in_$i51, in_$i52, in_vslice_dummy_var_41;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i52 == 1;
    goto $bb16_dummy;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_2162;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, in_$p38);
    goto corral_source_split_2161;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} spin_lock(out_$p50);
    goto corral_source_split_2160;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p5, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2159;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} ldv_spin_lock();
    goto corral_source_split_2158;

  $bb10:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_2152;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} out_$i47 := signal_pending(out_$p46);
    call {:si_unique_call 356} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_2151;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} out_$p46 := get_current();
    goto corral_source_split_2150;

  $bb9:
    assume out_$i45 == 1;
    goto corral_source_split_2149;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(in_$i2, 0);
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} out_vslice_dummy_var_41 := cond_wait_interruptible_timeout_irqrestore(out_$p42, 25, out_$p43, 0);
    goto corral_source_split_2146;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p13, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2145;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p11, $mul.ref(0, 3016)), $mul.ref(1408, 1));
    goto corral_source_split_2144;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} spin_unlock(out_$p41);
    goto corral_source_split_2143;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p5, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2142;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p41, out_$p42, out_$p43, out_$i45, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_vslice_dummy_var_41 := digi_set_modem_signals_loop_$bb7(in_$i2, in_$p5, in_$p11, in_$p13, in_$p38, out_$p41, out_$p42, out_$p43, out_$i45, out_$p46, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_vslice_dummy_var_41);
    return;

  exit:
    return;
}



procedure digi_set_modem_signals_loop_$bb7(in_$i2: i32, in_$p5: ref, in_$p11: ref, in_$p13: ref, in_$p38: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_vslice_dummy_var_41: i64) returns (out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_vslice_dummy_var_41: i64);
  modifies $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation digi_write_inb_command_loop_$bb15(in_$p0: ref, in_$p6: ref, in_$i33: i64, in_$p39: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i49: i32, in_$i50: i1, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_vslice_dummy_var_42: i64) returns (out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i49: i32, out_$i50: i1, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_vslice_dummy_var_42: i64)
{

  entry:
    out_$p42, out_$p43, out_$p45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_vslice_dummy_var_42 := in_$p42, in_$p43, in_$p45, in_$i46, in_$i47, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_vslice_dummy_var_42;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.15, jiffies);
    goto corral_source_split_2356;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i50 == 1;
    goto $bb21_dummy;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, in_$p39);
    goto corral_source_split_2372;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_spin_lock();
    goto corral_source_split_2371;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} out_$i46 := signal_pending(out_$p45);
    call {:si_unique_call 415} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} out_$p45 := get_current();
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} out_vslice_dummy_var_42 := cond_wait_interruptible_timeout_irqrestore(out_$p42, 25, out_$p43, 0);
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2361;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1408, 1));
    goto corral_source_split_2360;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume out_$i53 == 1;
    goto corral_source_split_2377;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i64(out_$i52, 0);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i64(out_$i51, in_$i33);
    goto corral_source_split_2357;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$p45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_vslice_dummy_var_42 := digi_write_inb_command_loop_$bb15(in_$p0, in_$p6, in_$i33, in_$p39, out_$p42, out_$p43, out_$p45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_vslice_dummy_var_42);
    return;

  exit:
    return;
}



procedure digi_write_inb_command_loop_$bb15(in_$p0: ref, in_$p6: ref, in_$i33: i64, in_$p39: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i49: i32, in_$i50: i1, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_vslice_dummy_var_42: i64) returns (out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i49: i32, out_$i50: i1, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_vslice_dummy_var_42: i64);
  modifies $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation digi_write_inb_command_loop_$bb10(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$i33: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i49: i32, in_$i50: i1, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i8, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i64, in_$p84: ref, in_$i85: i32, in_$i86: i64, in_$i87: i64, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i64, in_$i93: i64, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i64, in_$i104: i64, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$p118: ref, in_$i119: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i121: i1, in_$i122: i32, in_$i120: i32, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_vslice_dummy_var_42: i64) returns (out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i49: i32, out_$i50: i1, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i8, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i64, out_$p84: ref, out_$i85: i32, out_$i86: i64, out_$i87: i64, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i64, out_$i93: i64, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i64, out_$i104: i64, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$p118: ref, out_$i119: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i121: i1, out_$i122: i32, out_$i120: i32, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_vslice_dummy_var_42: i64)
{

  entry:
    out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$p118, out_$i119, out_$p36, out_$i37, out_$i38, out_$i121, out_$i122, out_$i120, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_42 := in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p45, in_$i46, in_$i47, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$p78, in_$p79, in_$p80, in_$p81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i89, in_$p90, in_$i91, in_$i92, in_$i93, in_$p94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p102, in_$i103, in_$i104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p109, in_$i110, in_$i111, in_$p112, in_$p113, in_$i114, in_$i115, in_$p116, in_$i117, in_$p118, in_$i119, in_$p36, in_$i37, in_$i38, in_$i121, in_$i122, in_$i120, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13, in_cmdloc_dummy_var_14, in_cmdloc_dummy_var_15, in_cmdloc_dummy_var_16, in_cmdloc_dummy_var_17, in_vslice_dummy_var_42;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  $bb38:
    assume out_$i119 == 1;
    assume {:verifier.code 0} true;
    out_$p36, out_$i37, out_$i38 := out_$p118, out_$i117, out_$i110;
    goto $bb38_dummy;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    out_$i120 := out_$i110;
    assume true;
    goto $bb38;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$i119 := $sgt.i32(out_$i117, 0);
    goto corral_source_split_2472;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2471;

  $bb36:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i117, out_$p118 := out_$i37, out_$p36;
    goto $bb37;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$i117, out_$p118 := out_$i114, out_$p116;
    goto $bb37;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref(out_$p36, $mul.ref(out_$i115, 1));
    goto corral_source_split_2469;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i64);
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$i114 := $sub.i32(out_$i37, out_$i64);
    call {:si_unique_call 427} {:cexpr "count"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p113, 0);
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p112, 1);
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2463;

  $bb35:
    assume out_$i111 == 1;
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 0);
    goto corral_source_split_2460;

  SeqInstr_81:
    call {:si_unique_call 426} {:cexpr "ret"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_2459;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} out_$i110 := ldv_usb_submit_urb_29(out_$p109, 32);
    goto SeqInstr_80;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_2458;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p107, out_$i64);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p102, out_$i99);
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p101, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2443;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i98, out_$i64);
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i97, 2);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.0, out_$p96);
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_12 := $M.0;
    out_cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 422} out_cmdloc_dummy_var_14 := $memcpy.i8(out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_$p94, out_$p36, out_$i95, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_14;
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i64);
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref(in_$p10, $mul.ref(out_$i93, 1));
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i64(out_$i92, 2);
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i91);
    goto corral_source_split_2434;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.0, out_$p90);
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2432;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} memcpy_guard(out_$p88, out_$p36, out_$i89);
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i64);
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(in_$p10, $mul.ref(out_$i87, 1));
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_$i87 := $add.i64(out_$i86, 2);
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i85);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, out_$p84);
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.0;
    out_cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 420} out_cmdloc_dummy_var_11 := $memcpy.i8(out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_$p78, out_$p80, out_$i83, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_11;
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i82);
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, out_$p81);
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2421;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(out_$p79);
    goto corral_source_split_2420;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref(in_$p10, $mul.ref(2, 1));
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} memcpy_guard(out_$p72, out_$p74, out_$i77);
    goto corral_source_split_2417;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i76);
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.0, out_$p75);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2414;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    out_$p74 := $bitcast.ref.ref(out_$p73);
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2412;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(in_$p10, $mul.ref(2, 1));
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p71, out_$i70);
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(in_$p10, $mul.ref(1, 1));
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i32.i8(out_$i69);
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, out_$p68);
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2406;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, in_$p10, 18);
    goto corral_source_split_2405;

  $bb32:
    assume out_$i67 == 1;
    goto corral_source_split_2404;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    out_$i67 := $sgt.i32(out_$i66, 0);
    goto corral_source_split_2402;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_2401;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2400;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2399;

  $bb30:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := out_$i61;
    goto $bb31;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i63;
    goto $bb31;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    out_$i63 := $and.i32(out_$i61, $sub.i32(0, 4));
    call {:si_unique_call 418} {:cexpr "len"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_2397;

  $bb29:
    assume out_$i62 == 1;
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(out_$i61, 4);
    goto corral_source_split_2394;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i59;
    goto $bb28;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i37;
    goto $bb28;

  $bb26:
    assume out_$i60 == 1;
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i37, out_$i59);
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i59 := $sub.i32(out_$i56, out_$i58);
    call {:si_unique_call 417} {:cexpr "_min2"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(76, 1));
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i55, $sub.i32(0, 2));
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_2382;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_2381;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb14;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb22:
    assume !(out_$i50 == 1);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p39);
    goto corral_source_split_2372;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_spin_lock();
    goto corral_source_split_2371;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} out_$i46 := signal_pending(out_$p45);
    call {:si_unique_call 415} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} out_$p45 := get_current();
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} out_vslice_dummy_var_42 := cond_wait_interruptible_timeout_irqrestore(out_$p42, 25, out_$p43, 0);
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2361;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1408, 1));
    goto corral_source_split_2360;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume out_$i53 == 1;
    goto corral_source_split_2377;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i64(out_$i52, 0);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i64(out_$i51, in_$i33);
    goto corral_source_split_2357;

  $bb15:
    call out_$p42, out_$p43, out_$p45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_vslice_dummy_var_42 := digi_write_inb_command_loop_$bb15(in_$p0, in_$p6, in_$i33, out_$p39, out_$p42, out_$p43, out_$p45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_vslice_dummy_var_42);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.15, jiffies);
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i50 == 1;
    assume false;
    return;

  $bb12:
    assume out_$i41 == 1;
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_2351;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2350;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb40:
    assume out_$i121 == 1;
    goto corral_source_split_2476;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$i122 := out_$i38;
    assume true;
    goto $bb40;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i38, 0);
    goto corral_source_split_2348;

  $bb24:
    assume !(out_$i53 == 1);
    goto corral_source_split_2379;

  $bb27:
    assume !(out_$i60 == 1);
    goto corral_source_split_2391;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p106, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2455;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_2454;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_15 := $M.0;
    out_cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 424} out_cmdloc_dummy_var_17 := $memcpy.i8(out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, in_$p10, out_$p36, out_$i104, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_17;
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i64);
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} memcpy_guard(in_$p10, out_$p36, out_$i103);
    goto corral_source_split_2450;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    out_$i103 := $sext.i32.i64(out_$i64);
    goto corral_source_split_2449;

  $bb33:
    assume !(out_$i67 == 1);
    goto corral_source_split_2448;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$p118, out_$i119, out_$p36, out_$i37, out_$i38, out_$i121, out_$i122, out_$i120, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_42 := digi_write_inb_command_loop_$bb10(in_$p0, in_$p6, in_$p10, in_$i33, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$p118, out_$i119, out_$p36, out_$i37, out_$i38, out_$i121, out_$i122, out_$i120, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_42);
    return;

  exit:
    return;
}



procedure digi_write_inb_command_loop_$bb10(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$i33: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i49: i32, in_$i50: i1, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i8, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i64, in_$p84: ref, in_$i85: i32, in_$i86: i64, in_$i87: i64, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i64, in_$i93: i64, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i64, in_$i104: i64, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$p118: ref, in_$i119: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i121: i1, in_$i122: i32, in_$i120: i32, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_vslice_dummy_var_42: i64) returns (out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i49: i32, out_$i50: i1, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i8, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i64, out_$p84: ref, out_$i85: i32, out_$i86: i64, out_$i87: i64, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i64, out_$i93: i64, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i64, out_$i104: i64, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$p118: ref, out_$i119: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i121: i1, out_$i122: i32, out_$i120: i32, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_vslice_dummy_var_42: i64);
  modifies $M.0, assertsPassed, $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation digi_write_oob_command_loop_$bb12(in_$i3: i32, in_$p10: ref, in_$p12: ref, in_$p36: ref, in_$p39: ref, in_$p40: ref, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i47: i32, in_$i48: i1, in_vslice_dummy_var_43: i64) returns (out_$p39: ref, out_$p40: ref, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i47: i32, out_$i48: i1, out_vslice_dummy_var_43: i64)
{

  entry:
    out_$p39, out_$p40, out_$i42, out_$p43, out_$i44, out_$i45, out_$i47, out_$i48, out_vslice_dummy_var_43 := in_$p39, in_$p40, in_$i42, in_$p43, in_$i44, in_$i45, in_$i47, in_$i48, in_vslice_dummy_var_43;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i48 == 1;
    goto $bb21_dummy;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_2581;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, in_$p36);
    goto corral_source_split_2580;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} ldv_spin_lock();
    goto corral_source_split_2579;

  $bb15:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} out_$i44 := signal_pending(out_$p43);
    call {:si_unique_call 450} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} out_$p43 := get_current();
    goto corral_source_split_2571;

  $bb14:
    assume out_$i42 == 1;
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(in_$i3, 0);
    goto corral_source_split_2568;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} out_vslice_dummy_var_43 := cond_wait_interruptible_timeout_irqrestore(out_$p39, 25, out_$p40, 0);
    goto corral_source_split_2567;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p12, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2566;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p10, $mul.ref(0, 3016)), $mul.ref(1408, 1));
    goto corral_source_split_2565;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$i42, out_$p43, out_$i44, out_$i45, out_$i47, out_$i48, out_vslice_dummy_var_43 := digi_write_oob_command_loop_$bb12(in_$i3, in_$p10, in_$p12, in_$p36, out_$p39, out_$p40, out_$i42, out_$p43, out_$i44, out_$i45, out_$i47, out_$i48, out_vslice_dummy_var_43);
    return;

  exit:
    return;
}



procedure digi_write_oob_command_loop_$bb12(in_$i3: i32, in_$p10: ref, in_$p12: ref, in_$p36: ref, in_$p39: ref, in_$p40: ref, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i47: i32, in_$i48: i1, in_vslice_dummy_var_43: i64) returns (out_$p39: ref, out_$p40: ref, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i47: i32, out_$i48: i1, out_vslice_dummy_var_43: i64);
  modifies $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation digi_write_oob_command_loop_$bb7(in_$i3: i32, in_$p10: ref, in_$p12: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$i74: i32, in_$i75: i64, in_$p76: ref, in_$i77: i32, in_$p78: ref, in_$i79: i1, in_$p34: ref, in_$i35: i32, in_$i80: i32, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_vslice_dummy_var_43: i64) returns (out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$i74: i32, out_$i75: i64, out_$p76: ref, out_$i77: i32, out_$p78: ref, out_$i79: i1, out_$p34: ref, out_$i35: i32, out_$i80: i32, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_vslice_dummy_var_43: i64)
{

  entry:
    out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i42, out_$p43, out_$i44, out_$i45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p78, out_$i79, out_$p34, out_$i35, out_$i80, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_vslice_dummy_var_43 := in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i42, in_$p43, in_$i44, in_$i45, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$i71, in_$i72, in_$p73, in_$i74, in_$i75, in_$p76, in_$i77, in_$p78, in_$i79, in_$p34, in_$i35, in_$i80, in_cmdloc_dummy_var_18, in_cmdloc_dummy_var_19, in_cmdloc_dummy_var_20, in_vslice_dummy_var_43;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2557;

  $bb33:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$p34, out_$i35 := out_$p78, out_$i77;
    goto $bb33_dummy;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i71;
    assume true;
    goto $bb33;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    out_$i79 := $sgt.i32(out_$i77, 0);
    goto corral_source_split_2629;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  $bb31:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i77, out_$p78 := out_$i35, out_$p34;
    goto $bb32;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    out_$i77, out_$p78 := out_$i74, out_$p76;
    goto $bb32;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(out_$p34, $mul.ref(out_$i75, 1));
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i55);
    goto corral_source_split_2625;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    out_$i74 := $sub.i32(out_$i35, out_$i55);
    call {:si_unique_call 458} {:cexpr "count"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_2624;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p73, 1);
    goto corral_source_split_2623;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p12, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2622;

  $bb30:
    assume out_$i72 == 1;
    goto corral_source_split_2621;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 0);
    goto corral_source_split_2619;

  SeqInstr_87:
    call {:si_unique_call 457} {:cexpr "ret"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_2618;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} out_$i71 := ldv_usb_submit_urb_28(out_$p70, 32);
    goto SeqInstr_86;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_2617;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p10, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p68, out_$i55);
    goto corral_source_split_2615;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p67, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2614;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_2613;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p10, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2612;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_18 := $M.0;
    out_cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 455} out_cmdloc_dummy_var_20 := $memcpy.i8(out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_$p64, out_$p34, out_$i65, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_20;
    goto corral_source_split_2611;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i55);
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p62, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p10, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} memcpy_guard(out_$p59, out_$p34, out_$i60);
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i55);
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2602;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p10, $mul.ref(0, 3016)), $mul.ref(1272, 1));
    goto corral_source_split_2600;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2599;

  $bb28:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := out_$i52;
    goto $bb29;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i54;
    goto $bb29;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    out_$i54 := $and.i32(out_$i52, $sub.i32(0, 4));
    call {:si_unique_call 453} {:cexpr "len"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_2597;

  $bb27:
    assume out_$i53 == 1;
    goto corral_source_split_2596;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    out_$i53 := $sgt.i32(out_$i52, 4);
    goto corral_source_split_2594;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i50;
    goto $bb26;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i35;
    goto $bb26;

  $bb24:
    assume out_$i51 == 1;
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i35, out_$i50);
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    call {:si_unique_call 452} {:cexpr "_min2"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_2586;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p10, $mul.ref(0, 3016)), $mul.ref(1264, 1));
    goto corral_source_split_2585;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb11;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb22:
    assume !(out_$i48 == 1);
    goto corral_source_split_2583;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_2581;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p36);
    goto corral_source_split_2580;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} ldv_spin_lock();
    goto corral_source_split_2579;

  $bb15:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} out_$i44 := signal_pending(out_$p43);
    call {:si_unique_call 450} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} out_$p43 := get_current();
    goto corral_source_split_2571;

  $bb14:
    assume out_$i42 == 1;
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(in_$i3, 0);
    goto corral_source_split_2568;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} out_vslice_dummy_var_43 := cond_wait_interruptible_timeout_irqrestore(out_$p39, 25, out_$p40, 0);
    goto corral_source_split_2567;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p12, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2566;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p10, $mul.ref(0, 3016)), $mul.ref(1408, 1));
    goto corral_source_split_2565;

  $bb12:
    call out_$p39, out_$p40, out_$i42, out_$p43, out_$i44, out_$i45, out_$i47, out_$i48, out_vslice_dummy_var_43 := digi_write_oob_command_loop_$bb12(in_$i3, in_$p10, in_$p12, out_$p36, out_$p39, out_$p40, out_$i42, out_$p43, out_$i44, out_$i45, out_$i47, out_$i48, out_vslice_dummy_var_43);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i48 == 1;
    assume false;
    return;

  $bb9:
    assume out_$i38 == 1;
    goto corral_source_split_2563;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_2561;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_2560;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p12, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2559;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb25:
    assume !(out_$i51 == 1);
    goto corral_source_split_2591;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i42, out_$p43, out_$i44, out_$i45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p78, out_$i79, out_$p34, out_$i35, out_$i80, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_vslice_dummy_var_43 := digi_write_oob_command_loop_$bb7(in_$i3, in_$p10, in_$p12, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i42, out_$p43, out_$i44, out_$i45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p78, out_$i79, out_$p34, out_$i35, out_$i80, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_vslice_dummy_var_43);
    return;

  exit:
    return;
}



procedure digi_write_oob_command_loop_$bb7(in_$i3: i32, in_$p10: ref, in_$p12: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$p73: ref, in_$i74: i32, in_$i75: i64, in_$p76: ref, in_$i77: i32, in_$p78: ref, in_$i79: i1, in_$p34: ref, in_$i35: i32, in_$i80: i32, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_vslice_dummy_var_43: i64) returns (out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$p73: ref, out_$i74: i32, out_$i75: i64, out_$p76: ref, out_$i77: i32, out_$p78: ref, out_$i79: i1, out_$p34: ref, out_$i35: i32, out_$i80: i32, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_vslice_dummy_var_43: i64);
  modifies $M.0, assertsPassed, $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation digi_transmit_idle_loop_$bb8(in_$p4: ref, in_$i10: i64, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_vslice_dummy_var_44: i64) returns (out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_vslice_dummy_var_44: i64)
{

  entry:
    out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_vslice_dummy_var_44 := in_$p20, in_$p21, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_vslice_dummy_var_44;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p4, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2692;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    goto $bb13_dummy;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i64(out_$i27, 0);
    goto corral_source_split_2708;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$i27 := $sub.i64(out_$i26, in_$i10);
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.15, jiffies);
    goto corral_source_split_2706;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} ldv_spin_lock();
    goto corral_source_split_2705;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} out_$i24 := signal_pending(out_$p23);
    call {:si_unique_call 484} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} out_$p23 := get_current();
    goto corral_source_split_2699;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} out_vslice_dummy_var_44 := cond_wait_interruptible_timeout_irqrestore(out_$p20, 25, out_$p21, 0);
    goto corral_source_split_2698;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p4, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2697;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p4, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_2696;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15:
    assume out_$i31 == 1;
    goto corral_source_split_2712;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_2693;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_vslice_dummy_var_44 := digi_transmit_idle_loop_$bb8(in_$p4, in_$i10, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_vslice_dummy_var_44);
    return;

  exit:
    return;
}



procedure digi_transmit_idle_loop_$bb8(in_$p4: ref, in_$i10: i64, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_vslice_dummy_var_44: i64) returns (out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_vslice_dummy_var_44: i64);
  modifies $M.24, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation digi_startup_device_loop_$bb8(in_$p0: ref, in_$p11: ref, in_$i20: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i19: i32, in_$i40: i32) returns (out_$i20: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i19: i32, out_$i40: i32)
{

  entry:
    out_$i20, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i19, out_$i40 := in_$i20, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i19, in_$i40;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2776;

  $bb14:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i33;
    goto $bb14_dummy;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i26;
    assume true;
    goto $bb14;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$i39 := $sgt.i32(out_$i38, out_$i33);
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i37, 1);
    goto corral_source_split_2797;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i8.i32(out_$i36);
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.0, out_$p35);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 552)), $mul.ref(16, 1));
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, in_$p11);
    goto corral_source_split_2793;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i19, 1);
    call {:si_unique_call 500} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2792;

  $bb11:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    out_$i28, out_$p29, out_$i30 := out_$i19, out_$p23, out_$i26;
    assume true;
    goto $bb11;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_2784;

  SeqInstr_102:
    call {:si_unique_call 498} {:cexpr "ret"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_2783;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} out_$i26 := ldv_usb_submit_urb_34(out_$p25, 208);
    goto SeqInstr_101;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_2781;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_2780;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i20, 8));
    goto corral_source_split_2779;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i20, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i19, out_$i40 := digi_startup_device_loop_$bb8(in_$p0, in_$p11, out_$i20, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i19, out_$i40);
    return;

  exit:
    return;
}



procedure digi_startup_device_loop_$bb8(in_$p0: ref, in_$p11: ref, in_$i20: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i19: i32, in_$i40: i32) returns (out_$i20: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i19: i32, out_$i40: i32);
  modifies assertsPassed;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$p160: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i183: i32, in_$i184: i32, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i32, in_$i189: i32, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i194: i32, in_$i195: i32, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i32, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$p212: ref, in_$i213: i32, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$p218: ref, in_$i219: i32, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$p224: ref, in_$i225: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$p230: ref, in_$i231: i32, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$i261: i32, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i32, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i300: i32, in_$i301: i1, in_$p302: ref, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i315: i32, in_$i316: i1, in_$i318: i32, in_$i319: i32, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i1, in_$i330: i1, in_$i331: i1, in_$i332: i1, in_$i333: i1, in_$i334: i1, in_$i335: i1, in_$i336: i1, in_$i337: i1, in_$i338: i1, in_$i339: i1, in_$i340: i1, in_$i341: i1, in_$i342: i1, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i355: i32, in_$i356: i1, in_$p357: ref, in_$i359: i32, in_$i360: i1, in_$p361: ref, in_$i363: i32, in_$i364: i1, in_$p365: ref, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i371: i32, in_$i372: i1, in_$p373: ref, in_$p374: ref, in_$i375: i32, in_$i376: i32, in_$i377: i1, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i385: i1, in_$p386: ref, in_$i387: i32, in_$i388: i1, in_$p389: ref, in_$i390: i32, in_$i391: i1, in_$p392: ref, in_$p393: ref, in_$i394: i32, in_$i395: i1, in_$p396: ref, in_$p397: ref, in_$i398: i32, in_$i399: i1, in_$p400: ref, in_$p401: ref, in_$i402: i32, in_$i403: i1, in_$p404: ref, in_$p405: ref, in_$i406: i32, in_$i407: i1, in_$p408: ref, in_$i409: i32, in_$i410: i1, in_$p411: ref, in_$i413: i32, in_$i414: i1, in_$p415: ref, in_$i417: i32, in_$i418: i1, in_$p419: ref, in_$i421: i32, in_$i422: i1, in_$p423: ref, in_$i425: i32, in_$i426: i1, in_$p427: ref, in_$i428: i32, in_$i429: i32, in_$i430: i32, in_$i431: i1, in_$p432: ref, in_$i433: i32, in_$i434: i32, in_$i436: i32, in_$i437: i1, in_$p438: ref, in_$i439: i32, in_$i440: i32, in_$i442: i32, in_$i443: i1, in_$p444: ref, in_$i445: i32, in_$i446: i32, in_$i448: i32, in_$i449: i1, in_$p450: ref, in_$i451: i32, in_$i452: i32, in_$i454: i32, in_$i455: i1, in_$p456: ref, in_$p457: ref, in_$i458: i32, in_$i460: i32, in_$i461: i1, in_$p462: ref, in_$p463: ref, in_$i464: i32, in_$i466: i32, in_$i467: i1, in_$p468: ref, in_$p469: ref, in_$i470: i32, in_$i472: i32, in_$i473: i1, in_$p474: ref, in_$p475: ref, in_$i476: i32, in_$i478: i32, in_$i479: i1, in_$p480: ref, in_$i481: i32, in_$i482: i32, in_$i483: i1, in_$i484: i32, in_$i485: i1, in_$p486: ref, in_$i487: i32, in_$i488: i1, in_$p489: ref, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$i495: i32, in_$i496: i1, in_$p497: ref, in_$i499: i32, in_$i500: i1, in_$p501: ref, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$i506: i32, in_$i507: i32, in_$i508: i1, in_$p509: ref, in_$i510: i32, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$i514: i32, in_$i515: i32, in_$i516: i1, in_$p517: ref, in_$i518: i32, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i522: i32, in_$i523: i1, in_$p524: ref, in_$i525: i32, in_$i526: i1, in_$p527: ref, in_$i529: i32, in_$i530: i1, in_$p531: ref, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$i537: i32, in_$i538: i1, in_$p539: ref, in_$i541: i32, in_$i542: i1, in_$p543: ref, in_$i545: i32, in_$i546: i1, in_$p547: ref, in_$i549: i32, in_$i550: i1, in_$p551: ref, in_$i553: i32, in_$i554: i1, in_$p555: ref, in_$i557: i32, in_$i558: i1, in_$p559: ref, in_$i560: i32, in_$i561: i1, in_$i563: i32, in_$i564: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32) returns (out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$p160: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i183: i32, out_$i184: i32, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i32, out_$i189: i32, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i194: i32, out_$i195: i32, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i32, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$p212: ref, out_$i213: i32, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$p218: ref, out_$i219: i32, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$p224: ref, out_$i225: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$p230: ref, out_$i231: i32, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$i261: i32, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i32, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i300: i32, out_$i301: i1, out_$p302: ref, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i315: i32, out_$i316: i1, out_$i318: i32, out_$i319: i32, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i1, out_$i330: i1, out_$i331: i1, out_$i332: i1, out_$i333: i1, out_$i334: i1, out_$i335: i1, out_$i336: i1, out_$i337: i1, out_$i338: i1, out_$i339: i1, out_$i340: i1, out_$i341: i1, out_$i342: i1, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i355: i32, out_$i356: i1, out_$p357: ref, out_$i359: i32, out_$i360: i1, out_$p361: ref, out_$i363: i32, out_$i364: i1, out_$p365: ref, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i371: i32, out_$i372: i1, out_$p373: ref, out_$p374: ref, out_$i375: i32, out_$i376: i32, out_$i377: i1, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i385: i1, out_$p386: ref, out_$i387: i32, out_$i388: i1, out_$p389: ref, out_$i390: i32, out_$i391: i1, out_$p392: ref, out_$p393: ref, out_$i394: i32, out_$i395: i1, out_$p396: ref, out_$p397: ref, out_$i398: i32, out_$i399: i1, out_$p400: ref, out_$p401: ref, out_$i402: i32, out_$i403: i1, out_$p404: ref, out_$p405: ref, out_$i406: i32, out_$i407: i1, out_$p408: ref, out_$i409: i32, out_$i410: i1, out_$p411: ref, out_$i413: i32, out_$i414: i1, out_$p415: ref, out_$i417: i32, out_$i418: i1, out_$p419: ref, out_$i421: i32, out_$i422: i1, out_$p423: ref, out_$i425: i32, out_$i426: i1, out_$p427: ref, out_$i428: i32, out_$i429: i32, out_$i430: i32, out_$i431: i1, out_$p432: ref, out_$i433: i32, out_$i434: i32, out_$i436: i32, out_$i437: i1, out_$p438: ref, out_$i439: i32, out_$i440: i32, out_$i442: i32, out_$i443: i1, out_$p444: ref, out_$i445: i32, out_$i446: i32, out_$i448: i32, out_$i449: i1, out_$p450: ref, out_$i451: i32, out_$i452: i32, out_$i454: i32, out_$i455: i1, out_$p456: ref, out_$p457: ref, out_$i458: i32, out_$i460: i32, out_$i461: i1, out_$p462: ref, out_$p463: ref, out_$i464: i32, out_$i466: i32, out_$i467: i1, out_$p468: ref, out_$p469: ref, out_$i470: i32, out_$i472: i32, out_$i473: i1, out_$p474: ref, out_$p475: ref, out_$i476: i32, out_$i478: i32, out_$i479: i1, out_$p480: ref, out_$i481: i32, out_$i482: i32, out_$i483: i1, out_$i484: i32, out_$i485: i1, out_$p486: ref, out_$i487: i32, out_$i488: i1, out_$p489: ref, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$i495: i32, out_$i496: i1, out_$p497: ref, out_$i499: i32, out_$i500: i1, out_$p501: ref, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$i506: i32, out_$i507: i32, out_$i508: i1, out_$p509: ref, out_$i510: i32, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$i514: i32, out_$i515: i32, out_$i516: i1, out_$p517: ref, out_$i518: i32, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i522: i32, out_$i523: i1, out_$p524: ref, out_$i525: i32, out_$i526: i1, out_$p527: ref, out_$i529: i32, out_$i530: i1, out_$p531: ref, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$i537: i32, out_$i538: i1, out_$p539: ref, out_$i541: i32, out_$i542: i1, out_$p543: ref, out_$i545: i32, out_$i546: i1, out_$p547: ref, out_$i549: i32, out_$i550: i1, out_$p551: ref, out_$i553: i32, out_$i554: i1, out_$p555: ref, out_$i557: i32, out_$i558: i1, out_$p559: ref, out_$i560: i32, out_$i561: i1, out_$i563: i32, out_$i564: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32)
{

  entry:
    out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p159, out_$p160, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i209, out_$i210, out_$p211, out_$p212, out_$i213, out_$i215, out_$i216, out_$p217, out_$p218, out_$i219, out_$i221, out_$i222, out_$p223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$p260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$p268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$i275, out_$p276, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$p282, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i300, out_$i301, out_$p302, out_$i304, out_$i305, out_$p306, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i315, out_$i316, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$p351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$p357, out_$i359, out_$i360, out_$p361, out_$i363, out_$i364, out_$p365, out_$i367, out_$i368, out_$p369, out_$i371, out_$i372, out_$p373, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$p380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$p386, out_$i387, out_$i388, out_$p389, out_$i390, out_$i391, out_$p392, out_$p393, out_$i394, out_$i395, out_$p396, out_$p397, out_$i398, out_$i399, out_$p400, out_$p401, out_$i402, out_$i403, out_$p404, out_$p405, out_$i406, out_$i407, out_$p408, out_$i409, out_$i410, out_$p411, out_$i413, out_$i414, out_$p415, out_$i417, out_$i418, out_$p419, out_$i421, out_$i422, out_$p423, out_$i425, out_$i426, out_$p427, out_$i428, out_$i429, out_$i430, out_$i431, out_$p432, out_$i433, out_$i434, out_$i436, out_$i437, out_$p438, out_$i439, out_$i440, out_$i442, out_$i443, out_$p444, out_$i445, out_$i446, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$i454, out_$i455, out_$p456, out_$p457, out_$i458, out_$i460, out_$i461, out_$p462, out_$p463, out_$i464, out_$i466, out_$i467, out_$p468, out_$p469, out_$i470, out_$i472, out_$i473, out_$p474, out_$p475, out_$i476, out_$i478, out_$i479, out_$p480, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$p486, out_$i487, out_$i488, out_$p489, out_$i491, out_$i492, out_$p493, out_$i495, out_$i496, out_$p497, out_$i499, out_$i500, out_$p501, out_$i503, out_$i504, out_$p505, out_$i506, out_$i507, out_$i508, out_$p509, out_$i510, out_$i511, out_$i512, out_$p513, out_$i514, out_$i515, out_$i516, out_$p517, out_$i518, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$p524, out_$i525, out_$i526, out_$p527, out_$i529, out_$i530, out_$p531, out_$i533, out_$i534, out_$p535, out_$i537, out_$i538, out_$p539, out_$i541, out_$i542, out_$p543, out_$i545, out_$i546, out_$p547, out_$i549, out_$i550, out_$p551, out_$i553, out_$i554, out_$p555, out_$i557, out_$i558, out_$p559, out_$i560, out_$i561, out_$i563, out_$i564, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112 := in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$p112, in_$i114, in_$i115, in_$p116, in_$i118, in_$i119, in_$p120, in_$i122, in_$i123, in_$p124, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$p131, in_$i132, in_$i133, in_$p134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$p140, in_$p141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$p147, in_$p148, in_$i149, in_$i150, in_$p151, in_$p152, in_$i153, in_$i154, in_$p155, in_$p156, in_$i157, in_$i158, in_$p159, in_$p160, in_$i161, in_$i162, in_$p163, in_$i165, in_$i166, in_$p167, in_$i169, in_$i170, in_$p171, in_$i173, in_$i174, in_$p175, in_$i177, in_$i178, in_$p179, in_$i180, in_$i181, in_$p182, in_$i183, in_$i184, in_$i185, in_$i186, in_$p187, in_$i188, in_$i189, in_$i191, in_$i192, in_$p193, in_$i194, in_$i195, in_$i197, in_$i198, in_$p199, in_$i200, in_$i201, in_$i203, in_$i204, in_$p205, in_$i206, in_$i207, in_$i209, in_$i210, in_$p211, in_$p212, in_$i213, in_$i215, in_$i216, in_$p217, in_$p218, in_$i219, in_$i221, in_$i222, in_$p223, in_$p224, in_$i225, in_$i227, in_$i228, in_$p229, in_$p230, in_$i231, in_$i233, in_$i234, in_$p235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$p241, in_$i242, in_$i243, in_$p244, in_$i246, in_$i247, in_$p248, in_$i250, in_$i251, in_$p252, in_$i254, in_$i255, in_$p256, in_$i258, in_$i259, in_$p260, in_$i261, in_$i262, in_$i263, in_$p264, in_$i265, in_$i266, in_$i267, in_$p268, in_$i269, in_$i270, in_$i271, in_$p272, in_$i273, in_$i274, in_$i275, in_$p276, in_$i277, in_$i278, in_$p279, in_$i280, in_$i281, in_$p282, in_$i284, in_$i285, in_$p286, in_$i288, in_$i289, in_$p290, in_$i292, in_$i293, in_$p294, in_$i296, in_$i297, in_$p298, in_$i300, in_$i301, in_$p302, in_$i304, in_$i305, in_$p306, in_$i308, in_$i309, in_$p310, in_$i312, in_$i313, in_$p314, in_$i315, in_$i316, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$i333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i342, in_$i343, in_$i344, in_$p345, in_$i346, in_$i347, in_$p348, in_$i349, in_$i350, in_$p351, in_$i352, in_$i353, in_$p354, in_$i355, in_$i356, in_$p357, in_$i359, in_$i360, in_$p361, in_$i363, in_$i364, in_$p365, in_$i367, in_$i368, in_$p369, in_$i371, in_$i372, in_$p373, in_$p374, in_$i375, in_$i376, in_$i377, in_$i378, in_$i379, in_$p380, in_$i381, in_$i382, in_$p383, in_$i384, in_$i385, in_$p386, in_$i387, in_$i388, in_$p389, in_$i390, in_$i391, in_$p392, in_$p393, in_$i394, in_$i395, in_$p396, in_$p397, in_$i398, in_$i399, in_$p400, in_$p401, in_$i402, in_$i403, in_$p404, in_$p405, in_$i406, in_$i407, in_$p408, in_$i409, in_$i410, in_$p411, in_$i413, in_$i414, in_$p415, in_$i417, in_$i418, in_$p419, in_$i421, in_$i422, in_$p423, in_$i425, in_$i426, in_$p427, in_$i428, in_$i429, in_$i430, in_$i431, in_$p432, in_$i433, in_$i434, in_$i436, in_$i437, in_$p438, in_$i439, in_$i440, in_$i442, in_$i443, in_$p444, in_$i445, in_$i446, in_$i448, in_$i449, in_$p450, in_$i451, in_$i452, in_$i454, in_$i455, in_$p456, in_$p457, in_$i458, in_$i460, in_$i461, in_$p462, in_$p463, in_$i464, in_$i466, in_$i467, in_$p468, in_$p469, in_$i470, in_$i472, in_$i473, in_$p474, in_$p475, in_$i476, in_$i478, in_$i479, in_$p480, in_$i481, in_$i482, in_$i483, in_$i484, in_$i485, in_$p486, in_$i487, in_$i488, in_$p489, in_$i491, in_$i492, in_$p493, in_$i495, in_$i496, in_$p497, in_$i499, in_$i500, in_$p501, in_$i503, in_$i504, in_$p505, in_$i506, in_$i507, in_$i508, in_$p509, in_$i510, in_$i511, in_$i512, in_$p513, in_$i514, in_$i515, in_$i516, in_$p517, in_$i518, in_$i519, in_$i520, in_$p521, in_$i522, in_$i523, in_$p524, in_$i525, in_$i526, in_$p527, in_$i529, in_$i530, in_$p531, in_$i533, in_$i534, in_$p535, in_$i537, in_$i538, in_$p539, in_$i541, in_$i542, in_$p543, in_$i545, in_$i546, in_$p547, in_$i549, in_$i550, in_$p551, in_$i553, in_$i554, in_$p555, in_$i557, in_$i558, in_$p559, in_$i560, in_$i561, in_$i563, in_$i564, in_vslice_dummy_var_55, in_vslice_dummy_var_56, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 602} out_$i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 603} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i33);
    call {:si_unique_call 604} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i33);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb489:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} invoke_work_1();
    goto corral_source_split_3055;

  $bb14:
    assume out_$i40 == 1;
    goto corral_source_split_3054;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_3052;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$i39 := $M.38;
    goto corral_source_split_3051;

  $bb12:
    assume out_$i38 == 1;
    goto corral_source_split_3050;

  $bb10:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb3:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb19:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb30;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 0);
    goto corral_source_split_3069;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    out_$i49 := $M.39;
    goto corral_source_split_3068;

  $bb28:
    assume out_$i48 == 1;
    goto corral_source_split_3067;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 3);
    goto corral_source_split_3065;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$i47 := $M.40;
    goto corral_source_split_3064;

  $bb26:
    assume out_$i46 == 1;
    goto corral_source_split_3063;

  $bb21:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i43, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i43, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_3057:
    assume {:verifier.code 1} true;
    call {:si_unique_call 606} out_$i43 := __VERIFIER_nondet_int();
    call {:si_unique_call 607} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i43);
    call {:si_unique_call 608} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i43);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i42 == 1;
    goto corral_source_split_3057;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_3048;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$i41 := $M.40;
    goto corral_source_split_3047;

  $bb11:
    assume !(out_$i37 == 1);
    goto corral_source_split_3046;

  $bb37:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_3091;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i56 := $M.43;
    goto corral_source_split_3090;

  $bb39:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} ldv_initialize_usb_serial_driver_3();
    goto corral_source_split_3088;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 617} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} ldv_initialize_usb_serial_driver_2();
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 615} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 614} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3084;

  $bb38:
    assume out_$i55 == 1;
    goto corral_source_split_3083;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 0);
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i54 := $M.43;
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $M.43 := out_$i53;
    call {:si_unique_call 613} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} out_$i53 := usb_serial_module_init();
    goto corral_source_split_3078;

  $bb36:
    assume out_$i52 == 1;
    goto corral_source_split_3077;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 1);
    goto corral_source_split_3061;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$i51 := $M.40;
    goto corral_source_split_3060;

  $bb23:
    assume out_$i45 == 1;
    goto corral_source_split_3059;

  $bb22:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i43, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} ldv_stop();
    goto corral_source_split_3096;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb25;

  $bb49:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb104:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 631} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3211;

  SeqInstr_123:
    goto corral_source_split_3210;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} digi_dtr_rts(out_$p96, out_$i97);
    goto SeqInstr_122;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.29, in_$p4);
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$p96 := $M.35;
    goto corral_source_split_3208;

  $bb103:
    assume out_$i95 == 1;
    goto corral_source_split_3207;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 2);
    goto corral_source_split_3205;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i94 := $M.41;
    goto corral_source_split_3204;

  $bb101:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 629} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3202;

  SeqInstr_120:
    goto corral_source_split_3201;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} digi_dtr_rts(out_$p92, out_$i93);
    goto SeqInstr_119;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.29, in_$p4);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$p92 := $M.35;
    goto corral_source_split_3199;

  $bb100:
    assume out_$i91 == 1;
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 3);
    goto corral_source_split_3196;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i90 := $M.41;
    goto corral_source_split_3195;

  $bb98:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 627} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3193;

  SeqInstr_117:
    goto corral_source_split_3192;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} digi_dtr_rts(out_$p88, out_$i89);
    goto SeqInstr_116;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.29, in_$p4);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    out_$p88 := $M.35;
    goto corral_source_split_3190;

  $bb97:
    assume out_$i87 == 1;
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 1);
    goto corral_source_split_3187;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i86 := $M.41;
    goto corral_source_split_3186;

  $bb95:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 625} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3184;

  SeqInstr_114:
    goto corral_source_split_3183;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} digi_dtr_rts(out_$p84, out_$i85);
    goto SeqInstr_113;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.29, in_$p4);
    goto corral_source_split_3182;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    out_$p84 := $M.35;
    goto corral_source_split_3181;

  $bb94:
    assume out_$i83 == 1;
    goto corral_source_split_3180;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 4);
    goto corral_source_split_3178;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    out_$i82 := $M.41;
    goto corral_source_split_3177;

  $bb92:
    assume out_$i81 == 1;
    goto corral_source_split_3176;

  $bb90:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb84:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i60, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb74:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i60, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb51:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i60, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i60, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_3098:
    assume {:verifier.code 1} true;
    call {:si_unique_call 621} out_$i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 622} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i60);
    call {:si_unique_call 623} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i60);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i59 == 1;
    goto corral_source_split_3098;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$i58 := $M.41;
    goto corral_source_split_3039;

  $bb5:
    assume out_$i35 == 1;
    goto corral_source_split_3038;

  $bb4:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb117:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 639} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3240;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} digi_rx_throttle(out_$p109);
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    out_$p109 := $M.37;
    goto corral_source_split_3238;

  $bb116:
    assume out_$i108 == 1;
    goto corral_source_split_3237;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 2);
    goto corral_source_split_3235;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i107 := $M.41;
    goto corral_source_split_3234;

  $bb114:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 637} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3232;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} digi_rx_throttle(out_$p106);
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$p106 := $M.37;
    goto corral_source_split_3230;

  $bb113:
    assume out_$i105 == 1;
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 3);
    goto corral_source_split_3227;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i104 := $M.41;
    goto corral_source_split_3226;

  $bb111:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 635} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} digi_rx_throttle(out_$p103);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$p103 := $M.37;
    goto corral_source_split_3222;

  $bb110:
    assume out_$i102 == 1;
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 1);
    goto corral_source_split_3219;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i101 := $M.41;
    goto corral_source_split_3218;

  $bb108:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 633} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} digi_rx_throttle(out_$p100);
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$p100 := $M.37;
    goto corral_source_split_3214;

  $bb107:
    assume out_$i99 == 1;
    goto corral_source_split_3213;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i98, 4);
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    out_$i98 := $M.41;
    goto corral_source_split_3173;

  $bb91:
    assume !(out_$i80 == 1);
    goto corral_source_split_3172;

  $bb129:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 647} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3269;

  SeqInstr_135:
    goto corral_source_split_3268;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} out_vslice_dummy_var_58 := digi_port_probe(out_$p124);
    goto SeqInstr_134;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$p124 := $M.35;
    goto corral_source_split_3267;

  $bb128:
    assume out_$i123 == 1;
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 2);
    goto corral_source_split_3264;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i122 := $M.41;
    goto corral_source_split_3263;

  $bb126:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 645} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3261;

  SeqInstr_132:
    goto corral_source_split_3260;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} out_vslice_dummy_var_57 := digi_port_probe(out_$p120);
    goto SeqInstr_131;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    out_$p120 := $M.35;
    goto corral_source_split_3259;

  $bb125:
    assume out_$i119 == 1;
    goto corral_source_split_3258;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 3);
    goto corral_source_split_3256;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i118 := $M.41;
    goto corral_source_split_3255;

  $bb123:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 643} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3253;

  SeqInstr_129:
    goto corral_source_split_3252;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} out_vslice_dummy_var_56 := digi_port_probe(out_$p116);
    goto SeqInstr_128;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$p116 := $M.35;
    goto corral_source_split_3251;

  $bb122:
    assume out_$i115 == 1;
    goto corral_source_split_3250;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 1);
    goto corral_source_split_3248;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i114 := $M.41;
    goto corral_source_split_3247;

  $bb120:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 641} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3245;

  SeqInstr_126:
    goto corral_source_split_3244;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} out_vslice_dummy_var_55 := digi_port_probe(out_$p112);
    goto SeqInstr_125;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$p112 := $M.35;
    goto corral_source_split_3243;

  $bb119:
    assume out_$i111 == 1;
    goto corral_source_split_3242;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 4);
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i110 := $M.41;
    goto corral_source_split_3161;

  $bb86:
    assume out_$i78 == 1;
    goto corral_source_split_3160;

  $bb85:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i60, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb141:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 655} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3298;

  SeqInstr_147:
    goto corral_source_split_3297;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} digi_rx_unthrottle(out_$p137);
    goto SeqInstr_146;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    out_$p137 := $M.37;
    goto corral_source_split_3296;

  $bb140:
    assume out_$i136 == 1;
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 2);
    goto corral_source_split_3293;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i135 := $M.41;
    goto corral_source_split_3292;

  $bb138:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 653} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3290;

  SeqInstr_144:
    goto corral_source_split_3289;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} digi_rx_unthrottle(out_$p134);
    goto SeqInstr_143;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$p134 := $M.37;
    goto corral_source_split_3288;

  $bb137:
    assume out_$i133 == 1;
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 3);
    goto corral_source_split_3285;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i132 := $M.41;
    goto corral_source_split_3284;

  $bb135:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 651} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3282;

  SeqInstr_141:
    goto corral_source_split_3281;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} digi_rx_unthrottle(out_$p131);
    goto SeqInstr_140;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$p131 := $M.37;
    goto corral_source_split_3280;

  $bb134:
    assume out_$i130 == 1;
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_3277;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i129 := $M.41;
    goto corral_source_split_3276;

  $bb132:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 649} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3274;

  SeqInstr_138:
    goto corral_source_split_3273;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} digi_rx_unthrottle(out_$p128);
    goto SeqInstr_137;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$p128 := $M.37;
    goto corral_source_split_3272;

  $bb131:
    assume out_$i127 == 1;
    goto corral_source_split_3271;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 4);
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$i126 := $M.41;
    goto corral_source_split_3165;

  $bb88:
    assume out_$i79 == 1;
    goto corral_source_split_3164;

  $bb87:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i60, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb144:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb146:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 658} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3309;

  $bb145:
    assume out_$i144 == 1;
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 0);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    out_$i143 := $M.44;
    goto corral_source_split_3305;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $M.44 := out_$i142;
    call {:si_unique_call 657} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_3304;

  SeqInstr_150:
    goto corral_source_split_3303;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} out_$i142 := digi_open(out_$p140, out_$p141);
    goto SeqInstr_149;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$p141 := $M.35;
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$p140 := $M.37;
    goto corral_source_split_3301;

  $bb143:
    assume out_$i139 == 1;
    goto corral_source_split_3300;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 3);
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$i138 := $M.41;
    goto corral_source_split_3169;

  $bb89:
    assume !(out_$i79 == 1);
    goto corral_source_split_3168;

  $bb159:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 666} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3342;

  SeqInstr_162:
    goto corral_source_split_3341;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} digi_set_termios(out_$p159, out_$p160, in_$p10);
    goto SeqInstr_161;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    out_$p160 := $M.35;
    goto corral_source_split_3340;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$p159 := $M.37;
    goto corral_source_split_3339;

  $bb158:
    assume out_$i158 == 1;
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 2);
    goto corral_source_split_3336;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i157 := $M.41;
    goto corral_source_split_3335;

  $bb156:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 664} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3333;

  SeqInstr_159:
    goto corral_source_split_3332;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} digi_set_termios(out_$p155, out_$p156, in_$p10);
    goto SeqInstr_158;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    out_$p156 := $M.35;
    goto corral_source_split_3331;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$p155 := $M.37;
    goto corral_source_split_3330;

  $bb155:
    assume out_$i154 == 1;
    goto corral_source_split_3329;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 3);
    goto corral_source_split_3327;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i153 := $M.41;
    goto corral_source_split_3326;

  $bb153:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 662} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3324;

  SeqInstr_156:
    goto corral_source_split_3323;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} digi_set_termios(out_$p151, out_$p152, in_$p10);
    goto SeqInstr_155;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_$p152 := $M.35;
    goto corral_source_split_3322;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    out_$p151 := $M.37;
    goto corral_source_split_3321;

  $bb152:
    assume out_$i150 == 1;
    goto corral_source_split_3320;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 1);
    goto corral_source_split_3318;

  $bb151:
    assume {:verifier.code 0} true;
    out_$i149 := $M.41;
    goto corral_source_split_3317;

  $bb150:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 660} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3315;

  SeqInstr_153:
    goto corral_source_split_3314;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} digi_set_termios(out_$p147, out_$p148, in_$p10);
    goto SeqInstr_152;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$p148 := $M.35;
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$p147 := $M.37;
    goto corral_source_split_3312;

  $bb149:
    assume out_$i146 == 1;
    goto corral_source_split_3311;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 4);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$i145 := $M.41;
    goto corral_source_split_3153;

  $bb82:
    assume out_$i76 == 1;
    goto corral_source_split_3152;

  $bb76:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i60, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb75:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i60, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb171:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 674} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} out_vslice_dummy_var_62 := digi_port_remove(out_$p175);
    goto corral_source_split_3370;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    out_$p175 := $M.35;
    goto corral_source_split_3369;

  $bb170:
    assume out_$i174 == 1;
    goto corral_source_split_3368;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 2);
    goto corral_source_split_3366;

  $bb169:
    assume {:verifier.code 0} true;
    out_$i173 := $M.41;
    goto corral_source_split_3365;

  $bb168:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 672} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3363;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} out_vslice_dummy_var_61 := digi_port_remove(out_$p171);
    goto corral_source_split_3362;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    out_$p171 := $M.35;
    goto corral_source_split_3361;

  $bb167:
    assume out_$i170 == 1;
    goto corral_source_split_3360;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 3);
    goto corral_source_split_3358;

  $bb166:
    assume {:verifier.code 0} true;
    out_$i169 := $M.41;
    goto corral_source_split_3357;

  $bb165:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 670} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} out_vslice_dummy_var_60 := digi_port_remove(out_$p167);
    goto corral_source_split_3354;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$p167 := $M.35;
    goto corral_source_split_3353;

  $bb164:
    assume out_$i166 == 1;
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 1);
    goto corral_source_split_3350;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i165 := $M.41;
    goto corral_source_split_3349;

  $bb162:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 668} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3347;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} out_vslice_dummy_var_59 := digi_port_remove(out_$p163);
    goto corral_source_split_3346;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    out_$p163 := $M.35;
    goto corral_source_split_3345;

  $bb161:
    assume out_$i162 == 1;
    goto corral_source_split_3344;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 4);
    goto corral_source_split_3158;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$i161 := $M.41;
    goto corral_source_split_3157;

  $bb83:
    assume !(out_$i76 == 1);
    goto corral_source_split_3156;

  $bb174:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 676} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3376;

  SeqInstr_165:
    goto corral_source_split_3375;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} digi_write_bulk_callback(out_$p179);
    goto SeqInstr_164;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    out_$p179 := $M.34;
    goto corral_source_split_3374;

  $bb173:
    assume out_$i178 == 1;
    goto corral_source_split_3373;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 4);
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    out_$i177 := $M.41;
    goto corral_source_split_3141;

  $bb78:
    assume out_$i74 == 1;
    goto corral_source_split_3140;

  $bb77:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i60, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb177:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.39 := out_$i184;
    call {:si_unique_call 679} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i184);
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$i184 := $sub.i32(out_$i183, 1);
    goto corral_source_split_3383;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    out_$i183 := $M.39;
    goto corral_source_split_3382;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 678} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3381;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} digi_release(out_$p182);
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$p182 := $M.36;
    goto corral_source_split_3379;

  $bb176:
    assume out_$i181 == 1;
    goto corral_source_split_3378;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 2);
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$i180 := $M.41;
    goto corral_source_split_3145;

  $bb80:
    assume out_$i75 == 1;
    goto corral_source_split_3144;

  $bb79:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i60, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb189:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 687} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3421;

  SeqInstr_177:
    goto corral_source_split_3420;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} out_vslice_dummy_var_66 := digi_tiocmset(out_$p205, out_$i206, out_$i207);
    goto SeqInstr_176;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3419;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i32($M.29, in_$p1);
    goto corral_source_split_3418;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    out_$p205 := $M.37;
    goto corral_source_split_3417;

  $bb188:
    assume out_$i204 == 1;
    goto corral_source_split_3416;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 2);
    goto corral_source_split_3414;

  $bb187:
    assume {:verifier.code 0} true;
    out_$i203 := $M.41;
    goto corral_source_split_3413;

  $bb186:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 685} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3411;

  SeqInstr_174:
    goto corral_source_split_3410;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} out_vslice_dummy_var_65 := digi_tiocmset(out_$p199, out_$i200, out_$i201);
    goto SeqInstr_173;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i32($M.29, in_$p1);
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$p199 := $M.37;
    goto corral_source_split_3407;

  $bb185:
    assume out_$i198 == 1;
    goto corral_source_split_3406;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 3);
    goto corral_source_split_3404;

  $bb184:
    assume {:verifier.code 0} true;
    out_$i197 := $M.41;
    goto corral_source_split_3403;

  $bb183:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 683} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3401;

  SeqInstr_171:
    goto corral_source_split_3400;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} out_vslice_dummy_var_64 := digi_tiocmset(out_$p193, out_$i194, out_$i195);
    goto SeqInstr_170;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    out_$i195 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3399;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i32($M.29, in_$p1);
    goto corral_source_split_3398;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    out_$p193 := $M.37;
    goto corral_source_split_3397;

  $bb182:
    assume out_$i192 == 1;
    goto corral_source_split_3396;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 1);
    goto corral_source_split_3394;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i191 := $M.41;
    goto corral_source_split_3393;

  $bb180:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 681} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3391;

  SeqInstr_168:
    goto corral_source_split_3390;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} out_vslice_dummy_var_63 := digi_tiocmset(out_$p187, out_$i188, out_$i189);
    goto SeqInstr_167;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    out_$i189 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3389;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i32($M.29, in_$p1);
    goto corral_source_split_3388;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    out_$p187 := $M.37;
    goto corral_source_split_3387;

  $bb179:
    assume out_$i186 == 1;
    goto corral_source_split_3386;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 4);
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$i185 := $M.41;
    goto corral_source_split_3149;

  $bb81:
    assume !(out_$i75 == 1);
    goto corral_source_split_3148;

  $bb201:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 695} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3458;

  SeqInstr_189:
    goto corral_source_split_3457;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} out_vslice_dummy_var_70 := digi_write(out_$p229, out_$p230, in_$p11, out_$i231);
    goto SeqInstr_188;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i32($M.29, in_$p0);
    goto corral_source_split_3456;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    out_$p230 := $M.35;
    goto corral_source_split_3455;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    out_$p229 := $M.37;
    goto corral_source_split_3454;

  $bb200:
    assume out_$i228 == 1;
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 2);
    goto corral_source_split_3451;

  $bb199:
    assume {:verifier.code 0} true;
    out_$i227 := $M.41;
    goto corral_source_split_3450;

  $bb198:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 693} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3448;

  SeqInstr_186:
    goto corral_source_split_3447;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} out_vslice_dummy_var_69 := digi_write(out_$p223, out_$p224, in_$p11, out_$i225);
    goto SeqInstr_185;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    out_$i225 := $load.i32($M.29, in_$p0);
    goto corral_source_split_3446;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    out_$p224 := $M.35;
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$p223 := $M.37;
    goto corral_source_split_3444;

  $bb197:
    assume out_$i222 == 1;
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 3);
    goto corral_source_split_3441;

  $bb196:
    assume {:verifier.code 0} true;
    out_$i221 := $M.41;
    goto corral_source_split_3440;

  $bb195:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 691} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3438;

  SeqInstr_183:
    goto corral_source_split_3437;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} out_vslice_dummy_var_68 := digi_write(out_$p217, out_$p218, in_$p11, out_$i219);
    goto SeqInstr_182;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    out_$i219 := $load.i32($M.29, in_$p0);
    goto corral_source_split_3436;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    out_$p218 := $M.35;
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    out_$p217 := $M.37;
    goto corral_source_split_3434;

  $bb194:
    assume out_$i216 == 1;
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 1);
    goto corral_source_split_3431;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i215 := $M.41;
    goto corral_source_split_3430;

  $bb192:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 689} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3428;

  SeqInstr_180:
    goto corral_source_split_3427;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} out_vslice_dummy_var_67 := digi_write(out_$p211, out_$p212, in_$p11, out_$i213);
    goto SeqInstr_179;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    out_$i213 := $load.i32($M.29, in_$p0);
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$p212 := $M.35;
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$p211 := $M.37;
    goto corral_source_split_3424;

  $bb191:
    assume out_$i210 == 1;
    goto corral_source_split_3423;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 4);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$i209 := $M.41;
    goto corral_source_split_3133;

  $bb72:
    assume out_$i71 == 1;
    goto corral_source_split_3132;

  $bb66:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i60, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb53:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i60, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb52:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i60, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb204:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb206:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 698} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3468;

  $bb205:
    assume out_$i238 == 1;
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 0);
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$i237 := $M.45;
    goto corral_source_split_3464;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.45 := out_$i236;
    call {:si_unique_call 697} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i236);
    goto corral_source_split_3463;

  SeqInstr_192:
    goto corral_source_split_3462;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} out_$i236 := digi_startup(out_$p235);
    goto SeqInstr_191;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$p235 := $M.36;
    goto corral_source_split_3461;

  $bb203:
    assume out_$i234 == 1;
    goto corral_source_split_3460;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 2);
    goto corral_source_split_3138;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    out_$i233 := $M.41;
    goto corral_source_split_3137;

  $bb73:
    assume !(out_$i71 == 1);
    goto corral_source_split_3136;

  $bb210:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 700} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3473;

  SeqInstr_195:
    goto corral_source_split_3472;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} digi_close(out_$p241);
    goto SeqInstr_194;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$p241 := $M.35;
    goto corral_source_split_3471;

  $bb209:
    assume out_$i240 == 1;
    goto corral_source_split_3470;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 4);
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$i239 := $M.41;
    goto corral_source_split_3121;

  $bb68:
    assume out_$i69 == 1;
    goto corral_source_split_3120;

  $bb67:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i60, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb222:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 708} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3502;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} out_vslice_dummy_var_74 := digi_write_room(out_$p256);
    goto corral_source_split_3501;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    out_$p256 := $M.37;
    goto corral_source_split_3500;

  $bb221:
    assume out_$i255 == 1;
    goto corral_source_split_3499;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 2);
    goto corral_source_split_3497;

  $bb220:
    assume {:verifier.code 0} true;
    out_$i254 := $M.41;
    goto corral_source_split_3496;

  $bb219:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 706} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3494;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} out_vslice_dummy_var_73 := digi_write_room(out_$p252);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$p252 := $M.37;
    goto corral_source_split_3492;

  $bb218:
    assume out_$i251 == 1;
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 3);
    goto corral_source_split_3489;

  $bb217:
    assume {:verifier.code 0} true;
    out_$i250 := $M.41;
    goto corral_source_split_3488;

  $bb216:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 704} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} out_vslice_dummy_var_72 := digi_write_room(out_$p248);
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$p248 := $M.37;
    goto corral_source_split_3484;

  $bb215:
    assume out_$i247 == 1;
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 1);
    goto corral_source_split_3481;

  $bb214:
    assume {:verifier.code 0} true;
    out_$i246 := $M.41;
    goto corral_source_split_3480;

  $bb213:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 702} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} out_vslice_dummy_var_71 := digi_write_room(out_$p244);
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$p244 := $M.37;
    goto corral_source_split_3476;

  $bb212:
    assume out_$i243 == 1;
    goto corral_source_split_3475;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 4);
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$i242 := $M.41;
    goto corral_source_split_3125;

  $bb70:
    assume out_$i70 == 1;
    goto corral_source_split_3124;

  $bb69:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i60, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb234:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 716} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3535;

  SeqInstr_207:
    goto corral_source_split_3534;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} digi_break_ctl(out_$p272, out_$i273);
    goto SeqInstr_206;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    out_$i273 := $load.i32($M.29, in_$p3);
    goto corral_source_split_3533;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    out_$p272 := $M.37;
    goto corral_source_split_3532;

  $bb233:
    assume out_$i271 == 1;
    goto corral_source_split_3531;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 2);
    goto corral_source_split_3529;

  $bb232:
    assume {:verifier.code 0} true;
    out_$i270 := $M.41;
    goto corral_source_split_3528;

  $bb231:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 714} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3526;

  SeqInstr_204:
    goto corral_source_split_3525;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} digi_break_ctl(out_$p268, out_$i269);
    goto SeqInstr_203;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    out_$i269 := $load.i32($M.29, in_$p3);
    goto corral_source_split_3524;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    out_$p268 := $M.37;
    goto corral_source_split_3523;

  $bb230:
    assume out_$i267 == 1;
    goto corral_source_split_3522;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 3);
    goto corral_source_split_3520;

  $bb229:
    assume {:verifier.code 0} true;
    out_$i266 := $M.41;
    goto corral_source_split_3519;

  $bb228:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 712} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3517;

  SeqInstr_201:
    goto corral_source_split_3516;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} digi_break_ctl(out_$p264, out_$i265);
    goto SeqInstr_200;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    out_$i265 := $load.i32($M.29, in_$p3);
    goto corral_source_split_3515;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    out_$p264 := $M.37;
    goto corral_source_split_3514;

  $bb227:
    assume out_$i263 == 1;
    goto corral_source_split_3513;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 1);
    goto corral_source_split_3511;

  $bb226:
    assume {:verifier.code 0} true;
    out_$i262 := $M.41;
    goto corral_source_split_3510;

  $bb225:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 710} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3508;

  SeqInstr_198:
    goto corral_source_split_3507;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} digi_break_ctl(out_$p260, out_$i261);
    goto SeqInstr_197;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    out_$i261 := $load.i32($M.29, in_$p3);
    goto corral_source_split_3506;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    out_$p260 := $M.37;
    goto corral_source_split_3505;

  $bb224:
    assume out_$i259 == 1;
    goto corral_source_split_3504;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i258, 4);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$i258 := $M.41;
    goto corral_source_split_3129;

  $bb71:
    assume !(out_$i70 == 1);
    goto corral_source_split_3128;

  $bb240:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 720} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3548;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} digi_disconnect(out_$p279);
    goto corral_source_split_3547;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    out_$p279 := $M.36;
    goto corral_source_split_3546;

  $bb239:
    assume out_$i278 == 1;
    goto corral_source_split_3545;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 3);
    goto corral_source_split_3543;

  $bb238:
    assume {:verifier.code 0} true;
    out_$i277 := $M.41;
    goto corral_source_split_3542;

  $bb237:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 718} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3540;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} digi_disconnect(out_$p276);
    goto corral_source_split_3539;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    out_$p276 := $M.36;
    goto corral_source_split_3538;

  $bb236:
    assume out_$i275 == 1;
    goto corral_source_split_3537;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$i275 := $eq.i32(out_$i274, 4);
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$i274 := $M.41;
    goto corral_source_split_3113;

  $bb64:
    assume out_$i67 == 1;
    goto corral_source_split_3112;

  $bb55:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i60, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb54:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i60, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb252:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 728} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} out_vslice_dummy_var_78 := digi_chars_in_buffer(out_$p294);
    goto corral_source_split_3576;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    out_$p294 := $M.37;
    goto corral_source_split_3575;

  $bb251:
    assume out_$i293 == 1;
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 2);
    goto corral_source_split_3572;

  $bb250:
    assume {:verifier.code 0} true;
    out_$i292 := $M.41;
    goto corral_source_split_3571;

  $bb249:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 726} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3569;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} out_vslice_dummy_var_77 := digi_chars_in_buffer(out_$p290);
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$p290 := $M.37;
    goto corral_source_split_3567;

  $bb248:
    assume out_$i289 == 1;
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 3);
    goto corral_source_split_3564;

  $bb247:
    assume {:verifier.code 0} true;
    out_$i288 := $M.41;
    goto corral_source_split_3563;

  $bb246:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 724} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} out_vslice_dummy_var_76 := digi_chars_in_buffer(out_$p286);
    goto corral_source_split_3560;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$p286 := $M.37;
    goto corral_source_split_3559;

  $bb245:
    assume out_$i285 == 1;
    goto corral_source_split_3558;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 1);
    goto corral_source_split_3556;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i284 := $M.41;
    goto corral_source_split_3555;

  $bb243:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 722} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} out_vslice_dummy_var_75 := digi_chars_in_buffer(out_$p282);
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$p282 := $M.37;
    goto corral_source_split_3551;

  $bb242:
    assume out_$i281 == 1;
    goto corral_source_split_3550;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 4);
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$i280 := $M.41;
    goto corral_source_split_3117;

  $bb65:
    assume !(out_$i67 == 1);
    goto corral_source_split_3116;

  $bb264:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 736} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} out_vslice_dummy_var_82 := digi_tiocmget(out_$p310);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$p310 := $M.37;
    goto corral_source_split_3604;

  $bb263:
    assume out_$i309 == 1;
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 2);
    goto corral_source_split_3601;

  $bb262:
    assume {:verifier.code 0} true;
    out_$i308 := $M.41;
    goto corral_source_split_3600;

  $bb261:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 734} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} out_vslice_dummy_var_81 := digi_tiocmget(out_$p306);
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    out_$p306 := $M.37;
    goto corral_source_split_3596;

  $bb260:
    assume out_$i305 == 1;
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i304, 3);
    goto corral_source_split_3593;

  $bb259:
    assume {:verifier.code 0} true;
    out_$i304 := $M.41;
    goto corral_source_split_3592;

  $bb258:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} out_vslice_dummy_var_80 := digi_tiocmget(out_$p302);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$p302 := $M.37;
    goto corral_source_split_3588;

  $bb257:
    assume out_$i301 == 1;
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$i301 := $eq.i32(out_$i300, 1);
    goto corral_source_split_3585;

  $bb256:
    assume {:verifier.code 0} true;
    out_$i300 := $M.41;
    goto corral_source_split_3584;

  $bb255:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 730} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} out_vslice_dummy_var_79 := digi_tiocmget(out_$p298);
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$p298 := $M.37;
    goto corral_source_split_3580;

  $bb254:
    assume out_$i297 == 1;
    goto corral_source_split_3579;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 4);
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$i296 := $M.41;
    goto corral_source_split_3101;

  $bb57:
    assume out_$i64 == 1;
    goto corral_source_split_3100;

  $bb56:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i60, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb267:
    assume !(out_$i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 738} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_3611;

  SeqInstr_210:
    goto corral_source_split_3610;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} digi_read_bulk_callback(out_$p314);
    goto SeqInstr_209;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$p314 := $M.34;
    goto corral_source_split_3609;

  $bb266:
    assume out_$i313 == 1;
    goto corral_source_split_3608;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 4);
    goto corral_source_split_3106;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$i312 := $M.41;
    goto corral_source_split_3105;

  $bb59:
    assume out_$i65 == 1;
    goto corral_source_split_3104;

  $bb58:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i60, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb270:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $M.39 := out_$i319;
    call {:si_unique_call 741} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i319);
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$i319 := $add.i32(out_$i318, 1);
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$i318 := $M.39;
    goto corral_source_split_3616;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 740} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} out_vslice_dummy_var_83 := ldv_probe_3();
    goto corral_source_split_3614;

  $bb269:
    assume out_$i316 == 1;
    goto corral_source_split_3613;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$i316 := $eq.i32(out_$i315, 1);
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$i315 := $M.41;
    goto corral_source_split_3109;

  $bb61:
    assume out_$i66 == 1;
    goto corral_source_split_3108;

  $bb60:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i60, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_stop();
    goto corral_source_split_3620;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb63;

  $bb93:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb63;

  $bb276:
    assume !(out_$i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb486:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb481:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb478:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb329:
    assume !(out_$i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 753} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} digi_rx_throttle(out_$p354);
    goto corral_source_split_3726;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    out_$p354 := $M.33;
    goto corral_source_split_3725;

  $bb328:
    assume out_$i353 == 1;
    goto corral_source_split_3724;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    out_$i353 := $eq.i32(out_$i352, 2);
    goto corral_source_split_3722;

  $bb327:
    assume {:verifier.code 0} true;
    out_$i352 := $M.42;
    goto corral_source_split_3721;

  $bb326:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 751} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} digi_rx_throttle(out_$p351);
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$p351 := $M.33;
    goto corral_source_split_3717;

  $bb325:
    assume out_$i350 == 1;
    goto corral_source_split_3716;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 3);
    goto corral_source_split_3714;

  $bb324:
    assume {:verifier.code 0} true;
    out_$i349 := $M.42;
    goto corral_source_split_3713;

  $bb323:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 749} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3711;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} digi_rx_throttle(out_$p348);
    goto corral_source_split_3710;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$p348 := $M.33;
    goto corral_source_split_3709;

  $bb322:
    assume out_$i347 == 1;
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 1);
    goto corral_source_split_3706;

  $bb321:
    assume {:verifier.code 0} true;
    out_$i346 := $M.42;
    goto corral_source_split_3705;

  $bb320:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 747} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} digi_rx_throttle(out_$p345);
    goto corral_source_split_3702;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$p345 := $M.33;
    goto corral_source_split_3701;

  $bb319:
    assume out_$i344 == 1;
    goto corral_source_split_3700;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    out_$i344 := $eq.i32(out_$i343, 4);
    goto corral_source_split_3698;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i343 := $M.42;
    goto corral_source_split_3697;

  $bb317:
    assume out_$i342 == 1;
    goto corral_source_split_3696;

  $bb315:
    assume out_$i341 == 1;
    assume {:verifier.code 0} true;
    out_$i342 := $eq.i32(out_$i322, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb311:
    assume out_$i339 == 1;
    assume {:verifier.code 0} true;
    out_$i341 := $slt.i32(out_$i322, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb301:
    assume out_$i334 == 1;
    assume {:verifier.code 0} true;
    out_$i339 := $slt.i32(out_$i322, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb278:
    assume out_$i323 == 1;
    assume {:verifier.code 0} true;
    out_$i334 := $slt.i32(out_$i322, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb277:
    assume {:verifier.code 0} true;
    out_$i323 := $slt.i32(out_$i322, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_3622:
    assume {:verifier.code 1} true;
    call {:si_unique_call 743} out_$i322 := __VERIFIER_nondet_int();
    call {:si_unique_call 744} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i322);
    call {:si_unique_call 745} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i322);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb275:
    assume out_$i321 == 1;
    goto corral_source_split_3622;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$i321 := $ne.i32(out_$i320, 0);
    goto corral_source_split_3044;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i320 := $M.42;
    goto corral_source_split_3043;

  $bb7:
    assume out_$i36 == 1;
    goto corral_source_split_3042;

  $bb6:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb342:
    assume !(out_$i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3756;

  SeqInstr_222:
    goto corral_source_split_3755;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_vslice_dummy_var_87 := digi_port_probe(out_$p369);
    goto SeqInstr_221;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$p369 := $M.31;
    goto corral_source_split_3754;

  $bb341:
    assume out_$i368 == 1;
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$i368 := $eq.i32(out_$i367, 2);
    goto corral_source_split_3751;

  $bb340:
    assume {:verifier.code 0} true;
    out_$i367 := $M.42;
    goto corral_source_split_3750;

  $bb339:
    assume !(out_$i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3748;

  SeqInstr_219:
    goto corral_source_split_3747;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_vslice_dummy_var_86 := digi_port_probe(out_$p365);
    goto SeqInstr_218;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$p365 := $M.31;
    goto corral_source_split_3746;

  $bb338:
    assume out_$i364 == 1;
    goto corral_source_split_3745;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$i364 := $eq.i32(out_$i363, 3);
    goto corral_source_split_3743;

  $bb337:
    assume {:verifier.code 0} true;
    out_$i363 := $M.42;
    goto corral_source_split_3742;

  $bb336:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3740;

  SeqInstr_216:
    goto corral_source_split_3739;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} out_vslice_dummy_var_85 := digi_port_probe(out_$p361);
    goto SeqInstr_215;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    out_$p361 := $M.31;
    goto corral_source_split_3738;

  $bb335:
    assume out_$i360 == 1;
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    out_$i360 := $eq.i32(out_$i359, 1);
    goto corral_source_split_3735;

  $bb334:
    assume {:verifier.code 0} true;
    out_$i359 := $M.42;
    goto corral_source_split_3734;

  $bb333:
    assume !(out_$i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 755} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3732;

  SeqInstr_213:
    goto corral_source_split_3731;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} out_vslice_dummy_var_84 := digi_port_probe(out_$p357);
    goto SeqInstr_212;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$p357 := $M.31;
    goto corral_source_split_3730;

  $bb332:
    assume out_$i356 == 1;
    goto corral_source_split_3729;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    out_$i356 := $eq.i32(out_$i355, 4);
    goto corral_source_split_3694;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    out_$i355 := $M.42;
    goto corral_source_split_3693;

  $bb316:
    assume !(out_$i341 == 1);
    goto corral_source_split_3692;

  $bb345:
    assume !(out_$i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb347:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 764} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3767;

  $bb346:
    assume out_$i377 == 1;
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i377 := $eq.i32(out_$i376, 0);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$i376 := $M.46;
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $M.46 := out_$i375;
    call {:si_unique_call 763} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i375);
    goto corral_source_split_3762;

  SeqInstr_225:
    goto corral_source_split_3761;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} out_$i375 := digi_open(out_$p373, out_$p374);
    goto SeqInstr_224;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$p374 := $M.31;
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$p373 := $M.33;
    goto corral_source_split_3759;

  $bb344:
    assume out_$i372 == 1;
    goto corral_source_split_3758;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    out_$i372 := $eq.i32(out_$i371, 3);
    goto corral_source_split_3686;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$i371 := $M.42;
    goto corral_source_split_3685;

  $bb313:
    assume out_$i340 == 1;
    goto corral_source_split_3684;

  $bb312:
    assume !(out_$i339 == 1);
    assume {:verifier.code 0} true;
    out_$i340 := $slt.i32(out_$i322, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb360:
    assume !(out_$i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 772} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3796;

  SeqInstr_237:
    goto corral_source_split_3795;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} digi_rx_unthrottle(out_$p389);
    goto SeqInstr_236;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    out_$p389 := $M.33;
    goto corral_source_split_3794;

  $bb359:
    assume out_$i388 == 1;
    goto corral_source_split_3793;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$i388 := $eq.i32(out_$i387, 2);
    goto corral_source_split_3791;

  $bb358:
    assume {:verifier.code 0} true;
    out_$i387 := $M.42;
    goto corral_source_split_3790;

  $bb357:
    assume !(out_$i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 770} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3788;

  SeqInstr_234:
    goto corral_source_split_3787;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} digi_rx_unthrottle(out_$p386);
    goto SeqInstr_233;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    out_$p386 := $M.33;
    goto corral_source_split_3786;

  $bb356:
    assume out_$i385 == 1;
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i385 := $eq.i32(out_$i384, 3);
    goto corral_source_split_3783;

  $bb355:
    assume {:verifier.code 0} true;
    out_$i384 := $M.42;
    goto corral_source_split_3782;

  $bb354:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 768} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3780;

  SeqInstr_231:
    goto corral_source_split_3779;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} digi_rx_unthrottle(out_$p383);
    goto SeqInstr_230;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$p383 := $M.33;
    goto corral_source_split_3778;

  $bb353:
    assume out_$i382 == 1;
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$i382 := $eq.i32(out_$i381, 1);
    goto corral_source_split_3775;

  $bb352:
    assume {:verifier.code 0} true;
    out_$i381 := $M.42;
    goto corral_source_split_3774;

  $bb351:
    assume !(out_$i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 766} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3772;

  SeqInstr_228:
    goto corral_source_split_3771;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} digi_rx_unthrottle(out_$p380);
    goto SeqInstr_227;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$p380 := $M.33;
    goto corral_source_split_3770;

  $bb350:
    assume out_$i379 == 1;
    goto corral_source_split_3769;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    out_$i379 := $eq.i32(out_$i378, 4);
    goto corral_source_split_3690;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    out_$i378 := $M.42;
    goto corral_source_split_3689;

  $bb314:
    assume !(out_$i340 == 1);
    goto corral_source_split_3688;

  $bb372:
    assume !(out_$i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 780} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3829;

  SeqInstr_249:
    goto corral_source_split_3828;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} digi_set_termios(out_$p404, out_$p405, in_$p13);
    goto SeqInstr_248;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$p405 := $M.31;
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    out_$p404 := $M.33;
    goto corral_source_split_3826;

  $bb371:
    assume out_$i403 == 1;
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$i403 := $eq.i32(out_$i402, 2);
    goto corral_source_split_3823;

  $bb370:
    assume {:verifier.code 0} true;
    out_$i402 := $M.42;
    goto corral_source_split_3822;

  $bb369:
    assume !(out_$i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 778} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3820;

  SeqInstr_246:
    goto corral_source_split_3819;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} digi_set_termios(out_$p400, out_$p401, in_$p13);
    goto SeqInstr_245;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$p401 := $M.31;
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_$p400 := $M.33;
    goto corral_source_split_3817;

  $bb368:
    assume out_$i399 == 1;
    goto corral_source_split_3816;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    out_$i399 := $eq.i32(out_$i398, 3);
    goto corral_source_split_3814;

  $bb367:
    assume {:verifier.code 0} true;
    out_$i398 := $M.42;
    goto corral_source_split_3813;

  $bb366:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 776} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3811;

  SeqInstr_243:
    goto corral_source_split_3810;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} digi_set_termios(out_$p396, out_$p397, in_$p13);
    goto SeqInstr_242;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$p397 := $M.31;
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$p396 := $M.33;
    goto corral_source_split_3808;

  $bb365:
    assume out_$i395 == 1;
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$i395 := $eq.i32(out_$i394, 1);
    goto corral_source_split_3805;

  $bb364:
    assume {:verifier.code 0} true;
    out_$i394 := $M.42;
    goto corral_source_split_3804;

  $bb363:
    assume !(out_$i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 774} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3802;

  SeqInstr_240:
    goto corral_source_split_3801;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} digi_set_termios(out_$p392, out_$p393, in_$p13);
    goto SeqInstr_239;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$p393 := $M.31;
    goto corral_source_split_3800;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    out_$p392 := $M.33;
    goto corral_source_split_3799;

  $bb362:
    assume out_$i391 == 1;
    goto corral_source_split_3798;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i391 := $eq.i32(out_$i390, 4);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i390 := $M.42;
    goto corral_source_split_3677;

  $bb309:
    assume out_$i338 == 1;
    goto corral_source_split_3676;

  $bb303:
    assume out_$i335 == 1;
    assume {:verifier.code 0} true;
    out_$i338 := $slt.i32(out_$i322, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb302:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    out_$i335 := $slt.i32(out_$i322, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  $bb375:
    assume !(out_$i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 782} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3834;

  SeqInstr_252:
    goto corral_source_split_3833;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} digi_write_bulk_callback(out_$p408);
    goto SeqInstr_251;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p408 := $M.30;
    goto corral_source_split_3832;

  $bb374:
    assume out_$i407 == 1;
    goto corral_source_split_3831;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$i407 := $eq.i32(out_$i406, 4);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    out_$i406 := $M.42;
    goto corral_source_split_3681;

  $bb310:
    assume !(out_$i338 == 1);
    goto corral_source_split_3680;

  $bb387:
    assume !(out_$i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} out_vslice_dummy_var_91 := digi_port_remove(out_$p423);
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$p423 := $M.31;
    goto corral_source_split_3861;

  $bb386:
    assume out_$i422 == 1;
    goto corral_source_split_3860;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$i422 := $eq.i32(out_$i421, 2);
    goto corral_source_split_3858;

  $bb385:
    assume {:verifier.code 0} true;
    out_$i421 := $M.42;
    goto corral_source_split_3857;

  $bb384:
    assume !(out_$i418 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 788} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} out_vslice_dummy_var_90 := digi_port_remove(out_$p419);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$p419 := $M.31;
    goto corral_source_split_3853;

  $bb383:
    assume out_$i418 == 1;
    goto corral_source_split_3852;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$i418 := $eq.i32(out_$i417, 3);
    goto corral_source_split_3850;

  $bb382:
    assume {:verifier.code 0} true;
    out_$i417 := $M.42;
    goto corral_source_split_3849;

  $bb381:
    assume !(out_$i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 786} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} out_vslice_dummy_var_89 := digi_port_remove(out_$p415);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$p415 := $M.31;
    goto corral_source_split_3845;

  $bb380:
    assume out_$i414 == 1;
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$i414 := $eq.i32(out_$i413, 1);
    goto corral_source_split_3842;

  $bb379:
    assume {:verifier.code 0} true;
    out_$i413 := $M.42;
    goto corral_source_split_3841;

  $bb378:
    assume !(out_$i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} out_vslice_dummy_var_88 := digi_port_remove(out_$p411);
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$p411 := $M.31;
    goto corral_source_split_3837;

  $bb377:
    assume out_$i410 == 1;
    goto corral_source_split_3836;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$i410 := $eq.i32(out_$i409, 4);
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    out_$i409 := $M.42;
    goto corral_source_split_3665;

  $bb305:
    assume out_$i336 == 1;
    goto corral_source_split_3664;

  $bb304:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    out_$i336 := $slt.i32(out_$i322, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb390:
    assume !(out_$i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.39 := out_$i429;
    call {:si_unique_call 793} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i429);
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$i429 := $sub.i32(out_$i428, 1);
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$i428 := $M.39;
    goto corral_source_split_3869;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 792} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} digi_release(out_$p427);
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    out_$p427 := $M.32;
    goto corral_source_split_3866;

  $bb389:
    assume out_$i426 == 1;
    goto corral_source_split_3865;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    out_$i426 := $eq.i32(out_$i425, 2);
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    out_$i425 := $M.42;
    goto corral_source_split_3669;

  $bb307:
    assume out_$i337 == 1;
    goto corral_source_split_3668;

  $bb306:
    assume !(out_$i336 == 1);
    assume {:verifier.code 0} true;
    out_$i337 := $slt.i32(out_$i322, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb402:
    assume !(out_$i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    goto $bb403;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 801} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3908;

  SeqInstr_264:
    goto corral_source_split_3907;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} out_vslice_dummy_var_95 := digi_tiocmset(out_$p450, out_$i451, out_$i452);
    goto SeqInstr_263;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    out_$i452 := $load.i32($M.29, in_$p8);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$i451 := $load.i32($M.29, in_$p6);
    goto corral_source_split_3905;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    out_$p450 := $M.33;
    goto corral_source_split_3904;

  $bb401:
    assume out_$i449 == 1;
    goto corral_source_split_3903;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i449 := $eq.i32(out_$i448, 2);
    goto corral_source_split_3901;

  $bb400:
    assume {:verifier.code 0} true;
    out_$i448 := $M.42;
    goto corral_source_split_3900;

  $bb399:
    assume !(out_$i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    goto $bb400;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 799} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3898;

  SeqInstr_261:
    goto corral_source_split_3897;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} out_vslice_dummy_var_94 := digi_tiocmset(out_$p444, out_$i445, out_$i446);
    goto SeqInstr_260;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    out_$i446 := $load.i32($M.29, in_$p8);
    goto corral_source_split_3896;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$i445 := $load.i32($M.29, in_$p6);
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$p444 := $M.33;
    goto corral_source_split_3894;

  $bb398:
    assume out_$i443 == 1;
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$i443 := $eq.i32(out_$i442, 3);
    goto corral_source_split_3891;

  $bb397:
    assume {:verifier.code 0} true;
    out_$i442 := $M.42;
    goto corral_source_split_3890;

  $bb396:
    assume !(out_$i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto $bb397;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 797} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3888;

  SeqInstr_258:
    goto corral_source_split_3887;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} out_vslice_dummy_var_93 := digi_tiocmset(out_$p438, out_$i439, out_$i440);
    goto SeqInstr_257;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i440 := $load.i32($M.29, in_$p8);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i439 := $load.i32($M.29, in_$p6);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$p438 := $M.33;
    goto corral_source_split_3884;

  $bb395:
    assume out_$i437 == 1;
    goto corral_source_split_3883;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    out_$i437 := $eq.i32(out_$i436, 1);
    goto corral_source_split_3881;

  $bb394:
    assume {:verifier.code 0} true;
    out_$i436 := $M.42;
    goto corral_source_split_3880;

  $bb393:
    assume !(out_$i431 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 795} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3878;

  SeqInstr_255:
    goto corral_source_split_3877;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} out_vslice_dummy_var_92 := digi_tiocmset(out_$p432, out_$i433, out_$i434);
    goto SeqInstr_254;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$i434 := $load.i32($M.29, in_$p8);
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$i433 := $load.i32($M.29, in_$p6);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$p432 := $M.33;
    goto corral_source_split_3874;

  $bb392:
    assume out_$i431 == 1;
    goto corral_source_split_3873;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    out_$i431 := $eq.i32(out_$i430, 4);
    goto corral_source_split_3674;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    out_$i430 := $M.42;
    goto corral_source_split_3673;

  $bb308:
    assume !(out_$i337 == 1);
    goto corral_source_split_3672;

  $bb414:
    assume !(out_$i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    goto $bb415;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3945;

  SeqInstr_276:
    goto corral_source_split_3944;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_vslice_dummy_var_99 := digi_write(out_$p474, out_$p475, in_$p14, out_$i476);
    goto SeqInstr_275;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$i476 := $load.i32($M.29, in_$p5);
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$p475 := $M.31;
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$p474 := $M.33;
    goto corral_source_split_3941;

  $bb413:
    assume out_$i473 == 1;
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$i473 := $eq.i32(out_$i472, 2);
    goto corral_source_split_3938;

  $bb412:
    assume {:verifier.code 0} true;
    out_$i472 := $M.42;
    goto corral_source_split_3937;

  $bb411:
    assume !(out_$i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    goto $bb412;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3935;

  SeqInstr_273:
    goto corral_source_split_3934;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} out_vslice_dummy_var_98 := digi_write(out_$p468, out_$p469, in_$p14, out_$i470);
    goto SeqInstr_272;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$i470 := $load.i32($M.29, in_$p5);
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$p469 := $M.31;
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$p468 := $M.33;
    goto corral_source_split_3931;

  $bb410:
    assume out_$i467 == 1;
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$i467 := $eq.i32(out_$i466, 3);
    goto corral_source_split_3928;

  $bb409:
    assume {:verifier.code 0} true;
    out_$i466 := $M.42;
    goto corral_source_split_3927;

  $bb408:
    assume !(out_$i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    goto $bb409;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 805} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3925;

  SeqInstr_270:
    goto corral_source_split_3924;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} out_vslice_dummy_var_97 := digi_write(out_$p462, out_$p463, in_$p14, out_$i464);
    goto SeqInstr_269;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$i464 := $load.i32($M.29, in_$p5);
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    out_$p463 := $M.31;
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    out_$p462 := $M.33;
    goto corral_source_split_3921;

  $bb407:
    assume out_$i461 == 1;
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$i461 := $eq.i32(out_$i460, 1);
    goto corral_source_split_3918;

  $bb406:
    assume {:verifier.code 0} true;
    out_$i460 := $M.42;
    goto corral_source_split_3917;

  $bb405:
    assume !(out_$i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    goto $bb406;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 803} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3915;

  SeqInstr_267:
    goto corral_source_split_3914;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} out_vslice_dummy_var_96 := digi_write(out_$p456, out_$p457, in_$p14, out_$i458);
    goto SeqInstr_266;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    out_$i458 := $load.i32($M.29, in_$p5);
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$p457 := $M.31;
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$p456 := $M.33;
    goto corral_source_split_3911;

  $bb404:
    assume out_$i455 == 1;
    goto corral_source_split_3910;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb404, $bb405;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$i455 := $eq.i32(out_$i454, 4);
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$i454 := $M.42;
    goto corral_source_split_3657;

  $bb299:
    assume out_$i333 == 1;
    goto corral_source_split_3656;

  $bb293:
    assume out_$i330 == 1;
    assume {:verifier.code 0} true;
    out_$i333 := $slt.i32(out_$i322, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb280:
    assume out_$i324 == 1;
    assume {:verifier.code 0} true;
    out_$i330 := $slt.i32(out_$i322, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb279:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    out_$i324 := $slt.i32(out_$i322, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb417:
    assume !(out_$i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb419:
    assume !(out_$i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    goto $bb420;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 812} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3955;

  $bb418:
    assume out_$i483 == 1;
    goto corral_source_split_3954;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$i483 := $eq.i32(out_$i482, 0);
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    out_$i482 := $M.47;
    goto corral_source_split_3951;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.47 := out_$i481;
    call {:si_unique_call 811} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i481);
    goto corral_source_split_3950;

  SeqInstr_279:
    goto corral_source_split_3949;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} out_$i481 := digi_startup(out_$p480);
    goto SeqInstr_278;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    out_$p480 := $M.32;
    goto corral_source_split_3948;

  $bb416:
    assume out_$i479 == 1;
    goto corral_source_split_3947;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb416, $bb417;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$i479 := $eq.i32(out_$i478, 2);
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    out_$i478 := $M.42;
    goto corral_source_split_3661;

  $bb300:
    assume !(out_$i333 == 1);
    goto corral_source_split_3660;

  $bb423:
    assume !(out_$i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    goto $bb424;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 814} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3960;

  SeqInstr_282:
    goto corral_source_split_3959;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} digi_close(out_$p486);
    goto SeqInstr_281;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    out_$p486 := $M.31;
    goto corral_source_split_3958;

  $bb422:
    assume out_$i485 == 1;
    goto corral_source_split_3957;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb422, $bb423;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i485 := $eq.i32(out_$i484, 4);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$i484 := $M.42;
    goto corral_source_split_3645;

  $bb295:
    assume out_$i331 == 1;
    goto corral_source_split_3644;

  $bb294:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    out_$i331 := $slt.i32(out_$i322, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb435:
    assume !(out_$i500 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    goto $bb436;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 822} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} out_vslice_dummy_var_103 := digi_write_room(out_$p501);
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    out_$p501 := $M.33;
    goto corral_source_split_3987;

  $bb434:
    assume out_$i500 == 1;
    goto corral_source_split_3986;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    out_$i500 := $eq.i32(out_$i499, 2);
    goto corral_source_split_3984;

  $bb433:
    assume {:verifier.code 0} true;
    out_$i499 := $M.42;
    goto corral_source_split_3983;

  $bb432:
    assume !(out_$i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    goto $bb433;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 820} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3981;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} out_vslice_dummy_var_102 := digi_write_room(out_$p497);
    goto corral_source_split_3980;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    out_$p497 := $M.33;
    goto corral_source_split_3979;

  $bb431:
    assume out_$i496 == 1;
    goto corral_source_split_3978;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    out_$i496 := $eq.i32(out_$i495, 3);
    goto corral_source_split_3976;

  $bb430:
    assume {:verifier.code 0} true;
    out_$i495 := $M.42;
    goto corral_source_split_3975;

  $bb429:
    assume !(out_$i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    goto $bb430;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 818} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} out_vslice_dummy_var_101 := digi_write_room(out_$p493);
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$p493 := $M.33;
    goto corral_source_split_3971;

  $bb428:
    assume out_$i492 == 1;
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb428, $bb429;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$i492 := $eq.i32(out_$i491, 1);
    goto corral_source_split_3968;

  $bb427:
    assume {:verifier.code 0} true;
    out_$i491 := $M.42;
    goto corral_source_split_3967;

  $bb426:
    assume !(out_$i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb427;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    goto $bb427;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 816} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3965;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} out_vslice_dummy_var_100 := digi_write_room(out_$p489);
    goto corral_source_split_3964;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$p489 := $M.33;
    goto corral_source_split_3963;

  $bb425:
    assume out_$i488 == 1;
    goto corral_source_split_3962;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$i488 := $eq.i32(out_$i487, 4);
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$i487 := $M.42;
    goto corral_source_split_3649;

  $bb297:
    assume out_$i332 == 1;
    goto corral_source_split_3648;

  $bb296:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    out_$i332 := $slt.i32(out_$i322, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb447:
    assume !(out_$i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    goto $bb448;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4022;

  SeqInstr_294:
    goto corral_source_split_4021;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} digi_break_ctl(out_$p517, out_$i518);
    goto SeqInstr_293;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$i518 := $load.i32($M.29, in_$p7);
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$p517 := $M.33;
    goto corral_source_split_4019;

  $bb446:
    assume out_$i516 == 1;
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$i516 := $eq.i32(out_$i515, 2);
    goto corral_source_split_4016;

  $bb445:
    assume {:verifier.code 0} true;
    out_$i515 := $M.42;
    goto corral_source_split_4015;

  $bb444:
    assume !(out_$i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb445;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    goto $bb445;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4013;

  SeqInstr_291:
    goto corral_source_split_4012;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} digi_break_ctl(out_$p513, out_$i514);
    goto SeqInstr_290;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$i514 := $load.i32($M.29, in_$p7);
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$p513 := $M.33;
    goto corral_source_split_4010;

  $bb443:
    assume out_$i512 == 1;
    goto corral_source_split_4009;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    out_$i512 := $eq.i32(out_$i511, 3);
    goto corral_source_split_4007;

  $bb442:
    assume {:verifier.code 0} true;
    out_$i511 := $M.42;
    goto corral_source_split_4006;

  $bb441:
    assume !(out_$i508 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4004;

  SeqInstr_288:
    goto corral_source_split_4003;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} digi_break_ctl(out_$p509, out_$i510);
    goto SeqInstr_287;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    out_$i510 := $load.i32($M.29, in_$p7);
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    out_$p509 := $M.33;
    goto corral_source_split_4001;

  $bb440:
    assume out_$i508 == 1;
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    out_$i508 := $eq.i32(out_$i507, 1);
    goto corral_source_split_3998;

  $bb439:
    assume {:verifier.code 0} true;
    out_$i507 := $M.42;
    goto corral_source_split_3997;

  $bb438:
    assume !(out_$i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    goto $bb439;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 824} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3995;

  SeqInstr_285:
    goto corral_source_split_3994;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} digi_break_ctl(out_$p505, out_$i506);
    goto SeqInstr_284;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    out_$i506 := $load.i32($M.29, in_$p7);
    goto corral_source_split_3993;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    out_$p505 := $M.33;
    goto corral_source_split_3992;

  $bb437:
    assume out_$i504 == 1;
    goto corral_source_split_3991;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$i504 := $eq.i32(out_$i503, 4);
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$i503 := $M.42;
    goto corral_source_split_3653;

  $bb298:
    assume !(out_$i332 == 1);
    goto corral_source_split_3652;

  $bb453:
    assume !(out_$i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto $bb454;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 834} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} digi_disconnect(out_$p524);
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$p524 := $M.32;
    goto corral_source_split_4033;

  $bb452:
    assume out_$i523 == 1;
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb452, $bb453;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    out_$i523 := $eq.i32(out_$i522, 3);
    goto corral_source_split_4030;

  $bb451:
    assume {:verifier.code 0} true;
    out_$i522 := $M.42;
    goto corral_source_split_4029;

  $bb450:
    assume !(out_$i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    goto $bb451;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 832} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4027;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} digi_disconnect(out_$p521);
    goto corral_source_split_4026;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$p521 := $M.32;
    goto corral_source_split_4025;

  $bb449:
    assume out_$i520 == 1;
    goto corral_source_split_4024;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$i520 := $eq.i32(out_$i519, 4);
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$i519 := $M.42;
    goto corral_source_split_3637;

  $bb291:
    assume out_$i329 == 1;
    goto corral_source_split_3636;

  $bb282:
    assume out_$i325 == 1;
    assume {:verifier.code 0} true;
    out_$i329 := $slt.i32(out_$i322, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb281:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    out_$i325 := $slt.i32(out_$i322, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb465:
    assume !(out_$i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto $bb466;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} out_vslice_dummy_var_107 := digi_chars_in_buffer(out_$p539);
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$p539 := $M.33;
    goto corral_source_split_4062;

  $bb464:
    assume out_$i538 == 1;
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$i538 := $eq.i32(out_$i537, 2);
    goto corral_source_split_4059;

  $bb463:
    assume {:verifier.code 0} true;
    out_$i537 := $M.42;
    goto corral_source_split_4058;

  $bb462:
    assume !(out_$i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    goto $bb463;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 840} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} out_vslice_dummy_var_106 := digi_chars_in_buffer(out_$p535);
    goto corral_source_split_4055;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$p535 := $M.33;
    goto corral_source_split_4054;

  $bb461:
    assume out_$i534 == 1;
    goto corral_source_split_4053;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    out_$i534 := $eq.i32(out_$i533, 3);
    goto corral_source_split_4051;

  $bb460:
    assume {:verifier.code 0} true;
    out_$i533 := $M.42;
    goto corral_source_split_4050;

  $bb459:
    assume !(out_$i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb460;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 838} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} out_vslice_dummy_var_105 := digi_chars_in_buffer(out_$p531);
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$p531 := $M.33;
    goto corral_source_split_4046;

  $bb458:
    assume out_$i530 == 1;
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$i530 := $eq.i32(out_$i529, 1);
    goto corral_source_split_4043;

  $bb457:
    assume {:verifier.code 0} true;
    out_$i529 := $M.42;
    goto corral_source_split_4042;

  $bb456:
    assume !(out_$i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb457;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 836} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_vslice_dummy_var_104 := digi_chars_in_buffer(out_$p527);
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$p527 := $M.33;
    goto corral_source_split_4038;

  $bb455:
    assume out_$i526 == 1;
    goto corral_source_split_4037;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i526 := $eq.i32(out_$i525, 4);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$i525 := $M.42;
    goto corral_source_split_3641;

  $bb292:
    assume !(out_$i329 == 1);
    goto corral_source_split_3640;

  $bb477:
    assume !(out_$i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb478;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 850} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4093;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} out_vslice_dummy_var_111 := digi_tiocmget(out_$p555);
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    out_$p555 := $M.33;
    goto corral_source_split_4091;

  $bb476:
    assume out_$i554 == 1;
    goto corral_source_split_4090;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    out_$i554 := $eq.i32(out_$i553, 2);
    goto corral_source_split_4088;

  $bb475:
    assume {:verifier.code 0} true;
    out_$i553 := $M.42;
    goto corral_source_split_4087;

  $bb474:
    assume !(out_$i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 848} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4085;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} out_vslice_dummy_var_110 := digi_tiocmget(out_$p551);
    goto corral_source_split_4084;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    out_$p551 := $M.33;
    goto corral_source_split_4083;

  $bb473:
    assume out_$i550 == 1;
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    out_$i550 := $eq.i32(out_$i549, 3);
    goto corral_source_split_4080;

  $bb472:
    assume {:verifier.code 0} true;
    out_$i549 := $M.42;
    goto corral_source_split_4079;

  $bb471:
    assume !(out_$i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    goto $bb472;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 846} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4077;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} out_vslice_dummy_var_109 := digi_tiocmget(out_$p547);
    goto corral_source_split_4076;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    out_$p547 := $M.33;
    goto corral_source_split_4075;

  $bb470:
    assume out_$i546 == 1;
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$i546 := $eq.i32(out_$i545, 1);
    goto corral_source_split_4072;

  $bb469:
    assume {:verifier.code 0} true;
    out_$i545 := $M.42;
    goto corral_source_split_4071;

  $bb468:
    assume !(out_$i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb469;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} out_vslice_dummy_var_108 := digi_tiocmget(out_$p543);
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$p543 := $M.33;
    goto corral_source_split_4067;

  $bb467:
    assume out_$i542 == 1;
    goto corral_source_split_4066;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$i542 := $eq.i32(out_$i541, 4);
    goto corral_source_split_3626;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    out_$i541 := $M.42;
    goto corral_source_split_3625;

  $bb284:
    assume out_$i326 == 1;
    goto corral_source_split_3624;

  $bb283:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    out_$i326 := $slt.i32(out_$i322, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb480:
    assume !(out_$i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb481;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 852} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_4098;

  SeqInstr_297:
    goto corral_source_split_4097;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} digi_read_bulk_callback(out_$p559);
    goto SeqInstr_296;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    out_$p559 := $M.30;
    goto corral_source_split_4096;

  $bb479:
    assume out_$i558 == 1;
    goto corral_source_split_4095;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$i558 := $eq.i32(out_$i557, 4);
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i557 := $M.42;
    goto corral_source_split_3629;

  $bb286:
    assume out_$i327 == 1;
    goto corral_source_split_3628;

  $bb285:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    out_$i327 := $slt.i32(out_$i322, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb483:
    assume !(out_$i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $M.39 := out_$i564;
    call {:si_unique_call 855} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i564);
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    out_$i564 := $add.i32(out_$i563, 1);
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$i563 := $M.39;
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 854} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} out_vslice_dummy_var_112 := ldv_probe_2();
    goto corral_source_split_4101;

  $bb482:
    assume out_$i561 == 1;
    goto corral_source_split_4100;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    out_$i561 := $eq.i32(out_$i560, 1);
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$i560 := $M.42;
    goto corral_source_split_3633;

  $bb288:
    assume out_$i328 == 1;
    goto corral_source_split_3632;

  $bb287:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i322, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} ldv_stop();
    goto corral_source_split_4107;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb289:
    assume {:verifier.code 0} true;
    assume !(out_$i328 == 1);
    goto $bb290;

  $bb318:
    assume {:verifier.code 0} true;
    assume !(out_$i342 == 1);
    goto $bb290;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} ldv_stop();
    goto corral_source_split_4109;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p159, out_$p160, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i209, out_$i210, out_$p211, out_$p212, out_$i213, out_$i215, out_$i216, out_$p217, out_$p218, out_$i219, out_$i221, out_$i222, out_$p223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$p260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$p268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$i275, out_$p276, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$p282, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i300, out_$i301, out_$p302, out_$i304, out_$i305, out_$p306, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i315, out_$i316, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$p351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$p357, out_$i359, out_$i360, out_$p361, out_$i363, out_$i364, out_$p365, out_$i367, out_$i368, out_$p369, out_$i371, out_$i372, out_$p373, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$p380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$p386, out_$i387, out_$i388, out_$p389, out_$i390, out_$i391, out_$p392, out_$p393, out_$i394, out_$i395, out_$p396, out_$p397, out_$i398, out_$i399, out_$p400, out_$p401, out_$i402, out_$i403, out_$p404, out_$p405, out_$i406, out_$i407, out_$p408, out_$i409, out_$i410, out_$p411, out_$i413, out_$i414, out_$p415, out_$i417, out_$i418, out_$p419, out_$i421, out_$i422, out_$p423, out_$i425, out_$i426, out_$p427, out_$i428, out_$i429, out_$i430, out_$i431, out_$p432, out_$i433, out_$i434, out_$i436, out_$i437, out_$p438, out_$i439, out_$i440, out_$i442, out_$i443, out_$p444, out_$i445, out_$i446, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$i454, out_$i455, out_$p456, out_$p457, out_$i458, out_$i460, out_$i461, out_$p462, out_$p463, out_$i464, out_$i466, out_$i467, out_$p468, out_$p469, out_$i470, out_$i472, out_$i473, out_$p474, out_$p475, out_$i476, out_$i478, out_$i479, out_$p480, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$p486, out_$i487, out_$i488, out_$p489, out_$i491, out_$i492, out_$p493, out_$i495, out_$i496, out_$p497, out_$i499, out_$i500, out_$p501, out_$i503, out_$i504, out_$p505, out_$i506, out_$i507, out_$i508, out_$p509, out_$i510, out_$i511, out_$i512, out_$p513, out_$i514, out_$i515, out_$i516, out_$p517, out_$i518, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$p524, out_$i525, out_$i526, out_$p527, out_$i529, out_$i530, out_$p531, out_$i533, out_$i534, out_$p535, out_$i537, out_$i538, out_$p539, out_$i541, out_$i542, out_$p543, out_$i545, out_$i546, out_$p547, out_$i549, out_$i550, out_$p551, out_$i553, out_$i554, out_$p555, out_$i557, out_$i558, out_$p559, out_$i560, out_$i561, out_$i563, out_$i564, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p10, in_$p11, in_$p13, in_$p14, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p159, out_$p160, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i209, out_$i210, out_$p211, out_$p212, out_$i213, out_$i215, out_$i216, out_$p217, out_$p218, out_$i219, out_$i221, out_$i222, out_$p223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$p260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$p268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$i275, out_$p276, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$p282, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i300, out_$i301, out_$p302, out_$i304, out_$i305, out_$p306, out_$i308, out_$i309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i315, out_$i316, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$p351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$p357, out_$i359, out_$i360, out_$p361, out_$i363, out_$i364, out_$p365, out_$i367, out_$i368, out_$p369, out_$i371, out_$i372, out_$p373, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$p380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$p386, out_$i387, out_$i388, out_$p389, out_$i390, out_$i391, out_$p392, out_$p393, out_$i394, out_$i395, out_$p396, out_$p397, out_$i398, out_$i399, out_$p400, out_$p401, out_$i402, out_$i403, out_$p404, out_$p405, out_$i406, out_$i407, out_$p408, out_$i409, out_$i410, out_$p411, out_$i413, out_$i414, out_$p415, out_$i417, out_$i418, out_$p419, out_$i421, out_$i422, out_$p423, out_$i425, out_$i426, out_$p427, out_$i428, out_$i429, out_$i430, out_$i431, out_$p432, out_$i433, out_$i434, out_$i436, out_$i437, out_$p438, out_$i439, out_$i440, out_$i442, out_$i443, out_$p444, out_$i445, out_$i446, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$i454, out_$i455, out_$p456, out_$p457, out_$i458, out_$i460, out_$i461, out_$p462, out_$p463, out_$i464, out_$i466, out_$i467, out_$p468, out_$p469, out_$i470, out_$i472, out_$i473, out_$p474, out_$p475, out_$i476, out_$i478, out_$i479, out_$p480, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$p486, out_$i487, out_$i488, out_$p489, out_$i491, out_$i492, out_$p493, out_$i495, out_$i496, out_$p497, out_$i499, out_$i500, out_$p501, out_$i503, out_$i504, out_$p505, out_$i506, out_$i507, out_$i508, out_$p509, out_$i510, out_$i511, out_$i512, out_$p513, out_$i514, out_$i515, out_$i516, out_$p517, out_$i518, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$p524, out_$i525, out_$i526, out_$p527, out_$i529, out_$i530, out_$p531, out_$i533, out_$i534, out_$p535, out_$i537, out_$i538, out_$p539, out_$i541, out_$i542, out_$p543, out_$i545, out_$i546, out_$p547, out_$i549, out_$i550, out_$p551, out_$i553, out_$i554, out_$p555, out_$i557, out_$i558, out_$p559, out_$i560, out_$i561, out_$i563, out_$i564, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$p160: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i183: i32, in_$i184: i32, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i32, in_$i189: i32, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i194: i32, in_$i195: i32, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i32, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$p212: ref, in_$i213: i32, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$p218: ref, in_$i219: i32, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$p224: ref, in_$i225: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$p230: ref, in_$i231: i32, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$i261: i32, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i32, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i300: i32, in_$i301: i1, in_$p302: ref, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i315: i32, in_$i316: i1, in_$i318: i32, in_$i319: i32, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i1, in_$i330: i1, in_$i331: i1, in_$i332: i1, in_$i333: i1, in_$i334: i1, in_$i335: i1, in_$i336: i1, in_$i337: i1, in_$i338: i1, in_$i339: i1, in_$i340: i1, in_$i341: i1, in_$i342: i1, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i355: i32, in_$i356: i1, in_$p357: ref, in_$i359: i32, in_$i360: i1, in_$p361: ref, in_$i363: i32, in_$i364: i1, in_$p365: ref, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i371: i32, in_$i372: i1, in_$p373: ref, in_$p374: ref, in_$i375: i32, in_$i376: i32, in_$i377: i1, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i385: i1, in_$p386: ref, in_$i387: i32, in_$i388: i1, in_$p389: ref, in_$i390: i32, in_$i391: i1, in_$p392: ref, in_$p393: ref, in_$i394: i32, in_$i395: i1, in_$p396: ref, in_$p397: ref, in_$i398: i32, in_$i399: i1, in_$p400: ref, in_$p401: ref, in_$i402: i32, in_$i403: i1, in_$p404: ref, in_$p405: ref, in_$i406: i32, in_$i407: i1, in_$p408: ref, in_$i409: i32, in_$i410: i1, in_$p411: ref, in_$i413: i32, in_$i414: i1, in_$p415: ref, in_$i417: i32, in_$i418: i1, in_$p419: ref, in_$i421: i32, in_$i422: i1, in_$p423: ref, in_$i425: i32, in_$i426: i1, in_$p427: ref, in_$i428: i32, in_$i429: i32, in_$i430: i32, in_$i431: i1, in_$p432: ref, in_$i433: i32, in_$i434: i32, in_$i436: i32, in_$i437: i1, in_$p438: ref, in_$i439: i32, in_$i440: i32, in_$i442: i32, in_$i443: i1, in_$p444: ref, in_$i445: i32, in_$i446: i32, in_$i448: i32, in_$i449: i1, in_$p450: ref, in_$i451: i32, in_$i452: i32, in_$i454: i32, in_$i455: i1, in_$p456: ref, in_$p457: ref, in_$i458: i32, in_$i460: i32, in_$i461: i1, in_$p462: ref, in_$p463: ref, in_$i464: i32, in_$i466: i32, in_$i467: i1, in_$p468: ref, in_$p469: ref, in_$i470: i32, in_$i472: i32, in_$i473: i1, in_$p474: ref, in_$p475: ref, in_$i476: i32, in_$i478: i32, in_$i479: i1, in_$p480: ref, in_$i481: i32, in_$i482: i32, in_$i483: i1, in_$i484: i32, in_$i485: i1, in_$p486: ref, in_$i487: i32, in_$i488: i1, in_$p489: ref, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$i495: i32, in_$i496: i1, in_$p497: ref, in_$i499: i32, in_$i500: i1, in_$p501: ref, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$i506: i32, in_$i507: i32, in_$i508: i1, in_$p509: ref, in_$i510: i32, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$i514: i32, in_$i515: i32, in_$i516: i1, in_$p517: ref, in_$i518: i32, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i522: i32, in_$i523: i1, in_$p524: ref, in_$i525: i32, in_$i526: i1, in_$p527: ref, in_$i529: i32, in_$i530: i1, in_$p531: ref, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$i537: i32, in_$i538: i1, in_$p539: ref, in_$i541: i32, in_$i542: i1, in_$p543: ref, in_$i545: i32, in_$i546: i1, in_$p547: ref, in_$i549: i32, in_$i550: i1, in_$p551: ref, in_$i553: i32, in_$i554: i1, in_$p555: ref, in_$i557: i32, in_$i558: i1, in_$p559: ref, in_$i560: i32, in_$i561: i1, in_$i563: i32, in_$i564: i32, in_vslice_dummy_var_55: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32) returns (out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$p160: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i183: i32, out_$i184: i32, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i32, out_$i189: i32, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i194: i32, out_$i195: i32, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i32, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$p212: ref, out_$i213: i32, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$p218: ref, out_$i219: i32, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$p224: ref, out_$i225: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$p230: ref, out_$i231: i32, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$i261: i32, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i32, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i300: i32, out_$i301: i1, out_$p302: ref, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i315: i32, out_$i316: i1, out_$i318: i32, out_$i319: i32, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i1, out_$i330: i1, out_$i331: i1, out_$i332: i1, out_$i333: i1, out_$i334: i1, out_$i335: i1, out_$i336: i1, out_$i337: i1, out_$i338: i1, out_$i339: i1, out_$i340: i1, out_$i341: i1, out_$i342: i1, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i355: i32, out_$i356: i1, out_$p357: ref, out_$i359: i32, out_$i360: i1, out_$p361: ref, out_$i363: i32, out_$i364: i1, out_$p365: ref, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i371: i32, out_$i372: i1, out_$p373: ref, out_$p374: ref, out_$i375: i32, out_$i376: i32, out_$i377: i1, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i385: i1, out_$p386: ref, out_$i387: i32, out_$i388: i1, out_$p389: ref, out_$i390: i32, out_$i391: i1, out_$p392: ref, out_$p393: ref, out_$i394: i32, out_$i395: i1, out_$p396: ref, out_$p397: ref, out_$i398: i32, out_$i399: i1, out_$p400: ref, out_$p401: ref, out_$i402: i32, out_$i403: i1, out_$p404: ref, out_$p405: ref, out_$i406: i32, out_$i407: i1, out_$p408: ref, out_$i409: i32, out_$i410: i1, out_$p411: ref, out_$i413: i32, out_$i414: i1, out_$p415: ref, out_$i417: i32, out_$i418: i1, out_$p419: ref, out_$i421: i32, out_$i422: i1, out_$p423: ref, out_$i425: i32, out_$i426: i1, out_$p427: ref, out_$i428: i32, out_$i429: i32, out_$i430: i32, out_$i431: i1, out_$p432: ref, out_$i433: i32, out_$i434: i32, out_$i436: i32, out_$i437: i1, out_$p438: ref, out_$i439: i32, out_$i440: i32, out_$i442: i32, out_$i443: i1, out_$p444: ref, out_$i445: i32, out_$i446: i32, out_$i448: i32, out_$i449: i1, out_$p450: ref, out_$i451: i32, out_$i452: i32, out_$i454: i32, out_$i455: i1, out_$p456: ref, out_$p457: ref, out_$i458: i32, out_$i460: i32, out_$i461: i1, out_$p462: ref, out_$p463: ref, out_$i464: i32, out_$i466: i32, out_$i467: i1, out_$p468: ref, out_$p469: ref, out_$i470: i32, out_$i472: i32, out_$i473: i1, out_$p474: ref, out_$p475: ref, out_$i476: i32, out_$i478: i32, out_$i479: i1, out_$p480: ref, out_$i481: i32, out_$i482: i32, out_$i483: i1, out_$i484: i32, out_$i485: i1, out_$p486: ref, out_$i487: i32, out_$i488: i1, out_$p489: ref, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$i495: i32, out_$i496: i1, out_$p497: ref, out_$i499: i32, out_$i500: i1, out_$p501: ref, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$i506: i32, out_$i507: i32, out_$i508: i1, out_$p509: ref, out_$i510: i32, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$i514: i32, out_$i515: i32, out_$i516: i1, out_$p517: ref, out_$i518: i32, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i522: i32, out_$i523: i1, out_$p524: ref, out_$i525: i32, out_$i526: i1, out_$p527: ref, out_$i529: i32, out_$i530: i1, out_$p531: ref, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$i537: i32, out_$i538: i1, out_$p539: ref, out_$i541: i32, out_$i542: i1, out_$p543: ref, out_$i545: i32, out_$i546: i1, out_$p547: ref, out_$i549: i32, out_$i550: i1, out_$p551: ref, out_$i553: i32, out_$i554: i1, out_$p555: ref, out_$i557: i32, out_$i558: i1, out_$p559: ref, out_$i560: i32, out_$i561: i1, out_$i563: i32, out_$i564: i32, out_vslice_dummy_var_55: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32);
  modifies $M.16, $M.24, $M.18, $M.20, $M.22, $M.34, $M.35, $M.36, $M.37, $M.0, $CurrAddr, $M.41, $M.30, $M.31, $M.32, $M.33, $M.42, $M.40, $M.43, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.44, $M.14, $M.17, $M.39, $M.45, $M.26, $M.27, $M.28, $M.46, $M.47;


